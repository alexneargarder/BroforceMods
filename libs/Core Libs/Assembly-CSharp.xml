<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:Alien.Start">
            <summary>
                Initializes the alien unit with enhanced mobility settings for wall climbing and
                jumping
            </summary>
            <remarks>
                Sets specialized alien parameters: - JUMP_TIME to 0.215f for quick, precise jumps -
                hangGraceTime to 0.6f for extended ceiling/wall hang duration - maxWallClimbYI to
                250f for fast vertical wall climbing speed - playerNum and firingPlayerNum to -2
                (alien faction identifier) These settings enable the alien's signature acrobatic
                movement style
            </remarks>
        </member>
        <member name="M:Alien.Update">
            <summary>
                Updates the alien's behavior including panic-inducing presence that affects nearby
                enemy units
            </summary>
            <remarks>
                When the alien is alive, alert, and not impaired (blind/burning), it periodically
                causes panic in surrounding mooks within a 36-unit radius. This panic effect: - Only
                triggers when enemyAI is in Alerted mental state - Has a 0.2 second cooldown between
                panic pulses (panicSurroundingMooksDelay) - Calls Map.PanicUnits to frighten nearby
                enemy units - Creates a psychological warfare effect unique to alien enemies
            </remarks>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:Alien.AnimateActualJumpingFrames">
            <summary>
                Animates jumping frames while maintaining proper vertical scale during acrobatic
                movements
            </summary>
            <remarks>
                Resets yScale to 1f before calling base jumping animation. This ensures the alien
                maintains correct orientation during jumps, preventing visual distortion that could
                occur from wall climbing or ceiling hanging states
            </remarks>
        </member>
        <member name="M:Alien.GetEnemyMovement">
            <summary>
                Processes enemy AI movement unless the alien is performing tumbling or somersault
                maneuvers
            </summary>
            <remarks>
                Disables normal AI movement processing when backTumbling or backSomersaulting flags
                are active. This prevents AI movement conflicts during special acrobatic states,
                allowing physics-based tumbling to complete naturally
            </remarks>
        </member>
        <member name="M:Alien.NotPressingJump">
            <summary>
                Handles wall climbing state transitions based on directional input when not jumping
            </summary>
            <remarks>
                Complex wall interaction logic: - When NOT wall dragging: calls base jump release
                behavior - When wall dragging without directional input: disables wall climbing -
                When pressing down while wall dragging: enables wall climbing and resets
                wallDragTime - When pressing up while wall dragging: enables wall climbing and
                resets wallDragTime This allows aliens to seamlessly transition between wall
                dragging and climbing states
            </remarks>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:Alien.WallDrag">
            <summary>
                Gets or sets wall dragging state with automatic wall climbing activation based on
                input
            </summary>
            <remarks>
                Enhanced property that: - Get: Returns base WallDrag value unchanged - Set: Applies
                base value, then checks conditions for auto-climbing: * If pressing up/down AND not
                already climbing AND can climb AND anticipating climb * Automatically enables
                wallClimbing and sets lastKnifeClimbStabY position This creates responsive wall
                interaction where directional input during wall contact initiates climbing
            </remarks>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:Alien.Death(System.Single,System.Single,DamageObject)">
            <summary>
                Handles alien death while ensuring proper sprite scaling is maintained
            </summary>
            <param name="xI">Horizontal force applied to the corpse</param>
            <param name="yI">Vertical force applied to the corpse</param>
            <param name="damage">The damage object that caused death</param>
            <remarks>
                Resets yScale to 1f and applies it to transform.localScale to ensure the death
                animation displays correctly. This fixes any inverted or distorted scaling from wall
                climbing or ceiling hanging states
            </remarks>
        </member>
        <member name="M:Alien.FallDamage(System.Single)">
            <summary>
                Applies fall damage effects based on fall speed and current acrobatic state
            </summary>
            <param name="yI">The vertical impact velocity (negative values indicate downward motion)</param>
            <remarks>
                Implements two-tier fall damage system: - Severe falls (yI &lt; maxFallSpeed + 100f)
                during tumbling: Inflicts lethal damage - Moderate falls (yI &lt; maxFallSpeed +
                50f): Stuns for 0.4 seconds via AI action queue - Always resets yScale to 1f to fix
                any visual distortion The tumbling check ensures aliens take extra damage when out
                of control
            </remarks>
        </member>
        <!-- Special Abilities Methods -->
        <member name="M:Alien.CanPassThroughBarriers">
            <summary>
                Determines that aliens can always pass through barrier blocks
            </summary>
            <returns>Always returns true, granting aliens unrestricted barrier passage</returns>
            <remarks>
                This ability allows aliens to move through barriers that would block other units,
                enabling more dynamic pathfinding and surprise attacks. Essential for alien AI
                navigation in complex level layouts
            </remarks>
        </member>
        <member name="M:Alien.Inseminate(AlienFaceHugger,System.Single,System.Single)">
            <summary>
                Prevents face hugger insemination of alien units
            </summary>
            <param name="unit">The AlienFaceHugger attempting insemination</param>
            <param name="xForce">Horizontal force component (unused)</param>
            <param name="yForce">Vertical force component (unused)</param>
            <returns>Always returns false, making aliens immune to face hugger attacks</returns>
            <remarks>
                Provides immunity to face hugger insemination, preventing alien-on-alien parasitic
                attacks. This maintains game balance and prevents recursive alien spawning scenarios
            </remarks>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:Alien.IsAboveLadder">
            <summary>
                Determines that aliens never detect ladders below them
            </summary>
            <returns>Always returns false, preventing downward ladder detection</returns>
            <remarks>
                Prevents aliens from detecting or attaching to ladders below, ensuring they rely
                exclusively on wall climbing mechanics for vertical movement
            </remarks>
        </member>
        <member name="M:Alien.IsNearbyLadder(System.Single,System.Single)">
            <summary>
                Determines that aliens never detect nearby ladders regardless of position
            </summary>
            <param name="xOffset">Horizontal offset for proximity check (unused)</param>
            <param name="yOffset">Vertical offset for proximity check (unused)</param>
            <returns>Always returns false, preventing all ladder proximity detection</returns>
            <remarks>
                Completes the ladder immunity system by preventing any form of ladder detection.
                This ensures aliens exclusively use their superior wall climbing abilities
            </remarks>
        </member>
        <member name="M:Alien.IsOverLadder(System.Single,System.Single@)">
            <summary>
                Determines that aliens never interact with ladders when checking overhead positions
            </summary>
            <param name="xOffset">Horizontal offset for ladder detection (unused)</param>
            <param name="ladderXPos">Output parameter for ladder X position (not set)</param>
            <returns>Always returns false, preventing overhead ladder detection</returns>
            <remarks>
                Part of the alien's ladder immunity system. Aliens use wall climbing instead of
                ladders, so this prevents unintended ladder interactions during ceiling movement
            </remarks>
        </member>
        <!-- Networking & RPC Methods -->
        <member name="M:Alien.UnpackState(UnityStream)">
            <summary>
                Deserializes network state and applies death state if the unit was dead
            </summary>
            <param name="stream">The network stream containing serialized state data</param>
            <returns>The stream after unpacking for potential further processing</returns>
            <remarks>
                After unpacking base state data, checks if actionState equals Dead and triggers
                Death() method with zero forces. This ensures proper death state synchronization
                across networked games
            </remarks>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:Alien.lastActionState">
            <summary>
                Stores the previous action state for state transition detection
            </summary>
            <remarks>
                Protected field used by derived alien classes to track state changes. Enables
                detection of state transitions for triggering appropriate animations or behaviors
            </remarks>
        </member>
        <member name="F:Alien.lastWallClimbing">
            <summary>
                Tracks the previous frame's wall climbing state for transition detection
            </summary>
            <remarks>
                Protected field that stores whether the alien was wall climbing in the previous
                update. Enables derived classes to detect climbing state changes for animation or
                behavior adjustments
            </remarks>
        </member>
        <member name="F:Alien.lastWallDragging">
            <summary>
                Tracks the previous frame's wall dragging state for transition detection
            </summary>
            <remarks>
                Protected field that stores whether the alien was wall dragging in the previous
                update. Used by derived classes to detect when wall dragging starts or stops
            </remarks>
        </member>
        <member name="F:Alien.panicSurroundingMooksDelay">
            <summary>
                Countdown timer controlling the panic aura effect frequency in seconds
            </summary>
            <remarks>
                Private field that prevents panic spam by enforcing a 0.2 second cooldown between
                Map.PanicUnits calls. Decremented each update when alien is alert and unimpaired,
                reset to 0.2f after each panic pulse
            </remarks>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:Block.DoEnabling">
            <summary>
                Updates the enabled state of this component based on ShouldEnable result. Optimizes
                performance by disabling blocks that don't need updates.
            </summary>
        </member>
        <member name="M:Block.FirstFrame">
            <summary>
                Performs one-time initialization on the first frame after spawning. Caches sprite
                component and pixel data, deactivates all blood spray GameObjects, checks if the
                block should be destroyed based on collider state or health, hides broken edge
                visuals, gets sound instance, and stores initial state values (destroyed, collider
                enabled, health).
            </summary>
        </member>
        <member name="M:Block.FixedUpdate">
            <summary>
                Unity FixedUpdate method for physics-timestep operations. Runs burn damage logic if
                the block is not destroyed.
            </summary>
        </member>
        <member name="M:Block.OnSpawned">
            <summary>
                Called when the block is spawned into the game world. Initializes random generators,
                attachment lists, burn counter, layer masks, health values, grid position from
                transform position, and clears slime coverage. Also caches blood drip particle
                spawners if present.
            </summary>
        </member>
        <member name="M:Block.SecondFrame">
            <summary>
                Placeholder for second frame initialization. Currently only sets a flag to prevent
                repeated execution but performs no other operations.
            </summary>
        </member>
        <member name="M:Block.SetupRandomGenerators">
            <summary>
                Initializes the block's random number generators using the block's position as a
                seed. Creates separate generators for general randomness, collapse behavior, burning
                effects, and visual effects, all seeded with position and networking random seed for
                deterministic behavior.
            </summary>
        </member>
        <member name="M:Block.ShouldEnable">
            <summary>
                Determines if this block component should be enabled based on current state. Returns
                true if burning, in destroy countdown, or being pushed.
            </summary>
            <returns>True if the block needs active updates (burning, destroying, or being pushed)</returns>
        </member>
        <member name="M:Block.Update">
            <summary>
                Unity Update method that handles time-based block behavior. Processes destroy
                countdown after block is destroyed, manages oil particle unsticking, runs push force
                decay logic, and enables/disables the component based on current state.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:Block.hasDoneFirstFrame">
            <summary>
                Tracks whether the block has completed its first frame of initialization. Set to
                true in FirstFrame method. Used to ensure one-time setup operations are performed.
            </summary>
        </member>
        <member name="F:Block.isSetup">
            <summary>
                Tracks whether the block has completed its initialization through SetupBlock method.
                Set to true at the end of SetupBlock after neighbor references, position, and bounds
                are configured.
            </summary>
        </member>
        <member name="F:Block.startColliderEnabled">
            <summary>
                Stores the initial enabled state of the block's collider during FirstFrame
                initialization. Used by ResetBlock to restore the collider to its original state
                when resetting the block.
            </summary>
        </member>
        <member name="F:Block.startDestroyed">
            <summary>
                Stores the initial destroyed state of the block during FirstFrame initialization.
                Used by ResetBlock to determine whether to restore the block as destroyed or active.
            </summary>
        </member>
        <member name="F:Block.startHealth">
            <summary>
                Stores the initial health value of the block during FirstFrame initialization. Used
                by ResetBlock to restore the block to its original health value. Default value is 5.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:Block.Burn(DamageObject)">
            <summary>
                Processes fire damage to the block. Explosive blocks detonate immediately,
                flammable/oily blocks accumulate burn damage over time, heatable blocks increase
                temperature. Collapses block if burn damage exceeds threshold.
            </summary>
            <param name="damgeObject">The fire damage information (note spelling in parameter)</param>
        </member>
        <member name="M:Block.BurnCollapsePoint">
            <summary>
                Virtual method that calculates the burn damage threshold for collapse. Returns 3
                times the block's health in base implementation.
            </summary>
            <returns>The amount of burn damage needed to collapse this block</returns>
        </member>
        <member name="M:Block.BurnSurroundingBlocks">
            <summary>
                Spreads fire to adjacent blocks and oil particles. Calls Map.BurnBlocksAround to
                ignite neighboring blocks and BurnSurroundingOil for attached oil.
            </summary>
        </member>
        <member name="M:Block.BurnSurroundingOil">
            <summary>
                Ignites all oil particles stuck to this block. Iterates through stuckParticles list
                and calls SetAlight on each particle.
            </summary>
        </member>
        <member name="M:Block.CheckForMine">
            <summary>
                Checks if this block has an attached mine and detonates it if the mine hasn't
                already exploded or been detonated. Uses RPC to ensure the detonation is
                synchronized across all clients in multiplayer.
            </summary>
        </member>
        <member name="M:Block.Damage(DamageObject)">
            <summary>
                Applies damage to the block from various damage sources. Handles special damage
                types (DestroyBackground, InstaGib, Fire, Plasma), creates blood effects for alien
                blocks, triggers burning for flammable blocks, plays defend sounds for projectile
                impacts, and processes standard damage.
            </summary>
            <param name="damgeObject">The damage information including type, amount, and forces (note spelling in parameter)</param>
        </member>
        <member name="M:Block.DamageInternal(System.Int32,System.Single,System.Single)">
            <summary>
                Applies damage to the block's health internally, potentially causing it to collapse
                if health reaches zero. Called by damage methods to handle the actual health
                reduction and collapse triggering.
            </summary>
            <param name="damage">The amount of damage to apply to the block's health.</param>
            <param name="xI">The horizontal force/impulse from the damage source, passed to the collapse method.</param>
            <param name="yI">The vertical force/impulse from the damage source, passed to the collapse method.</param>
        </member>
        <member name="M:Block.ForceBurn">
            <summary>
                Forces the block to burn immediately, bypassing normal ignition conditions. If the
                block is not destroyed and is burnable (flamable or oily), it starts burning with a
                random duration of 6-10 seconds. Increments burn damage and triggers collapse when
                burn damage exceeds BurnCollapsePoint(). For destroyed blocks, still processes heat
                buildup if heatable or triggers damage if explosive. Always calls DoEnabling() at
                the end.
            </summary>
        </member>
        <member name="M:Block.PlayDeathSound">
            <summary>
                Plays the appropriate death sound effect when the block is destroyed. Volume varies
                based on the last damage type: 15% volume for Unholy damage, 60% for InstaGib
                damage, and full volume for all other damage types. Uses the soundHolder's
                deathSounds array and plays at the block's position. Initializes the sound instance
                if needed.
            </summary>
        </member>
        <member name="M:Block.RunBurnLogic">
            <summary>
                Executes per-frame burning behavior for blocks on fire. Handles flame particle
                spawning, damage accumulation over time, burning nearby units and doodads, spreading
                fire to adjacent blocks, and automatic collapse when burn threshold reached.
                Different logic for flammable, oily, and heatable blocks.
            </summary>
        </member>
        <member name="M:Block.SetAlight_Local">
            <summary>
                Sets this block on fire locally without networking. Only affects flammable or oily
                blocks that aren't destroyed. Initializes burn time and increments burn damage
                counter.
            </summary>
        </member>
        <member name="M:Block.Weaken">
            <summary>
                Reduces the block's health to 1, making it extremely fragile and susceptible to
                destruction from any damage. Used to create weakened blocks that will collapse from
                minimal damage.
            </summary>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:Block.burnCounter">
            <summary>
                Timer for spawning fire spread effects to nearby blocks. When it exceeds threshold
                (1f for normal, 0.1f for oily blocks), triggers fire spread.
            </summary>
        </member>
        <member name="F:Block.burnDamage">
            <summary>
                The accumulated damage from burning. Increments when the block catches fire. When
                this exceeds BurnCollapsePoint minus 2, the block is destroyed.
            </summary>
        </member>
        <member name="F:Block.burnDurationCounter">
            <summary>
                Tracks the total elapsed time since the block started burning. Increments while
                burnTime is positive for flamable blocks.
            </summary>
        </member>
        <member name="F:Block.burnTime">
            <summary>
                The remaining time in seconds that the block will continue burning. Decreases each
                frame while burning. When it reaches zero, burning stops.
            </summary>
        </member>
        <member name="F:Block.burnUnitsCounter">
            <summary>
                Timer for burning damage to nearby units. When it exceeds 0.25f, calls
                Map.BurnUnitsAround to damage units near the burning block.
            </summary>
        </member>
        <member name="F:Block.collapseBlocksAround">
            <summary>
                Flag controlling whether this block should trigger collapse of neighboring blocks
                when it collapses. Set to false temporarily during certain operations to prevent
                cascade effects. Defaults to true and is reset to true after collapse operations.
            </summary>
        </member>
        <member name="F:Block.collapseChance">
            <summary>
                Probability multiplier for collapse propagation to the above block. Value between 0
                and 1 that determines the chance of the above block collapsing when this block is
                destroyed. Used in conjunction with collapseRandom to determine collapse
                propagation. Defaults to 1.0 (100% chance).
            </summary>
        </member>
        <member name="F:Block.collapseChanceMultiplier">
            <summary>
                Multiplier applied to the collapse chance when this block collapses blocks above it.
                Default is 0.5. Used in DelayedCollapseAbove to reduce the cascade probability as
                collapses propagate upward.
            </summary>
        </member>
        <member name="F:Block.collapseDelayTime">
            <summary>
                Time in seconds to wait after destruction before allowing collapse effects. Default
                is 0.2 seconds. Used in ShouldEnable and Update to control when destroyed blocks
                trigger collapse of blocks above them.
            </summary>
        </member>
        <member name="F:Block.destroyCounter">
            <summary>
                Timer that tracks the delay before a destroyed block actually collapses. Counts up
                from 0 to collapseDelayTime after destruction. When it reaches collapseDelayTime,
                the block performs its actual collapse. Set to 100f for indestructible blocks to
                prevent collapse.
            </summary>
        </member>
        <member name="F:Block.explosive">
            <summary>
                Indicates whether this block explodes immediately when catching fire. When true,
                fire damage instantly triggers DamageInternal instead of gradual burning.
            </summary>
        </member>
        <member name="F:Block.flamable">
            <summary>
                Indicates whether this block can catch fire and burn when exposed to fire damage.
                When true, fire damage starts the burning process and increases burn damage over
                time.
            </summary>
        </member>
        <member name="F:Block.flameCounter">
            <summary>
                Timer for spawning visual flame effects. When it exceeds 0.05f, creates flame
                particles via EffectsController.
            </summary>
        </member>
        <member name="F:Block.heatable">
            <summary>
                Indicates whether this block spreads heat/fire to surrounding blocks when burning.
                When true and burning, the block calls Map.BurnBlocksAround to ignite adjacent
                blocks.
            </summary>
        </member>
        <member name="F:Block.lastDamageObject">
            <summary>
                Stores information about the most recent damage dealt to this block. Used to
                determine special behaviors based on damage type and source, affect visual and audio
                effects, and propagate damage information to attached doodads and collapsing blocks
                above.
            </summary>
        </member>
        <member name="F:Block.shrapnelBitPrefab">
            <summary>
                Reference to the smaller Shrapnel prefab for minor debris effects. Set in Unity
                editor to define secondary debris particles.
            </summary>
        </member>
        <member name="F:Block.shrapnelPrefab">
            <summary>
                Reference to the Shrapnel prefab to spawn when this block is destroyed. Set in Unity
                editor to define what type of debris this block creates.
            </summary>
        </member>
        <!-- Block Configuration & Setup Methods -->
        <member name="M:Block.CheckDestroyed(UnityEngine.Collider)">
            <summary>
                Checks if the block should be marked as destroyed based on its collider state or
                health. Sets destroyed flag and destroyCounter if the collider is null/disabled or
                health is 0 or less, then calls DoEnabling to update the block's state.
            </summary>
            <param name="col">Optional collider to check. If null, retrieves the collider from this GameObject.</param>
        </member>
        <member name="M:Block.ReplaceBlockWith(GroundType)">
            <summary>
                Replaces this block with a new block of the specified ground type while preserving
                position and connections. Creates a new block at the same grid position, sets up its
                connections to neighboring blocks, marks it as the persistent replacement, registers
                it in the network registry, and moves the current block forward in Z space. Updates
                the GameObject name to indicate the replacement.
            </summary>
            <param name="groundType">The type of ground/terrain the new block should be.</param>
        </member>
        <member name="M:Block.ResetBlock">
            <summary>
                Resets the block to its initial state for level restart or pooling. Restores health,
                clears burn/damage states, resets position, hides all blood effects, clears
                attachments, and re-enables components based on starting configuration.
            </summary>
        </member>
        <member name="M:Block.SetPosition(System.Int32,System.Int32)">
            <summary>
                Sets the block's position in the world based on its grid coordinates. Converts
                row/column grid coordinates to world position (multiplying by 16 units per grid
                cell) and updates both the transform position and internal X/Y values via SetXY.
            </summary>
            <param name="row">The row index in the block grid.</param>
            <param name="col">The column index in the block grid.</param>
        </member>
        <member name="M:Block.SetupBlock(System.Int32,System.Int32,Block,Block)">
            <summary>
                Initializes the block with its grid position and neighbor references. Sets up the
                block's row/column coordinates, links it to adjacent blocks above and below, updates
                the GameObject name to include coordinates, and calculates world position bounds.
            </summary>
            <param name="row">The grid row position</param>
            <param name="collumn">The grid column position (note spelling)</param>
            <param name="aboveBlock">Reference to the block above this one, can be null</param>
            <param name="belowBlock">Reference to the block below this one, can be null</param>
        </member>
        <member name="M:Block.UseLargePieces(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Configures the block to use large tile pieces for visual variety. Sets parameters
                for window and mural pieces that span multiple blocks.
            </summary>
            <param name="firstCollumn">The leftmost column of the large piece group.</param>
            <param name="firstRow">The bottom row of the large piece group.</param>
            <param name="collumns">Total number of columns the large piece spans.</param>
            <param name="rows">Total number of rows the large piece spans.</param>
            <param name="randomOffset">Random offset value for visual variation in tiling.</param>
            <param name="windowPieces">Whether to use large window piece variations.</param>
            <param name="muralPieces">Whether to use large mural piece variations.</param>
        </member>
        <!-- Block Configuration & Setup Fields -->
        <member name="F:Block.IsADestroyableDoodad">
            <summary>
                Indicates whether this block is actually a destroyable doodad rather than a standard
                terrain block. When true, special doodad destruction logic is used instead of normal
                block destruction.
            </summary>
        </member>
        <member name="F:Block.IsAlien">
            <summary>
                Indicates whether this block is an alien-themed block. Affects visual appearance and
                behavior. Used to determine special alien block properties and interactions.
            </summary>
        </member>
        <member name="F:Block.IsBouncy">
            <summary>
                Indicates whether this block has bouncy properties. When true, units that land on or
                hit this block will bounce off it. Used for special block types like trampolines.
            </summary>
        </member>
        <member name="F:Block.aboveBlock">
            <summary>
                Cached reference to the block directly above this one in the grid. Set during
                SetupBlock and used for collapse propagation, terrain matching, and determining if
                this block is exposed on top. When this block collapses, it propagates the collapse
                to the above block if conditions are met.
            </summary>
        </member>
        <member name="F:Block.belowBlock">
            <summary>
                Cached reference to the block directly below this one in the grid. Set during
                SetupBlock and maintains the bidirectional relationship between vertically adjacent
                blocks. Used for support checks and visual edge determination.
            </summary>
        </member>
        <member name="F:Block.bounds">
            <summary>
                The rectangular bounds of this block in world space. Set during Setup to a 16x16
                unit rect at the block's position. Used for collision and spatial queries.
            </summary>
        </member>
        <member name="F:Block.canHaveWaterDrips">
            <summary>
                Flag indicating whether this block can spawn water drip particle effects. When true
                and the block has no block below it, water drips can be created. Defaults to true.
                Used to control visual water drip effects on the underside of blocks.
            </summary>
        </member>
        <member name="F:Block.canPersist">
            <summary>
                Determines whether this block can be saved and restored during persistence
                operations. Default is true. Set to false for temporary or non-saveable blocks.
            </summary>
        </member>
        <member name="F:Block.collumn">
            <summary>
                The current column position of this block in the grid. Represents the X coordinate
                in the block grid system. Set during initialization based on the block's transform
                position using Map.GetRow (sic). Used extensively for neighbor lookups, position
                calculations, and grid-based operations. Note the misspelling of "column" is
                consistent throughout the codebase.
            </summary>
        </member>
        <member name="F:Block.groundLayer">
            <summary>
                Layer mask used for physics raycasts to detect ground and solid objects. Initialized
                in Awake to include "Ground", "LargeObjects", and "IndestructibleGround" layers.
                Used for collision detection and determining nearby solid objects.
            </summary>
        </member>
        <member name="F:Block.groundType">
            <summary>
                The type of terrain this block represents. Determines visual appearance, behavior,
                and interactions. Used extensively for terrain matching checks with neighbors,
                collapse behavior determination, and special case handling for different block types
                like bridges, alien eggs, barrels, etc. Defaults to GroundType.Earth.
            </summary>
        </member>
        <member name="F:Block.height">
            <summary>
                Defines the vertical grid size of the block in rows. Default value is 1. Used for
                multi-row blocks that span more than one grid position vertically.
            </summary>
        </member>
        <member name="F:Block.initialColumn">
            <summary>
                The original column position when the block was first initialized. Stores the column
                value at initialization time for reference. Set during Awake to preserve the
                original grid position.
            </summary>
        </member>
        <member name="F:Block.initialRow">
            <summary>
                The original row position when the block was first initialized. Stores the row value
                at initialization time for reference. Set during Awake to preserve the original grid
                position.
            </summary>
        </member>
        <member name="F:Block.originalPosition">
            <summary>
                The original world position of the block when first initialized. Cached during Awake
                from the transform position. Used during the Reset method to restore the block to
                its initial position.
            </summary>
        </member>
        <member name="F:Block.persistThisBlockInstead">
            <summary>
                Reference to an alternative block that should be persisted instead of this one. Used
                for block substitution during save/load operations. Hidden in inspector.
            </summary>
        </member>
        <member name="F:Block.replaceOnCollapse">
            <summary>
                Whether this block should be replaced with replacementBlockType when it collapses.
                When true, the block transforms into the specified type during collapse instead of
                being destroyed. Set to false after replacement occurs.
            </summary>
        </member>
        <member name="F:Block.replacementBlockType">
            <summary>
                The type of block that should replace this block when it collapses or is destroyed.
                Defaults to GroundType.Empty. Used with replaceOnCollapse to transform blocks during
                destruction sequences.
            </summary>
        </member>
        <member name="F:Block.row">
            <summary>
                The current row position of this block in the grid. Represents the Y coordinate in
                the block grid system. Set during initialization based on the block's transform
                position using Map.GetRow. Used extensively for neighbor lookups, position
                calculations, and grid-based operations throughout the block system.
            </summary>
        </member>
        <member name="F:Block.size">
            <summary>
                Defines the horizontal grid size of the block in columns. Default value is 1. Used
                for multi-column blocks that span more than one grid position horizontally.
            </summary>
        </member>
        <member name="F:Block.soundHolder">
            <summary>
                Container for sound effects associated with this block. Used to play defend sounds
                when hit by certain damage types (bullets, blades) and death sounds when destroyed.
                The volume and specific sounds played depend on the context and damage type.
            </summary>
        </member>
        <!-- Block Neighbor Access Properties -->
        <member name="P:Block.AboveBlock">
            <summary>
                Gets the block above this block in the grid. Uses the Map.GetBlock method to
                retrieve the block at same column, row + 1.
            </summary>
            <returns>The neighboring block above, or null if no block exists at that position.</returns>
        </member>
        <member name="P:Block.AboveIsEmpty">
            <summary>
                Checks if the above neighbor position is empty. A position is considered empty if
                the AboveBlock is null or destroyed, and also verifies the row is not at the top
                edge of the map (row &lt; Map.MapData.Height - 1).
            </summary>
            <returns>True if there is no block above or if the above block is destroyed (and not at map edge), false otherwise.</returns>
        </member>
        <member name="P:Block.BelowBlock">
            <summary>
                Gets the block below this block in the grid. Uses the Map.GetBlock method to
                retrieve the block at same column, row - 1.
            </summary>
            <returns>The neighboring block below, or null if no block exists at that position.</returns>
        </member>
        <member name="P:Block.BelowIsEmpty">
            <summary>
                Checks if the below neighbor position is empty. A position is considered empty if
                the BelowBlock is null or if the below block's destroyed flag is true.
            </summary>
            <returns>True if there is no block below or if the below block is destroyed, false otherwise.</returns>
        </member>
        <member name="P:Block.IsAboveTheSame">
            <summary>
                Determines if the block above has the same ground type as this block. Compares the
                ground types using Map.IsTerrainTheSame.
            </summary>
            <returns>True if the above neighbor exists and has the same groundType as this block, false otherwise.</returns>
        </member>
        <member name="P:Block.IsBelowTheSame">
            <summary>
                Determines if the block below has the same ground type as this block. Compares the
                ground types using Map.IsTerrainTheSame.
            </summary>
            <returns>True if the below neighbor exists and has the same groundType as this block, false otherwise.</returns>
        </member>
        <member name="P:Block.IsLeftTheSame">
            <summary>
                Determines if the block to the left has the same ground type as this block. Compares
                the ground types using Map.IsTerrainTheSame.
            </summary>
            <returns>True if the left neighbor exists and has the same groundType as this block, false otherwise.</returns>
        </member>
        <member name="P:Block.IsRightTheSame">
            <summary>
                Determines if the block to the right has the same ground type as this block.
                Compares the ground types using Map.IsTerrainTheSame.
            </summary>
            <returns>True if the right neighbor exists and has the same groundType as this block, false otherwise.</returns>
        </member>
        <member name="P:Block.IsTopLeftTheSame">
            <summary>
                Determines if the block diagonally above and to the left has the same ground type as
                this block. Checks the position at column - 1, row + 1.
            </summary>
            <returns>True if the diagonal top-left neighbor exists and has the same groundType as this block, false otherwise.</returns>
        </member>
        <member name="P:Block.IsTopRightTheSame">
            <summary>
                Determines if the block diagonally above and to the right has the same ground type
                as this block. Checks the position at column + 1, row + 1.
            </summary>
            <returns>True if the diagonal top-right neighbor exists and has the same groundType as this block, false otherwise.</returns>
        </member>
        <member name="P:Block.LeftBlock">
            <summary>
                Gets the block to the left of this block in the grid. Uses the Map.GetBlock method
                to retrieve the block at column - 1, same row.
            </summary>
            <returns>The neighboring block to the left, or null if no block exists at that position.</returns>
        </member>
        <member name="P:Block.LeftIsEmpty">
            <summary>
                Checks if the left neighbor position is empty. A position is considered empty if the
                LeftBlock is null or if the left block's destroyed flag is true.
            </summary>
            <returns>True if there is no block to the left or if the left block is destroyed, false otherwise.</returns>
        </member>
        <member name="P:Block.RightBlock">
            <summary>
                Gets the block to the right of this block in the grid. Uses the Map.GetBlock method
                to retrieve the block at column + 1, same row.
            </summary>
            <returns>The neighboring block to the right, or null if no block exists at that position.</returns>
        </member>
        <member name="P:Block.RightIsEmpty">
            <summary>
                Checks if the right neighbor position is empty. A position is considered empty if
                the RightBlock is null or if the right block's destroyed flag is true.
            </summary>
            <returns>True if there is no block to the right or if the right block is destroyed, false otherwise.</returns>
        </member>
        <!-- Block State & Query Methods -->
        <member name="M:Block.ActuallyCollapse(System.Single,System.Single,System.Boolean)">
            <summary>
                Executes the actual collapse of the block. Can be called via RPC from network.
                Handles protection checks, destroyable doodad special cases, visual effects based on
                collapse chance, and triggers block destruction. Protected blocks are ignored.
            </summary>
            <param name="xI">The horizontal force/impulse for collapse effects.</param>
            <param name="yI">The vertical force/impulse for collapse effects.</param>
            <param name="collapseBlocksAround">Whether to trigger collapse checks on neighboring blocks.</param>
        </member>
        <member name="M:Block.Collapse(System.Single,System.Single,System.Single)">
            <summary>
                Initiates the collapse process for the block with a given chance. Handles network
                synchronization, special damage source cases (helicopter chaingun, Satan force field
                skip RPC), and execution delays for crush damage. Only collapses if not already
                destroyed and chance is greater than zero.
            </summary>
            <param name="xI">The horizontal force/impulse causing the collapse.</param>
            <param name="yI">The vertical force/impulse causing the collapse.</param>
            <param name="chance">The probability of collapse (0-1). Values less than 1 may cause partial collapse effects.</param>
        </member>
        <member name="M:Block.CollapseForced">
            <summary>
                Forces the block to collapse with default parameters. Convenience method that calls
                CollapseForced with zero forces and 100% collapse chance.
            </summary>
        </member>
        <member name="M:Block.CollapseForced(System.Single,System.Single,System.Single)">
            <summary>
                Forces the block to collapse with specified parameters. Simply delegates to the
                standard Collapse method, used when collapse must happen regardless of normal
                conditions.
            </summary>
            <param name="xI">The horizontal force/impulse for the collapse.</param>
            <param name="yI">The vertical force/impulse for the collapse.</param>
            <param name="chance">The collapse chance (typically 1.0 for forced collapse).</param>
        </member>
        <member name="M:Block.DestroyBlockInternal(System.Boolean)">
            <summary>
                Handles the internal destruction process of the block. Disables colliders, clears
                health, updates visuals, handles parachute deactivation, destroys water drips,
                notifies statistics, triggers mine detonation if present, destroys attached slime,
                unsticks oil particles, and optionally informs surrounding blocks.
            </summary>
            <param name="CollapseBlocksAround">Whether to inform surrounding blocks of this block's destruction, potentially triggering their collapse.</param>
        </member>
        <member name="M:Block.EffectsCollapse(System.Single,System.Single)">
            <summary>
                Creates visual and audio effects when the block collapses but isn't completely
                destroyed. Spawns appropriate particle effects (alien, dirt, or custom colored)
                based on block type, plays collapse sound effects, and creates alien-specific
                collapse effects when applicable.
            </summary>
            <param name="xI">The horizontal force/impulse causing the collapse, affects particle direction.</param>
            <param name="yI">The vertical force/impulse causing the collapse, affects particle direction.</param>
        </member>
        <member name="M:Block.EffectsDestroyed(System.Single,System.Single,System.Single)">
            <summary>
                Creates visual and audio effects when the block is completely destroyed. Similar to
                EffectsCollapse but with more particles and force, indicating complete destruction
                rather than just collapse.
            </summary>
            <param name="xI">The horizontal force/impulse from the destruction source.</param>
            <param name="yI">The vertical force/impulse from the destruction source.</param>
            <param name="force">The overall force of the destruction, affects particle velocity and spread.</param>
        </member>
        <member name="M:Block.InformAboveBlockOfCollapse">
            <summary>
                Specifically notifies the block above that this block has collapsed. Uses both grid
                lookup and raycast fallback to find blocks directly above. Shows the bottom edge of
                the above block and triggers special behavior for oil tank blocks.
            </summary>
        </member>
        <member name="M:Block.InformSurroundingBlocksOfCollapse">
            <summary>
                Notifies all neighboring blocks that this block has collapsed, triggering
                appropriate visual updates. Shows edges on adjacent blocks that are now exposed and
                specifically informs the block above which may need to collapse.
            </summary>
        </member>
        <member name="M:Block.IsEdgeBlock">
            <summary>
                Determines if this block is at the edge of a structure by checking how many
                neighboring positions are occupied. Counts neighbors (including map boundaries as
                "occupied") and returns true if fewer than 4 sides have blocks.
            </summary>
            <returns>True if the block has less than 4 occupied neighbor positions, indicating it's an edge block.</returns>
        </member>
        <member name="M:Block.IsSolid">
            <summary>
                Virtual method that determines if this block is solid for collision purposes.
                Returns true in base implementation, can be overridden by non-solid blocks.
            </summary>
            <returns>True indicating the block is solid, false for non-solid variants</returns>
        </member>
        <member name="M:Block.IsSupported">
            <summary>
                Checks if this block is structurally supported and shouldn't fall. For falling
                structure blocks, verifies support by checking up to 3 blocks in each horizontal
                direction for solid blocks or blocks with support. Returns false if destroyed,
                damaged, or no supporting blocks are found within range.
            </summary>
            <returns>True if the block has structural support, false if it should fall</returns>
        </member>
        <member name="M:Block.NotBroken">
            <summary>
                Checks if this block is still intact (not broken). Returns true if health is above 0
                and the destroyed flag is false.
            </summary>
            <returns>True if the block has health and is not destroyed, false otherwise</returns>
        </member>
        <member name="M:Block.NotRolling">
            <summary>
                Virtual method that checks if the block is not rolling. Always returns true in base
                implementation, can be overridden by rolling block types.
            </summary>
            <returns>True in base implementation, indicating the block is not rolling</returns>
        </member>
        <member name="M:Block.SetActive(System.Boolean)">
            <summary>
                Sets the active state of this block's GameObject. Virtual method that directly calls
                SetActive on the base GameObject. Derived blocks can override to perform additional
                activation/deactivation logic.
            </summary>
            <param name="active">True to activate the GameObject, false to deactivate</param>
        </member>
        <member name="M:Block.SetBelowBlockCollapsedVisuals">
            <summary>
                Updates visual state of the block below when this block collapses. Virtual method
                intended for override by derived classes that need special below-block handling.
                Base implementation is empty.
            </summary>
        </member>
        <member name="M:Block.SetCollapsedAboveVisuals">
            <summary>
                Updates this block's visual state when the block above it has collapsed. Virtual
                method for derived classes to implement special visual changes. Base implementation
                is empty.
            </summary>
        </member>
        <member name="M:Block.SetCollapsedVisuals">
            <summary>
                Sets the visual state of the block after it has collapsed. Disables the main
                renderer, hides all edge pieces and center, shows broken background visuals, hides
                side broken edges, and deactivates all added block pieces to show the block as
                destroyed.
            </summary>
        </member>
        <member name="M:Block.SetParachuteActive(System.Boolean)">
            <summary>
                Sets the parachute active state for this block. Virtual method that updates the
                IsParachuteActive property. Derived blocks can override to add visual or physics
                effects when parachute state changes.
            </summary>
            <param name="active">True to activate the parachute, false to deactivate</param>
        </member>
        <member name="M:Block.UnstickOilParticles">
            <summary>
                Removes all oil particles that are stuck to this block. Called when the block is
                destroyed to ensure particles become unstuck and can fall/move freely. Maintains
                list integrity by removing invalid references.
            </summary>
        </member>
        <!-- Attachment & Support Methods -->
        <member name="M:Block.AttachAboveBlock(Block)">
            <summary>
                Sets the reference to the block positioned above this one in the grid. Used for
                neighbor tracking and collapse mechanics.
            </summary>
            <param name="above">The block positioned above this one.</param>
        </member>
        <member name="M:Block.AttachBelowBlock(Block)">
            <summary>
                Sets the reference to the block positioned below this one in the grid. Used for
                neighbor tracking and support mechanics.
            </summary>
            <param name="below">The block positioned below this one.</param>
        </member>
        <member name="M:Block.AttachMe(UnityEngine.Transform)">
            <summary>
                Attaches a transform's gameObject to this block's list of other attachments.
                Overrides the base class method to add the object to the otherAttachments list for
                tracking attached entities.
            </summary>
            <param name="trans">The transform whose gameObject should be attached to this block.</param>
        </member>
        <member name="M:Block.AttachMe(SlimeGroundCover)">
            <summary>
                Attaches a slime ground cover entity to this block. The slime is added to the
                block's slimeCover list for tracking and will be destroyed when the block is
                destroyed.
            </summary>
            <param name="slime">The slime ground cover entity to attach to this block.</param>
        </member>
        <member name="M:Block.AttachMe(Doodad)">
            <summary>
                Attaches a doodad to this block. Handles special cases for JiggleDoodads (added to
                separate list) and Spikes (stored in dedicated field). All doodads are added to the
                general doodadAttachments list.
            </summary>
            <param name="doodad">The doodad to attach to this block.</param>
        </member>
        <member name="M:Block.CrumbleBridge(System.Single)">
            <summary>
                Override of base class crumble bridge method. Simply calls the base implementation.
            </summary>
            <param name="chance">The crumble chance passed to base method</param>
        </member>
        <member name="M:Block.CrumbleBridges(System.Single)">
            <summary>
                Sends crumble messages to adjacent bridge blocks. Raycasts left and right to find
                connected blocks, sends "CrumbleBridge" message, or directly calls method on
                adjacent grid blocks.
            </summary>
            <param name="chance">The probability that adjacent bridges will crumble (0-1)</param>
        </member>
        <member name="M:Block.DelayedCollapseAbove">
            <summary>
                Triggers collapse of the block above this one based on collapse chance and block
                type compatibility. Checks extensive type matching rules, transfers damage source,
                and initiates collapse with multiplied chance. Skips alien eggs.
            </summary>
        </member>
        <member name="M:Block.Push(System.Single)">
            <summary>
                Applies a horizontal push force to the block. Accumulates force over time and
                enables the block for updates. Base implementation doesn't move blocks but stores
                force.
            </summary>
            <param name="xINormalized">The normalized horizontal push force to apply</param>
            <returns>Always returns false in base implementation</returns>
        </member>
        <member name="M:Block.RemoveMe(SlimeGroundCover)">
            <summary>
                Removes a slime ground cover entity from this block's attachment list. Called when
                slime needs to be detached without destroying the block.
            </summary>
            <param name="slime">The slime ground cover entity to remove from this block.</param>
        </member>
        <member name="M:Block.RunCollapseLogic">
            <summary>
                Executes post-destruction collapse behavior. Triggers collapse of block above if
                enabled, disturbs block below, crumbles adjacent bridges, and ensures
                collapseBlocksAround flag is set.
            </summary>
        </member>
        <member name="M:Block.RunPushLogic">
            <summary>
                Gradually reduces push force over time. Decays positive and negative forces toward
                zero at 0.3 units per second, used for visual wobble effects.
            </summary>
        </member>
        <member name="M:Block.SupportedByDoodad(Doodad)">
            <summary>
                Sets the doodad that is supporting this block. Used when blocks are held up by
                doodads rather than other blocks.
            </summary>
            <param name="doodad">The doodad object that is supporting this block.</param>
        </member>
        <!-- Attachment & Support Fields -->
        <member name="F:Block.attachedObjects">
            <summary>
                Array of GameObjects attached to this block that move or are destroyed with it.
                General attachment array for objects not specific to a particular side.
            </summary>
        </member>
        <member name="F:Block.attachedObjectsBelow">
            <summary>
                Array of GameObjects attached below this block. These objects are positioned
                relative to the block's bottom edge.
            </summary>
        </member>
        <member name="F:Block.attachedObjectsLeft">
            <summary>
                Array of GameObjects attached to the left side of this block. These objects are
                positioned relative to the block's left edge.
            </summary>
        </member>
        <member name="F:Block.attachedObjectsRight">
            <summary>
                Array of GameObjects attached to the right side of this block. These objects are
                positioned relative to the block's right edge.
            </summary>
        </member>
        <member name="F:Block.disturbed">
            <summary>
                Indicates whether this block has been disturbed from its stable state. Used by
                IsSupported method for fallingStructure blocks to determine stability.
            </summary>
        </member>
        <member name="F:Block.doodadAttachments">
            <summary>
                List of doodad objects attached to this block. Stores references to decorative or
                functional doodads that are attached to this block. When the block collapses, it
                iterates through this list to set the lastDamageObject on each doodad and calls
                their Collapse method. The list is cleared when the block is reset via the Reset
                method.
            </summary>
        </member>
        <member name="F:Block.fallingStructure">
            <summary>
                Indicates whether this block is part of a structure that can fall when unsupported.
                When true, IsSupported checks for structural integrity and support conditions.
            </summary>
        </member>
        <member name="F:Block.mine">
            <summary>
                Reference to a Mine object attached to this block. Checked in DestroyBlockInternal()
                and CheckForMine() methods. When block is destroyed, calls Detonate(true) on the
                mine if it hasn't already exploded or been detonated. Uses RPC for networked
                detonation.
            </summary>
        </member>
        <member name="F:Block.spikes">
            <summary>
                Reference to a Spikes doodad specifically attached to this block. Set when
                AttachMe(Doodad) is called with a Spikes type doodad. Stored separately from general
                doodadAttachments list for quick access to spike-specific functionality.
            </summary>
        </member>
        <member name="F:Block.supportedBy">
            <summary>
                Reference to a doodad that is supporting this block. Used to track support
                relationships between blocks and doodads. When this block collapses and has a
                supporting doodad, it calls the doodad's Collapse method and clears this reference.
                This field is checked in the IsSolid method to determine if the block counts as
                solid terrain.
            </summary>
        </member>
        <!-- Visual & Rendering Methods -->
        <member name="M:Block.AddBlockPiece(BlockPiece[],System.Boolean,System.Boolean)">
            <summary>
                Instantiates and configures a block piece based on its type. Background meshes are
                placed 12 units forward, centre tiles at 0.01 + foregroundCentreZOffset forward, and
                edge pieces 3 units backward. Applies forced materials if configured. Randomly
                selects from the provided prefab array and parents the piece to this block.
            </summary>
            <param name="prefabs">Array of BlockPiece prefabs to randomly select from.</param>
            <param name="isBackgroundMesh">If true, creates a background mesh piece.</param>
            <param name="isCentreTile">If true, creates a centre tile piece.</param>
            <returns>The instantiated BlockPiece (backgroundMesh, centreObject, or a regular edge piece).</returns>
        </member>
        <member name="M:Block.AddEdgePiece(BlockPiece[])">
            <summary>
                Creates an edge piece positioned 6 units forward. Applies forced edge materials if
                configured, including special bloody material for BloodSeepage components. Edge
                pieces are typically used for broken block borders.
            </summary>
            <param name="prefabs">Array of BlockPiece prefabs to randomly select from.</param>
            <returns>The instantiated edge BlockPiece with configured materials.</returns>
        </member>
        <member name="M:Block.AddForegroundDecorationPiece(BlockPiece[])">
            <summary>
                Creates a foreground decoration piece positioned 3 units backward. Default wrapper
                that calls the overloaded version with -3f Z offset.
            </summary>
            <param name="prefabs">Array of BlockPiece prefabs to randomly select from.</param>
            <returns>The instantiated decoration BlockPiece.</returns>
        </member>
        <member name="M:Block.AddForegroundDecorationPiece(BlockPiece[],System.Single)">
            <summary>
                Creates a foreground decoration piece at a specified Z offset. Randomly selects from
                the prefab array and parents to this block. Virtual method that can be overridden by
                derived classes.
            </summary>
            <param name="prefabs">Array of BlockPiece prefabs to randomly select from.</param>
            <param name="zOffset">The Z-axis offset for positioning the piece.</param>
            <returns>The instantiated decoration BlockPiece.</returns>
        </member>
        <member name="M:Block.AddForegroundPiece(BlockPiece[])">
            <summary>
                Creates a foreground decoration piece with a random Z offset between 1.94 and 2.0
                units forward. Wrapper method that calls AddForegroundPiece with calculated offset.
            </summary>
            <param name="prefabs">Array of BlockPiece prefabs to randomly select from.</param>
            <returns>The instantiated foreground BlockPiece.</returns>
        </member>
        <member name="M:Block.AddForegroundPiece(BlockPiece[],System.Single)">
            <summary>
                Creates a foreground piece at a specified Z offset. Randomly selects from the prefab
                array and parents to this block. Used internally by other AddForegroundPiece
                methods.
            </summary>
            <param name="prefabs">Array of BlockPiece prefabs to randomly select from.</param>
            <param name="zOffset">The Z-axis offset for positioning the piece.</param>
            <returns>The instantiated foreground BlockPiece.</returns>
        </member>
        <member name="M:Block.AddObject(BlockPiece)">
            <summary>
                Adds a BlockPiece to the list of additional objects attached to this block. These
                objects are managed separately from the standard attached objects arrays and are
                used for dynamic visual elements.
            </summary>
            <param name="meshObject">The BlockPiece object to add to the block's addedObjects list.</param>
        </member>
        <member name="M:Block.Bloody(DirectionEnum,BloodColor)">
            <summary>
                Applies blood spray visual effects to the block from a specific direction with the
                specified color. Calls the overloaded method with fully parameter set to false for
                partial blood coverage.
            </summary>
            <param name="direction">The direction from which the blood is applied (Up, Down, Left, or Right).</param>
            <param name="color">The color of the blood effect (Red, Oil, Frozen, etc.).</param>
        </member>
        <member name="M:Block.Bloody(DirectionEnum,BloodColor,System.Boolean)">
            <summary>
                Applies blood spray visual effects to the block from a specific direction with
                control over full coverage. Handles activating blood spray GameObjects, updating
                sprite colors, applying blood to attached doodads and block pieces, creating oil
                pools when appropriate, and managing blood drip particle effects.
            </summary>
            <param name="direction">The direction from which the blood is applied (Up, Down, Left, or Right).</param>
            <param name="color">The color of the blood effect (Red, Oil, Frozen, etc.).</param>
            <param name="fully">Whether to apply full blood coverage. For oil, this affects pool creation threshold.</param>
        </member>
        <member name="M:Block.Bloody(UnityEngine.Vector3,BloodColor)">
            <summary>
                Applies blood spray effects based on a normal vector direction. Converts the vector
                to a cardinal direction and only applies blood if that side isn't already bloodied.
                Used for directional blood splatter from impacts.
            </summary>
            <param name="normal">The normal vector indicating the direction of blood application.</param>
            <param name="color">The color of the blood effect.</param>
        </member>
        <member name="M:Block.CanBloody(DirectionEnum)">
            <summary>
                Determines if the block can receive blood spray effects from a specific direction.
                Blood can only be applied from directions where there is no solid neighboring block,
                ensuring blood only appears on exposed surfaces.
            </summary>
            <param name="direction">The direction from which the blood would be applied (Up, Down, Left, or Right).</param>
            <returns>True if there is no solid block in the specified direction, false otherwise.</returns>
        </member>
        <member name="M:Block.CreateDecal(DecalInfo)">
            <summary>
                Creates a decal effect on the block based on the provided decal information.
                Currently only supports bloody decals, which are applied to both the block and any
                attached doodads. Checks if the block can be bloodied in the specified direction
                before applying.
            </summary>
            <param name="decalInfo">Contains the type of decal (only Bloody supported), direction, and blood color information.</param>
        </member>
        <member name="M:Block.CreateFlames(UnityEngine.Vector3)">
            <summary>
                Creates a flame visual effect at the block's position with specified direction
                offset. Used during burning to spawn fire particles.
            </summary>
            <param name="direction">The directional offset for the flame effect, typically randomized within a 6-unit radius</param>
        </member>
        <member name="M:Block.FindBackgroundBlockFirstCollumn(System.Int32,GroundType)">
            <summary>
                Finds the leftmost column of a contiguous group of background blocks with the same
                ground type. Similar to FindBigBlockFirstCollumn but checks background terrain
                instead of foreground. Includes a safety counter of 200 iterations to prevent
                infinite loops.
            </summary>
            <param name="c">The starting column to search from.</param>
            <param name="currentGroundType">The ground type to match.</param>
            <returns>The leftmost column index of the contiguous background block group.</returns>
        </member>
        <member name="M:Block.FindBackgroundBlockLastCollumn(System.Int32,GroundType)">
            <summary>
                Finds the rightmost column of a contiguous group of background blocks with the same
                ground type. Similar to FindBigBlockLastCollumn but checks background terrain
                instead of foreground. Includes a safety counter of 200 iterations to prevent
                infinite loops.
            </summary>
            <param name="c">The starting column to search from.</param>
            <param name="currentGroundType">The ground type to match.</param>
            <returns>The rightmost column index of the contiguous background block group.</returns>
        </member>
        <member name="M:Block.FindBackgroundBlockTopRow(System.Int32,GroundType)">
            <summary>
                Finds the topmost row of a contiguous group of background blocks with the same
                ground type. Searches upward in the block's column until it finds a different ground
                type. Includes a safety counter of 200 iterations to prevent infinite loops.
            </summary>
            <param name="r">The starting row to search from.</param>
            <param name="currentGroundType">The ground type to match.</param>
            <returns>The topmost row index of the contiguous background block group.</returns>
        </member>
        <member name="M:Block.FindBigBlockBottomRow(System.Int32,System.Int32,GroundType)">
            <summary>
                Finds the bottommost row of a contiguous group of blocks with the same ground type.
                Searches downward from the given position until it finds a different ground type.
                Used for determining large tile piece boundaries. Includes a safety counter of 200
                iterations to prevent infinite loops.
            </summary>
            <param name="c">The column to search in.</param>
            <param name="r">The starting row to search from.</param>
            <param name="currentGroundType">The ground type to match.</param>
            <returns>The bottommost row index of the contiguous block group.</returns>
        </member>
        <member name="M:Block.FindBigBlockFirstCollumn(System.Int32,GroundType)">
            <summary>
                Finds the leftmost column of a contiguous group of blocks with the same ground type.
                Searches left from the given column until it finds a different ground type or
                reaches the map edge. Used for determining large tile piece boundaries. Includes a
                safety counter of 200 iterations to prevent infinite loops.
            </summary>
            <param name="c">The starting column to search from.</param>
            <param name="currentGroundType">The ground type to match.</param>
            <returns>The leftmost column index of the contiguous block group.</returns>
        </member>
        <member name="M:Block.FindBigBlockLastCollumn(System.Int32,GroundType)">
            <summary>
                Finds the rightmost column of a contiguous group of blocks with the same ground
                type. Searches right from the given column until it finds a different ground type or
                reaches the map width. Used for determining large tile piece boundaries. Includes a
                safety counter of 200 iterations to prevent infinite loops.
            </summary>
            <param name="c">The starting column to search from.</param>
            <param name="currentGroundType">The ground type to match.</param>
            <returns>The rightmost column index of the contiguous block group.</returns>
        </member>
        <member name="M:Block.FindBigBlockTopRow(System.Int32,System.Int32,GroundType)">
            <summary>
                Finds the topmost row of a contiguous group of blocks with the same ground type.
                Searches upward from the given position until it finds a different ground type. Used
                for determining large tile piece boundaries. Includes a safety counter of 200
                iterations to prevent infinite loops.
            </summary>
            <param name="c">The column to search in.</param>
            <param name="r">The starting row to search from.</param>
            <param name="currentGroundType">The ground type to match.</param>
            <returns>The topmost row index of the contiguous block group.</returns>
        </member>
        <member name="M:Block.FullBloody(UnityEngine.Vector3,BloodColor)">
            <summary>
                Applies full blood spray effects based on a normal vector direction. Similar to
                Bloody but ensures full coverage when applied. Converts the vector to a cardinal
                direction and only applies if that side isn't already bloodied.
            </summary>
            <param name="normal">The normal vector indicating the direction of blood application.</param>
            <param name="color">The color of the blood effect.</param>
        </member>
        <member name="M:Block.HideAbove">
            <summary>
                Hides all visual elements on the top side of the block, including attached objects,
                blood sprays, edge pieces, and triggers doodad collapses. Sets hiddenTop flag to
                true, deactivates attachedObjects array and all top-side blood sprays/edges, calls
                HideOtherAttachments on base class, and triggers Collapse on all doodadAttachments
                with the current lastDamageObject.
            </summary>
        </member>
        <member name="M:Block.HideBackgroundMesh">
            <summary>
                Hides the background mesh visual component of this block by deactivating its
                GameObject. Used when the block needs to hide its background decoration.
            </summary>
        </member>
        <member name="M:Block.HideBelow">
            <summary>
                Hides all visual elements on the bottom side of the block, including attached
                objects, blood sprays, and edge pieces. Sets hiddenBottom flag to true and
                deactivates all bottom-side GameObjects including attachedObjectsBelow array,
                bloodSprayBottom, bloodSprayBottomHidden, and bottomEdge.
            </summary>
        </member>
        <member name="M:Block.HideBottomDecoration">
            <summary>
                Virtual method to hide bottom decorations on this block. Base implementation is
                empty. Derived block types can override to control visibility of bottom decorative
                elements.
            </summary>
        </member>
        <member name="M:Block.HideBrokenEdges">
            <summary>
                Hides all broken edge visuals including background and side edges. Deactivates
                backgroundEdgeBroken, updates its Z offset based on row/column position for visual
                variety, and calls HideSideBrokenEdges to hide all directional broken edges.
            </summary>
        </member>
        <member name="M:Block.HideCentre">
            <summary>
                Hides the center object visual component of this block by deactivating its
                GameObject. Used when the block's center visual needs to be hidden.
            </summary>
        </member>
        <member name="M:Block.HideLeft">
            <summary>
                Hides all visual elements on the left side of the block, including attached objects,
                blood sprays, and edge pieces. Sets hiddenLeft flag to true and deactivates all
                left-side GameObjects including attachedObjectsLeft array, bloodSprayLeft,
                bloodSprayLeftHidden, and leftEdge.
            </summary>
        </member>
        <member name="M:Block.HideRight">
            <summary>
                Hides all visual elements on the right side of the block, including attached
                objects, blood sprays, and edge pieces. Sets hiddenRight flag to true and
                deactivates all right-side GameObjects including attachedObjectsRight array,
                bloodSprayRight, bloodSprayRightHidden, and rightEdge.
            </summary>
        </member>
        <member name="M:Block.HideSideBrokenEdges">
            <summary>
                Hides all directional broken edge visuals (top, bottom, left, right). Deactivates
                the GameObjects for topEdgeBroken, bottomEdgeBroken, leftEdgeBroken, and
                rightEdgeBroken if they exist.
            </summary>
        </member>
        <member name="M:Block.HideTopDecorationShowTopEdge">
            <summary>
                Virtual method to hide top decorations while showing the top edge. Base
                implementation is empty. Derived block types can override to manage visibility of
                decorative elements versus structural edges.
            </summary>
        </member>
        <member name="M:Block.IncreaseDripRate">
            <summary>
                Increases the rate of water drips from this block by reducing the delay between
                drips. Only works if canHaveWaterDrips is true and there's no block below. If no
                drip exists, spawns a new water drip. Otherwise reduces the existing drip's delay by
                1 second (minimum 0.5 seconds).
            </summary>
        </member>
        <member name="M:Block.MakeAlienBlockCollapseEffects(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Creates visual effects when an alien block collapses, including green blood gushes,
                slime particles, and optional alien particles. Spawns two blood gush effects in
                opposite directions, multiple slime particles with varying velocities, and alien
                particles if createParticles is true.
            </summary>
            <param name="_x">The X position where the effects should spawn.</param>
            <param name="_y">The Y position where the effects should spawn.</param>
            <param name="xI">The horizontal velocity influence for the effects.</param>
            <param name="yI">The vertical velocity influence for the effects.</param>
            <param name="createParticles">Whether to create alien particle effects in addition to blood and slime (default true).</param>
        </member>
        <member name="M:Block.MoveBottomEdgeToForeground">
            <summary>
                Virtual method to move the bottom edge visual element to the foreground rendering
                layer. Base implementation is empty. Derived blocks can override to adjust edge
                rendering order.
            </summary>
        </member>
        <member name="M:Block.MoveLeftEdgeToForeground">
            <summary>
                Virtual method to move the left edge visual element to the foreground rendering
                layer. Base implementation is empty. Derived blocks can override to adjust edge
                rendering order.
            </summary>
        </member>
        <member name="M:Block.MoveRightEdgeToForeground">
            <summary>
                Virtual method to move the right edge visual element to the foreground rendering
                layer. Base implementation is empty. Derived blocks can override to adjust edge
                rendering order.
            </summary>
        </member>
        <member name="M:Block.MoveTopEdgeToForeground">
            <summary>
                Virtual method to move the top edge visual element to the foreground rendering
                layer. Base implementation is empty. Derived blocks can override to adjust edge
                rendering order.
            </summary>
        </member>
        <member name="M:Block.Rustle(System.Single,System.Single,System.Single)">
            <summary>
                Virtual method called when foliage or vegetation blocks need to animate rustling
                movement. Empty in base implementation, typically overridden by grass or bush
                blocks.
            </summary>
            <param name="y">The vertical rustling strength</param>
            <param name="x">The horizontal rustling position</param>
            <param name="xI">The horizontal rustling impulse/intensity</param>
        </member>
        <member name="M:Block.SetCollapsedVisuals">
            <summary>
                Hides all visual components of the block when it has collapsed. Disables the
                renderer, hides all edge pieces, shows the broken background mesh, and deactivates
                any added objects like decorations.
            </summary>
        </member>
        <member name="M:Block.ShowBackgroundMesh">
            <summary>
                Shows the background mesh visual component of this block by activating its
                GameObject. Used to reveal background decoration when the block's foreground is
                damaged or destroyed.
            </summary>
        </member>
        <member name="M:Block.ShowBottomEdge">
            <summary>
                Shows the broken edge visual on the bottom side of the block if the block is not
                destroyed. Only activates bottomEdgeBroken GameObject if the block is still intact.
            </summary>
        </member>
        <member name="M:Block.ShowBrokenBackground">
            <summary>
                Shows the broken background edge visual and hides the main renderer when the block
                is damaged. Activates the backgroundEdgeBroken GameObject and disables the block's
                main Renderer component to show damage state.
            </summary>
        </member>
        <member name="M:Block.ShowCentre">
            <summary>
                Shows the center object visual component of this block by activating its GameObject.
                The center object typically represents the main visual element of the block.
            </summary>
        </member>
        <member name="M:Block.ShowLeftEdge">
            <summary>
                Shows the broken edge visual on the left side of the block if the block is not
                destroyed. Only activates leftEdgeBroken GameObject if the block is still intact.
            </summary>
        </member>
        <member name="M:Block.ShowRightEdge">
            <summary>
                Shows the broken edge visual on the right side of the block if the block is not
                destroyed. Only activates rightEdgeBroken GameObject if the block is still intact.
            </summary>
        </member>
        <member name="M:Block.ShowTopEdge">
            <summary>
                Shows the broken edge visual on the top side of the block if the block is not
                destroyed. Only activates topEdgeBroken GameObject if the block is still intact.
            </summary>
        </member>
        <member name="M:Block.SpawnSlimeDrip">
            <summary>
                Spawns a slime drip particle effect beneath this block. Creates a new slime drip
                effect using EffectsController if one doesn't already exist. The drip is positioned
                8 units below the block with a random horizontal offset between -7 and 7 units, and
                has a random delay between 0.5 and 4 seconds.
            </summary>
        </member>
        <member name="M:Block.SpawnWaterDrip">
            <summary>
                Spawns a water drip particle effect beneath this block. Creates a new water drip
                effect using EffectsController if one doesn't already exist. The drip is positioned
                8 units below the block with a random horizontal offset between -7 and 7 units, and
                has a random delay between 0.5 and 4 seconds.
            </summary>
        </member>
        <!-- Visual & Rendering Fields -->
        <member name="F:Block._bloodyTopCounter">
            <summary>
                Counts the number of times blood has been applied to the top edge. When greater than
                7 and blood color is Oil, triggers oil pool placement below the block.
            </summary>
        </member>
        <member name="F:Block.addedObjects">
            <summary>
                List of additional BlockPiece objects attached to this block for decorative or
                functional purposes. Initialized with capacity 8 in OnSpawned(). Objects added via
                AddObject() method. All pieces receive Bump() effects when stepped on and are
                deactivated when block collapses.
            </summary>
        </member>
        <member name="F:Block.backgroundEdgeBroken">
            <summary>
                SpriteSM component for the broken background edge visual. Shown via
                ShowBrokenBackground() when block is damaged, hidden in HideBrokenEdges(). Z offset
                is adjusted based on row/column modulo 4 for visual variety when hiding.
            </summary>
        </member>
        <member name="F:Block.backgroundMesh">
            <summary>
                Protected reference to the background mesh BlockPiece. Created by AddBlockPiece()
                when isBackgroundMesh is true, positioned 12 units forward in Z. Shown when block is
                damaged via ShowBackgroundMesh(), hidden via HideBackgroundMesh(). Uses
                forceCenterTileBackgroundMaterial if configured.
            </summary>
        </member>
        <member name="F:Block.blocksOfTypeCollumns">
            <summary>
                The total number of columns in a group of blocks of the same type. Set by
                UseLargePieces to define the width of tiled structures like buildings or walls.
            </summary>
        </member>
        <member name="F:Block.blocksOfTypeRows">
            <summary>
                The total number of rows in a group of blocks of the same type. Set by
                UseLargePieces to define the height of tiled structures like buildings or walls.
            </summary>
        </member>
        <member name="F:Block.bloodSprayBottom">
            <summary>
                GameObject for blood spray effect on the bottom side of the block. Activated when
                Bloody() is called with DirectionEnum.Down. Contains ParticleSpawner components
                cached in bloodSprayBottomBloodDrips for blood drip effects. Creates oil pools when
                bloodied with BloodColor.Oil.
            </summary>
        </member>
        <member name="F:Block.bloodSprayBottomBloodDrips">
            <summary>
                Private array of ParticleSpawner components found in bloodSprayBottom's children.
                Cached during FirstFrame() if bloodSprayBottom exists. Used to create blood drip
                particle effects when bottom is bloodied, with emission rate and color adjusted
                based on BloodColor type.
            </summary>
        </member>
        <member name="F:Block.bloodSprayBottomHidden">
            <summary>
                GameObject for hidden blood spray on bottom side. Deactivated in HideBelow() method
                along with regular bloodSprayBottom. Provides alternative blood visuals for specific
                block states or types where standard blood spray needs different positioning.
            </summary>
        </member>
        <member name="F:Block.bloodSprayBottomPiece">
            <summary>
                BlockPiece component for additional blood effects on the bottom side. Not directly
                referenced in visible code but follows pattern of other blood spray pieces. Likely
                used for layered blood visuals on complex blocks.
            </summary>
        </member>
        <member name="F:Block.bloodSprayLeft">
            <summary>
                GameObject for blood spray effect on the left side of the block. Activated when
                Bloody() is called with DirectionEnum.Left. Deactivated during FirstFrame()
                initialization and HideLeft(). Contains SpriteSM component for color changes.
            </summary>
        </member>
        <member name="F:Block.bloodSprayLeftHidden">
            <summary>
                GameObject for hidden blood spray on left side. Deactivated in HideLeft() method
                along with regular bloodSprayLeft. Provides alternative blood visuals for specific
                block states or types where standard blood spray needs different positioning.
            </summary>
        </member>
        <member name="F:Block.bloodSprayLeftPiece">
            <summary>
                BlockPiece component for additional blood effects on the left side. Receives
                Bloody() calls with color and fully parameters when left side is bloodied. Cleaned
                via Unbloody() during blood removal. Used for blocks with complex edge geometry.
            </summary>
        </member>
        <member name="F:Block.bloodSprayRight">
            <summary>
                GameObject for blood spray effect on the right side of the block. Activated when
                Bloody() is called with DirectionEnum.Right. Deactivated during FirstFrame()
                initialization and HideRight(). Contains SpriteSM component for color changes.
            </summary>
        </member>
        <member name="F:Block.bloodSprayRightHidden">
            <summary>
                GameObject for hidden blood spray on right side. Deactivated in HideRight() method
                along with regular bloodSprayRight. Provides alternative blood visuals for specific
                block states or types where standard blood spray needs different positioning.
            </summary>
        </member>
        <member name="F:Block.bloodSprayRightPiece">
            <summary>
                BlockPiece component for additional blood effects on the right side. Receives
                Bloody() calls with color and fully parameters when right side is bloodied. Cleaned
                via Unbloody() during blood removal. Used for blocks with complex edge geometry.
            </summary>
        </member>
        <member name="F:Block.bloodSprayTop">
            <summary>
                GameObject for blood spray effect on the top side of the block. Activated when
                Bloody() is called with DirectionEnum.Up. Deactivated during FirstFrame()
                initialization and when cleaning blood. Contains SpriteSM component for color
                changes based on BloodColor parameter.
            </summary>
        </member>
        <member name="F:Block.bloodSprayTopHidden">
            <summary>
                GameObject for hidden blood spray on top side. Deactivated in HideAbove() method
                along with regular bloodSprayTop. Provides alternative blood visuals for specific
                block states or types where standard blood spray needs different positioning.
            </summary>
        </member>
        <member name="F:Block.bloodSprayTopPiece">
            <summary>
                BlockPiece component for additional blood effects on the top side. Not directly
                referenced in visible code but follows pattern of other blood spray pieces. Likely
                used for layered blood visuals on complex blocks.
            </summary>
        </member>
        <member name="F:Block.bloodyBottom">
            <summary>
                Indicates whether the bottom edge of the block has blood visual effects applied. Set
                by Bloody() when blood hits from above (direction Down).
            </summary>
        </member>
        <member name="F:Block.bloodyLeft">
            <summary>
                Indicates whether the left edge of the block has blood visual effects applied. Set
                by Bloody() when blood hits from the right (direction Left).
            </summary>
        </member>
        <member name="F:Block.bloodyRight">
            <summary>
                Indicates whether the right edge of the block has blood visual effects applied. Set
                by Bloody() when blood hits from the left (direction Right).
            </summary>
        </member>
        <member name="F:Block.bloodyTop">
            <summary>
                Indicates whether the top edge of the block has blood visual effects applied. Set by
                Bloody() when blood hits from below (direction Up).
            </summary>
        </member>
        <member name="F:Block.bottomEdge">
            <summary>
                Reference to the BlockPiece component representing the bottom edge visual of this
                block. Used for edge rendering and blood effects on the bottom side.
            </summary>
        </member>
        <member name="F:Block.bottomEdgeBroken">
            <summary>
                GameObject representing the broken bottom edge visual. Activated by ShowBottomEdge()
                when neighboring blocks are destroyed and this block remains intact. Hidden during
                HideSideBrokenEdges() and block initialization.
            </summary>
        </member>
        <member name="F:Block.centreObject">
            <summary>
                The main central visual BlockPiece of this block. Created by AddBlockPiece() when
                isCentreTile is true, positioned at 0.01f + foregroundCentreZOffset forward. Can be
                shown/hidden via ShowCentre() and HideCentre() methods. Uses
                forceCenterTileForegroundMaterial if configured.
            </summary>
        </member>
        <member name="F:Block.dropCustomParticleColor">
            <summary>
                When true, uses custom particle colors (particleColor1 and particleColor2) instead
                of default colors when spawning collapse particles.
            </summary>
        </member>
        <member name="F:Block.dropDirt">
            <summary>
                When true, the block spawns dirt particles when destroyed or collapsed. Checked in
                EffectsCollapse() and DestroyBlockInternal().
            </summary>
        </member>
        <member name="F:Block.firstBlockOfTypeCollumn">
            <summary>
                The starting column position for a group of blocks of the same type. Set by
                UseLargePieces for blocks that are part of larger structures. Used to calculate
                relative position within a tiled pattern.
            </summary>
        </member>
        <member name="F:Block.firstBlockOfTypeRow">
            <summary>
                The starting row position for a group of blocks of the same type. Set by
                UseLargePieces for blocks that are part of larger structures. Used to calculate
                relative position within a tiled pattern.
            </summary>
        </member>
        <member name="F:Block.forceCenterTileBackgroundMaterial">
            <summary>
                Optional material override for center background tiles. Applied to backgroundMesh in
                AddBackgroundPiece() if not null.
            </summary>
        </member>
        <member name="F:Block.forceCenterTileForegroundMaterial">
            <summary>
                Optional material override for center foreground tiles. Applied to centreObject in
                AddForegroundPiece() if not null.
            </summary>
        </member>
        <member name="F:Block.forceEdgeBloodSeepageForegroundMaterial">
            <summary>
                Optional material override for blood seepage on edge pieces. Applied to BloodSeepage
                component's bloodyMaterial in AddForegroundPiece() and AddEdgePiece().
            </summary>
        </member>
        <member name="F:Block.forceEdgeForegroundMaterial">
            <summary>
                Optional material override for edge foreground pieces. Applied in
                AddForegroundPiece() and AddEdgePiece() when not null.
            </summary>
        </member>
        <member name="F:Block.foregroundCentreZOffset">
            <summary>
                Z-axis offset for foreground center pieces when the block is destroyed. Default is
                2.0. Used in AddForegroundCentrePiece to position destruction debris in front of the
                block.
            </summary>
        </member>
        <member name="F:Block.hasBloodPoolAbove">
            <summary>
                Flag indicating whether there is a blood pool effect on top of this block. Currently
                only set but not used in any game logic within the Block class itself.
            </summary>
        </member>
        <member name="F:Block.hasDoneSecondFrame">
            <summary>
                Tracks whether the block has completed its second frame initialization. Set to true
                in SecondFrame() to prevent duplicate processing.
            </summary>
        </member>
        <member name="F:Block.hiddenBottom">
            <summary>
                Indicates whether the bottom edge visuals are hidden. Set by HideBelow() to hide
                attached objects on the bottom edge when block is collapsed.
            </summary>
        </member>
        <member name="F:Block.hiddenLeft">
            <summary>
                Indicates whether the left edge visuals are hidden. Set by HideLeft() to hide
                attached objects on the left edge when block is collapsed.
            </summary>
        </member>
        <member name="F:Block.hiddenRight">
            <summary>
                Indicates whether the right edge visuals are hidden. Set by HideRight() to hide
                attached objects on the right edge when block is collapsed.
            </summary>
        </member>
        <member name="F:Block.hiddenTop">
            <summary>
                Indicates whether the top edge visuals are hidden. Set by HideAbove() to hide
                attached objects on the top edge when block is collapsed.
            </summary>
        </member>
        <member name="F:Block.leftEdge">
            <summary>
                Reference to the BlockPiece component representing the left edge visual of this
                block. Used for edge rendering when adjacent blocks are empty, blood effects
                application, and visual hiding when needed. Deactivated in HideLeft() and
                ShowLeftEdge().
            </summary>
        </member>
        <member name="F:Block.leftEdgeBroken">
            <summary>
                GameObject representing the broken left edge visual. Activated by ShowLeftEdge()
                when the left neighboring block is destroyed and this block remains intact. Hidden
                during HideSideBrokenEdges() and block initialization.
            </summary>
        </member>
        <member name="F:Block.lowerLeftPixelX">
            <summary>
                The X coordinate of the lower-left pixel in the sprite's texture. Cached from the
                sprite component's lowerLeftPixel.x value during Start. Used for sprite rendering
                calculations.
            </summary>
        </member>
        <member name="F:Block.lowerLeftPixelY">
            <summary>
                The Y coordinate of the lower-left pixel in the sprite's texture. Cached from the
                sprite component's lowerLeftPixel.y value during Start. Used for sprite rendering
                calculations. Defaults to 16.
            </summary>
        </member>
        <member name="F:Block.particleColor1">
            <summary>
                First custom color for collapse particles when dropCustomParticleColor is true.
                Passed to EffectsController.CreateDirtWhiteParticles().
            </summary>
        </member>
        <member name="F:Block.particleColor2">
            <summary>
                Second custom color for collapse particles when dropCustomParticleColor is true.
                Passed to EffectsController.CreateDirtWhiteParticles().
            </summary>
        </member>
        <member name="F:Block.rightEdge">
            <summary>
                Reference to the BlockPiece component representing the right edge visual of this
                block. Used for edge rendering when adjacent blocks are empty, blood effects
                application, and visual hiding when needed. Deactivated in HideRight() and
                ShowRightEdge().
            </summary>
        </member>
        <member name="F:Block.rightEdgeBroken">
            <summary>
                GameObject representing the broken right edge visual. Activated by ShowRightEdge()
                when the right neighboring block is destroyed and this block remains intact. Hidden
                during HideSideBrokenEdges() and block initialization.
            </summary>
        </member>
        <member name="F:Block.sprite">
            <summary>
                Reference to the SpriteSM component attached to this block. Cached during Start and
                used for sprite manipulation, offset calculations, and visual updates throughout the
                block's lifecycle.
            </summary>
        </member>
        <member name="F:Block.spriteOffset">
            <summary>
                The offset vector for the sprite's position relative to the block's transform.
                Cached from the sprite component's offset during Start. Used to maintain proper
                sprite positioning.
            </summary>
        </member>
        <member name="F:Block.tilingOffset">
            <summary>
                Random offset value used for texture tiling variations. Set by UseLargePieces to add
                visual variety to repeated block patterns. Helps prevent obvious tiling in large
                structures.
            </summary>
        </member>
        <member name="F:Block.topEdge">
            <summary>
                Reference to the BlockPiece component representing the top edge visual of this
                block. Used for edge rendering and blood effects on the top side.
            </summary>
        </member>
        <member name="F:Block.topEdgeBroken">
            <summary>
                GameObject representing the broken top edge visual. Activated by ShowTopEdge() when
                neighboring blocks are destroyed and this block remains intact. Hidden during
                HideSideBrokenEdges() and block initialization.
            </summary>
        </member>
        <member name="F:Block.useLargeMuralPieces">
            <summary>
                Indicates whether this block should use large mural piece prefabs when destroyed.
                Set by UseLargePieces method during block initialization. Used by derived classes to
                select appropriate destruction visuals.
            </summary>
        </member>
        <member name="F:Block.useLargeWindowPieces">
            <summary>
                Indicates whether this block should use large window piece prefabs when destroyed.
                Set by UseLargePieces method during block initialization. Used by derived classes to
                select appropriate destruction visuals.
            </summary>
        </member>
        <member name="F:Block.waterDrips">
            <summary>
                Particle spawner component for water or slime drip effects beneath the block.
                Created on demand when ShowWaterDrips or ShowSlimeDrips is called. Positioned 8
                units below the block with a random horizontal offset. Has a random delay between
                0.5 and 4 seconds.
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:Block.AddSlime(SlimeGroundCover)">
            <summary>
                Adds a slime ground cover attachment to this block. The slime object is added to the
                internal slimeCover list but the base implementation doesn't perform any additional
                processing.
            </summary>
            <param name="slime">The SlimeGroundCover object to attach to this block</param>
        </member>
        <member name="M:Block.AddSlime(System.Int32,DirectionEnum)">
            <summary>
                Adds a specified amount of slime to an existing SlimeGroundCover on the specified
                side of this block. Searches through the slimeCover list for a slime attachment
                matching the given direction and adds slime to it if found.
            </summary>
            <param name="slimeAmount">The amount of slime to add to the existing coverage</param>
            <param name="direction">The side of the block where the slime should be added</param>
        </member>
        <member name="M:Block.Alert">
            <summary>
                Virtual method to alert this block, typically used to trigger AI awareness or
                environmental reactions. Base implementation is empty. Derived block types can
                override to implement alert behaviors.
            </summary>
        </member>
        <member name="M:Block.BounceOn">
            <summary>
                Virtual method called when something bounces on this block. Base implementation is
                empty. Derived block types can override to implement bounce reactions such as visual
                effects, sounds, or state changes.
            </summary>
        </member>
        <member name="M:Block.GetSlimeXCentre(DirectionEnum)">
            <summary>
                Gets the X coordinate center position for slime placement on this block. Base
                implementation returns the block's X position regardless of direction. Derived
                blocks can override to provide direction-specific slime positioning.
            </summary>
            <param name="direction">The direction side of the block where slime is placed</param>
            <returns>The X coordinate for slime center position, defaults to block's X position</returns>
        </member>
        <member name="M:Block.GetSlimeYCentre(DirectionEnum)">
            <summary>
                Gets the Y coordinate center position for slime placement on this block. Base
                implementation returns the block's Y position regardless of direction. Derived
                blocks can override to provide direction-specific slime positioning.
            </summary>
            <param name="direction">The direction side of the block where slime is placed</param>
            <returns>The Y coordinate for slime center position, defaults to block's Y position</returns>
        </member>
        <member name="M:Block.HasSlime(DirectionEnum)">
            <summary>
                Checks whether this block has slime coverage on the specified side. Searches through
                the slimeCover list for any SlimeGroundCover attachment with a matching direction.
            </summary>
            <param name="direction">The side of the block to check for slime coverage</param>
            <returns>True if slime coverage exists on the specified side, false otherwise</returns>
        </member>
        <member name="M:Block.LandOn(System.Single)">
            <summary>
                Virtual method called when something lands on this block with a specified vertical
                velocity. Base implementation is empty. Derived block types can override to react to
                landing impacts based on the landing force.
            </summary>
            <param name="yI">The vertical velocity of the object landing on this block</param>
        </member>
        <member name="M:Block.SpreadSteppedOnEffects(DirectionEnum,System.Int32)">
            <summary>
                Spreads step effects to neighboring blocks. Default implementation is empty,
                designed to be overridden by derived classes that want to propagate step effects
                across multiple blocks.
            </summary>
            <param name="direction">The direction to spread the effect.</param>
            <param name="spreadCount">The current spread distance from the source.</param>
        </member>
        <member name="M:Block.StandingOnBlock(TestVanDammeAnim,System.Single)">
            <summary>
                Called continuously while a unit is standing on this block. Default implementation
                is empty, designed to be overridden by derived classes for blocks that react to
                prolonged contact.
            </summary>
            <param name="tvd">The unit standing on the block.</param>
            <param name="t">The time or delta time parameter.</param>
        </member>
        <member name="M:Block.StepOn(TestVanDammeAnim)">
            <summary>
                Called when a unit steps on this block. Triggers visual effects on the block by
                calling SteppedOnEffects with no specific direction and zero spread.
            </summary>
            <param name="unit">The unit that stepped on the block.</param>
        </member>
        <member name="M:Block.StepOn(Grenade)">
            <summary>
                Called when a grenade lands on this block. Triggers visual effects on the block by
                calling SteppedOnEffects with no specific direction and zero spread.
            </summary>
            <param name="grenade">The grenade that landed on the block.</param>
        </member>
        <member name="M:Block.StepOnBlock">
            <summary>
                Generic method called when anything steps on this block. Triggers visual effects by
                calling SteppedOnEffects with no specific direction and zero spread.
            </summary>
        </member>
        <member name="M:Block.StepOnBlockForced">
            <summary>
                Network-synchronized version of StepOnBlock that can be called via RPC. Marked with
                [AllowedRPC] attribute. Triggers visual effects by calling SteppedOnEffects with no
                specific direction and zero spread.
            </summary>
        </member>
        <member name="M:Block.StepOnBlockImmediate">
            <summary>
                Immediately triggers step-on effects without any delay. Calls SteppedOnEffects with
                no specific direction and zero spread. Used when instant visual feedback is needed.
            </summary>
        </member>
        <member name="M:Block.SteppedOnEffects(DirectionEnum,System.Int32)">
            <summary>
                Applies visual bump effects to all block pieces when something steps on the block.
                Iterates through all addedObjects (decorative pieces) and the topEdge piece, calling
                their Bump method to create movement/shake effects.
            </summary>
            <param name="direction">The direction of the impact that caused the step.</param>
            <param name="spreadCount">How many blocks the effect has spread across (used for diminishing effects).</param>
        </member>
        <!-- Environmental Interaction Properties -->
        <member name="P:Block.IsParachuteActive">
            <summary>
                Gets or sets whether this block has an active parachute attachment. Virtual property
                that can be overridden by derived block types to implement parachute functionality
                for slowly falling blocks.
            </summary>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:Block.immuneToSlime">
            <summary>
                Determines whether this block is immune to slime coverage effects. When true, slime
                cannot attach to or spread onto this block.
            </summary>
        </member>
        <member name="F:Block.isOily">
            <summary>
                Indicates whether this block is covered in oil. Oily blocks can catch fire and
                spread flames. Affects fire propagation behavior.
            </summary>
        </member>
        <member name="F:Block.jiggleDoodads">
            <summary>
                List of jiggle doodads attached to this block. These doodads will jiggle when the
                block is disturbed. Cleared in OnSpawned and managed through attachment methods.
            </summary>
        </member>
        <member name="F:Block.oilPoolPlaced">
            <summary>
                Reference to oil pool doodad placed below this block when hit by oil. Set in
                Bloody() when oil counter exceeds threshold.
            </summary>
        </member>
        <member name="F:Block.slimeCover">
            <summary>
                List of slime ground cover objects attached to this block. Represents alien slime or
                other ground cover effects. Cleared in OnSpawned and managed dynamically.
            </summary>
        </member>
        <member name="F:Block.stuckParticles">
            <summary>
                List of oil particles stuck to this block. These particles can be ignited when the
                block burns. Cleared in OnSpawned and managed as oil is applied to the block.
            </summary>
        </member>
        <!-- Networking & RPC Methods -->
        <member name="M:Block.Disturb">
            <summary>
                Handles disturbance of the block when called via RPC. Simply calls the base class
                Disturb implementation to trigger any physics or visual reactions.
            </summary>
        </member>
        <member name="M:Block.Disturb">
            <summary>
                Handles the disturbance of this block, typically from explosions or other
                environmental effects. Marked with [AllowedRPC] attribute for network
                synchronization. Calls the base class Disturb implementation.
            </summary>
        </member>
        <member name="M:Block.DisturbNetworked">
            <summary>
                Sends an RPC call to all players to disturb this block. Calls the Disturb method on
                all connected clients for synchronized physics reactions.
            </summary>
        </member>
        <member name="M:Block.DisturbNetworked">
            <summary>
                Sends a network RPC call to disturb this block on all connected clients. Uses
                Networking.RPC to call the Disturb method across the network with PID.TargetAll.
            </summary>
        </member>
        <member name="M:Block.PackState(UnityStream)">
            <summary>
                Packs the block's state data for network synchronization. For FallingBlock instances
                that have moved from their initial position, serializes the current column, row, and
                rotation values. Called during network state transmission to sync block positions
                across clients.
            </summary>
            <param name="stream">The network stream to serialize the block state data into</param>
            <returns>The stream with the serialized state data, after calling base.PackState</returns>
        </member>
        <member name="M:Block.RegisterBlockOnNetwork">
            <summary>
                Registers this block and all its child components with the networking system for
                multiplayer synchronization. Allocates deterministic IDs for the block transform,
                gameObject, replacement NID, all child BroforceObjects, and all child colliders
                (including their transforms).
            </summary>
        </member>
        <member name="M:Block.UnpackState(UnityStream)">
            <summary>
                Unpacks network state data to restore the block's synchronized position and
                rotation. Deserializes column, row, and rotation values from the stream and applies
                them to this FallingBlock instance. Used to apply state received from other clients.
            </summary>
            <param name="stream">The network stream containing the serialized block state data</param>
            <returns>The stream after deserialization, from base.UnpackState</returns>
        </member>
        <!-- Networking & RPC Fields -->
        <member name="F:Block.replacementNID">
            <summary>
                Network ID allocated for the replacement block that will be created when this block
                is replaced during collapse. Pre-allocated deterministically to ensure consistent
                network object creation across all clients.
            </summary>
        </member>
        <!-- Unity Event Methods -->
        <member name="M:Block.OnDisable">
            <summary>
                Unity callback when the block GameObject is disabled. Currently empty but provides a
                hook for cleanup operations.
            </summary>
        </member>
        <member name="M:Block.Rotate(System.Int32)">
            <summary>
                Rotates the block by the specified direction. Currently empty implementation that
                can be overridden by derived block types that support rotation.
            </summary>
            <param name="direction">The direction to rotate (specific values depend on implementation).</param>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:Block.Destroy">
            <summary>
                Empty private method that serves as a placeholder. The actual destruction logic is
                handled elsewhere in the Block class. This method exists but has no implementation.
            </summary>
        </member>
        <member name="M:Block.PsuedoRandomNumber(System.Int32)">
            <summary>
                Generates a pseudo-random integer between 0 and max (inclusive) based on the block's
                grid position and game seed. Uses a deterministic formula to ensure consistent
                random numbers across game sessions with the same seed.
            </summary>
            <param name="max">The maximum value for the random number (inclusive)</param>
            <returns>A pseudo-random integer between 0 and max</returns>
        </member>
        <member name="M:Block.PsuedoRandomValue(System.Single)">
            <summary>
                Generates a pseudo-random value between 0 and 1 based on the block's grid position
                and game seed. Uses column * row * (seed + 1) to create deterministic random values
                that are consistent across game sessions with the same seed.
            </summary>
            <param name="modulator">The range modulator for the random value generation</param>
            <returns>A pseudo-random float value between 0 and 1</returns>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:Block.burnRandom">
            <summary>
                Random number generator used for burn effects and flame particle positioning.
                Initialized in SetupRandomGenerators with a deterministic seed based on position.
                Used to create random burn counter delays and flame effect directions.
            </summary>
        </member>
        <member name="F:Block.collapseBelow">
            <summary>
                Unused flag intended to track whether blocks below should collapse. Not implemented
                in current code.
            </summary>
        </member>
        <member name="F:Block.collapseRandom">
            <summary>
                Random number generator used for collapse chance calculations. Initialized in
                SetupRandomGenerators with a deterministic seed. Compared against collapseChance to
                determine if blocks above should collapse when this block is destroyed.
            </summary>
        </member>
        <member name="F:Block.effectsRandom">
            <summary>
                Random number generator reserved for visual effects. Initialized in
                SetupRandomGenerators with a deterministic seed based on position. Currently
                initialized but not actively used in the base Block class.
            </summary>
        </member>
        <member name="F:Block.groundHit">
            <summary>
                Raycast hit result used for detecting neighboring blocks. Used in
                ShowAboveBlockBottomEdge() and CrumbleBridges() for physics queries.
            </summary>
        </member>
        <member name="F:Block.named">
            <summary>
                Tracks whether the block's GameObject name has been set with grid coordinates.
                Prevents duplicate naming in Setup() method.
            </summary>
        </member>
        <member name="F:Block.pushForce">
            <summary>
                Accumulated horizontal push force applied to the block. Modified by Push() method
                and processed in RunPushLogic().
            </summary>
        </member>
        <member name="F:Block.random">
            <summary>
                Random number generator for general block randomization. Initialized with a seed
                based on the block's position plus the networking random seed to ensure
                deterministic behavior across clients. Used for various random effects and
                calculations.
            </summary>
        </member>
        <member name="F:Block.sound">
            <summary>
                Cached reference to Sound singleton instance. Initialized in Start() and used in
                PlayDeathSound() for audio playback.
            </summary>
        </member>
        <member name="F:Block.soundVolume">
            <summary>
                Volume multiplier for block destruction sounds. Used in PlayDeathSound() with
                different multipliers based on damage type (0.15x for Unholy, 0.6x for InstaGib).
            </summary>
        </member>
        <member name="F:Block.t">
            <summary>
                Delta time value clamped between 0 and 0.033334 seconds (approximately 30 FPS frame
                time). Updated each frame in Update method and used for time-based calculations to
                ensure consistent behavior regardless of actual framerate.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:BroBase.Awake">
            <summary>
                Initializes the BroBase instance, marking it as a hero character and adding it to
                the static bros list. Sets up essential hero-specific functionality before other
                components initialize.
            </summary>
        </member>
        <member name="M:BroBase.OnDestroy">
            <summary>
                Cleans up the BroBase instance by removing it from the static bros list before
                destruction. Ensures proper cleanup of static references to prevent memory leaks.
            </summary>
        </member>
        <member name="M:BroBase.Start">
            <summary>
                Completes BroBase initialization after all objects are created. Sets up network
                syncing and jetpack state.
            </summary>
        </member>
        <member name="M:BroBase.Update">
            <summary>
                Processes BroBase-specific updates each frame including flex invulnerability,
                network synchronization, performance enhancement effects, cardio/dashing mechanics,
                jetpack functionality, and holy water revival timing. Extends base update
                functionality with hero-specific behaviors.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:BroBase.AnimateCustomMelee">
            <summary>
                Handles animation for custom melee types. Default implementation delegates to knife
                melee animation, serving as override point for unique attack animations in derived
                bros.
            </summary>
        </member>
        <member name="M:BroBase.AnimateKnifeMelee">
            <summary>
                Animates knife attacks with context-specific sprite sequences. Uses row 1 (frames
                25-31) for standing attacks and row 6 (frames 17-23) for jumping/dashing variants.
                Triggers attack on frame 3 with extended timing for dashing strikes.
            </summary>
        </member>
        <member name="M:BroBase.AnimateMelee">
            <summary>
                Routes melee animation to type-specific methods. Directs knife attacks to knife
                animation, punches to punch animation, and all other types to custom melee
                animation. Central routing point for the 15 different melee attack types.
            </summary>
        </member>
        <member name="M:BroBase.AnimateMeleeCommon">
            <summary>
                Provides shared animation logic for melee attacks. Handles sprite resets, frame
                timing (40 FPS), melee follow-up loops, and high-five interrupts for throwing nearby
                mooks during melee combos.
            </summary>
        </member>
        <member name="M:BroBase.AnimatePunch">
            <summary>
                Animates punch attacks using sprite frames 25-33. Triggers punch attacks on frame 3,
                with extended attack window for jetpack punches (frames 4-5). Includes impact
                emphasis delays and combo loop support.
            </summary>
        </member>
        <member name="M:BroBase.CanStartMeleeFollowUp">
            <summary>
                Determines if a follow-up melee attack can begin during current animation. Returns
                true after frame 7, enabling combo chains and continuous melee sequences.
            </summary>
            <returns>True if current animation frame is greater than 7; otherwise, false.</returns>
        </member>
        <member name="M:BroBase.CanStartNewMelee">
            <summary>
                Checks if a new melee attack can interrupt the current action. Allows new attacks
                when not meleeing or after frame 3 of current melee, enabling responsive combat and
                combo potential.
            </summary>
            <returns>True if not meleeing or frame is greater than 3; otherwise, false.</returns>
        </member>
        <member name="M:BroBase.CanStartNewPunch">
            <summary>
                Validates timing for new punch attacks with slightly stricter requirements than
                general melee. Allows punches when not meleeing or after frame 4, providing balanced
                combo timing.
            </summary>
            <returns>True if not meleeing or frame is greater than 4; otherwise, false.</returns>
        </member>
        <member name="M:BroBase.CancelMelee">
            <summary>
                Cancels ongoing melee attacks and resets related state. Clears the chosen melee
                target, restores normal fall speed, and resets direction change cancellation flag.
                Ensures clean exit from melee state.
            </summary>
        </member>
        <member name="M:BroBase.KickDoors(System.Single)">
            <summary>
                Kicks doors and destructible objects within specified range. Performs raycast
                detection, excludes parachutes, sends open command with direction, and applies 500
                horizontal crush force to break barriers.
            </summary>
            <param name="range">Maximum distance to check for kickable objects.</param>
        </member>
        <member name="M:BroBase.PerformKnifeMeleeAttack(System.Boolean,System.Boolean)">
            <summary>
                Executes knife slash attacks with 14x24 unit hit box. Deals knife damage type, kicks
                doors within 24 units, applies 200 horizontal and 500 vertical knockback force.
                Creates appropriate hit effects and sounds.
            </summary>
            <param name="shouldTryHitTerrain">Whether to attempt terrain damage if no unit is hit.</param>
            <param name="playMissSound">Whether to play miss sound if attack fails to connect.</param>
        </member>
        <member name="M:BroBase.PerformOverriddenMelee">
            <summary>
                Virtual hook for derived classes to implement custom melee attacks. Empty base
                implementation allows subclasses to define unique melee behaviors without modifying
                core melee system.
            </summary>
        </member>
        <member name="M:BroBase.PerformPunchAttack(System.Boolean,System.Boolean)">
            <summary>
                Executes punch attacks with standard or jetpack-enhanced variants. Standard punches
                deal 4 damage with 250 knockback force, while jetpack punches deal 10 damage with
                600 knockback force. Creates visual effects, kicks doors, damages terrain, and adds
                upward momentum for jetpack variant.
            </summary>
            <param name="shouldTryHitTerrain">Whether to attempt terrain damage if no unit is hit.</param>
            <param name="playMissSound">Whether to play miss sound if attack fails to connect.</param>
        </member>
        <member name="M:BroBase.PerformSmashAttack">
            <summary>
                Performs crushing smash attacks with 8 unit range. Deals 10 crush damage with
                minimal horizontal knockback (20 force) but moderate vertical force (50). Uses
                alternate sound effects to differentiate from standard attacks.
            </summary>
        </member>
        <member name="M:BroBase.ResetMeleeValues">
            <summary>
                Resets melee state flags to prepare for new attacks. Clears miss sound, attack
                performed, and hit flags. Virtual method allowing subclasses to reset additional
                melee-related state.
            </summary>
        </member>
        <member name="M:BroBase.RunCustomMeleeMovement">
            <summary>
                Controls movement during custom melee attacks. Default implementation uses knife
                melee movement pattern, providing override point for specialized movement behaviors.
            </summary>
        </member>
        <member name="M:BroBase.RunJetPackPunchMovement">
            <summary>
                Manages special movement for jetpack-powered punches. Creates horizontal jetpack
                flames and applies 200 unit thrust force during frames 2-4, followed by rapid
                deceleration. Provides unique physics for aerial combat moves.
            </summary>
        </member>
        <member name="M:BroBase.RunMelee">
            <summary>
                Manages movement during melee attacks based on type. Routes knife attacks to knife
                movement, punches to punch movement, jetpack punches to special jetpack movement,
                and others to custom movement handlers.
            </summary>
        </member>
        <member name="M:BroBase.RunPunchMovement">
            <summary>
                Controls movement during punch attacks. Applies gravity for aerial punches, enables
                dash movement toward targets on frames 2-4 (up to 1.7x speed), and stops movement
                during recovery frames. Cancels if falling below ground.
            </summary>
        </member>
        <member name="M:BroBase.StartCustomMelee">
            <summary>
                Initiates custom melee attacks with combo support. Validates attack timing, enables
                dashing melee mode when grounded, applies movement velocity, and handles melee
                follow-up chains. Entry point for non-standard melee types.
            </summary>
        </member>
        <member name="M:BroBase.StartKnifeMelee">
            <summary>
                Initiates knife melee attacks with timing validation. Resets interaction timers,
                deactivates weapons, handles combo chains through melee follow-up system, and
                applies movement for dashing variants.
            </summary>
        </member>
        <member name="M:BroBase.StartMelee">
            <summary>
                Initializes melee attacks with type-specific routing. Detects special conditions
                like standing on animals (forces knife melee) and routes to appropriate start
                methods: knife, punch, or custom melee based on the current melee type.
            </summary>
        </member>
        <member name="M:BroBase.StartMeleeCommon">
            <summary>
                Common initialization for all melee attack types. Validates melee can start, resets
                state flags, deactivates weapons, records starting position, and triggers initial
                animation. Core setup for the melee system.
            </summary>
        </member>
        <member name="M:BroBase.StartPunch">
            <summary>
                Initializes punch attacks with combo support. Validates punch can start, handles
                melee follow-up for combo chains, and delegates to common melee initialization.
                Entry point for standard and combo punches.
            </summary>
        </member>
        <member name="M:BroBase.TryMeleeTerrain(System.Int32,System.Int32)">
            <summary>
                Attempts to damage terrain or destructible objects with melee attacks. Performs
                raycast detection in melee range, deals configurable damage, and creates appropriate
                hit effects. Special handling for cage objects using full health as damage.
            </summary>
            <param name="offset">Horizontal offset for the terrain check.</param>
            <param name="meleeDamage">Amount of damage to deal to terrain (default 2).</param>
            <returns>True if terrain was hit and damaged; otherwise, false.</returns>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:BroBase.currentMeleeType">
            <summary>
                Active melee type being performed. Can differ from default when context changes
                (animal attacks force knife). Controls animation and damage calculations. Dynamic
                combat state.
            </summary>
        </member>
        <member name="F:BroBase.disembowelmentViscera">
            <summary>
                Sprite template for gore effects during disembowel attacks. Instantiated and
                positioned at enemy location when disembowel melee succeeds. Creates visceral
                feedback for brutal melee finishers.
            </summary>
        </member>
        <member name="F:BroBase.hasJumpedForKick">
            <summary>
                Tracks if automatic jump has occurred during kick animation. Prevents multiple jumps
                per kick. At frame 2, adds 150 upward velocity if false and grounded. Ensures
                consistent kick height.
            </summary>
        </member>
        <member name="F:BroBase.lerpToMeleeTargetPos">
            <summary>
                Interpolation value for smooth melee movement toward target. Reset at melee start.
                Enables fluid combat positioning. Animation smoothing parameter.
            </summary>
        </member>
        <member name="F:BroBase.meleeStartPos">
            <summary>
                Starting position vector when melee attack initiated. Captured in StartCustomMelee.
                Used for return positioning and movement calculations. Combat positioning anchor.
            </summary>
        </member>
        <member name="F:BroBase.meleeType">
            <summary>
                Default melee attack type for this bro character. Source value for currentMeleeType.
                Defines base combat style (knife, punch, etc). Character-specific combat identifier.
            </summary>
        </member>
        <member name="F:BroBase.performedMeleeAttack">
            <summary>
                Tracks if damage has been dealt in current melee attack. Reset in ResetMeleeValues.
                Prevents multiple damage applications per swing. Hit validation flag.
            </summary>
        </member>
        <member name="F:BroBase.splitkick">
            <summary>
                Flag for split kick attack hitting both directions simultaneously. Set when
                horizontal velocity is low during kick initiation. Enables martial arts characters
                to hit enemies on both sides.
            </summary>
        </member>
        <!-- Special Abilities Methods -->
        <member name="M:BroBase.AnimatePockettedSpecial">
            <summary>
                Animates pocketed special abilities with type-specific handling. Airstrike,
                MechDrop, and AlienPheromones use custom animation (row 5, frames 17-24) with
                ability trigger at frame 4. Other types use standard special animation.
            </summary>
        </member>
        <member name="M:BroBase.GetPockettedAmmoType">
            <summary>
                Retrieves the current pocketed ammunition type to use. Returns the top item from the
                stack or None if inventory is empty, determining which special ability executes on
                use.
            </summary>
            <returns>The next pocketed ammo type to use, or None if empty.</returns>
        </member>
        <member name="M:BroBase.GetSprintValue">
            <summary>
                Determines if the bro can currently sprint. Prevents sprinting while exhausted from
                overexertion, otherwise delegates to base sprint logic.
            </summary>
            <returns>False if exhausted; otherwise, returns base sprint value.</returns>
        </member>
        <member name="M:BroBase.MustUsePockettedSpecialAmmo">
            <summary>
                Determines if pocketed ammunition must be used before default specials. Forces
                players to consume pickups before accessing their character's built-in abilities,
                ensuring pickup utility.
            </summary>
            <returns>True if any pocketed ammo exists; otherwise, false.</returns>
        </member>
        <member name="M:BroBase.PickupPockettableAmmo(PockettedSpecialAmmoType)">
            <summary>
                Adds pocketed special ammunition to inventory stack. Validates ammo type, appends to
                end of list for LIFO usage order, and updates HUD to display the newly acquired
                special ability.
            </summary>
            <param name="ammoType">The type of special ammunition being picked up.</param>
        </member>
        <member name="M:BroBase.ReducePockettedSpecialAmmo">
            <summary>
                Removes used pocketed ammunition from inventory stack. Removes from end of list
                maintaining LIFO order and updates HUD to reflect remaining ammunition or return to
                default special display.
            </summary>
        </member>
        <member name="M:BroBase.ReleaseRemoteControlCar">
            <summary>
                Deploys remote-controlled vehicle from inventory. Simple wrapper that delegates to
                base implementation for RC car spawning and control transfer mechanics.
            </summary>
        </member>
        <member name="M:BroBase.SetPlayerHUDAmmo">
            <summary>
                Updates HUD special ability display based on current inventory. Shows top pocketed
                ammo type with count of 1 if any exist, otherwise displays hero's default special
                ability with actual ammo count.
            </summary>
        </member>
        <member name="M:BroBase.StartPockettedSpecial">
            <summary>
                Initiates use of pocketed special ammunition pickups. Validates bro state (not
                acid-covered or meleeing), sets the active special type, flags special use, and
                resets animation for special ability execution.
            </summary>
        </member>
        <member name="M:BroBase.ThrowAirstrikeGrenade">
            <summary>
                Deploys airstrike grenade with stance-based trajectory. Crouching throws short (30
                velocity, 70 angle) for close targets, standing throws long (200 velocity, 150
                angle) for distant targets. Network-spawned projectile calls in aerial bombardment
                on impact.
            </summary>
        </member>
        <member name="M:BroBase.ThrowAlienPheromoneGrenade">
            <summary>
                Deploys alien pheromone grenade for biological warfare. Uses standard stance-based
                throwing mechanics to deliver pheromones that affect alien behavior. Network-spawned
                projectile with tactical deployment options.
            </summary>
        </member>
        <member name="M:BroBase.ThrowMechDropGrenade">
            <summary>
                Deploys mech drop grenade with identical mechanics to airstrike. Uses stance-based
                throwing system to mark landing zone for mech deployment. Network-synchronized
                projectile spawns combat mech on detonation.
            </summary>
        </member>
        <member name="M:BroBase.TimeSlowSpecialRPC">
            <summary>
                Executes time-slowing special ability with mode-specific targeting. Plays bass drop
                sound, applies 1.2x general time boost, and adds color shift effect. In cooperative
                modes boosts all heroes by 1.5x, in competitive modes only boosts the casting
                player.
            </summary>
        </member>
        <member name="M:BroBase.UsePockettedSpecial">
            <summary>
                Executes pocketed special abilities via type-specific RPC calls. Handles Airstrike,
                Timeslow, RemoteControlCar, MechDrop, AlienPheromones, and Steroids. Manages ammo
                consumption, HUD updates, and network synchronization for each ability type.
            </summary>
        </member>
        <member name="M:BroBase.UseSteroids">
            <summary>
                Activates 10-second performance enhancement state. Sets enhanced flag, plays flex
                sound at 0.6 volume, triggers flex gesture animation, and initializes grunt counter
                based on player number for audio variety.
            </summary>
        </member>
        <member name="M:BroBase.UseSteroidsForDuration(System.Single)">
            <summary>
                Activates performance enhancement for specified duration. Identical to standard
                steroids but with customizable timing, maintaining all visual and audio feedback
                effects.
            </summary>
            <param name="duration">Duration in seconds for the steroid effect.</param>
        </member>
        <member name="M:BroBase.UseSteroidsNetworked">
            <summary>
                Network wrapper for steroid activation across all players. Validates local ownership
                before broadcasting RPC to trigger steroid effects on all connected clients,
                ensuring synchronized performance enhancement.
            </summary>
        </member>
        <member name="M:BroBase.UseSteroidsNetworkedForDuration(System.Single)">
            <summary>
                Network wrapper for variable-duration steroid activation. Broadcasts typed RPC with
                custom duration parameter to apply performance enhancement across all players with
                specified timing.
            </summary>
            <param name="duration">Duration in seconds for the steroid effect.</param>
        </member>
        <!-- Special Abilities Properties -->
        <member name="P:BroBase.SpecialAmmo">
            <summary>
                Gets or sets the special ammo count with support for pocketed special ammo. When
                getting, returns 1 if the bro has pocketed special ammo stored, otherwise returns
                the actual special ammo count.
            </summary>
            <returns>1 if has pocketed special ammo; otherwise, the base special ammo count.</returns>
        </member>
        <!-- Special Abilities Fields -->
        <member name="F:BroBase.usingPockettedSpecialType">
            <summary>
                Currently active pocketed special ammo type. Set during special ability use from
                inventory. Determines animation behavior for Airstrike, MechDrop, AlienPheromones.
                Default is Standard type.
            </summary>
        </member>
        <member name="F:BroBase.pockettedSpecialAmmo">
            <summary>
                Stack of special ammunition types collected from crates but not yet used. Functions
                as LIFO (last-in-first-out) where newest ammo is used first. When non-empty,
                overrides standard special ammo and displays custom HUD icons. Consumed via
                ReducePockettedSpecialAmmo when special is triggered.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:BroBase.AddSpeedLeft">
            <summary>
                Applies leftward movement with performance boost. When enhanced and not in
                quicksand, increases left movement to 120% speed (maintains dash multiplier if
                dashing). Base movement applied first.
            </summary>
        </member>
        <member name="M:BroBase.AddSpeedRight">
            <summary>
                Applies rightward movement with performance boost. When enhanced and not in
                quicksand, increases right movement to 120% speed (maintains dash multiplier if
                dashing). Mirrors left movement logic.
            </summary>
        </member>
        <member name="M:BroBase.AirJump">
            <summary>
                Executes air jump with fart-based mechanics. Level 1 creates smoke and sound
                effects. Level 2 creates damaging explosion with huge fart sound. Jump force scales
                0.5x-1.8x based on velocity, halves downward momentum before boost.
            </summary>
        </member>
        <member name="M:BroBase.CanUseJetpack">
            <summary>
                Validates jetpack availability for use. Requires both local jetpack availability
                flag and player having Jetpack value in ValueOrchestrator system.
            </summary>
            <returns>True if jetpack is available and player has jetpack power-up; otherwise, false.</returns>
        </member>
        <member name="M:BroBase.CreateBlastOffFlames(System.Single)">
            <summary>
                Creates flame explosion effect at specified height. Spawns visual flame wall,
                damages units in 14x10 area with fire damage, applies 50 upward force. Only executes
                for local player ownership.
            </summary>
            <param name="yPos">Vertical position for flame effect spawn.</param>
        </member>
        <member name="M:BroBase.Fart(System.Int32)">
            <summary>
                Virtual method for fart effects implementation. Empty base implementation provides
                hook for derived classes to implement custom fart behaviors based on fart level.
            </summary>
            <param name="fartLevel">Intensity level of the fart effect.</param>
        </member>
        <member name="M:BroBase.HitLeftWall">
            <summary>
                Handles left wall collisions with melee cancellation. Extends base wall hit behavior
                by canceling ongoing melee attacks if a target has already been hit, preventing
                attacks from continuing through walls.
            </summary>
        </member>
        <member name="M:BroBase.HitRightWall">
            <summary>
                Handles right wall collisions with melee cancellation. Extends base wall hit
                behavior by canceling ongoing melee attacks if a target has already been hit,
                preventing attacks from continuing through walls.
            </summary>
        </member>
        <member name="M:BroBase.Jump(System.Boolean)">
            <summary>
                Initiates jump with air ability resets. Enables flex air jumps and fart jumps based
                on available powers. Resets elbow slam and somersault states for clean jump
                execution.
            </summary>
            <param name="wallJump">Whether this is a wall jump.</param>
        </member>
        <member name="M:BroBase.Land">
            <summary>
                Handles landing mechanics with special elbow slam effects. Elbow slam creates
                shockwave explosion, damages units in 22x8 area and ground in 24 radius. Normal
                landing resets air abilities and jetpack availability.
            </summary>
        </member>
        <member name="M:BroBase.StartDashing">
            <summary>
                Initiates dashing with special "fart dash" enhancement. When specific conditions are
                met, creates smoke effects, disturbs wildlife within 100 units, plays fart sound,
                and adds 50 horizontal and 60 vertical velocity boost.
            </summary>
        </member>
        <member name="M:BroBase.StopElbowSlamming">
            <summary>
                Cancels elbow slam state and restores abilities. Resets slam flag and re-enables
                wall climbing capability. Simple state cleanup for movement system.
            </summary>
        </member>
        <member name="M:BroBase.UseJetpack">
            <summary>
                Activates jetpack thrust with context-sensitive boost. Near ground (within 20 units)
                creates blast-off flames and strong upward boost (140+ velocity). In air provides
                moderate boost (60 velocity) with -50 floor. Manages jetpack state and audio.
            </summary>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:BroBase.GetSpeed">
            <summary>
                Gets movement speed with exhaustion penalty. Returns 75% speed when exhausted,
                normal speed when performance enhanced (negating exhaustion), or base speed
                otherwise.
            </summary>
            <returns>Current movement speed multiplier.</returns>
        </member>
        <member name="P:BroBase.jumpForce">
            <summary>
                Gets or sets jump force with dynamic modifiers. Applies ValueOrchestrator
                modifications when player exists, adds 10% boost when performance enhanced. Setter
                stores base value for modification calculations.
            </summary>
            <returns>Modified jump force value based on power-ups and performance state.</returns>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:BroBase.cardioTime">
            <summary>
                Current sprint duration counter in seconds. Increments while dashing, decreases when
                not. Clamped 0-3 seconds. Triggers exhaustion when exceeding player's modified
                sprint time limit.
            </summary>
        </member>
        <member name="F:BroBase.fartJumpsLeftCount">
            <summary>
                Counter for remaining flatulence-based air jumps. Reset to 1 when grounded or
                acquiring flatulence power. Decremented on use. Enables comedic double-jump mechanic
                with explosive effects.
            </summary>
        </member>
        <member name="F:BroBase.fartingCounter">
            <summary>
                Timer for periodic fart explosions during flatulence. Resets every 0.07 seconds,
                triggering tiny explosions, ground damage, and velocity changes. Creates continuous
                area denial effect.
            </summary>
        </member>
        <member name="F:BroBase.fartingTime">
            <summary>
                Active duration of flatulence explosion effect. Set to 0.3 for delayed fart, 0.36
                for huge fart. While active, creates periodic explosions via fartingCounter. Comedy
                mechanic with gameplay impact.
            </summary>
        </member>
        <member name="F:BroBase.flexAirJumpsLeft">
            <summary>
                Counter for remaining flex-powered air jumps. Set to 1 when landing or acquiring
                FlexAirJump perk. Consumed during air flex abilities. Enables acrobatic aerial
                maneuvers.
            </summary>
        </member>
        <member name="F:BroBase.frontSomersaulting">
            <summary>
                Active state flag for front flip animation sequence. Set after air flex completion
                or specific actions. Enables chaining into elbow slam. Visual flourish for acrobatic
                moves.
            </summary>
        </member>
        <member name="F:BroBase.lastAirFlexJumpTime">
            <summary>
                Timestamp of last air flex jump for cooldown enforcement. Prevents air flex spam
                with 0.1 second minimum interval. Ensures balanced aerial movement.
            </summary>
        </member>
        <member name="F:BroBase.lastTeleportFlexJumpTime">
            <summary>
                Timestamp of last teleport flex use for 0.2 second cooldown. Prevents teleport
                ability spam. Works with FlexTeleport perk for tactical repositioning.
            </summary>
        </member>
        <member name="F:BroBase.maxCardioDuration">
            <summary>
                Base maximum sprint duration before exhaustion triggers. Default 2.5 seconds,
                modified by ValueOrchestrator. Compared against cardioTime to determine when stamina
                depletes.
            </summary>
        </member>
        <!-- Character State & Effects Methods -->
        <member name="M:BroBase.AlertNearbyMooks">
            <summary>
                Alerts nearby enemies with special pickpocket mechanic when dashing. If player has
                PickPocketMoney value, finds unalerted mooks within 8x8 range, fully alerts them,
                and triggers pickpocket perk event. Always alerts mooks normally afterward.
            </summary>
        </member>
        <member name="M:BroBase.ApplyPerformanceEnhancedFlexing">
            <summary>
                Applies flexing animation when the bro is performance enhanced and idle. Virtual
                method allowing derived bros to customize their flexing behavior.
            </summary>
        </member>
        <member name="M:BroBase.BecomeExhausted">
            <summary>
                Makes the bro exhausted from overexertion, preventing sprinting for 2.3 seconds.
                Stops any current dashing and resets cardio timer. Virtual method for subclass
                customization.
            </summary>
        </member>
        <member name="M:BroBase.BurstChest">
            <summary>
                Handles chest burst effect with flex invulnerability protection. Only processes
                chest burst if not protected by flex invulnerability, preventing alien chest bursts
                during temporary invulnerability periods.
            </summary>
        </member>
        <member name="M:BroBase.CanFreeze">
            <summary>
                Determines if this bro can be affected by freeze effects. Always returns true for
                BroBase characters, maintaining the base class behavior that heroes can be frozen.
            </summary>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:BroBase.CanReduceLives">
            <summary>
                Determines if death should consume a life. Returns false if marked for revival
                (preventing life loss), otherwise uses base logic. Critical for revival mechanics
                where death is temporary.
            </summary>
            <returns>False if will revive; otherwise, base implementation result.</returns>
        </member>
        <member name="M:BroBase.Damage(System.Int32,DamageType,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour,System.Single,System.Single)">
            <summary>
                Processes incoming damage with revival and flex invulnerability checks. If marked
                for revival and damaged within 5 seconds of death, accelerates revival to 0.6
                seconds. Ignores all damage during flex invulnerability. Always cancels elbow slam
                state when damaged.
            </summary>
            <param name="damage">Amount of damage to apply.</param>
            <param name="damageType">Type of damage being inflicted.</param>
            <param name="xI">Horizontal knockback force.</param>
            <param name="yI">Vertical knockback force.</param>
            <param name="direction">Direction of the damage source.</param>
            <param name="damageSender">The object that caused the damage.</param>
            <param name="hitX">X coordinate of the hit location.</param>
            <param name="hitY">Y coordinate of the hit location.</param>
        </member>
        <member name="M:BroBase.Death(System.Single,System.Single,DamageObject)">
            <summary>
                Handles character death with special effect cleanup. Sets posthumous fart delay
                (0.9s) for max flatulence level if not reviving. Destroys active flex effect
                GameObject. Delegates core death logic to base implementation.
            </summary>
            <param name="xI">Horizontal death force/velocity.</param>
            <param name="yI">Vertical death force/velocity.</param>
            <param name="damage">The damage object that caused death.</param>
        </member>
        <member name="M:BroBase.DelayedRevive(System.Single)">
            <summary>
                Configures delayed revival after death. Sets revival timer, prevents gibbing during
                revival window, marks for revival, and resets kill reporting. Integrates with holy
                water revival system for death recovery.
            </summary>
            <param name="delay">Time in seconds before revival occurs.</param>
        </member>
        <member name="M:BroBase.HolyWaterRevive">
            <summary>
                Revives a dead bro using holy water mechanics. Restores the bro to life with 1
                health, applies temporary invulnerability, launches them upward, triggers time
                slowdown effects, and creates visual indicators.
            </summary>
        </member>
        <member name="M:BroBase.HolyWaterReviveRPC">
            <summary>
                Network RPC handler for holy water revival. Processes revival commands from other
                players in multiplayer, only executing if the bro is currently dead.
            </summary>
        </member>
        <member name="M:BroBase.IsAlive">
            <summary>
                Checks character alive status including revival state. Returns true if marked for
                revival with time remaining OR base alive check passes. Allows systems to treat
                reviving characters as semi-alive.
            </summary>
            <returns>True if reviving or health greater than 0; otherwise, false.</returns>
        </member>
        <member name="M:BroBase.PerformanceEnhancedGrunt">
            <summary>
                Creates area effects when grunting while performance enhanced. Every 4th grunt
                panics nearby units within 64 units, and in competitive modes also stuns them.
                Virtual method allowing subclass customization.
            </summary>
        </member>
        <member name="M:BroBase.SetActionstateToIdle">
            <summary>
                Transitions the character to idle state with special handling for performance
                enhancement mode. Resets animation frame to 0 when performance enhanced and not
                performing other actions.
            </summary>
        </member>
        <member name="M:BroBase.SetGestureAnimation(GestureElement.Gestures)">
            <summary>
                Complex gesture handler managing elbow slam, air flex, teleport flex, and visual
                effects. Triggers elbow slam when somersaulting+flex+down in air. Manages air flex
                with multiple validation checks. Creates flex visual effects and handles teleport
                initiation with time gates.
            </summary>
            <param name="gesture">The gesture type to animate.</param>
        </member>
        <member name="M:BroBase.TriggerFlexEvent">
            <summary>
                Executes flex power effects based on player abilities. FlexAlluring attracts mooks
                within 96 units. FlexGoldenLight spawns 8-12 projectiles in arc pattern.
                FlexInvulnerability plays sound effect. Manages audio feedback for all flex powers.
            </summary>
        </member>
        <!-- Character State & Effects Properties -->
        <member name="P:BroBase.IsPerformanceEnhanced">
            <summary>
                Gets whether the character is currently performance enhanced from steroids. Returns
                the value of the performanceEnhanced field which is set when using steroids for
                temporary ability boosts.
            </summary>
            <returns>True if performance enhanced; otherwise, false.</returns>
        </member>
        <member name="P:BroBase.WillReviveAlready">
            <summary>
                Gets whether this bro will automatically revive after death. Set to true when holy
                water revival is triggered, checked during update to perform the actual revival.
            </summary>
            <returns>True if the bro has a pending revival; otherwise, false.</returns>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:BroBase.cannotGibTime">
            <summary>
                Temporary gibbing immunity duration to preserve body during revival. Set during
                DelayedRevive to prevent destruction. Ensures revival animations can play properly
                without body disappearing.
            </summary>
        </member>
        <member name="F:BroBase.exhaustedTime">
            <summary>
                Duration of exhaustion state after sprint overexertion in seconds. Set to 2.3 when
                cardio limit exceeded. Prevents sprinting and continues sweat effects while active.
                Core component of stamina system.
            </summary>
        </member>
        <member name="F:BroBase.fartDelay">
            <summary>
                Timer for posthumous flatulence effect. Set to 0.9 seconds on death with max
                flatulence. Creates comedic delayed explosion after death. Decrements until
                triggering fart.
            </summary>
        </member>
        <member name="F:BroBase.flexEffect">
            <summary>
                Visual effect object for active flex powers. Created for golden light or
                invulnerability effects. Destroyed on state changes or death. Provides visual
                feedback for flex abilities.
            </summary>
        </member>
        <member name="F:BroBase.flexInvulnerability">
            <summary>
                Duration timer for flex-induced invulnerability in seconds. Set to 0.25 during flex
                power activation. Prevents all damage while active. Strategic defensive window.
            </summary>
        </member>
        <member name="F:BroBase.flexSpecialFrame">
            <summary>
                Animation frame counter for flex special moves. Increments during air flex, elbow
                slam, and recovery. Controls sprite progression for special animations. Separate
                from main frame counter.
            </summary>
        </member>
        <member name="F:BroBase.gettingUpFromElbowSlam">
            <summary>
                Recovery state after elbow slam impact. Controls standup animation sequence.
                Prevents other actions during recovery. Ensures smooth transition from slam.
            </summary>
        </member>
        <member name="F:BroBase.isAirFlexing">
            <summary>
                Active state for air flex special move. Controls animation state and physics during
                aerial flex. Cleared on landing or move completion. Part of flex combo system.
            </summary>
        </member>
        <member name="F:BroBase.isElbowSlamming">
            <summary>
                Active state for downward elbow slam attack. Disables wall climbing and ladder
                interaction. Creates ground impact on landing. Aerial ground pound state.
            </summary>
        </member>
        <member name="F:BroBase.isFlatulent">
            <summary>
                Flag indicating active flatulence ability from power-ups. Set when Flatulence
                modifier greater than 0. Enables fart jumps and death effects. Core comedy mechanic
                flag.
            </summary>
        </member>
        <member name="F:BroBase.performanceEnhanced">
            <summary>
                Active state flag for performance enhancement from steroids. When true, enables
                special abilities like enhanced speed/jump, sweat particles, and area grunt effects.
                Controlled by performanceEnhancedTime duration.
            </summary>
        </member>
        <member name="F:BroBase.performanceEnhancedCounter">
            <summary>
                Frame timer for performance enhancement visual and audio effects. Triggers sweat
                particles and grunt effects every 0.0667 seconds during enhancement or exhaustion.
                Manages effect frequency.
            </summary>
        </member>
        <member name="F:BroBase.performanceEnhancedTime">
            <summary>
                Remaining duration of performance enhancement (steroid) effect in seconds. Set to 10
                seconds by default or custom duration via UseSteroidsForDuration. Decrements each
                frame until reaching zero, then disables enhancement.
            </summary>
        </member>
        <member name="F:BroBase.performanceGrunCount">
            <summary>
                Counter for performance enhancement grunt effects timing. Initialized to playerNum*4
                when steroids activate. Every 4 grunts panics nearby units, every 16 plays flex
                sound. Creates escalating intimidation effects.
            </summary>
        </member>
        <member name="F:BroBase.reviveTime">
            <summary>
                Delay in seconds before automatic revival triggers. Set by DelayedRevive method, can
                be extended by damage while dead. Compared against death time to initiate holy water
                revival sequence.
            </summary>
        </member>
        <member name="F:BroBase.willRevive">
            <summary>
                Flag indicating pending automatic revival after death. Set by DelayedRevive or holy
                water mechanics. Prevents life loss and triggers revival when reviveTime expires.
                Essential for revival system.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:BroBase.AnimateActualIdleDuckingFrames">
            <summary>
                Handles ducking idle animation with elbow slam recovery override. Displays recovery
                animation when getting up from elbow slam, otherwise uses standard ducking idle
                frames.
            </summary>
        </member>
        <member name="M:BroBase.AnimateActualIdleFrames">
            <summary>
                Manages idle animation with priority system for special states. Prioritizes elbow
                slam recovery and air flexing animations over standard idle when hasNewAirFlexFrames
                is true. Falls back to base idle animation otherwise.
            </summary>
        </member>
        <member name="M:BroBase.AnimateActualJumpingFrames">
            <summary>
                Complex jumping animation controller managing multiple aerial states. Handles elbow
                slam (row 14), air flexing, front somersault (row 11, 12 frames), and recovery
                animations. Adjusts frame rates and gun visibility based on current action.
            </summary>
        </member>
        <member name="M:BroBase.AnimateAirFlexing">
            <summary>
                Manages air flex animation sequence on sprite row 13. Creates flex effect during
                early frames, triggers air jump at frame 3, transitions to somersault at frame 4+.
                Variable frame timing for dramatic effect.
            </summary>
        </member>
        <member name="M:BroBase.AnimateFrozen">
            <summary>
                Overrides frozen animation with empty implementation. BroBase characters do not
                display frozen animations, maintaining normal appearance even when frozen status is
                applied.
            </summary>
        </member>
        <member name="M:BroBase.AnimateGesture">
            <summary>
                Animates gestures with special flex power effects. When flexing with appropriate
                powers, grants temporary invulnerability (0.25s) and creates golden light visual
                effects. Extends base gesture animation with gameplay benefits.
            </summary>
        </member>
        <member name="M:BroBase.AnimateGettingUpFromElbowSlam">
            <summary>
                Handles 4-frame recovery animation from elbow slam on row 15. Fixed 0.07 frame rate,
                deactivates gun during animation, calls cleanup when complete to restore normal
                movement state.
            </summary>
        </member>
        <member name="M:BroBase.FrontSomersault">
            <summary>
                Initiates front somersault animation state. Sets frontSomersaulting flag to trigger
                rolling animation in the animation system.
            </summary>
        </member>
        <member name="M:BroBase.IncreaseFrame">
            <summary>
                Advances animation frames with special counter for flex animations. Increments
                flexSpecialFrame when performing air flex, elbow slam, or recovery animations,
                maintaining separate timing for special moves.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:BroBase.hasNewAirFlexFrames">
            <summary>
                Indicates availability of enhanced animation frames for flex moves. Controls which
                sprite sequences are used. Affects elbow slam, air flex, and recovery animations.
                Animation quality flag.
            </summary>
        </member>
        <!-- Input & Control Methods -->
        <member name="M:BroBase.CheckInput">
            <summary>
                Processes gesture button input for teleport cancellation. Destroys remote teleport
                projectile when gesture button is pressed, allowing players to cancel teleport
                targeting.
            </summary>
        </member>
        <member name="M:BroBase.CheckWhetherShouldClearInput">
            <summary>
                Manages input restrictions during special animation states. Clears specific inputs
                during elbow slam (fire/highfive/special), recovery (movement unless other input
                detected), and air flexing (all except down when jumping).
            </summary>
        </member>
        <member name="M:BroBase.DestroyRemoteProjectile">
            <summary>
                Cleans up remote projectile with cooldown update. Calls base destruction logic and
                sets teleport cooldown timer to manage ability frequency.
            </summary>
        </member>
        <!-- Audio System Methods -->
        <member name="M:BroBase.PlayBackflipGruntSound">
            <summary>
                Plays a specific grunt sound for backflip maneuvers. Uses voice pack backflip grunt
                clips at a fixed volume of 0.12. Called during chimney flips and other acrobatic
                moves.
            </summary>
        </member>
        <member name="M:BroBase.PlayChimneyFlipSound(System.Single)">
            <summary>
                Plays sound during chimney flip/wall jump maneuvers. Combines a backflip grunt sound
                with the base dash sound effect for the complete audio experience.
            </summary>
            <param name="volume">Volume level for the dash sound component.</param>
        </member>
        <member name="M:BroBase.PlayClimbSound">
            <summary>
                Plays climbing sound with voice pack support and frequency-based volume reduction.
                Reduces volume to 66% if another climb sound was played within 1.5 seconds. Uses
                random volume variation (0.23-0.28) for variety.
            </summary>
        </member>
        <member name="M:BroBase.PlayDeathSound">
            <summary>
                Plays death sound when the bro dies. Uses voice pack death clips if available at 0.3
                volume, otherwise falls back to standard hit sounds. Provides character-specific
                death audio.
            </summary>
        </member>
        <member name="M:BroBase.PlayExitLadderSound">
            <summary>
                Plays sound when exiting a ladder. Simply delegates to the jump sound system to
                provide appropriate footstep audio.
            </summary>
        </member>
        <member name="M:BroBase.PlayFlexSound(System.Single)">
            <summary>
                Plays flexing sound during flex gestures. Cycles through an array of flex sounds
                using a static index to provide variety. Each bro can have multiple unique flex
                sounds that play in sequence.
            </summary>
            <param name="volumne">Volume level for the flex sound.</param>
        </member>
        <member name="M:BroBase.PlayJetpackSound(System.Single)">
            <summary>
                Plays jetpack sound effect. Initializes and manages the jetpack sound instance for
                continuous jetpack audio during flight.
            </summary>
            <param name="volumne">Volume level for the jetpack sound.</param>
        </member>
        <member name="M:BroBase.PlayJumpSound">
            <summary>
                Plays jump sound with voice pack support and frequency-based volume reduction.
                Reduces volume to 66% if another jump sound was played within 2.5 seconds to prevent
                audio spam. Always plays footstep sounds in addition to voice.
            </summary>
        </member>
        <member name="M:BroBase.PlayPushBlockSound">
            <summary>
                Plays grunt sound when pushing blocks with voice pack support. Reduces volume by 40%
                if called within 1.7 seconds of the last push sound to prevent audio spam during
                continuous pushing.
            </summary>
        </member>
        <member name="M:BroBase.PlayRollLandSound">
            <summary>
                Plays a landing grunt sound when the bro lands from a roll. Uses voice pack fall
                grunt clips with a 2-second cooldown to prevent spam. Volume varies randomly between
                0.1-0.12.
            </summary>
        </member>
        <member name="M:BroBase.PlayThrowHeavySound(System.Single)">
            <summary>
                Plays the heavy throwing sound (typically for throwing mooks) with voice pack
                support. Uses unique bro voice if available and not bypassed, otherwise plays
                standard throw sound.
            </summary>
            <param name="v">Volume multiplier for the sound playback.</param>
        </member>
        <member name="M:BroBase.PlayThrowLightSound(System.Single)">
            <summary>
                Plays the light throwing sound (typically for grenades) with voice pack support.
                Uses unique bro voice if available and not bypassed, otherwise plays standard throw
                sound.
            </summary>
            <param name="v">Volume multiplier for the sound playback.</param>
        </member>
        <member name="M:BroBase.PlayYeahSound(System.Single,System.Single,System.Boolean)">
            <summary>
                Plays celebration/victory sound with voice pack support. Uses character-specific
                "yeah" clips if available, otherwise falls back to standard power-up sounds.
            </summary>
            <param name="volumne">Base volume level for the sound.</param>
            <param name="pitch">Pitch modification for the sound.</param>
            <param name="bypassReverb">Whether to bypass reverb effects.</param>
        </member>
        <!-- Audio System Properties -->
        <member name="P:BroBase.BypassNewVoices">
            <summary>
                Gets whether new voice lines should be bypassed for this bro. Combines a static
                class-wide bypass flag with an instance-specific bypass flag.
            </summary>
            <returns>True if voices should be bypassed globally or for this specific bro; otherwise, false.</returns>
        </member>
        <member name="P:BroBase.SoundHolderVoice">
            <summary>
                Gets the voice sound holder for this bro, providing access to unique character voice
                lines. Virtual property allowing derived bros to provide different voice packs.
            </summary>
            <returns>The SoundHolderVoice instance for this bro.</returns>
        </member>
        <!-- Audio System Fields -->
        <member name="F:BroBase.byPassNewVoices">
            <summary>
                Global static flag to disable voice pack system for all bros. When true, forces all
                BroBase instances to use standard sound effects instead of character-specific voice
                packs. Combines with instance field in BypassNewVoices property.
            </summary>
        </member>
        <member name="F:BroBase.bypassNewVoicesOnThisBro">
            <summary>
                Instance-specific flag to disable voice pack for individual bro. Public field
                allowing per-character voice configuration. Combines with static byPassNewVoices in
                BypassNewVoices property for flexible audio control.
            </summary>
        </member>
        <member name="F:BroBase.flexSoundIndex">
            <summary>
                Shared static counter for cycling through flex sound variations. Incremented each
                time any bro plays flex sound, used with modulo to select from flex sound array.
                Ensures audio variety across all characters.
            </summary>
        </member>
        <member name="F:BroBase.lastClimbSoundTime">
            <summary>
                Tracks timestamp of last climbing sound for frequency-based volume control. Reduces
                climb sound volume to 66% if played within 1.5 seconds of previous climb sound,
                preventing audio fatigue during continuous climbing.
            </summary>
        </member>
        <member name="F:BroBase.lastJumpSoundTime">
            <summary>
                Tracks timestamp of last jump sound playback for volume management. Used to reduce
                volume to 66% if jumps occur within 2.5 seconds, preventing audio spam while
                maintaining variety in repeated jump vocalizations.
            </summary>
        </member>
        <member name="F:BroBase.lastLandSoundTime">
            <summary>
                Tracks timestamp of last roll landing sound to prevent audio spam. Prevents landing
                sounds from playing if less than 2 seconds have passed since last landing, managing
                fall grunt frequency.
            </summary>
        </member>
        <member name="F:BroBase.lastPushSoundTime">
            <summary>
                Tracks timestamp of last block pushing sound for volume management. Reduces push
                grunt volume by 40% if played within 1.7 seconds, preventing repetitive audio during
                continuous block pushing.
            </summary>
        </member>
        <member name="F:BroBase.soundHolderVoice">
            <summary>
                Stores reference to the voice sound collection component containing
                character-specific voice clips. Used throughout audio methods for jump grunts, climb
                sounds, death sounds, and other vocalizations. Accessed via SoundHolderVoice
                property.
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:BroBase.IsOverLadder(System.Single@)">
            <summary>
                Checks if the bro is positioned over a ladder for climbing. Prevents ladder
                interaction during elbow slam state to maintain downward attack momentum.
            </summary>
            <param name="ladderXPos">Output parameter for the ladder's X position if found.</param>
            <returns>True if over a ladder and not elbow slamming; otherwise, false.</returns>
        </member>
        <member name="M:BroBase.IsOverLadder(System.Single,System.Single@)">
            <summary>
                Checks if the bro is over a ladder with horizontal offset consideration. Prevents
                ladder grabbing during elbow slam attacks to ensure attack completion.
            </summary>
            <param name="xOffset">Horizontal offset from bro position to check.</param>
            <param name="ladderXPos">Output parameter for the ladder's X position if found.</param>
            <returns>True if over a ladder at offset and not elbow slamming; otherwise, false.</returns>
        </member>
        <member name="M:BroBase.ReachedCheckPoint">
            <summary>
                Called when the bro reaches a checkpoint. Performs base checkpoint behavior and
                attempts to spawn a companion drone.
            </summary>
        </member>
        <member name="M:BroBase.SpawnDrone">
            <summary>
                Spawns a networked drone companion at the player's position. Creates drone 3 units
                above player, stores reference in currentDrone field for tracking. Virtual method
                allowing custom drone types in derived bros.
            </summary>
        </member>
        <member name="M:BroBase.TrySpawnDrone">
            <summary>
                Attempts to spawn a companion drone for the bro. Only spawns if no current drone
                exists. Sets tracking flag after spawning.
            </summary>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:BroBase.currentDrone">
            <summary>
                Reference to active drone companion. Spawned when player has Drones modifier.
                Checked for null/alive status before spawning new drone. Persistent AI companion.
            </summary>
        </member>
        <member name="F:BroBase.droneCounter">
            <summary>
                Unused timer initialized to 1.0 for drone system. Currently has no active
                functionality. Placeholder for potential future drone mechanics.
            </summary>
        </member>
        <member name="F:BroBase.hasHadDrone">
            <summary>
                Tracks if drone has been spawned this session. Triggers initial drone spawn attempt
                when false. Set true after first successful spawn. One-time spawn flag.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:BroBase.AirFlexJump">
            <summary>
                Executes flex-powered air jump with dynamic velocity scaling. Time-gated at 0.1s
                intervals, calculates jump boost between 0.5x-1.8x based on current velocity.
                Creates land effect and consumes flex jump charge.
            </summary>
        </member>
        <member name="M:BroBase.CreateJetpackFlames(UnityEngine.Vector3)">
            <summary>
                Creates vertical jetpack flame particles for upward thrust visualization. Generates
                dual plume effects positioned at ±2.5 units horizontally, with -70 downward velocity
                creating realistic exhaust. Particles last 0.4 seconds with 1.3x fade rate.
            </summary>
            <param name="currentJetpackDirection">Direction vector for jetpack thrust orientation.</param>
        </member>
        <member name="M:BroBase.CreateJetpackFlamesDash(UnityEngine.Vector3@)">
            <summary>
                Creates continuous flame trail during jetpack dash movements. Calculates path
                between positions, generates particles at 2 unit intervals up to 50 units maximum.
                Updates reference position for smooth trail continuity across frames.
            </summary>
            <param name="lastFlamePos">Reference to last flame position for trail calculation.</param>
        </member>
        <member name="M:BroBase.CreateJetpackFlamesHorizontal(UnityEngine.Vector3)">
            <summary>
                Creates horizontal jetpack flame particles for lateral movement. Similar to vertical
                flames but with -10 downward velocity for wider spread pattern. Provides visual
                feedback for horizontal jetpack maneuvers.
            </summary>
            <param name="currentJetpackDirection">Direction vector for jetpack thrust orientation.</param>
        </member>
        <member name="M:BroBase.CreateSweatParticle">
            <summary>
                Creates visual sweat particle effects near the bro. Generates water drip particles
                with random position offset within a unit circle, adjusted for ducking state.
                Particles inherit some of the bro's velocity for realistic movement.
            </summary>
        </member>
        <member name="M:BroBase.MustSync">
            <summary>
                Indicates whether this character requires network synchronization. Virtual method
                always returning true for BroBase, ensuring all player characters are synchronized
                in multiplayer.
            </summary>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:BroBase.SetupThrownMookVelocity(System.Single@,System.Single@)">
            <summary>
                Configures the throwing velocity for captured mooks. Uses stronger throw velocity
                (360 horizontal, 120 vertical) when performance enhanced, otherwise uses standard
                velocity (210 horizontal, 120 vertical). Adds portion of current velocity to throw.
            </summary>
            <param name="XI">Output horizontal velocity for the thrown mook.</param>
            <param name="YI">Output vertical velocity for the thrown mook.</param>
        </member>
        <member name="M:BroBase.StartElbowSlam">
            <summary>
                Initiates elbow slam attack sequence with physics modifications. Disables wall
                climbing, sets animation timing (0.066f), adjusts downward velocity (minimum 210),
                and plays flex sound. Prepares for ground pound attack.
            </summary>
        </member>
        <member name="M:BroBase.StartTeleportFlexing">
            <summary>
                Initiates teleport targeting with 0.2s cooldown check. Spawns RemoteTeleportTarget
                projectile for position marking if no existing projectile and cooldown expired.
                Activates bro and manages projectile reference.
            </summary>
        </member>
        <member name="M:BroBase.TryCreateFlexEffect">
            <summary>
                Creates visual effects for flex powers when not already active. Spawns golden light
                effect for FlexGoldenLight power or invulnerability effect for FlexInvulnerability
                power. Prevents duplicate effects by checking flexEffect null state.
            </summary>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:BroBase.jetPackActive">
            <summary>
                Active state flag for jetpack thrust effect. When true, provides upward velocity and
                creates flame particles. Controlled by jetPackTime duration and manages thrust
                physics.
            </summary>
        </member>
        <member name="F:BroBase.jetPackAvailable">
            <summary>
                One-time use flag for jetpack power-up availability. Set false when consumed via
                UseJetpack. Reset on landing. Gates access to jetpack ability.
            </summary>
        </member>
        <member name="F:BroBase.jetPackFlameCounter">
            <summary>
                Timer for jetpack flame particle spawning. Triggers effects every 0.0225 seconds.
                Active during jetpack use and JetpackPunch attacks. Visual effect timing control.
            </summary>
        </member>
        <member name="F:BroBase.jetPackSprite">
            <summary>
                Visual sprite component for jetpack equipment display. Activated when jetpack is
                used, deactivated when jetPackTime expires. Provides visual feedback for jetpack
                power-up state.
            </summary>
        </member>
        <member name="F:BroBase.jetPackTime">
            <summary>
                Active jetpack thrust duration timer. Set to 0.66 seconds on activation. Different
                thrust levels: extra boost above 0.36s, normal boost above 0.16s. Controls jetpack
                physics phases.
            </summary>
        </member>
        <member name="F:BroBase.bros">
            <summary>
                Static registry of all active BroBase instances in the game. Automatically managed
                through Awake/OnDestroy lifecycle. Used by Map.GetNearestHero and other systems for
                hero detection, targeting, and proximity checks. Essential for multiplayer hero
                tracking and AI target acquisition.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:BroforceObject.SetPosition(UnityEngine.Vector3)">
            <summary>
                Sets the object's world position to the specified coordinates while preserving the
                current Z position. Updates the internal X and Y fields to match the new transform
                position.
            </summary>
            <param name="pos">The new position vector (only X and Y components are used, Z is preserved from current transform)</param>
        </member>
        <member name="M:BroforceObject.SetSpeed(System.Single,System.Single)">
            <summary>
                Virtual method for setting the object's velocity. Base implementation is empty -
                derived classes should override to implement velocity changes.
            </summary>
            <param name="xi">The horizontal velocity component</param>
            <param name="yi">The vertical velocity component</param>
        </member>
        <member name="M:BroforceObject.SetXY(System.Single,System.Single)">
            <summary>
                Updates the internal X and Y coordinate fields directly without modifying the
                transform position. This method only updates the backing fields for the X and Y
                properties.
            </summary>
            <param name="x">The new X coordinate value to store</param>
            <param name="y">The new Y coordinate value to store</param>
        </member>
        <member name="M:BroforceObject.SetXY(UnityEngine.Transform)">
            <summary>
                Convenience method that extracts the X and Y position from a transform and calls
                SetXY(float, float) to update the internal coordinate fields.
            </summary>
            <param name="t">The transform whose position will be used to set the X and Y coordinates</param>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:BroforceObject.X">
            <summary>
                Gets or sets the object's X position coordinate. This property provides access to
                the private x field which stores the horizontal position.
            </summary>
        </member>
        <member name="P:BroforceObject.Y">
            <summary>
                Gets or sets the object's Y position coordinate. This property provides access to
                the private y field which stores the vertical position.
            </summary>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:BroforceObject.x">
            <summary>
                Private backing field that stores the object's X coordinate position. Serialized for
                persistence and accessed through the X property.
            </summary>
        </member>
        <member name="F:BroforceObject.xI">
            <summary>
                The object's horizontal velocity component. Used for physics calculations and
                movement updates in derived classes.
            </summary>
        </member>
        <member name="F:BroforceObject.y">
            <summary>
                Private backing field that stores the object's Y coordinate position. Serialized for
                persistence and accessed through the Y property.
            </summary>
        </member>
        <member name="F:BroforceObject.yI">
            <summary>
                The object's vertical velocity component. Used for physics calculations and movement
                updates in derived classes.
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:BroforceObject.AttachMe(UnityEngine.Transform)">
            <summary>
                Attaches another GameObject to this object by adding it to the otherAttachments
                list. Used by the attachment system to track objects that are connected to this one.
            </summary>
            <param name="t">The transform of the GameObject to attach</param>
        </member>
        <member name="M:BroforceObject.CrumbleBridge(System.Single)">
            <summary>
                Virtual method that triggers a bridge crumbling event. The base implementation only
                invokes the OnCrumbleBridge event if handlers are subscribed. Derived classes can
                override to add specific crumbling behavior.
            </summary>
            <param name="chance">The probability or intensity of the crumbling effect (unused in base implementation)</param>
        </member>
        <member name="M:BroforceObject.Disturb">
            <summary>
                Triggers a disturbance event on this object. If the object has a chain anchor, it
                collapses the chain. Then invokes the OnDisturb event if any handlers are
                subscribed. Can be called via RPC for network synchronization.
            </summary>
        </member>
        <member name="M:BroforceObject.HideOtherAttachments">
            <summary>
                Hides all attached objects by sending them a "Collapse" message and deactivating
                their GameObjects. Iterates through the otherAttachments list and processes each
                non-null attachment.
            </summary>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:BroforceObject.chainAnchor">
            <summary>
                Reference to a ChainAnchor component that can connect this object to chains or
                ropes. When the object is disturbed, the chain anchor will collapse if present.
            </summary>
        </member>
        <member name="F:BroforceObject.collapsed">
            <summary>
                Flag indicating whether this object has collapsed or fallen. Used by environmental
                systems to track the state of destructible or physics-enabled objects.
            </summary>
        </member>
        <member name="F:BroforceObject.otherAttachments">
            <summary>
                List of GameObjects that are attached to this object. Used by the attachment system
                to track and manage connected objects. Initialized as an empty list.
            </summary>
        </member>
        <!-- Character State & Effects Methods -->
        <member name="M:BroforceObject.ForgetPlayer(System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Virtual method called when a player should be forgotten by this object. Base
                implementation is empty - derived classes override to implement AI behavior changes
                when players die or disconnect.
            </summary>
            <param name="playerNum">The player number (0-3) that should be forgotten</param>
            <param name="confuseMooks">If true, mooks should become confused instead of simply forgetting the player</param>
            <param name="amuseMooks">If true, mooks should laugh at the dead player instead of forgetting them</param>
        </member>
        <member name="M:BroforceObject.GetHealthPercentage">
            <summary>
                Calculates the object's health as a percentage of its maximum health. Returns a
                value between 0 and 1, clamped to prevent invalid percentages.
            </summary>
            <returns>The health percentage as a float between 0.0 (dead) and 1.0 (full health)</returns>
        </member>
        <member name="M:BroforceObject.IsAlive">
            <summary>
                Checks if the object is still alive based on its health value. Returns true if
                health is greater than 0, false otherwise.
            </summary>
            <returns>True if the object has health remaining (health &gt; 0), false if dead or destroyed</returns>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:BroforceObject.destroyed">
            <summary>
                Flag indicating whether this object has been destroyed. Used to prevent multiple
                destruction calls and to track object lifecycle state.
            </summary>
        </member>
        <member name="F:BroforceObject.health">
            <summary>
                The object's current health points. Defaults to 3. When health reaches 0 or below,
                the object is considered dead as determined by IsAlive().
            </summary>
        </member>
        <member name="F:BroforceObject.maxHealth">
            <summary>
                The object's maximum health capacity used for calculating health percentage.
                Defaults to -1, which should be set by derived classes to an appropriate value.
            </summary>
        </member>
        <member name="F:BroforceObject.protectedFromDestruction">
            <summary>
                When true, prevents this object from being destroyed by normal damage or destruction
                calls. Used for invincible objects or during special game states.
            </summary>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:BroforceObject.predabroTarget">
            <summary>
                Reference to a PredabroTarget component used by the Predabro enemy type for
                targeting logic. Hidden in inspector as it's managed programmatically.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:CameraController.Awake">
            <summary>
                Unity Awake lifecycle method that initializes the singleton instance and configures
                post-processing effects based on quality settings. Sets up the global instance
                reference and disables performance-intensive effects (displacement and distortion)
                when ScreenPostFXLevel is less than 1.
            </summary>
        </member>
        <member name="M:CameraController.Update">
            <summary>
                Unity Update lifecycle method that maintains camera synchronization. Ensures all
                cameras maintain matching aspect ratios and orthographic sizes with the main camera.
                The sky camera receives special handling, with its size interpolated based on the
                SamRaimiEffectM value to create dynamic atmospheric effects.
            </summary>
        </member>
        <!-- Camera Management Properties -->
        <member name="P:CameraController.MainCam">
            <summary>
                Gets the main camera used for rendering. This property provides static access to
                either the instance's mainCamera if available, or falls back to Camera.main with
                frame-based caching for performance optimization. The caching mechanism prevents
                repeated Camera.main lookups within the same frame.
            </summary>
        </member>
        <!-- Camera Management Fields -->
        <member name="F:CameraController.backgroundCamera">
            <summary>
                Camera dedicated to rendering background elements. Part of the multi-camera layered
                rendering system that allows separate control over background visuals.
            </summary>
        </member>
        <member name="F:CameraController.displacementCamera">
            <summary>
                Camera used for displacement mapping effects. Works in conjunction with
                displacementScript to create visual distortion effects. Disabled when
                ScreenPostFXLevel is less than 1.
            </summary>
        </member>
        <member name="F:CameraController.distortionCamera">
            <summary>
                Camera for rendering distortion effects. Part of the post-processing pipeline and is
                disabled when ScreenPostFXLevel is less than 1 to improve performance on lower-end
                systems.
            </summary>
        </member>
        <member name="F:CameraController.effectsamera">
            <summary>
                Camera dedicated to rendering special effects. Note the typo in the field name
                (effectsamera instead of effectsCamera) is preserved from the original code.
            </summary>
        </member>
        <member name="F:CameraController.foliageCamera">
            <summary>
                Camera responsible for rendering foliage and plant elements. This separate camera
                allows for specialized rendering of vegetation with different settings or effects.
            </summary>
        </member>
        <member name="F:CameraController.groundCamera">
            <summary>
                Camera for rendering ground and terrain elements. Part of the layered rendering
                system that separates terrain from other visual elements.
            </summary>
        </member>
        <member name="F:CameraController.instance">
            <summary>
                Singleton instance of the CameraController. Set during Awake() to provide global
                access to the camera management system. This allows other systems to access camera
                functionality without needing direct references.
            </summary>
        </member>
        <member name="F:CameraController.lightingCamera">
            <summary>
                Camera used for rendering lighting effects. This dedicated camera enables special
                lighting passes and effects to be composited into the final image.
            </summary>
        </member>
        <member name="F:CameraController.mainCamera">
            <summary>
                Reference to the main rendering camera. This is the primary camera that renders the
                main game view and serves as the reference for synchronizing orthographic sizes
                across all other cameras in the system.
            </summary>
        </member>
        <member name="F:CameraController.skyCamera">
            <summary>
                Camera for rendering sky and atmospheric elements. Its orthographic size is
                specially adjusted based on the SamRaimiEffectM value to create dynamic sky effects.
            </summary>
        </member>
        <member name="F:CameraController.uiCamera">
            <summary>
                Camera dedicated to rendering UI elements. This separation ensures UI renders on top
                of game elements and isn't affected by game camera effects.
            </summary>
        </member>
        <member name="F:CameraController.uiGameplayCamera">
            <summary>
                Camera for rendering gameplay-related UI elements. Separate from the main UI camera
                to allow different rendering settings for in-game UI versus menu UI.
            </summary>
        </member>
        <member name="F:CameraController.waterCamera">
            <summary>
                Camera specifically for rendering water effects and surfaces. Allows specialized
                water rendering techniques to be applied separately from other elements.
            </summary>
        </member>
        <!-- Camera Configuration Properties -->
        <member name="P:CameraController.DefaultHalfWidth">
            <summary>
                Gets the default half-width value used for calculating the default orthographic
                size. This constant value (227f) represents half the horizontal view width in world
                units.
            </summary>
        </member>
        <member name="P:CameraController.DefaultOrthographicSize">
            <summary>
                Gets the default orthographic size calculated from the default half-width and
                current screen aspect ratio. This provides a consistent base size regardless of
                screen resolution.
            </summary>
        </member>
        <member name="P:CameraController.OrthographicSize">
            <summary>
                Gets or sets the orthographic size for all cameras in the system. When set,
                synchronizes the orthographic size across all 11 cameras (with special handling for
                skyCamera based on SamRaimiEffectM). This ensures all visual layers maintain
                consistent scale.
            </summary>
        </member>
        <!-- Visual Effects Properties -->
        <member name="P:CameraController.SamRaimiEffectM">
            <summary>
                Gets or sets the interpolation factor for the "Sam Raimi effect" (named after the
                filmmaker known for dynamic camera work). This value (0-1) controls special sky
                camera behavior, with the sky camera's orthographic size interpolating between 128f
                and the main camera's size based on this factor.
            </summary>
        </member>
        <member name="P:CameraController.ScreenPostFXLevel">
            <summary>
                Gets or sets the post-processing effects quality level. This value is stored in
                PlayerOptions and determines which visual effects are enabled. Values less than 1
                disable displacement and distortion effects for performance.
            </summary>
        </member>
        <!-- Visual Effects Fields -->
        <member name="F:CameraController.displacementScript">
            <summary>
                Reference to the DisplacementCamera component that handles displacement mapping
                effects. This script is disabled when ScreenPostFXLevel is less than 1 during
                initialization for performance optimization.
            </summary>
        </member>
        <member name="F:CameraController.imageDistortionScript">
            <summary>
                Reference to the ImageRefractionEffect component that creates image
                distortion/refraction effects. Disabled when ScreenPostFXLevel is less than 1 to
                improve performance on lower-end systems.
            </summary>
        </member>
        <member name="F:CameraController.samRaimiEffectM">
            <summary>
                Private static backing field for the SamRaimiEffectM property. Stores the
                interpolation value (0-1) used to create dynamic sky camera effects inspired by Sam
                Raimi's cinematography style.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:CameraController.GetCamerasForGIF">
            <summary>
                Creates a list containing only the background camera for GIF capture purposes. This
                method is used by the GIF recording system to capture simplified footage, focusing
                only on the background layer rather than the full multi-camera composite.
            </summary>
            <returns>A new List containing only the backgroundCamera reference.</returns>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:CameraController.CurCameraMain">
            <summary>
                Cached reference to Camera.main used by the MainCam property. This caching mechanism
                works with cachedFrame to avoid the performance cost of repeatedly accessing
                Camera.main within a single frame, only updating when the frame count changes.
            </summary>
        </member>
        <member name="F:CameraController.cachedFrame">
            <summary>
                Stores the frame number when Camera.main was last cached. Used in the MainCam
                property getter to optimize performance by preventing repeated Camera.main lookups
                within the same frame. Initialized to -1 to ensure the first access triggers a cache
                update.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:CheckPoint.Awake">
            <summary>
                Registers this checkpoint with the Map system and initializes position coordinates.
                Called when the checkpoint GameObject is first created.
            </summary>
        </member>
        <member name="M:CheckPoint.OnDestroy">
            <summary>
                Removes the steel replacement flag from ground blocks below and adjacent to the
                checkpoint position. This reverses the ground reinforcement applied during setup,
                using raycasts to find the affected blocks.
            </summary>
        </member>
        <member name="M:CheckPoint.Start">
            <summary>
                Hides the flag GameObject initially and disables the flag renderer for invisible
                checkpoints. Called after Awake on the first frame when the checkpoint becomes
                active.
            </summary>
        </member>
        <member name="M:CheckPoint.Update">
            <summary>
                Handles one-time setup when not in edit mode, reinforces nearby ground blocks,
                detects blocking units, and manages the deactivation delay timer. For non-invisible
                checkpoints, this method raycast-checks blocks directly below the checkpoint and its
                adjacent positions, marking them to be replaced with steel blocks if they collapse
                (excluding cage and sandbag blocks).
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:CheckPoint.isSetup">
            <summary>
                Tracks whether the one-time setup in Update() has been completed. Prevents repeated
                setup operations and ground reinforcement checks after initial configuration.
            </summary>
        </member>
        <!-- Checkpoint Activation & State Methods -->
        <member name="M:CheckPoint.ActivateInternal">
            <summary>
                Activates the checkpoint, raising the flag, playing sound effects, setting it as the
                current spawn point, and triggering end-level sequences for final checkpoints.
                Notifies statistics controller of checkpoint capture and handles special behavior
                for Hell theme levels (portal) vs normal levels (helicopter).
            </summary>
        </member>
        <member name="M:CheckPoint.DelayDeactivate(System.Single)">
            <summary>
                Sets a timer to automatically deactivate the checkpoint after the specified delay.
                Used for temporary checkpoint states or special game modes.
            </summary>
            <param name="time">Time in seconds before the checkpoint deactivates</param>
        </member>
        <member name="M:CheckPoint.IsBlockedByUnit">
            <summary>
                Checks if an evil unit is preventing checkpoint activation by being alive and within
                96 units distance. Final checkpoints detect blocking units during setup to determine
                end-level trigger behavior.
            </summary>
            <returns>True if a living evil unit is within blocking range, false otherwise</returns>
        </member>
        <member name="M:CheckPoint.ReactivateInternal">
            <summary>
                Sets this checkpoint as the current spawn point without triggering activation
                effects. Used to restore checkpoint state when loading saved games or synchronizing
                multiplayer state.
            </summary>
        </member>
        <!-- Checkpoint Activation & State Fields -->
        <member name="F:CheckPoint.activated">
            <summary>
                Current activation state of the checkpoint. When true, the flag is raised and this
                serves as a valid spawn point. Synchronized across network for multiplayer games.
            </summary>
        </member>
        <member name="F:CheckPoint.blockingUnit">
            <summary>
                Reference to the nearest evil unit found during setup. Used to determine if
                checkpoint activation should be blocked and whether this is a final checkpoint that
                triggers level completion.
            </summary>
        </member>
        <member name="F:CheckPoint.deactivateDelay">
            <summary>
                Countdown timer in seconds for automatic deactivation. When greater than zero,
                decrements each frame and deactivates the checkpoint when reaching zero.
            </summary>
        </member>
        <member name="F:CheckPoint.flag">
            <summary>
                Reference to the FlagFlap component that handles the visual flag raising animation.
                The flag GameObject is initially inactive and shown when the checkpoint activates.
            </summary>
        </member>
        <member name="F:CheckPoint.isFinal">
            <summary>
                Marks this as the level's final checkpoint. When activated, triggers level
                completion sequence (helicopter extraction or hell portal depending on theme). Set
                during setup if evil units are nearby.
            </summary>
        </member>
        <!-- Configuration & Properties Fields -->
        <member name="F:CheckPoint.airDropCheckPoint">
            <summary>
                Determines if players respawn via airdrop parachute animation when spawning at this
                checkpoint. Map system checks this flag when determining spawn method for revived
                players.
            </summary>
        </member>
        <member name="F:CheckPoint.airDropExtraHeight">
            <summary>
                Additional height offset in units added to airdrop spawn position when
                airDropCheckPoint is true. Default value of 128 units provides clearance for
                parachute deployment animation.
            </summary>
        </member>
        <member name="F:CheckPoint.checkPointID">
            <summary>
                Unique identifier assigned by Map.RegisterCheckPoint() based on registration order.
                Used to track which checkpoint is currently active and for save/load functionality.
                Default value of -1 indicates unregistered.
            </summary>
        </member>
        <member name="F:CheckPoint.invisibleCheckPoint">
            <summary>
                When true, all renderers are disabled making the checkpoint completely invisible to
                players. Invisible checkpoints skip ground reinforcement and blocking unit detection
                during setup.
            </summary>
        </member>
        <!-- Audio System Fields -->
        <member name="F:CheckPoint.flagRaiseAudioClip">
            <summary>
                Custom audio clip played when the checkpoint activates and raises its flag. If null,
                no additional sound is played beyond the standard spatial sound component.
            </summary>
        </member>
        <member name="F:CheckPoint.yeahVolume">
            <summary>
                Volume level for celebration sound effects. Default 0.5f provides balanced audio.
                Currently unused in the implementation but available for modders to implement custom
                sounds.
            </summary>
        </member>
        <!-- Networking & State Synchronization Methods -->
        <member name="M:CheckPoint.PackState(UnityStream)">
            <summary>
                Serializes the checkpoint's activation state for network synchronization. Only the
                activated boolean is transmitted to keep bandwidth usage minimal.
            </summary>
            <param name="stream">Stream to write the serialized state data</param>
            <returns>The stream after serialization for method chaining</returns>
        </member>
        <member name="M:CheckPoint.UnpackState(UnityStream)">
            <summary>
                Deserializes checkpoint state from network data, restoring activation status and
                triggering visual updates. For activated final checkpoints, also restores the
                helicopter/portal state.
            </summary>
            <param name="stream">Stream containing the serialized state data</param>
            <returns>The stream after deserialization for method chaining</returns>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:CutsceneController.Awake">
            <summary>
                Initializes the CutsceneController singleton instance and subscribes to scene change
                events
            </summary>
        </member>
        <member name="M:CutsceneController.OnDestroy">
            <summary>
                Cleans up the singleton instance and unsubscribes from scene change events
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:CutsceneController.letterBoxCamera">
            <summary>
                Camera used for letterbox effect during cutscenes
            </summary>
        </member>
        <!-- Cutscene Management Methods -->
        <member name="M:CutsceneController.CloseAllCutscenes">
            <summary>
                Ends all active cutscenes including both bro and boss intro roots
            </summary>
        </member>
        <member name="M:CutsceneController.LoadCutScene(CutsceneName,System.Single)">
            <summary>
                Loads and plays a cutscene with an optional delay. Handles pausing and special cases
                like offline mode
            </summary>
            <param name="name">The cutscene to load</param>
            <param name="delay">Time in seconds to wait before starting the cutscene</param>
        </member>
        <member name="M:CutsceneController.LoadCutSceneRoutine(CutsceneName,System.Single)">
            <summary>
                Coroutine that handles the actual cutscene loading process, including intro roots
                and scene loading
            </summary>
            <param name="cutsceneName">The cutscene to load</param>
            <param name="delay">Time in seconds to wait before starting</param>
            <returns>IEnumerator for coroutine execution</returns>
        </member>
        <member name="M:CutsceneController.SceneChange(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
            <summary>
                Handles scene change events by closing any active cutscenes
            </summary>
            <param name="oldScene">The scene being unloaded</param>
            <param name="newScene">The newly loaded scene</param>
        </member>
        <!-- Cutscene Management Properties -->
        <member name="P:CutsceneController.InCutscene">
            <summary>
                Gets whether a cutscene is currently in progress
            </summary>
        </member>
        <!-- Cutscene Management Fields -->
        <member name="F:CutsceneController.bossIntroRoot">
            <summary>
                Root object for managing boss intro cutscenes
            </summary>
        </member>
        <member name="F:CutsceneController.broIntroRoot">
            <summary>
                Root object for managing bro character intro cutscenes
            </summary>
        </member>
        <member name="F:CutsceneController.cutSceneInProgress">
            <summary>
                Static flag indicating whether any cutscene is currently playing
            </summary>
        </member>
        <!-- Boss Cutscenes Methods -->
        <member name="M:CutsceneController.InstantiateSatanHeliCutScene">
            <summary>
                Creates and positions the Satan helicopter cutscene relative to Satan's position
            </summary>
        </member>
        <member name="M:CutsceneController.RevealAlienBoss">
            <summary>
                Creates and displays the alien boss reveal cutscene UI element on the UI camera
            </summary>
        </member>
        <!-- Boss Cutscenes Fields -->
        <member name="F:CutsceneController.revealScene">
            <summary>
                Prefab reference for the alien boss reveal cutscene
            </summary>
        </member>
        <member name="F:CutsceneController.satanHeliCutscene">
            <summary>
                Prefab reference for the Satan helicopter cutscene
            </summary>
        </member>
        <!-- Player Control Methods -->
        <member name="M:CutsceneController.HoldPlayersStill(System.Boolean)">
            <summary>
                Controls whether players can move during cutscenes
            </summary>
            <param name="hold">True to prevent player movement, false to allow it</param>
        </member>
        <member name="M:CutsceneController.PlayersCanMove">
            <summary>
                Checks if players are allowed to move (not held still by a cutscene)
            </summary>
            <returns>True if players can move, false if they're being held still</returns>
        </member>
        <!-- Player Control Fields -->
        <member name="F:CutsceneController.holdPlayersStill">
            <summary>
                Static flag controlling whether players are prevented from moving
            </summary>
        </member>
        <!-- Cutscene Types & Mapping Methods -->
        <member name="M:CutsceneController.GetCustsceneSceneName(CutsceneName)">
            <summary>
                Maps a CutsceneName enum value to its corresponding Unity scene name. Handles
                special cases like hard mode variations
            </summary>
            <param name="cutscene">The cutscene enum value to map</param>
            <returns>The Unity scene name for the cutscene, or empty string if not found</returns>
        </member>
        <!-- Singleton Pattern Methods -->
        <member name="M:CutsceneController.GetPosition">
            <summary>
                Gets the world position of the CutsceneController instance
            </summary>
            <returns>The transform position of the controller</returns>
        </member>
        <member name="M:CutsceneController.HasInstance">
            <summary>
                Checks if a CutsceneController instance exists
            </summary>
            <returns>True if an instance exists, false otherwise</returns>
        </member>
        <!-- Singleton Pattern Properties -->
        <member name="P:CutsceneController.Instance">
            <summary>
                Gets the singleton instance of the CutsceneController
            </summary>
        </member>
        <!-- Singleton Pattern Fields -->
        <member name="F:CutsceneController.instance">
            <summary>
                Protected static reference to the singleton instance
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:Doodad.Awake">
            <summary>
                Initializes the doodad's rotation based on configuration settings. If rotate90 is
                enabled, rotates the doodad 90 degrees. If flipToClosestSurface is enabled, performs
                raycasts to find the nearest surface and orients the doodad towards it, checking
                both downward and upward directions to ensure proper surface attachment.
            </summary>
        </member>
        <member name="M:Doodad.FlipXRandom">
            <summary>
                Applies alternating horizontal flipping to doodads for visual variety. Uses a static
                counter to ensure each doodad flips differently, creating a pattern where every
                other doodad is flipped horizontally.
            </summary>
        </member>
        <member name="M:Doodad.OnDestroy">
            <summary>
                Cleanup method called when the doodad is destroyed. When in edit mode, recursively
                destroys all connected doodads to ensure proper cleanup of multi-part doodad
                structures. Calls base class OnDestroy for standard cleanup.
            </summary>
        </member>
        <member name="M:Doodad.SetupFirstFrame">
            <summary>
                Called on the first Update frame to perform additional setup that requires the game
                to be running. Primarily handles terrain attachment by calling AttachDoodadToGround
                if attatchToTerrain is enabled.
            </summary>
        </member>
        <member name="M:Doodad.Start">
            <summary>
                Performs initial setup including unparenting from other doodads, setting map grid
                position, initializing sprite offsets, registering with various Map systems
                (destroyable doodads, decal system, grass/blood effects), and applying random X
                flipping if configured. Also stores initial position and sets up health values.
            </summary>
        </member>
        <member name="M:Doodad.Update">
            <summary>
                Updates the doodad state each frame. Handles delayed collapse timing by counting
                down collapseDelay and triggering Collapse when it reaches zero. On the first frame
                after Start, calls SetupFirstFrame to perform additional initialization.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:Doodad.firstFrame">
            <summary>
                Tracks whether the first frame setup has been completed. Used to delay
                initialization tasks like terrain attachment until after Start() has finished and
                the game is not in edit mode. Reset to false after SetupFirstFrame() is called.
            </summary>
        </member>
        <member name="F:Doodad.flipCount">
            <summary>
                Static counter used with flipXRandom to determine flip state. Incremented for each
                doodad that uses flipXRandom, with even values resulting in normal orientation and
                odd values resulting in X-axis mirroring.
            </summary>
        </member>
        <member name="F:Doodad.flipToClosestSurface">
            <summary>
                Automatically orients the doodad to the nearest surface during Awake. Performs
                raycasts downward and if no ground is found within 16 units, flips 180 degrees and
                tries again, ensuring the doodad points toward solid terrain.
            </summary>
        </member>
        <member name="F:Doodad.flipXRandom">
            <summary>
                Randomly flips the doodad horizontally during Start initialization. Uses a static
                counter to alternate between normal and flipped states, providing visual variety by
                mirroring every other instance along the X-axis.
            </summary>
        </member>
        <member name="F:Doodad.initialXY">
            <summary>
                Stores the doodad's starting position set during Start initialization. Preserves the
                original X and Y coordinates before any movement or physics updates, useful for
                reset functionality or position-based calculations.
            </summary>
        </member>
        <member name="F:Doodad.rotate90">
            <summary>
                When enabled, rotates the doodad 90 degrees clockwise around the Z-axis during
                Awake. Applied before any flipToClosestSurface calculations, useful for objects that
                need to be oriented differently from their default rotation.
            </summary>
        </member>
        <member name="F:Doodad.unparentSelf">
            <summary>
                Detaches this doodad from its parent during Start while maintaining connections.
                When the parent is also a Doodad, adds both to each other's otherConnectedDoodads
                lists before reparenting to the grandparent, preserving logical relationships while
                changing hierarchy.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:Doodad.Collapse">
            <summary>
                Triggers the collapse/destruction sequence for this doodad. Marks as collapsed,
                notifies connected systems, triggers chain anchor collapse if present, drops gibs,
                deactivates if configured, removes from map registries, propagates collapse to
                connected doodads with delay, forces attached block collapse if configured, and arms
                any attached tortured villagers. Synchronized across network.
            </summary>
        </member>
        <member name="M:Doodad.CollapseDelayed(System.Single)">
            <summary>
                Schedules this doodad to collapse after a specified delay. Sets the internal
                collapseDelay timer which is counted down in Update until collapse is triggered.
                Used for chain reaction collapses between connected doodads.
            </summary>
            <param name="delay">Time in seconds before the collapse occurs</param>
        </member>
        <member name="M:Doodad.Damage(DamageObject)">
            <summary>
                Virtual method for applying damage to the doodad. Base implementation always returns
                false, indicating damage was not processed. Derived classes should override to
                implement specific damage behavior.
            </summary>
            <param name="damageObject">The damage information including force and damage amount</param>
            <returns>Always returns false in base implementation</returns>
        </member>
        <member name="M:Doodad.DamageEffects(System.Single,System.Single)">
            <summary>
                Creates visual and audio effects when the doodad takes damage. Plays defend sounds
                if available and creates leaf burst effects for tree/bush type doodads. The leaf
                effects are influenced by the damage force parameters to create directional particle
                movement.
            </summary>
            <param name="xForce">Horizontal force component from the damage source</param>
            <param name="yForce">Vertical force component from the damage source</param>
        </member>
        <member name="M:Doodad.DamageOptional(DamageObject,System.Boolean@)">
            <summary>
                Handles damage application with visual state changes based on health thresholds.
                Applies damage if sufficient time has passed since last damage, updates material to
                show damage states (normal damage at &gt;50% health, greater damage at &lt;=50%),
                triggers death when health depleted, and provides damage effects feedback. The ref
                parameter indicates whether bullet hit effects should be shown.
            </summary>
            <param name="damageObject">The damage information including force and damage amount</param>
            <param name="showBulletHit">Output parameter set to true when visual damage feedback should be shown</param>
            <returns>True if the doodad was destroyed by this damage</returns>
        </member>
        <member name="M:Doodad.Death">
            <summary>
                Handles the complete destruction of the doodad. If skeleton material is available,
                changes to skeleton appearance and removes from destroyable list. Otherwise triggers
                collapse and optionally kills attached gibs based on alwaysDropGibs setting. Plays
                death sounds and creates final visual effects for trees/bushes. Registers with death
                tracking system.
            </summary>
        </member>
        <member name="M:Doodad.DropGibs">
            <summary>
                Spawns gib particles and debris when the doodad is destroyed. Activates
                pre-configured gib objects, creates dynamic gibs from gibHolderPrefab with physics
                based on last damage force, handles special cases for grass/scorched states, and can
                create a whole doodad gib if configured. Ensures gibs are only dropped once per
                destruction.
            </summary>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:Doodad.CanBeDamagedByMooks">
            <summary>
                Controls whether enemy units (mooks) can damage this doodad. When false, only player
                attacks can damage it.
            </summary>
        </member>
        <member name="F:Doodad.GibsHaveBeenDropped">
            <summary>
                Tracks whether gibs have already been spawned from this doodad to prevent duplicate
                gib creation. Set to true in DropGibs() to ensure gibs are only dropped once, even
                if multiple damage or death events occur.
            </summary>
        </member>
        <member name="F:Doodad.alwaysDropGibs">
            <summary>
                Forces gibs to always spawn when the doodad dies, overriding the default behavior.
                When false, non-skeleton deaths prevent gib array elements from spawning by calling
                Death() on each gib piece instead of dropping them.
            </summary>
        </member>
        <member name="F:Doodad.collapseDelay">
            <summary>
                Time in seconds before the doodad collapses after CollapseDelayed is called.
                Decremented each Update frame and triggers Collapse when it reaches zero. Default -1
                indicates no delayed collapse is scheduled.
            </summary>
        </member>
        <member name="F:Doodad.createWholeGib">
            <summary>
                When true, spawns the entire gib holder prefab as a single entity rather than
                individual pieces. Used for doodads that should break into one large chunk.
            </summary>
        </member>
        <member name="F:Doodad.damageDelay">
            <summary>
                Minimum time in seconds between damage applications. Prevents rapid damage from
                instantly destroying the doodad. Default is 0.33 seconds.
            </summary>
        </member>
        <member name="F:Doodad.damageGreaterStateMaterial">
            <summary>
                Material applied when health drops to 50% or below. Provides visual feedback for
                heavy damage. If null, damageStateMaterial is used for all damage levels.
            </summary>
        </member>
        <member name="F:Doodad.damageStateMaterial">
            <summary>
                Material applied to the doodad when health drops below maximum but above 50%.
                Provides visual feedback for light damage.
            </summary>
        </member>
        <member name="F:Doodad.damageStateSpriteOffset">
            <summary>
                Sprite frame offset applied when the doodad enters a damaged state. Set to -1 to
                disable sprite-based damage visualization.
            </summary>
        </member>
        <member name="F:Doodad.disableOnDeath">
            <summary>
                Controls whether the GameObject is deactivated when the doodad collapses or dies.
                When true (default), the doodad's GameObject is set to inactive after collapse. Set
                to false for doodads that should remain visible after destruction.
            </summary>
        </member>
        <member name="F:Doodad.explodeGibsFromHolder">
            <summary>
                When gibHolderIsChild is true, determines if gibs explode outward from the holder's
                position. Uses ExplodeFromPoint on the gibHolderPrefab with current velocities,
                otherwise uses CreateGibsFromNestedGibHolder for standard nested spawning.
            </summary>
        </member>
        <member name="F:Doodad.gibHolderIsChild">
            <summary>
                Determines how gibHolderPrefab is spawned. When true, treats it as a nested child
                holder and either explodes from position or creates nested gibs. When false, uses
                standard EffectsController.CreateGibs spawning with applied forces.
            </summary>
        </member>
        <member name="F:Doodad.gibHolderPrefab">
            <summary>
                Prefab containing additional gib pieces to spawn when the doodad is destroyed.
                Spawned during DropGibs based on gibHolderIsChild and explodeGibsFromHolder
                settings, with forces applied based on lastDamageObject if available.
            </summary>
        </member>
        <member name="F:Doodad.gibs">
            <summary>
                Array of doodad pieces that are spawned when this doodad is destroyed. These pieces
                become active and detach from the parent when the doodad collapses or dies.
            </summary>
        </member>
        <member name="F:Doodad.gibsType">
            <summary>
                Defines the visual and audio type of gibs spawned when destroyed. Determines
                particle effects, sounds, and visual appearance of debris (e.g., wood splinters,
                metal shards, leaves).
            </summary>
        </member>
        <member name="F:Doodad.immuneToHeroDamage">
            <summary>
                Makes the doodad immune to damage from player characters. Used for doodads that
                should only be damaged by specific sources or events.
            </summary>
        </member>
        <member name="F:Doodad.isDamageable">
            <summary>
                Determines if this doodad can take damage from attacks. When false, the doodad is
                indestructible and ignores all damage events.
            </summary>
        </member>
        <member name="F:Doodad.isDead">
            <summary>
                Tracks whether this doodad has been killed. Set to true by the Death method and
                prevents multiple death processing. Also checked by SubMergesUnit to determine if
                the doodad still provides visual obstruction for units.
            </summary>
        </member>
        <member name="F:Doodad.lastDamageObject">
            <summary>
                Stores the most recent DamageObject that affected this doodad. Used to determine
                force direction and magnitude for gib spawning, damage effects, and death
                animations. Updated by DamageOptional method before processing damage.
            </summary>
        </member>
        <member name="F:Doodad.lastDamageTime">
            <summary>
                Tracks the time of the last damage event for damage rate limiting. Compared against
                Time.time with damageDelay to prevent damage from being applied too frequently.
                Updated when damage is successfully applied in DamageOptional.
            </summary>
        </member>
        <member name="F:Doodad.skeletonMaterial">
            <summary>
                Material applied upon death to show a skeletal or destroyed state. When set, the
                doodad remains visible as a skeleton instead of collapsing.
            </summary>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:Doodad.centerX">
            <summary>
                Gets the horizontal center position of this doodad in world coordinates. Calculated
                as the base X position plus the sprite offset, providing the actual visual center of
                the doodad for collision detection and positioning purposes.
            </summary>
        </member>
        <member name="P:Doodad.centerY">
            <summary>
                Gets the vertical center position of this doodad in world coordinates. Calculated as
                the base Y position plus the sprite offset, providing the actual visual center of
                the doodad for collision detection and positioning purposes.
            </summary>
        </member>
        <member name="P:Doodad.groundLayer">
            <summary>
                Gets the ground layer mask used for terrain collision detection. This protected
                property provides access to Map.groundLayer, which is used for raycasting and
                physics queries when attaching doodads to terrain.
            </summary>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:Doodad.collumn">
            <summary>
                Grid column position of the doodad in the map's terrain system. Set during
                initialization based on the doodad's world position.
            </summary>
        </member>
        <member name="F:Doodad.height">
            <summary>
                Height of the doodad in world units, used for collision detection and effect
                spawning. Default is 16 units (one grid cell).
            </summary>
        </member>
        <member name="F:Doodad.isImpenetrable">
            <summary>
                Determines if units can pass through this doodad. When true, the doodad blocks
                movement like solid terrain.
            </summary>
        </member>
        <member name="F:Doodad.offsetX">
            <summary>
                Horizontal offset applied to the doodad's visual position relative to its transform
                position. Used for precise visual alignment.
            </summary>
        </member>
        <member name="F:Doodad.offsetY">
            <summary>
                Vertical offset applied to the doodad's visual position relative to its transform
                position. Used for precise visual alignment.
            </summary>
        </member>
        <member name="F:Doodad.row">
            <summary>
                Grid row position of the doodad in the map's terrain system. Set during
                initialization based on the doodad's world position.
            </summary>
        </member>
        <member name="F:Doodad.width">
            <summary>
                Width of the doodad in world units, used for collision detection and effect
                spawning. Default is 16 units (one grid cell).
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:Doodad.ApplyForce(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Applies force effects to the doodad from a specific position. Base implementation
                does nothing, allowing derived classes to implement custom force reactions.
            </summary>
            <param name="_x">X position where the force originates</param>
            <param name="_y">Y position where the force originates</param>
            <param name="_xI">Horizontal force intensity to apply</param>
            <param name="_yI">Vertical force intensity to apply</param>
        </member>
        <member name="M:Doodad.ApplyForce(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Applies force effects with interpolation between the force origin and doodad
                position. Used by grass doodads to create realistic force propagation effects.
            </summary>
            <param name="_x">X position where the force originates</param>
            <param name="_y">Y position where the force originates</param>
            <param name="_xI">Horizontal force intensity to apply</param>
            <param name="_yI">Vertical force intensity to apply</param>
            <param name="forceM">Force multiplier for interpolation between origin and doodad position (0-1)</param>
        </member>
        <member name="M:Doodad.ApplyForce(System.Single,System.Single,System.Single)">
            <summary>
                Applies directional force with a specific intensity multiplier. Commonly used for
                wind and explosion effects on vegetation.
            </summary>
            <param name="_xI">Horizontal force direction component</param>
            <param name="_yI">Vertical force direction component</param>
            <param name="force">Force intensity multiplier applied to the direction vector</param>
        </member>
        <member name="M:Doodad.ApplyForce(System.Single)">
            <summary>
                Applies horizontal-only force effects. Used for simple sideways force applications
                like wind effects.
            </summary>
            <param name="xI">Horizontal force intensity to apply</param>
        </member>
        <member name="M:Doodad.AttachDoodadToGround">
            <summary>
                Coordinates the attachment of this doodad to surrounding terrain. Based on
                configuration, calls AttachSideways if attachToSides is enabled, AttachUpwards if
                attachToTopAsWell is enabled, and always calls AttachDownwards for ground
                attachment.
            </summary>
        </member>
        <member name="M:Doodad.AttachDownwards">
            <summary>
                Attempts to attach this doodad to terrain below it. Uses either 48 units or infinite
                distance based on attachToGroundNoMatterHowFarDownItIs setting. If a Block is found
                below, stores the reference in attachedToBlock and calls its AttachMe method to
                establish the connection.
            </summary>
        </member>
        <member name="M:Doodad.AttachSideways">
            <summary>
                Attempts to attach this doodad to terrain on either side. Performs raycasts left and
                right to find blocks within 14 units. If a Block component is found, directly calls
                its AttachMe method and stores the reference in attachedToSideBlock. Otherwise sends
                an "AttachMe" message to the collider for other attachable types.
            </summary>
        </member>
        <member name="M:Doodad.AttachUpwards">
            <summary>
                Attempts to attach this doodad to terrain above it. Performs an upward raycast to
                find ground within 14 units and sends an "AttachMe" message to any collider found,
                establishing a connection with blocks or other attachable objects above.
            </summary>
        </member>
        <member name="M:Doodad.IsPointInRange(System.Single,System.Single,System.Single)">
            <summary>
                Checks if a given point is within range of this doodad's bounds. Uses fast absolute
                value comparisons to determine if the point falls within the doodad's width and
                height extended by the specified range value. Used by Map systems for spatial
                queries.
            </summary>
            <param name="x">The X coordinate of the point to check</param>
            <param name="y">The Y coordinate of the point to check</param>
            <param name="range">Additional range to extend the doodad's bounds for the check</param>
            <returns>True if the point is within the extended bounds of the doodad</returns>
        </member>
        <member name="M:Doodad.ShakeEffects(System.Single,System.Single)">
            <summary>
                Creates shake-based visual effects without applying actual physics forces. Used by
                grass doodads to spawn leaf particles during earthquakes or impacts.
            </summary>
            <param name="xI">Horizontal shake intensity for effect generation</param>
            <param name="yI">Vertical shake intensity for effect generation</param>
        </member>
        <member name="M:Doodad.TouchGrass(System.Int32)">
            <summary>
                Handles interaction when a player touches grass-type doodads. Base implementation
                does nothing, allowing grass doodads to implement custom reactions.
            </summary>
            <param name="playerNum">Player number (0-3) that touched the grass</param>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:Doodad.attachToGroundNoMatterHowFarDownItIs">
            <summary>
                When true, removes the maximum distance limit for downward terrain attachment
                raycasts. Normal attachment is limited to 48 units, but this flag allows attachment
                to ground at any distance below. Useful for hanging objects or decorations that need
                to connect to terrain far below their spawn position.
            </summary>
        </member>
        <member name="F:Doodad.attachToSides">
            <summary>
                When true, the doodad will attempt to attach to terrain blocks on its left and right
                sides during first frame setup. Used in conjunction with attatchToTerrain to create
                multi-directional terrain attachment. The attachment is performed via
                AttachSideways() method.
            </summary>
        </member>
        <member name="F:Doodad.attachToTopAsWell">
            <summary>
                When enabled along with attatchToTerrain, allows the doodad to attach to terrain
                above it as well as below. Uses raycasting upward to find and attach to overhead
                blocks, useful for hanging objects or ceiling-mounted doodads.
            </summary>
        </member>
        <member name="F:Doodad.attachedToBlock">
            <summary>
                Reference to the terrain Block this doodad is attached to below. Set during the
                AttachDownwards process when a ground block is found via raycasting. Used to
                establish parent-child relationships and can trigger block collapse when
                destroyAttachedBlockOnCollapse is enabled.
            </summary>
        </member>
        <member name="F:Doodad.attachedToSideBlock">
            <summary>
                Reference to the terrain Block this doodad is attached to on either side. Set during
                the AttachSideways process when a side block is found via left or right raycasting.
                Maintains the sideways attachment relationship for wall-mounted doodads.
            </summary>
        </member>
        <member name="F:Doodad.attatchToTerrain">
            <summary>
                Enables automatic terrain attachment during first frame setup. When true, the doodad
                will attach itself to nearby terrain blocks in multiple directions based on other
                attachment settings. Default is true. Note: Field name contains typo "attatch"
                instead of "attach".
            </summary>
        </member>
        <member name="F:Doodad.destroyAttachedBlockOnCollapse">
            <summary>
                When enabled, causes the attached terrain block to collapse when this doodad
                collapses. If attachedToBlock is set, calls CollapseForced() on it during the
                doodad's Collapse method, creating chain destruction effects.
            </summary>
        </member>
        <member name="F:Doodad.groundHit">
            <summary>
                Stores the RaycastHit result from terrain attachment raycasts. Used by attachment
                methods (AttachUpwards, AttachSideways, AttachDownwards) to get collision
                information and send attachment messages to hit objects.
            </summary>
        </member>
        <member name="F:Doodad.otherConnectedDoodads">
            <summary>
                List of other doodads that are connected to this one. When this doodad collapses or
                is destroyed, connected doodads will also collapse after a delay, creating chain
                reaction destruction effects. Populated during Start() when unparenting from parent
                doodads.
            </summary>
        </member>
        <!-- Status Effects Methods -->
        <member name="M:Doodad.Bloody">
            <summary>
                Applies blood effects to the doodad if it's configured to show blood and hasn't
                already been bloodied. Changes the material to bloodyMaterial, removes the doodad
                from the decal system, and marks it as no longer able to receive blood effects.
                Respects onlyBloodyFromGround setting.
            </summary>
        </member>
        <member name="M:Doodad.Bloody(DecalInfo)">
            <summary>
                Applies blood effects based on ground decal information. Only processes blood if
                onlyBloodyFromGround is true and the decal position falls within the doodad's
                horizontal bounds. Changes material and updates blood state similar to the
                parameterless Bloody method.
            </summary>
            <param name="decal">Information about the ground decal including its position</param>
        </member>
        <member name="M:Doodad.ForceBloody">
            <summary>
                Immediately applies blood effects to the doodad by changing its material to the
                configured bloodyMaterial. Unlike Bloody(), this method bypasses all checks and
                forces the blood effect regardless of configuration settings.
            </summary>
        </member>
        <!-- Status Effects Fields -->
        <member name="F:Doodad.bloodyMaterial">
            <summary>
                The material to apply when the doodad becomes bloodied. This material replaces the
                current renderer's material when blood effects are applied through either the
                Bloody() or ForceBloody() methods, giving the doodad a bloodied appearance.
            </summary>
        </member>
        <member name="F:Doodad.canBloody">
            <summary>
                Controls whether blood effects can be applied to this doodad. When true, the doodad
                can display blood splatter when units are killed nearby.
            </summary>
        </member>
        <member name="F:Doodad.isScorched">
            <summary>
                Indicates whether the doodad has been scorched or burned. When true, prevents gib
                spawning from gibHolderPrefab for DoodadGrass types in the DropGibs method,
                representing destroyed vegetation that shouldn't produce normal debris.
            </summary>
        </member>
        <member name="F:Doodad.onlyBloodyFromGround">
            <summary>
                Determines if blood effects can only be applied from ground-based decals. When true,
                the doodad will only become bloody if a DecalInfo ground blood effect overlaps with
                its horizontal bounds. When false, blood can be applied through the general Bloody()
                method.
            </summary>
        </member>
        <!-- Audio System Fields -->
        <member name="F:Doodad.soundHolder">
            <summary>
                Reference to a SoundHolder component containing audio clips for various doodad
                events. Used to play defendSounds during damage effects and deathSounds when the
                doodad is destroyed. Allows audio customization per doodad type.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:Doodad.SubMergesUnit">
            <summary>
                Determines whether this doodad should submerge or obscure units that overlap with
                it. Returns true if the doodad is not dead, allowing alive doodads to provide visual
                cover or submersion effects for units.
            </summary>
            <returns>True if units can be submerged/obscured by this doodad, false if the doodad is dead</returns>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:Doodad.doodadType">
            <summary>
                Categorizes this doodad using the DoodadType enumeration. Used for type-specific
                behavior like spawning leaf effects for Tree and TreeBushes types during damage and
                death. Also used by map generation and editor systems for doodad classification.
            </summary>
        </member>
        <member name="F:Doodad.isJiggly">
            <summary>
                Marks this doodad as a jiggly object (typically grass or vegetation) that responds
                to forces and movements. When true, the doodad is registered with
                Map.RegisterGrassAndBlood() during Start() and unregistered during Collapse(),
                enabling physics-based animations.
            </summary>
        </member>
        <member name="F:Doodad.unitsCanHideBehind">
            <summary>
                Indicates whether units can use this doodad for cover or hiding. While not actively
                used in the codebase, this flag is intended to mark doodads that provide visual or
                tactical cover for units.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:DoodadDestroyable.FixedUpdate">
            <summary>
                Runs burn logic at fixed time intervals. Handles all burning-related mechanics
                including damage over time, flame particle creation, unit burning propagation, and
                block burning spread.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.Start">
            <summary>
                Initializes the doodad's sprite components and sets up collision states. Gets the
                sprite component and stores initial sprite pixel dimensions for damage state
                transitions. Activates pristine colliders and deactivates damaged/destroyed
                colliders. If SnapToGround is enabled, positions the doodad at ground height + 8
                units.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.Update">
            <summary>
                Main update loop handling damage delay timing, shaking behavior before falling, and
                physics for falling objects. Processes shaking animation when about to fall (using
                sine wave for visual shake), manages gravity-based falling physics with ground
                collision detection, triggers landing effects when hitting ground, calls crushing
                logic for units below, and updates position with shake offset. Only processes
                falling physics when visible to players for performance.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Properties -->
        <member name="P:DoodadDestroyable.Falling">
            <summary>
                Gets whether this doodad is currently falling or shaking before falling. Returns
                true if the doodad is actively falling due to gravity or is in the pre-fall shaking
                state.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:DoodadDestroyable.SnapToGround">
            <summary>
                When true, automatically positions the doodad on the ground during Start(). Sets Y
                position to groundHeight + 8 pixels.
            </summary>
            <remarks>
                Useful for doodads that should always start on the ground regardless of their placed
                position in the level editor.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.collidersDamaged">
            <summary>
                GameObject containing the colliders active when the doodad is in its damaged state.
                Initially set inactive in Start(), then activated in Hurt() when damage is first
                taken. Deactivated again in Death() when the doodad is destroyed. This defines the
                physical collision boundaries for the damaged object, typically different from the
                pristine state.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.collidersDestroyed">
            <summary>
                GameObject containing the colliders active when the doodad is in its destroyed
                state. Initially set inactive in Start(), then activated in Death() when the doodad
                is fully destroyed. This defines the physical collision boundaries for the destroyed
                object, typically allowing units to pass through or over the debris.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.collidersPristine">
            <summary>
                GameObject containing the colliders active when the doodad is in its undamaged
                pristine state. Set active in Start() when initialized, then deactivated when the
                doodad takes damage (Hurt method) or is destroyed (Death method). This defines the
                physical collision boundaries for the undamaged object.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.heightInBlocks">
            <summary>
                The height of this doodad in blocks (16 pixel units). Used for fire spreading and
                particle generation across the full height.
            </summary>
            <remarks>
                Used by RunBurnLogic() to spread fire to surrounding blocks and CreateFlames() to
                generate fire particles at each block position. Works in conjunction with
                widthInBlocks to define the full grid area of the doodad. Default is 1 block.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.prinstineChildren">
            <summary>
                Array of child GameObjects that are visible only when the doodad is in its pristine
                undamaged state. All objects in this array are deactivated when the doodad takes any
                damage in the Damage method. Used for visual elements like decorations or details
                that should disappear when damaged.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.sprite">
            <summary>
                Reference to the SpriteSM component that handles the visual representation of the
                doodad. Used to change sprite frames to show damage states (pristine, damaged,
                destroyed) by adjusting the lowerLeftPixel coordinates. Initialized in Start if not
                already assigned.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.spriteInitialX">
            <summary>
                The initial X pixel coordinate of the sprite's lower left corner. Stored during
                Start to serve as the base offset for calculating damaged and destroyed sprite
                positions. Used with spritePixelWidth or damageOffsetWidth to show different damage
                states.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.spritePixelWidth">
            <summary>
                The width in pixels of each damage state frame in the sprite sheet. Defaults to 64
                pixels. Used to calculate sprite offsets when transitioning between pristine,
                damaged, and destroyed visual states. Set from sprite.pixelDimensions.x during
                initialization.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.widthInBlocks">
            <summary>
                The width of this doodad in blocks (16 pixel units). Used for ground detection,
                collapse calculations, and particle generation.
            </summary>
            <remarks>
                Used by GetGroundHeight() to check ground support across the entire width,
                TryCollapseAbove() to check for doodads above, RunBurnLogic() to spread fire across
                all blocks, and CreateFlames() to generate fire effects. Default is 1 block.
            </remarks>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:DoodadDestroyable.Burn(DamageObject)">
            <summary>
                Applies fire damage to the doodad and manages its burning state. For flammable
                objects, sets burn time to 8 seconds and accumulates burn damage that can trigger
                collapse. For heatable objects, extends burn time by 0.5 seconds and increments burn
                damage. For explosive objects, immediately applies damage. The method checks if
                accumulated burn damage exceeds the collapse threshold and triggers destruction if
                so.
            </summary>
            <param name="damgeObject">The damage object containing fire damage information and damage amount to apply</param>
        </member>
        <member name="M:DoodadDestroyable.BurnCollapsePoint">
            <summary>
                Calculates the burn damage threshold at which a burning doodad will collapse.
                Returns the doodad's maximum health multiplied by 3, meaning the doodad can
                accumulate burn damage up to three times its health before collapsing from fire
                damage.
            </summary>
            <returns>The burn damage value that will trigger a collapse (health * 3)</returns>
        </member>
        <member name="M:DoodadDestroyable.CreateBloodOnDeath">
            <summary>
                Creates red blood particle effects when the doodad dies. This virtual method spawns
                20 blood particles at the doodad's position with the particle velocity influenced by
                the object's current movement (xI, yI). Typically overridden in derived classes to
                customize the blood effect appearance or behavior.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.CreateExplosion">
            <summary>
                Creates an explosion effect when the doodad is destroyed. This method generates a
                visual explosion centered on the doodad with size based on its width and height,
                burns units within a 64-unit radius, deals explosive damage to units within 48
                horizontal and 32 vertical units (dealing 12 damage with 200 horizontal and 300
                vertical knockback), and disturbs wildlife within a 130-unit radius. This is
                typically called when willExplode is true during the death sequence.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.CreateFlames(UnityEngine.Vector3)">
            <summary>
                Creates flame visual effects across the entire surface of the burning doodad. Spawns
                flames at each block position (16x16 units) that the doodad occupies, with the flame
                positions offset by the provided direction vector and the
                burningFlamesScatterDistance for visual variation.
            </summary>
            <param name="direction">Random direction offset to scatter the flame positions for more realistic fire effects</param>
        </member>
        <member name="M:DoodadDestroyable.CreateLeafBurstDamaged">
            <summary>
                Creates a small leaf particle effect when vegetation doodads are damaged. Generates
                20 leaves spreading from the center with minimal upward velocity (5 units + 30% of
                downward velocity) and slight horizontal spread based on current X velocity.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.CreateLeafBurstDeath">
            <summary>
                Creates a large leaf particle effect when vegetation doodads are destroyed.
                Generates leaves with no initial spread but significant upward velocity (50 units +
                30% of current Y velocity) and horizontal velocity based on 30% of current X
                velocity.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.CreateWoodParticleBurst">
            <summary>
                Creates wood debris particles when wooden doodads are destroyed. Generates 24 wood
                fragments spreading from the center with upward velocity between 0-140 units and
                random rotation, contained within the doodad's width.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.Damage(DamageObject)">
            <summary>
                Processes damage to the doodad and manages state transitions. Handles alien blood
                effects if configured, scorches the sprite for fire damage, manages health reduction
                and damage states (pristine → damaged → destroyed), triggers burning for flammable
                objects when hit by fire, initiates falling if fallOnReceivingAnyDamage is set, and
                collapses chain anchors. Returns true if the damage resulted in death.
            </summary>
            <param name="damageObject">The damage information including amount, type, and force direction</param>
            <returns>True if the doodad was destroyed, false otherwise</returns>
        </member>
        <member name="M:DoodadDestroyable.DamageOptional(DamageObject,System.Boolean@)">
            <summary>
                Optional damage entry point that always shows bullet hit effects. Clears the
                waitForDamageToFall flag and delegates to the main Damage method. Always sets
                showBulletHit to true.
            </summary>
            <param name="damageObject">The damage information including amount, type, and force direction</param>
            <param name="showBulletHit">Always set to true to display bullet impact effects</param>
            <returns>True if the damage was processed, false otherwise</returns>
        </member>
        <member name="M:DoodadDestroyable.Death">
            <summary>
                Handles the complete destruction of the doodad. Marks as dead and registers with
                game systems, deactivates pristine/damaged colliders and activates destroyed
                colliders, disables main collider, limits burn time to 0.4 seconds, initiates
                falling if canFall is true, creates death effects (particles, explosions, etc.),
                triggers collapse of doodads above, and either changes sprite to destroyed state or
                deactivates the GameObject based on configuration.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.Hurt">
            <summary>
                Transitions the doodad from pristine to damaged state. Changes the sprite offset to
                show damage visuals (shifts sprite by damageOffsetWidth or spritePixelWidth),
                creates damage particle effects, swaps collider sets from pristine to damaged, and
                marks the doodad as damaged. Called when health drops below death threshold but
                above zero.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.MakeEffectsDamaged">
            <summary>
                Creates visual effects when the doodad is damaged but not destroyed. Generates
                effects based on lastDamageObject force values including leaf bursts for tree-type
                doodads, blood effects if createBloodOnDeath is enabled, and glass shards with
                force-based velocities if createGlassFragmentsOnDeath is enabled.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.MakeEffectsDeath">
            <summary>
                Creates comprehensive visual and audio effects when the doodad is destroyed.
                Disables colliders, drops gibs if configured, creates material-specific particles
                (wood, metal, barbed wire), handles explosion effects if willExplode is true
                (including blast damage and unit burning), creates sparks and glass fragments with
                physics, generates leaf bursts for vegetation, creates blood effects, and disturbs
                nearby wildlife. Effect intensity varies based on damage force.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.RunBurnLogic">
            <summary>
                Executes the burning logic for flammable, heatable, or explosive doodads during
                FixedUpdate. For flammable objects, it decrements burn time, creates flame effects
                at regular intervals, burns nearby units and blocks, and triggers damage when burn
                time expires. For heatable objects, it gradually reduces burn damage and spreads
                fire to adjacent blocks. For explosive objects, it immediately triggers damage. The
                burn damage accumulates and can cause the doodad to collapse when reaching the burn
                collapse point.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.SetAlight_Local">
            <summary>
                Sets a flammable doodad on fire locally without networking. If the doodad is not
                dead and is flammable, sets the burn time to 8 seconds and ensures burn damage is at
                least 1 to start the burning process. This method is typically called by
                environmental fire spreading mechanics.
            </summary>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:DoodadDestroyable.CreateLeavesOnDeath">
            <summary>
                When true, creates leaf burst particle effects when the doodad is damaged or
                destroyed. Calls CreateLeafBurstDamaged on damage and CreateLeafBurstDeath on
                destruction, with different particle velocities for each state.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.acceptDamageCalls">
            <summary>
                Controls whether this doodad can receive damage. When false, Damage() returns
                immediately without processing.
            </summary>
            <remarks>
                Can be used to make doodads temporarily or permanently invulnerable. Default is true
                (accepts damage).
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.burnCounter">
            <summary>
                Timer for spreading fire to surrounding blocks. Triggers block burning every 3
                seconds while the doodad burns.
            </summary>
            <remarks>
                Incremented by Time.fixedDeltaTime in RunBurnLogic(). When exceeding 1 second,
                subtracts 3 and calls Map.BurnBlocksAround() for all blocks occupied by this doodad.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.burnDamage">
            <summary>
                Accumulated fire damage that increases while burning. When it exceeds
                BurnCollapsePoint() (health * 3), triggers destruction.
            </summary>
            <remarks>
                Incremented by fire damage in Burn(), decremented when heatable objects cool down.
                Checked against BurnCollapsePoint() to determine when burning should cause collapse.
                Also used as damage amount when burn time expires.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.burnTime">
            <summary>
                Remaining burn duration in seconds. While positive, the doodad burns with fire
                effects and damage spreading.
            </summary>
            <remarks>
                Set to 8 seconds when ignited, counts down in RunBurnLogic(). When it reaches 0,
                triggers final fire damage. Clamped to maximum 0.4 seconds in Death() to ensure
                burning stops quickly when destroyed.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.burnUnitsCounter">
            <summary>
                Timer for burning nearby units. Triggers unit burning every 0.25 seconds while the
                doodad burns.
            </summary>
            <remarks>
                Incremented by Time.fixedDeltaTime in RunBurnLogic(). When exceeding 0.25 seconds,
                calls Map.BurnUnitsAround_Local() to damage nearby units with fire.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.burningFlamesScatterDistance">
            <summary>
                Maximum random offset for flame particle positions in pixels. Creates visual
                variation in fire effects. Default is 6 pixels.
            </summary>
            <remarks>
                Used as multiplier for Random.insideUnitCircle to offset flame positions in
                CreateFlames(). Also added to Y position as base height offset. Creates more
                realistic scattered flame appearance.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.cannotBeTotallyDestroyed">
            <summary>
                Unused field. May have been intended to prevent complete destruction, but has no
                implementation in the code.
            </summary>
            <remarks>
                This field is never referenced in any method. Likely deprecated or planned for
                future use.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.changeSpriteToShowDamage">
            <summary>
                Determines whether the sprite visual should change to show damage states. When true
                (default), the sprite's lowerLeftPixel is adjusted to show damaged or destroyed
                frames when the doodad takes damage. Set to false for doodads that don't have damage
                state sprites.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.createBarbedWireParticlesOnDeath">
            <summary>
                When true, creates barbed wire particle effects when the doodad is destroyed. Spawns
                15 barbed wire particles scattered across the doodad's dimensions with upward
                velocity and random rotation.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.createBloodOnDeath">
            <summary>
                When true, creates blood particle effects when the doodad is damaged, destroyed, or
                collapses. Calls the CreateBloodOnDeath method to spawn red blood particles. Used
                for organic or gore-themed destructibles.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.createGlassFragmentsOnDeath">
            <summary>
                When true (default), creates glass shard particle effects when the doodad is damaged
                or destroyed. The number and velocity of shards varies based on whether the doodad
                explodes (14 shards with high velocity) or is normally destroyed (24 shards).
            </summary>
        </member>
        <member name="F:DoodadDestroyable.createSandParticlesOnFall">
            <summary>
                When true, creates sand particle effects when the doodad lands after falling. Spawns
                30 sand particles at the landing position with horizontal spread of 48 units and
                minimal upward velocity (40 units).
            </summary>
        </member>
        <member name="F:DoodadDestroyable.createSparksOnDeath">
            <summary>
                When true, creates spark particle effects when the doodad is destroyed. Spawns 30
                spark particles scattered across half the doodad's width with short lifespans
                (0.25-0.3 seconds). Also checked during plasma bolt ground impacts.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.createWoodParticlesOnDeath">
            <summary>
                When true, creates wood particle effects when the doodad is destroyed. Triggers
                CreateWoodParticleBurst method which spawns 24 wood particles with similar physics
                to metal particles. Used for wooden destructible objects.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.createmetalParticlesOnDeath">
            <summary>
                When true, creates metal particle effects when the doodad is destroyed. Spawns 24
                metal particles scattered across the doodad's width and height with upward velocity
                between 0-140 units and random rotation.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.damageOffsetWidth">
            <summary>
                Custom pixel offset width for damage state transitions. When non-zero, this value is
                used instead of spritePixelWidth to calculate the sprite offset for damaged and
                destroyed states. Allows fine-tuning of sprite positioning for non-standard sprite
                sheets.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.deregisterDoodadOnDeath">
            <summary>
                When true, removes this doodad from the map's destroyable doodad list upon death.
                Default is true.
            </summary>
            <remarks>
                Checked in Death() - calls Map.RemoveDestroyableDoodad() to clean up map references.
                Set to false for doodads that should remain registered even after destruction.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.destroyOnDeath">
            <summary>
                When true, the sprite's lower left pixel is shifted to show the destroyed sprite
                variant in Death(). When false (default behavior), the doodad remains visible after
                death. This does not actually destroy the GameObject - use disableOnDeath
                (inherited) for that behavior.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.explosive">
            <summary>
                When true, fire damage immediately triggers a damage call instead of starting a
                burn. Used for volatile objects.
            </summary>
            <remarks>
                Checked in Burn() - if true, immediately calls Damage() with the current burnDamage
                instead of starting a fire.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.fallOnReceivingAnyDamage">
            <summary>
                When true, causes the doodad to start falling immediately upon taking any damage.
                Checked in Damage() method - if true, collapses any attached chain anchor and calls
                StartFalling(false). Used for precariously balanced objects.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.flamable">
            <summary>
                Determines if this doodad can catch fire when damaged by fire. Enables full burning
                behavior with spreading and flame effects.
            </summary>
            <remarks>
                When true, fire damage starts an 8-second burn that spreads to nearby units and
                blocks, creates flame particles, and accumulates burn damage until destruction. Used
                by Damage(), Burn(), SetAlight_Local(), and RunBurnLogic().
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.flameCounter">
            <summary>
                Timer for creating visual flame particles. Generates flame effects approximately
                every 0.05 seconds while burning.
            </summary>
            <remarks>
                Controls the frequency of CreateFlames() calls to generate fire particle effects.
                Different rates for flamable objects (0.04s + deltaTime) versus other burning
                objects (0.05s).
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.heatable">
            <summary>
                Allows the doodad to heat up from fire damage without actually burning. Used for
                metal objects that conduct heat.
            </summary>
            <remarks>
                When true, fire damage increases burnTime by 0.5 seconds and increments burnDamage,
                but doesn't create flames or spread fire. The heat dissipates over time. Mutually
                exclusive with flamable behavior.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.isDamaged">
            <summary>
                Protected flag indicating whether this doodad has taken damage but is not yet
                destroyed. Set to true in Hurt() when first damaged, and checked in SubMergesUnit()
                to determine if units should merge with this object. When true, prevents unit
                merging.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.makeAlienBloodOnHit">
            <summary>
                When true, creates green alien blood effects when the doodad takes damage. Used for
                organic alien structures.
            </summary>
            <remarks>
                Checked in Damage() - creates two identical green blood gush effects using the
                damage force values. The duplication appears intentional for extra visual impact.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.scorchDamage">
            <summary>
                Controls sprite darkening when tintScorchedSprite is true. Starts at 1.0 (no tint)
                and decreases with fire damage.
            </summary>
            <remarks>
                Reduced by 0.1 per fire damage, clamped between 0.2 (maximum darkening) and 1.0 (no
                tint). Multiplied with white color to create the darkening effect applied to the
                sprite.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.screenShakeAmountOnFall">
            <summary>
                The intensity of screen shake when this doodad hits the ground after falling.
                Default value is 0.3. Passed to SortOfFollow.Shake() in the Land() method. Higher
                values create more dramatic impact effects when heavy objects hit the ground.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.settled">
            <summary>
                Indicates whether the doodad has settled after falling or is stable. Defaults to
                true. Set to false when the doodad begins falling or shaking. Reset to true when the
                doodad lands and comes to rest. Used to prevent redundant fall initiation.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.shakeBeforeFalling">
            <summary>
                Determines whether the doodad should shake for 0.3 seconds before falling. When true
                (default), adds a visual warning before the doodad falls. The shake is triggered
                when falling conditions are met but the doodad is still settled.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.shakeTime">
            <summary>
                Time remaining for the shaking animation before falling. When greater than 0, the
                doodad shakes horizontally using a sine wave pattern. Decrements each frame, and
                when it reaches 0, triggers falling and attempts to collapse doodads above. Also
                affects the Falling property.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.takeDamageOnFall">
            <summary>
                When true, the doodad will call Death() if it hits the ground with sufficient
                velocity (yI &lt; -40). Checked in the Update() falling logic when the doodad lands
                on the ground. Allows doodads to be destroyed by falling from height.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.tintScorchedSprite">
            <summary>
                When true, fire damage progressively darkens the sprite to show scorching. Uses
                scorchDamage to control tint darkness.
            </summary>
            <remarks>
                Each fire damage reduces scorchDamage by 0.1 (clamped between 0.2 and 1.0), which is
                then applied as a color multiplier to darken the sprite, creating a visual scorching
                effect.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.waitForDamageToFall">
            <summary>
                When true, prevents the doodad from falling even if falling is true, until it takes
                damage. Reset to false in both Damage() and DamageOptional() methods, and in
                Disturb(). Checked in Update() to gate the falling physics. Used for doodads that
                should remain suspended until damaged.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.willExplode">
            <summary>
                Determines whether this doodad creates an explosion when destroyed. When true in
                MakeEffectsDeath(), calls CreateExplosion() which creates explosion effects, burns
                nearby units, and damages units with explosion damage. When false, creates
                non-explosive death effects instead.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:DoodadDestroyable.Bounce">
            <summary>
                Resets the doodad's falling state after landing. Sets vertical velocity to zero,
                marks as settled (no longer falling), and clears the falling flag. Can be overridden
                for custom bounce behavior.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.Disturb">
            <summary>
                Disturbs the doodad, potentially causing it to fall. Calls the base class Disturb
                method first, then if fallOnDisturb is true, triggers any attached chain anchor to
                collapse, clears the waitForDamageToFall flag, and initiates falling without forcing
                disturbance of objects above. This override extends the base behavior to add falling
                mechanics for disturbed doodads.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.GetGroundHeight">
            <summary>
                Calculates the highest ground point beneath the doodad using raycasts. Casts rays
                downward at 16-unit intervals across the doodad's width, finds the highest hit point
                as ground height, damages terrain blocks if less than 50% have solid ground beneath
                (crushing weak supports), and initiates falling if no ground is detected. Uses the
                doodad's width in blocks to determine raycast positions.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.GroundBelowInadiquate(System.Single)">
            <summary>
                Determines if the ground support beneath the doodad is insufficient. Returns true if
                50% or less of the doodad's width has solid ground support, indicating unstable
                foundation that should be crushed.
            </summary>
            <param name="hitRatio">Ratio of successful ground hits to total width in blocks (0.0 to 1.0)</param>
            <returns>True if ground support is inadequate (50% or less), false otherwise</returns>
        </member>
        <member name="M:DoodadDestroyable.HitUnits">
            <summary>
                Checks for and damages units beneath the falling doodad. Only active during edit
                mode or when falling. Attempts to crush units with two different damage values (15
                and -1) within a 6-unit high area below the doodad. Calls Bloody() on successful
                hits. Respects dontCrushOnceDestroyed flag to prevent dead doodads from crushing.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.Land">
            <summary>
                Handles all effects and mechanics when a falling doodad hits the ground. Creates
                sand particles if configured, fires plasma projectiles in multiple directions if
                shootPlasmaBoltsOnGroundImpact is set, triggers screen shake based on
                screenShakeAmountOnFall, plays impact sound effects, destroys the doodad if
                destroyDoodadOnFall is true, and calls Bounce to handle velocity changes. Plasma
                bolts are fired at 100, 200, and 300 units/second in both directions.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.RunXMovement(System.Single)">
            <summary>
                Updates the doodad's horizontal position based on X velocity. Calculates movement
                distance from velocity and deltaTime, then adds it to current X position. Used for
                horizontal movement when falling or being pushed.
            </summary>
            <param name="t">Delta time for this frame</param>
        </member>
        <member name="M:DoodadDestroyable.SetPosition(System.Single)">
            <summary>
                Sets the doodad's transform position with an optional X offset. Updates the
                GameObject transform to the current X + offset and Y coordinates. Typically used to
                apply shake effects.
            </summary>
            <param name="xOffset">Horizontal offset to add to base position, usually for shake effects</param>
        </member>
        <member name="M:DoodadDestroyable.SetXY(System.Single,System.Single)">
            <summary>
                Sets the position of the doodad and marks it as needing a position update. Calls the
                base SetXY method to update the internal position, then sets xyDirty to true to
                ensure the visual transform is updated in the next Update cycle. This override
                ensures position changes are properly synchronized with the visual representation.
            </summary>
            <param name="x">The new X coordinate for the doodad</param>
            <param name="y">The new Y coordinate for the doodad</param>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:DoodadDestroyable.bottomLeftOffset">
            <summary>
                Vector3 offset from the transform position to the bottom-left corner of the doodad.
                Used in GetGroundHeight() as the starting point for ground detection raycasts across
                the width of the doodad. Also used in CreateFlames() for flame effect positioning.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.canFall">
            <summary>
                Master flag controlling whether this doodad can fall at all. When false, prevents
                all falling behavior in Update() and StartFalling(). When true (default), allows
                normal falling physics. Also checked in Collapse() and Death() methods.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.falling">
            <summary>
                Indicates whether this doodad is currently falling. Set to true by StartFalling(),
                in Death(), and when shakeTime expires. Set to false in Bounce() when landing. The
                Falling property returns true if either this field is true or shakeTime &gt; 0.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.groundHeight">
            <summary>
                The Y position of the ground below this doodad, calculated by GetGroundHeight()
                using raycasts. Updated each frame when falling to determine landing position. Used
                in Update() to check if the doodad has reached the ground (Y &lt;= groundHeight +
                8f).
            </summary>
        </member>
        <member name="F:DoodadDestroyable.previousXOffset">
            <summary>
                Cached horizontal shake offset from previous frame. Used to detect when position
                needs updating due to shake changes.
            </summary>
            <remarks>
                Compared with current shake offset in Update() to determine if SetPosition() needs
                to be called. Initialized to -1 to ensure first frame always updates. Prevents
                unnecessary transform updates when shake offset hasn't changed.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.raycastHit">
            <summary>
                Primary RaycastHit used for ground detection in GetGroundHeight(). Stores the result
                of downward raycasts from each block width position to find the highest ground
                point. Also used in TryCollapseAbove() for upward raycasts to find objects to
                collapse.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.raycastHitLeft">
            <summary>
                Currently unused RaycastHit field. Likely intended for additional ground detection
                on the left side of multi-block wide doodads, but not implemented in current code.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.raycastHitRight">
            <summary>
                Currently unused RaycastHit field. Likely intended for additional ground detection
                on the right side of multi-block wide doodads, but not implemented in current code.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.topLeftOffset">
            <summary>
                Vector3 offset from the transform position to the top-left corner of the doodad.
                Used in TryCollapseAbove() as the starting point for upward raycasts to detect and
                collapse doodads or blocks positioned above this one.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.xyDirty">
            <summary>
                Flag indicating the position has changed and needs to be updated this frame. Set
                when physics or external changes occur.
            </summary>
            <remarks>
                Set to true when falling (Y movement), in SetXY(), or after collision. Checked along
                with previousXOffset in Update() to trigger SetPosition(). Reset to false after
                position update.
            </remarks>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:DoodadDestroyable.Collapse">
            <summary>
                Handles collapse mechanics for the doodad with different behaviors based on state.
                If the doodad can fall and isn't already falling, broadcasts StartFalling via RPC.
                Otherwise forces destruction by dealing crushing damage exceeding max health,
                creates leaf effects if configured, creates blood effects if configured, and marks
                as dead. Overrides base Doodad.Collapse to add falling mechanics.
            </summary>
        </member>
        <member name="M:DoodadDestroyable.OnCollisionEnter(UnityEngine.Collision)">
            <summary>
                Unity collision callback for when the doodad collides with other objects. Currently
                empty but virtual, allowing derived classes to implement custom collision responses.
            </summary>
            <param name="collisio">The collision data from Unity's physics system</param>
        </member>
        <member name="M:DoodadDestroyable.StartFalling(System.Boolean)">
            <summary>
                Initiates the falling sequence for this doodad. Sets the falling flag if canFall is
                true, and optionally triggers collapse of objects above. If shakeBeforeFalling is
                enabled and forceDisturbAbove is false, delays the collapse trigger until after
                shaking completes.
            </summary>
            <param name="forceDisturbAbove">If true, immediately triggers collapse of objects above regardless of shake settings</param>
        </member>
        <member name="M:DoodadDestroyable.SubMergesUnit">
            <summary>
                Determines if units can partially merge with this doodad for visual depth. Returns
                true (allowing merging) only when the doodad is pristine - neither dead nor damaged.
                Used for visual layering of units behind environmental objects.
            </summary>
            <returns>True if units can merge with this doodad, false if damaged or dead</returns>
        </member>
        <member name="M:DoodadDestroyable.TryCollapseAbove">
            <summary>
                Attempts to trigger falling or collapse of doodads and blocks directly above this
                one. Only executes if CollapseDoodadsAboveWhenDestroyed is true. Casts rays upward
                at 16-unit intervals across the doodad's width, triggers Collapse on any Doodad
                within 9 units above, calls Disturb on FallingBlocks to start their fall sequence,
                and disturbs self when affecting FallingBlocks. Used to create chain reaction
                collapses.
            </summary>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:DoodadDestroyable.CollapseDoodadsAboveWhenDestroyed">
            <summary>
                When true, triggers collapse of doodads directly above this one when destroyed or
                shaking. Creates chain reaction collapses.
            </summary>
            <remarks>
                Used by TryCollapseAbove() which raycasts upward across the doodad's width to find
                and collapse nearby doodads and falling blocks above. Useful for support structures
                that should cause cascading destruction.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.collapseOnLanding">
            <summary>
                When true, automatically triggers Collapse() when the doodad lands after falling.
                Default is true.
            </summary>
            <remarks>
                Checked in Update() after landing detection. Only triggers if not already collapsed.
                Ensures falling doodads break apart on impact rather than settling intact.
            </remarks>
        </member>
        <member name="F:DoodadDestroyable.crushUnitsAndTerrain">
            <summary>
                Enables crushing damage to units below when falling. When true in HitUnits(),
                performs two damage checks using Map.HitUnits() with DamageType.Crush. Only applies
                damage if the doodad is above ground level or (if dontCrushOnceDestroyed is true)
                not yet dead.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.destroyDoodadOnFall">
            <summary>
                When true, immediately destroys the GameObject when the doodad lands after falling.
                Checked in Land() method and calls UnityEngine.Object.Destroy(gameObject). Used for
                objects that should disappear completely upon impact.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.dontCrushOnceDestroyed">
            <summary>
                Modifies crushing behavior when crushUnitsAndTerrain is true. When this is true,
                crushing damage only occurs if the doodad is not dead (!isDead). When false,
                crushing occurs whenever the doodad is above ground height. Checked in HitUnits()
                method.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.fallOnDisturb">
            <summary>
                When true, causes the doodad to start falling when Disturb() is called. Collapses
                any attached chain anchor, sets waitForDamageToFall to false, and calls
                StartFalling(false). Used for objects triggered by nearby disturbances rather than
                direct damage.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.plasmaProjectile">
            <summary>
                The projectile prefab used when shootPlasmaBoltsOnGroundImpact is true. Spawned 6
                times in Land() method with different velocities (±100, ±200, ±300 X velocity) from
                the left and right edges of the doodad.
            </summary>
        </member>
        <member name="F:DoodadDestroyable.shootPlasmaBoltsOnGroundImpact">
            <summary>
                When true, spawns 6 plasma projectiles in different directions upon landing. Set to
                false after firing in Land(). Uses the plasmaProjectile field as the projectile
                template. Creates spark particle effects if createSparksOnDeath is also true.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:EffectsController.Awake">
            <summary>
                Initializes critical components on object creation. Sets up the ground layer mask
                for collision detection, initializes the oil accident ticker system, and sets a
                random initial accident timer between 10-250 seconds.
            </summary>
        </member>
        <member name="M:EffectsController.Start">
            <summary>
                Configures visual effects based on the current level's theme. Disables all fog
                objects by default, then selectively enables theme-specific effects: city fog and
                sun for City theme, hell fog for Hell theme, and fire/ash effects for BurningJungle
                theme (except in BroDown mode). Also checks for constant fireworks flag.
            </summary>
        </member>
        <member name="M:EffectsController.Update">
            <summary>
                Updates weather effect positions to follow the camera each frame. Manages rain and
                ash positioning with offset (-25, 380). Handles firework spawning when enabled and
                conditions are met (campaign mode, level finished). Increments the accident timer
                used for oil spill warning displays.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Properties -->
        <member name="P:EffectsController.instance">
            <summary>
                Gets the singleton instance of EffectsController. Uses lazy initialization to find
                and cache the instance in the scene on first access. Provides global access to the
                effects system from any script.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:EffectsController.inst">
            <summary>
                Private static field that caches the singleton instance used by the instance
                property getter for lazy initialization and quick access.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:EffectsController.CreateAlienParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates alien-themed particle effects. Uses alien earth dots at 1.4x force with half
                the requested count for extraterrestrial debris or organic alien matter destruction.
            </summary>
            <param name="x">The x-coordinate of the alien debris origin</param>
            <param name="y">The y-coordinate of the alien debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateAlienScrapParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates complex alien-themed scrap particles for extraterrestrial destruction
                effects. Distributes particles across 7 different alien scrap emitters with varying
                force multipliers (1.0x to 1.6x). The second emitter uses 1.5x angular velocity for
                enhanced spinning. Includes both regular and tiny alien scrap variants for detailed
                alien material destruction.
            </summary>
            <param name="x">The x-coordinate of the alien scrap origin</param>
            <param name="y">The y-coordinate of the alien scrap origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The base rotational velocity for spinning pieces</param>
        </member>
        <member name="M:EffectsController.CreateBackgroundBloodSplat(System.Single,System.Single)">
            <summary>
                Creates a small blood splat decal at the specified position. This is a static blood
                mark that doesn't move.
            </summary>
            <param name="x">The X coordinate where the blood splat appears.</param>
            <param name="y">The Y coordinate where the blood splat appears.</param>
        </member>
        <member name="M:EffectsController.CreateBackgroundBloodSpray(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a background blood spray effect that moves with velocity. This effect
                appears behind other game elements.
            </summary>
            <param name="x">The X coordinate where the blood spray originates.</param>
            <param name="y">The Y coordinate where the blood spray originates.</param>
            <param name="xI">The horizontal velocity of the blood spray.</param>
            <param name="yI">The vertical velocity of the blood spray.</param>
        </member>
        <member name="M:EffectsController.CreateBackgroundFlameParticle(System.Single,System.Single)">
            <summary>
                Creates a background flame particle at default depth. Randomly selects from four
                flame sheet variations for visual variety. Calls the z-parameter overload with z =
                -12 for background placement.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
        </member>
        <member name="M:EffectsController.CreateBackgroundFlameParticle(System.Single,System.Single,System.Single)">
            <summary>
                Creates a background flame particle with custom z-depth. Randomly selects from four
                flame sheet particle variations (flameSheetBackgroundParticle1-4) to add visual
                variety to fire effects in the background.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
            <param name="z">The z-coordinate (depth) of the flame particle</param>
        </member>
        <member name="M:EffectsController.CreateBackgroundWoodParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates background wood shrapnel effects. Distributes particles among four different
                wood shrapnel types, with the first two types getting slightly more particles
                (count/4 + 1) than the last two (count/4). Uses CreateShrapnel internally for
                physics-based wood debris.
            </summary>
            <param name="x">The x-coordinate of the wood debris origin</param>
            <param name="y">The y-coordinate of the wood debris origin</param>
            <param name="count">The total number of wood pieces to create</param>
            <param name="offsetRadius">The spread radius for shrapnel placement</param>
            <param name="force">The force multiplier for shrapnel velocity</param>
            <param name="xI">The initial x-velocity added to all shrapnel</param>
            <param name="yI">The initial y-velocity added to all shrapnel</param>
        </member>
        <member name="M:EffectsController.CreateBarbedWireParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates barbed wire destruction particles. Combines smaller white dirt particles at
                1.6x force (half count) with grey tinting for rust/dirt, plus shiny metal particles
                (half count) for the wire segments, all with angular velocity for realistic wire
                breakage.
            </summary>
            <param name="x">The x-coordinate of the barbed wire origin</param>
            <param name="y">The y-coordinate of the barbed wire origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wire pieces</param>
        </member>
        <member name="M:EffectsController.CreateBlackPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates black smoke plume particles with customizable physics and appearance.
                Randomly selects between two black plume variations for visual variety. Supports
                life and size multipliers for different smoke intensities.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateBloodArteryEffect(BloodColor,System.Single,System.Single,System.Int32)">
            <summary>
                Creates arterial blood spurting effects with directional spray. Randomly selects
                between two artery animation variants and rotates based on direction (-90° left, 90°
                right, 0° up). Spawns accompanying blood dot particles and plays squirt sound at 25%
                volume.
            </summary>
            <param name="color">The blood color type for the effect</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="direction">Direction of spray: negative = left, positive = right, 0 = upward</param>
        </member>
        <member name="M:EffectsController.CreateBloodExplosionSmall(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,Vector3)">
            <summary>
                Creates a small blood explosion effect. Randomly selects from three blood gush
                prefabs, spawns red blood particles, shakes camera, plays wet explosion sound, and
                disturbs wildlife. Similar to slime explosion but with blood visuals.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spawn radius (unused)</param>
            <param name="offsetYRadius">The vertical spawn radius (unused)</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused)</param>
            <param name="puffSpeed">The particle speed multiplier (unused)</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="shrapnelCount">Number of blood particles to create</param>
            <param name="shrapnelForce">The velocity force for blood particles</param>
            <param name="normal">The surface normal direction (unused)</param>
        </member>
        <member name="M:EffectsController.CreateBloodGushEffect(BloodColor,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Creates a comprehensive blood gush effect combining multiple elements. Randomly
                selects from 3 gush and 3 spurt variations, with optional slime and dot particles.
                Effects are flipped based on direction and particles spray opposite to impact
                direction.
            </summary>
            <param name="color">The blood color type for all effect elements</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact direction (sign determines flip)</param>
            <param name="yI">The vertical impact direction</param>
            <param name="dots">Whether to include blood dot particles</param>
            <param name="slimes">Whether to include slime particles</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticles(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates blood particle effects at the specified position with z-coordinate of 1.
                This is a convenience overload that delegates to the full version with default
                z-depth for standard 2D positioning.
            </summary>
            <param name="color">The blood color type (red, green, oil, frozen)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The total number of particles to create across all sizes</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticles(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a complete blood splatter effect using multiple particle sizes. Distributes
                particles across three different emitters: big particles (1/3 of count), small
                particles (1/2 of count + 1), and dot particles (1/2 of count + 1). Each particle
                type uses reduced spawn radius (10% of provided).
            </summary>
            <param name="color">The blood color type (red, green, oil, frozen)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The total number of particles to create across all sizes</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesBig(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates large blood particle effects at the specified position with z-coordinate of
                1. This is a convenience overload that delegates to the full version with default
                z-depth.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of large particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesBig(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates large blood particle effects with color-specific emitters. Selects
                appropriate particle emitter based on blood type: sewerage (poop), green, oil
                (black), or default red. Falls back to cutscene blood particles when main
                EffectsController is inactive. Each particle has randomized color brightness
                (80-100%).
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of large particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesDots(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates blood dot particle effects at the specified position with z-coordinate of 1.
                This is a convenience overload that delegates to the full version with default
                z-depth and scale of 1.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesDots(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates blood dot particle effects with clustered spawning and size scaling. Uses
                color-specific emitters with 50% chance to add one extra particle. Implements
                clustering where 60% spawn near previous positions. Particles have semi-transparent
                color (70-110% alpha) and scalable size.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesDrip(System.Single,System.Single,System.Single,System.Single,System.Single,BloodColor)">
            <summary>
                Creates a blood drip particle effect at a random position within the specified
                radius. Selects color-specific drip emitter (green, oil/black, or default red) and
                spawns with zero velocity.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="scaleM">The scale multiplier for particle size</param>
            <param name="color">The blood color type (green, oil, or default red)</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesSmall(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small blood particle effects at the specified position with z-coordinate of
                1. This is a convenience overload that delegates to the full version with default
                z-depth.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of small particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesSmall(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small blood particle effects with clustered spawning pattern. Uses
                color-specific emitters and implements a clustering algorithm where 60% of particles
                spawn near previous positions. Particles emit with velocity based on spawn position
                plus base velocity, with color brightness varying 80-100%.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of small particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodSmallSplashEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small blood splash effects for minor impacts. Randomly selects between two
                splash variations with 25% chance each (50% chance of no effect). Used for smaller
                wounds or blood droplet impacts.
            </summary>
            <param name="color">The blood color type for the splash</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact velocity (unused in implementation)</param>
            <param name="yI">The vertical impact velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateBloodSplashEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a blood splash impact effect. Randomly selects between two splash variations
                (50% chance each, with 50% chance of no effect). The blood color parameter
                determines the tint of the splash sprite.
            </summary>
            <param name="bloodColor">The blood color type for tinting the splash</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact velocity (unused in implementation)</param>
            <param name="yI">The vertical impact velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateBloodSprayExplodeEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an explosive blood spray effect for violent deaths. Randomly selects between
                two spray variations and horizontally flips based on direction. Used for gibbing and
                explosive damage effects.
            </summary>
            <param name="color">The blood color type for the spray</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal force direction (sign determines flip)</param>
            <param name="yI">The vertical force direction (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateBloodTinySplashEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates tiny blood splash effects for minimal impacts. Randomly selects between two
                tiny splash variations with 25% chance each (50% chance of no effect). Used for very
                small wounds or single blood drops.
            </summary>
            <param name="color">The blood color type for the splash</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact velocity (unused in implementation)</param>
            <param name="yI">The vertical impact velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateBoneParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates bone debris particles. Identical implementation to CreateGreySandParticles,
                combining bone dots at 1.4x force with small bone particles for skeletal destruction
                effects.
            </summary>
            <param name="x">The x-coordinate of the debris origin</param>
            <param name="y">The y-coordinate of the debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateBoomerangWindEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform,System.Single,System.Single)">
            <summary>
                Creates a spinning wind effect for boomerang weapons. The effect is parented to the
                projectile and rotates continuously. Sets initial rotation and spin speed for the
                visual wind trail effect.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the effect to (usually the boomerang)</param>
            <param name="rotationSpeed">The rotation speed in degrees per second</param>
            <param name="rotation">The initial rotation angle in degrees</param>
        </member>
        <member name="M:EffectsController.CreateBubbles(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
                Creates underwater bubble particle effects rising upward. Uses clustered spawning
                where 60% of bubbles spawn near previous positions. All bubbles emit with upward
                velocity of 10 units/second and use randomized size/lifetime from
                RedBloodParticlesSmall settings.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of bubbles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
        </member>
        <member name="M:EffectsController.CreateBulletPoofEffect(System.Single,System.Single)">
            <summary>
                Creates a small impact poof effect for bullet hits. Used when projectiles strike
                surfaces to provide visual feedback of the impact point with a small dust cloud.
            </summary>
            <param name="x">The x-coordinate of the bullet impact</param>
            <param name="y">The y-coordinate of the bullet impact</param>
        </member>
        <member name="M:EffectsController.CreateChakramTrailEffect(System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
                Creates a chakram (spinning blade) trail effect. Instantiates the chakramTrail
                prefab and initializes it with the specified color and lifetime for visual tracking
                of spinning projectiles.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="life">The lifetime of the trail in seconds</param>
            <param name="color">The color of the trail effect</param>
            <returns>The created ProjectileTrail component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateDepletedUraniumExplosion(UnityEngine.Vector2)">
            <summary>
                Creates a small explosion effect specifically for depleted uranium projectiles.
                Combines a tiny shader explosion visual with a small explosion sound at 60% volume
                for appropriate impact feedback.
            </summary>
            <param name="position">The 2D position where the explosion occurs</param>
        </member>
        <member name="M:EffectsController.CreateDirtParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates dirt and earth debris particles. Combines dirt dust dots at 1.4x force (half
                count) with three types of small dirt particles (one-third count each), with the
                third type using 1.1x force for varied dirt explosion effects.
            </summary>
            <param name="x">The x-coordinate of the dirt origin</param>
            <param name="y">The y-coordinate of the dirt origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateDirtWhiteParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color)">
            <summary>
                Creates white-tinted dirt particles with two color variations. Combines dirt dots at
                1.4x force (half count), small white dirt particles (two-thirds count), and smaller
                white dirt at 1.1x force (one-third count) for snow, ash, or other light-colored
                debris.
            </summary>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color variation for the particles</param>
            <param name="color2">The second color variation for the particles</param>
        </member>
        <member name="M:EffectsController.CreateDoodadGib(SpriteSM,DoodadGibsType,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates environmental debris based on DoodadGibsType enum. Special handling for
                SmallMolotov type which burns ground and damages units on impact. Falls back to
                blank doodad prefab for unspecified types. Copies sprite parameters from the base
                sprite for visual consistency.
            </summary>
            <param name="baseSprite">The source sprite to copy parameters from</param>
            <param name="gibType">The type of doodad gib to create</param>
            <param name="material">The material to apply to the doodad</param>
            <param name="x">The x-coordinate of the doodad origin</param>
            <param name="y">The y-coordinate of the doodad origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>
        <member name="M:EffectsController.CreateDoodadGib(SpriteSM,DoodadPiece,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates environmental debris with explicit prefab specification. Copies all sprite
                parameters from the base sprite including offset, dimensions, and UV coordinates to
                maintain visual consistency when destructible objects break apart.
            </summary>
            <param name="baseSprite">The source sprite to copy parameters from</param>
            <param name="doodadGibPrefab">The doodad piece prefab to instantiate</param>
            <param name="material">The material to apply to the doodad</param>
            <param name="x">The x-coordinate of the doodad origin</param>
            <param name="y">The y-coordinate of the doodad origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>
        <member name="M:EffectsController.CreateDustParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates simple dust particles using the default dirt dots emitter. This convenience
                method forwards to the emitter-based overload for standard dust cloud effects with
                automatic dirt coloring.
            </summary>
            <param name="x">The x-coordinate of the dust origin</param>
            <param name="y">The y-coordinate of the dust origin</param>
            <param name="count">The number of dust particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateDustParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates dust particles with a specified color. This wrapper method uses the default
                dirt dots emitter but applies the provided color instead of random dirt colors for
                custom dust effects.
            </summary>
            <param name="x">The x-coordinate of the dust origin</param>
            <param name="y">The y-coordinate of the dust origin</param>
            <param name="count">The number of dust particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all dust particles</param>
        </member>
        <member name="M:EffectsController.CreateDustParticlesRow(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates dust particles in a horizontal row pattern with custom color. This wrapper
                uses the default dirt dots emitter and forwards to the emitter-based row creation
                method.
            </summary>
            <param name="x">The x-coordinate of the row center</param>
            <param name="y">The y-coordinate of the row (remains constant)</param>
            <param name="count">The number of dust particles to create</param>
            <param name="offsetRadius">The horizontal spread radius for the row</param>
            <param name="xForce">The horizontal force component</param>
            <param name="yForce">The vertical force component</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all dust particles</param>
        </member>
        <member name="M:EffectsController.CreateEggPopEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates an alien egg bursting effect at the specified 3D position. Used when alien
                eggs are destroyed or when facehuggers emerge from eggs.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Creates standard explosion effects with customizable parameters. Delegates to the
                full explosion method with default values for complex explosions (true), spark count
                (40), and white pop effect (true).
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal randomization radius</param>
            <param name="offsetYRadius">The vertical randomization radius</param>
            <param name="disturbRange">The radius for environmental disturbance</param>
            <param name="delayM">The delay multiplier for effect timing</param>
            <param name="puffSpeed">The expansion speed of explosion puffs</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="groundWave">Whether to create a ground shockwave effect</param>
        </member>
        <member name="M:EffectsController.CreateExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Creates comprehensive explosion effects with full parameter control. Includes shader
                explosion, optional ground wave, tree shaking, wildlife/alien disturbance, sound
                effects, and screen shake. Resets accident ticker and can spawn complex multi-part
                explosions.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal randomization radius</param>
            <param name="offsetYRadius">The vertical randomization radius</param>
            <param name="disturbRange">The radius for environmental disturbance</param>
            <param name="delayM">The delay multiplier for effect timing</param>
            <param name="puffSpeed">The expansion speed of explosion puffs</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="groundWave">Whether to create a ground shockwave effect</param>
            <param name="complexExplosion">Whether to spawn additional explosion parts</param>
            <param name="sparkCount">The number of spark particles to create</param>
            <param name="whitePop">Whether to include the white flash effect</param>
        </member>
        <member name="M:EffectsController.CreateExplosionInRectangle(Vector3,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Creates a grid of explosions within a rectangular area. Spawns explosions at 16-unit
                intervals with random position offset and delay. Each explosion has randomized
                velocity based on the provided base values. Note: Several parameters are unused in
                implementation.
            </summary>
            <param name="bottonLeft">The bottom-left corner position of the rectangle</param>
            <param name="widthInBlocks">The width in 16-unit blocks</param>
            <param name="heightInBlocks">The height in 16-unit blocks</param>
            <param name="randomOffset">The random position offset radius for each explosion</param>
            <param name="delayM">The delay multiplier (unused in implementation)</param>
            <param name="puffSpeed">The particle velocity speed multiplier</param>
            <param name="xi">The base horizontal velocity component</param>
            <param name="yi">The base vertical velocity component</param>
            <param name="shakeM">The camera shake multiplier (unused in implementation)</param>
            <param name="volume">The sound volume (unused in implementation)</param>
            <param name="groundWave">Whether to create ground waves (unused in implementation)</param>
            <param name="debugDraw">Whether to draw debug visualization (partially implemented)</param>
        </member>
        <member name="M:EffectsController.CreateExplosionParticle(UnityEngine.Vector2,System.Single,UnityEngine.Vector2)">
            <summary>
                Creates explosion particles at a fixed z-depth of 32. Currently ignores the size and
                velocity parameters in the implementation, creating standard explosion particles at
                the specified position.
            </summary>
            <param name="position">The 2D position for the explosion particles</param>
            <param name="size">The intended size parameter (currently unused)</param>
            <param name="velocity">The intended velocity parameter (currently unused)</param>
        </member>
        <member name="M:EffectsController.CreateFire(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates multiple fire effects distributed randomly within a circular area. Each fire
                has randomized delay and velocity based on its position relative to the center. Used
                for area fire damage and spreading flames.
            </summary>
            <param name="x">The center x-coordinate in world space</param>
            <param name="y">The center y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of fires to create</param>
            <param name="range">The radius of the circular spawn area</param>
            <param name="delay">The base delay multiplier for fire spawning</param>
            <param name="force">The velocity force multiplier</param>
            <param name="velocity">The base velocity vector for all fires</param>
        </member>
        <member name="M:EffectsController.CreateFire(System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates a single fire effect with specified parameters. Randomly selects from three
                flame prefab variations (flame1, flame2, flame3) with equal probability. Returns the
                FlickerFader component for further manipulation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The spawn delay in seconds</param>
            <param name="velocity">The initial velocity vector</param>
            <returns>The created FlickerFader component for the fire effect</returns>
        </member>
        <member name="M:EffectsController.CreateFireSparks(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates fire-type spark particles for burning and welding effects. Uses the
                specialized fire spark emitter to create hot sparks that appear during fire damage,
                explosions, or metalwork.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The number of fire sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
        </member>
        <member name="M:EffectsController.CreateFireTrail(Transform,Vector3)">
            <summary>
                Creates a fire trail particle system attached to a parent transform. The trail
                follows the parent's movement and is positioned at the specified local offset. Used
                for flaming projectiles and burning objects.
            </summary>
            <param name="parent">The transform to attach the fire trail to</param>
            <param name="localOffset">The local position offset from the parent</param>
            <returns>The created ParticleSystem component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateFlameEffect(System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates flame particle effects with occasional fire sparks. Always creates a flame
                particle and has 16.7% chance (2/12) to also spawn fire sparks for added visual
                variety. Used for standard fire effects.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The spawn delay for the flame particle</param>
            <param name="velocity">The initial velocity vector</param>
        </member>
        <member name="M:EffectsController.CreateFlameParticle(System.Single,System.Single)">
            <summary>
                Creates standard flame lick particles at default background depth. Calls the
                z-parameter overload with z = -12 for consistent background flame placement.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
        </member>
        <member name="M:EffectsController.CreateFlameParticle(System.Single,System.Single,System.Single)">
            <summary>
                Creates standard flame lick particles with custom z-depth. Uses the FlameLicks
                particle emitter to generate realistic fire particles. Includes null checks for both
                instance and FlameLicks emitter.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
            <param name="z">The z-coordinate (depth) of the flame particle</param>
        </member>
        <member name="M:EffectsController.CreateGib(Gib,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates a single gib instance with material and flip control. Sets up the gib's
                sprite with rotation settings from the prefab and launches it based on its local
                position relative to the origin point.
            </summary>
            <param name="gibPrefab">The gib prefab to instantiate</param>
            <param name="material">The material to apply to the gib</param>
            <param name="centerX">The x-coordinate of the gib origin</param>
            <param name="centerY">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>
        <member name="M:EffectsController.CreateGib(Gib,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates a single gib with hit position parameters. Currently identical to the
                simpler overload as hit position parameters are not utilized in the implementation.
                Maintained for API compatibility.
            </summary>
            <param name="gibPrefab">The gib prefab to instantiate</param>
            <param name="material">The material to apply to the gib</param>
            <param name="centerX">The x-coordinate of the gib origin</param>
            <param name="centerY">The y-coordinate of the gib origin</param>
            <param name="hitX">The x-coordinate of the impact (unused)</param>
            <param name="hitY">The y-coordinate of the impact (unused)</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>
        <member name="M:EffectsController.CreateGibs(GibHolder,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates gibs with center offset calculation for directional launching. Calculates
                launch vectors based on the difference between hit position and center position,
                creating realistic debris patterns that fly away from the impact point.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="centerX">The x-coordinate of the object center</param>
            <param name="centerY">The y-coordinate of the object center</param>
            <param name="hitX">The x-coordinate of the impact point</param>
            <param name="hitY">The y-coordinate of the impact point</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>
        <member name="M:EffectsController.CreateGibs(GibHolder,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates gibs with explicit material override. Forces all created gibs to use the
                specified material regardless of their prefab settings, useful for themed
                destruction effects or material-specific debris.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="material">The material to apply to all gibs</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>
        <member name="M:EffectsController.CreateGibs(GibHolder,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates gibs using each child's original material. The standard gib creation method
                that preserves the visual appearance defined in the prefabs while applying physics
                forces.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>
        <member name="M:EffectsController.CreateGibs(GibHolder,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a limited number of gibs with default flip direction. Allows control over
                the maximum number of gibs created, useful for performance management or specific
                visual effects.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="count">The maximum number of gibs to create</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>
        <member name="M:EffectsController.CreateGibs(GibHolder,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates a limited number of gibs with flip direction control. Applies 0.8-1.2x
                random force variance to each gib for natural scatter patterns. The flip direction
                parameter controls horizontal sprite orientation.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="count">The maximum number of gibs to create</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
            <param name="flipDirection">The horizontal flip direction (-1 for left, 1 for right)</param>
        </member>
        <member name="M:EffectsController.CreateGibsFromNestedGibHolder(GibHolder,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Activates and launches pre-existing nested gib children from their parent holder.
                Iterates through all child transforms backwards, detaching and activating each gib
                before launching with scaled force (0.0625x multiplier). Preserves existing gib
                positions for authentic destruction patterns.
            </summary>
            <param name="gibs">The GibHolder containing nested gib children</param>
            <param name="hitX">The x-coordinate of the impact point</param>
            <param name="hitY">The y-coordinate of the impact point</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>
        <member name="M:EffectsController.CreateGlassShards(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates glass shattering effects with particle shards, sound, and environmental
                impact. Emits glass shard particles with random distribution, triggers camera shake,
                plays shattering sound, and disturbs nearby wildlife within the specified range.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of glass shard particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius for shards</param>
            <param name="offsetYRadius">The vertical spawn radius for shards</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="force">The force multiplier for shard velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="shakeSpeedM">The camera shake speed multiplier</param>
            <param name="volume">The sound effect volume</param>
            <param name="sizeM">The size multiplier for glass shard particles</param>
        </member>
        <member name="M:EffectsController.CreateGrenadeTrailEffect(System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
                Creates a grenade trail effect that follows projectile movement. Instantiates the
                grenadeTrail prefab and initializes it with the specified color and lifetime for
                visual tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="life">The lifetime of the trail in seconds</param>
            <param name="color">The color of the trail effect</param>
            <returns>The created ProjectileTrail component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateGreySandParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates grey sand or bone-like debris particles. Combines bone dots at 1.4x force
                (full count) with small bone particles at normal force (one-third count) for ashen
                or skeletal debris effects.
            </summary>
            <param name="x">The x-coordinate of the debris origin</param>
            <param name="y">The y-coordinate of the debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateGrindingSparkShower(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates grinding or friction spark shower effects. Uses shower spark emitter with
                20-40% lifetime for metal grinding, saw cutting, or heavy friction visual effects.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The number of grinding sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
        </member>
        <member name="M:EffectsController.CreateGroundWave(System.Single,System.Single,System.Single)">
            <summary>
                Creates an expanding ground shockwave effect radiating from the center point. The
                wave expands outward to the specified range, typically used with explosions to show
                ground impact effects.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
        </member>
        <member name="M:EffectsController.CreateHellPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates hell-themed smoke plume particles with reduced opacity. Uses a red-tinted
                smoke variant with 30% alpha multiplier (0.3) for a supernatural, hellish atmosphere
                effect.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateHugeExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a comprehensive huge explosion with multiple visual and audio effects.
                Includes main explosion, extra random explosions, spark shower, camera shake, audio
                filters, wildlife disturbance, optional ground wave, and screen flash. Designed for
                major explosive events.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spread for extra explosions</param>
            <param name="offsetYRadius">The vertical spread for extra explosions</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused in implementation)</param>
            <param name="puffSpeed">The particle velocity multiplier</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="extraExplosionsCount">Number of additional explosion effects to spawn</param>
            <param name="shrapnelCount">Number of spark particles to create</param>
            <param name="shrapnelForce">The velocity force for spark particles</param>
            <param name="groundWaveDistance">The ground wave range (must be &gt; 16 to activate)</param>
            <param name="lowPassFrequencyLossM">The audio low-pass filter intensity</param>
            <param name="flashEffectM">The screen flash effect intensity</param>
        </member>
        <member name="M:EffectsController.CreateHugeShockWave(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Creates a massive shockwave effect with optional aerial waves. The huge variant has
                greater visual impact and can optionally create waves in the air for enhanced
                effect. Returns the wave instance for customization.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
            <param name="createWavesInAir">Whether to create additional aerial wave effects</param>
            <returns>The created ExplosionGroundWave component</returns>
        </member>
        <member name="M:EffectsController.CreateLargeBloodGushEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an extra large blood gush effect for massive damage. Randomly selects from 3
                large gush variations and flips horizontally based on impact direction. Used for
                heavy weapons and boss damage.
            </summary>
            <param name="color">The blood color type for the gush effect</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact direction (sign determines flip)</param>
            <param name="yI">The vertical impact direction (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateLaserParticle(System.Single,System.Single,UnityEngine.GameObject)">
            <summary>
                Creates a laser burn effect that can attach to a GameObject. The burn effect follows
                the attached object if provided, useful for showing persistent laser damage on
                moving targets.
            </summary>
            <param name="x">The x-coordinate of the laser burn</param>
            <param name="y">The y-coordinate of the laser burn</param>
            <param name="attachedGameObject">Optional GameObject to attach the burn effect to</param>
        </member>
        <member name="M:EffectsController.CreateLeafBurst(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
                Creates foliage destruction effects with colored leaf particles. Distributes leaves
                between two prefab types as shrapnel-style particles. Used when vegetation is
                damaged or destroyed by explosions or impacts.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of leaf particles to create</param>
            <param name="range">The spawn radius for leaf distribution</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="force">The velocity force multiplier</param>
            <param name="leafColor">The color tint for the leaf particles</param>
        </member>
        <member name="M:EffectsController.CreateLeafBurst(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates foliage destruction effects with automatic leaf coloring. Delegates to the
                color-specific overload using the current map's leaf color setting. Provides
                convenient access to leaf effects without manual color specification.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of leaf particles to create</param>
            <param name="range">The spawn radius for leaf distribution</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="force">The velocity force multiplier</param>
        </member>
        <member name="M:EffectsController.CreateMassiveExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a comprehensive massive explosion with enhanced effects. Nearly identical to
                huge explosion but uses larger prefabs and sounds. Includes all the same
                multi-layered effects for maximum visual and audio impact.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spread for extra explosions</param>
            <param name="offsetYRadius">The vertical spread for extra explosions</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused in implementation)</param>
            <param name="puffSpeed">The particle velocity multiplier</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="extraExplosionsCount">Number of additional explosion effects to spawn</param>
            <param name="shrapnelCount">Number of spark particles to create</param>
            <param name="shrapnelForce">The velocity force for spark particles</param>
            <param name="groundWaveDistance">The ground wave range (must be &gt; 16 to activate)</param>
            <param name="lowPassFrequencyLossM">The audio low-pass filter intensity</param>
            <param name="flashEffectM">The screen flash effect intensity</param>
        </member>
        <member name="M:EffectsController.CreateMeleeStrikeEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a melee weapon strike effect. The effect is horizontally flipped based on
                attack direction and vertically flipped on alternating strikes for visual variety.
                Uses a static scale multiplier that alternates between 1 and -1.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal attack direction (sign determines horizontal flip)</param>
            <param name="yI">The vertical attack direction (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateMeleeStrikeLargeEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a large melee weapon strike effect for heavy attacks. Functions identically
                to standard melee strikes but uses a larger prefab. Alternates vertical scale for
                variety.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal attack direction (sign determines horizontal flip)</param>
            <param name="yI">The vertical attack direction (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates metal debris particles without rotation. Combines dirt dots at 1.4x force
                for dust effects with small metal particles at normal force for metallic debris.
                Splits the count evenly between the two particle types.
            </summary>
            <param name="x">The x-coordinate of the debris origin</param>
            <param name="y">The y-coordinate of the debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates rotating metal particle effects with uniform spread. This convenience
                overload for the rotating version calls the full method with equal x and y offset
                radii for circular patterns.
            </summary>
            <param name="x">The x-coordinate of the metal origin</param>
            <param name="y">The y-coordinate of the metal origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning metal pieces</param>
        </member>
        <member name="M:EffectsController.CreateMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates rotating metal particle effects with elliptical spread. Uses two metal
                emitters with the first getting 1 + count/2 particles at 1.2x force and the second
                getting count/2 at 1.1x force for standard metal destruction with rotation.
            </summary>
            <param name="x">The x-coordinate of the metal origin</param>
            <param name="y">The y-coordinate of the metal origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning metal pieces</param>
        </member>
        <member name="M:EffectsController.CreateMusicalShockWave(System.Single,System.Single,System.Single)">
            <summary>
                Creates a musical-themed shockwave effect with unique visuals. Likely includes note
                or sound-based visual elements. Returns the wave instance for customization.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
            <returns>The created ExplosionGroundWave component</returns>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashBigEffect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a large muzzle flash effect for heavy weapons. Instantiates both the big
                flash animation and big glow effect. Unlike smaller flashes, this is not parented to
                any transform and remains stationary.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a standard muzzle flash effect for weapon firing. Instantiates both the main
                flash animation oriented by velocity and a separate glow effect. The main flash is
                parented to the provided transform for proper movement tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashMediumEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a medium-sized muzzle flash effect for intermediate weapons. Instantiates
                both the medium flash animation and standard glow effect. The main flash is parented
                to the provided transform for proper tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashRoundEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a round muzzle flash effect for circular barrel weapons. Instantiates both
                the round flash animation and standard glow effect. The main flash is parented to
                the provided transform for proper tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashRoundEffectBlue(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a blue-tinted round muzzle flash for energy weapons. Uses the specialized
                blue round flash prefab with standard glow effect. The main flash is parented to the
                provided transform for proper tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashTankCannonEffect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a massive tank cannon muzzle flash effect. Uses the tank cannon flash prefab
                with huge glow effect. The flash is horizontally flipped based on firing direction
                (sign of xI) to ensure proper orientation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component (sign determines flip)</param>
            <param name="yI">The vertical velocity component for orientation</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashVomitEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a vomit-style muzzle flash effect for acid/bile weapons. Instantiates the
                vomit flash animation oriented by velocity and parents it to the provided transform.
                Does not include a glow effect like standard muzzle flashes.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateNuclearExplosion(System.Single,System.Single,System.Single)">
            <summary>
                Creates a nuclear explosion particle effect. Instantiates the specialized nuclear
                explosion particle system at the specified position without additional effects or
                modifications.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateOilyFlameEffect(System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates oily flame particle effects with occasional fire sparks. Similar to standard
                flames but uses oily flame particles for darker, smokier appearance. Has 16.7%
                chance to spawn additional sparks.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The spawn delay for the flame particle</param>
            <param name="velocity">The initial velocity vector</param>
        </member>
        <member name="M:EffectsController.CreateOilyFlameParticle(System.Single,System.Single)">
            <summary>
                Creates oil-based flame particles at default background depth. These darker, smokier
                flames are used for burning oil effects. Calls the z-parameter overload with z =
                -12.
            </summary>
            <param name="x">The x-coordinate where the oily flame appears</param>
            <param name="y">The y-coordinate where the oily flame appears</param>
        </member>
        <member name="M:EffectsController.CreateOilyFlameParticle(System.Single,System.Single,System.Single)">
            <summary>
                Creates oil-based flame particles with custom z-depth. Uses the OilyFlameLicks
                particle emitter for darker, smokier fire effects typical of burning oil. Includes
                null checks for safety.
            </summary>
            <param name="x">The x-coordinate where the oily flame appears</param>
            <param name="y">The y-coordinate where the oily flame appears</param>
            <param name="z">The z-coordinate (depth) of the oily flame particle</param>
        </member>
        <member name="M:EffectsController.CreatePinkPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates pink-colored smoke plume particles with reduced opacity. Uses a pink smoke
                variant with 30% alpha multiplier (0.3) for whimsical or special effect smoke.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreatePitchBlackPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates extremely dark black smoke plume particles. Uses a pitch black variant with
                full alpha (1.0) for maximum opacity, suitable for heavy smoke or soot effects from
                intense fires.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreatePlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates standard dark gray smoke plume particles at z-depth 0. This is a convenience
                overload that calls the full version with default z positioning for standard smoke
                effects. The smoke plumes have flames mixed in.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreatePlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates standard dark gray smoke plume particles with full control. Automatically
                selects between small and large plume variants based on size multiplier (threshold
                at 2). Randomly picks between two texture variations for each size category. Large
                plumes have their size halved for proper scaling. The smoke plumes have flames mixed
                in.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses small plumes, 2+ uses large plumes)</param>
        </member>
        <member name="M:EffectsController.CreatePlumes(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates multiple smoke plume effects in a circular pattern. Uses
                CreateShrapnelCircle internally to distribute smoke plumes evenly around the origin
                point, useful for large explosions or smoke grenades. The plumes look like dark gray
                smoke with a bit of flames mixed in.
            </summary>
            <param name="x">The x-coordinate of the plume origin</param>
            <param name="y">The y-coordinate of the plume origin</param>
            <param name="count">The number of smoke plumes to create</param>
            <param name="radius">The radius of the circular spread pattern</param>
            <param name="force">The outward force applied to each plume</param>
            <param name="xI">The initial x-velocity added to all plumes</param>
            <param name="yI">The initial y-velocity added to all plumes</param>
        </member>
        <member name="M:EffectsController.CreatePredabroPlasmaPop(System.Single,System.Single)">
            <summary>
                Creates a Predator-style plasma explosion effect. Used for alien technology weapons
                and plasma-based projectile impacts with distinctive visual styling.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreatePredictionTrailEffect(System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
                Creates a prediction trail effect for trajectory visualization. Instantiates the
                predictionTrail prefab and initializes it with the specified color and lifetime for
                showing predicted paths.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="life">The lifetime of the trail in seconds</param>
            <param name="color">The color of the trail effect</param>
            <returns>The created ProjectileTrail component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateProjectileLargePopEffect(System.Single,System.Single)">
            <summary>
                Creates a large projectile impact effect. Combines a larger pop animation
                (projectileLargeFlickPuff) with a glowing flash effect for visual feedback when
                heavy projectiles hit surfaces or expire.
            </summary>
            <param name="x">The x-coordinate of the impact position</param>
            <param name="y">The y-coordinate of the impact position</param>
        </member>
        <member name="M:EffectsController.CreateProjectilePopEffect(System.Single,System.Single)">
            <summary>
                Creates a small projectile impact effect. Combines a pop animation
                (projectileFlickPuff) with a glowing flash effect for visual feedback when
                projectiles hit surfaces or expire.
            </summary>
            <param name="x">The x-coordinate of the impact position</param>
            <param name="y">The y-coordinate of the impact position</param>
        </member>
        <member name="M:EffectsController.CreateProjectilePopWhiteEffect(System.Single,System.Single)">
            <summary>
                Creates a white-colored projectile impact effect. Combines a white pop animation
                (projectileWhiteFlickPuff) with a glowing flash effect for visual feedback when
                energy or special projectiles hit surfaces.
            </summary>
            <param name="x">The x-coordinate of the impact position</param>
            <param name="y">The y-coordinate of the impact position</param>
        </member>
        <member name="M:EffectsController.CreateProjectilePuff(System.Single,System.Single)">
            <summary>
                Creates projectile impact effects combining a puff and glow. Spawns both a
                projectile flick puff and small muzzle flash glow at the impact position for bullet
                hits and similar projectile impacts.
            </summary>
            <param name="x">The x-coordinate of impact in world space</param>
            <param name="y">The y-coordinate of impact in world space</param>
        </member>
        <member name="M:EffectsController.CreateProjectileTimeBroPopEffect(System.Single,System.Single)">
            <summary>
                Creates a special effect for projectile time (bullet time) activation. The effect
                ignores time scale to maintain visual consistency during slow-motion gameplay.
                Combines a white flicker puff with a small muzzle flash glow distortion for dramatic
                effect.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreatePunchPopEffect(System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
                Creates a directional punch impact effect. The effect automatically orients itself
                based on the velocity vector, flipping horizontally when punching left (negative x
                velocity).
            </summary>
            <param name="x">The x-coordinate of the impact</param>
            <param name="y">The y-coordinate of the impact</param>
            <param name="velocity">The punch velocity vector used to determine effect orientation</param>
        </member>
        <member name="M:EffectsController.CreatePurplePlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates purple-colored smoke plume particles with reduced opacity. Uses a purple
                smoke variant with 30% alpha multiplier (0.3) for magical or poisonous gas effects.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateRedWarningDiamondHuge(System.Single,System.Single,Transform)">
            <summary>
                Creates a huge diamond-shaped red warning effect. The effect is parented to the
                provided transform for movement tracking. Used for major threat indicators or boss
                attacks.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateRedWarningDiamondLargege(System.Single,System.Single,Transform)">
            <summary>
                Creates a large diamond-shaped red warning effect. The effect is parented to the
                provided transform for movement tracking. Used for significant threat indicators.
                Note: Method name contains typo "Largege" instead of "Large".
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateRedWarningEffect(System.Single,System.Single,Transform)">
            <summary>
                Creates a red warning pulse effect at the specified position. The effect is parented
                to the provided transform for movement tracking. Used to indicate danger zones or
                incoming attacks.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateSandDots(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates only sand dot particles for simple sand puff effects. Uses 1.4x force
                multiplier for enhanced spread. Simpler than CreateSandParticles as it omits the
                small sand particles.
            </summary>
            <param name="x">The x-coordinate of the sand origin</param>
            <param name="y">The y-coordinate of the sand origin</param>
            <param name="count">The number of sand dots to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateSandParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates sandy debris particles for desert or beach environments. Combines sand dots
                at 1.4x force (full count) with small sand particles at normal force (one-third
                count) for a dusty sand effect.
            </summary>
            <param name="x">The x-coordinate of the sand origin</param>
            <param name="y">The y-coordinate of the sand origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateSandWhiteParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color)">
            <summary>
                Creates white-tinted sand particles with two color variations. Uses dirt dots at
                1.4x force (full count) combined with small white dirt particles (one-third count)
                for light-colored sand or ash effects.
            </summary>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color variation for the particles</param>
            <param name="color2">The second color variation for the particles</param>
        </member>
        <member name="M:EffectsController.CreateScrapParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates complex scrap metal destruction effects. The most detailed metal particle
                effect, combining: 5 scrap emitters with varying counts and forces, grey dirt dots
                at 1.4x force, 2 tiny scrap emitters at 1.6x force, and 2 metal emitters at 1.6x
                force. Second scrap emitter uses 1.5x angular velocity for varied rotation speeds.
            </summary>
            <param name="x">The x-coordinate of the scrap origin</param>
            <param name="y">The y-coordinate of the scrap origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The base rotational velocity for spinning pieces</param>
        </member>
        <member name="M:EffectsController.CreateSemenParticles(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates semen particle effects using two particle sizes. Distributes particles
                between small particles (1/2 of count + 1) and dot particles (1/2 of count + 1).
                Each particle type uses reduced spawn radius (10% of provided). Note: The BloodColor
                parameter appears unused.
            </summary>
            <param name="color">The blood color type (parameter appears unused in implementation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The total number of particles to create across both sizes</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateSemenParticlesDots(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates semen dot particle effects at the specified position with z-coordinate of 1.
                This method delegates to CreateBloodParticlesDots, effectively treating semen dots
                as blood dot particles.
            </summary>
            <param name="color">The blood color type (used for blood particle creation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>
        <member name="M:EffectsController.CreateSemenParticlesDots(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates semen dot particle effects with clustered spawning and size scaling. Uses
                dedicated semen dot emitter (or cutscene blood dots as fallback) with 50% chance to
                add extra particle. Implements clustering where 60% spawn near previous positions
                with semi-transparent color (70-110% alpha).
            </summary>
            <param name="color">The blood color type (parameter appears unused in implementation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>
        <member name="M:EffectsController.CreateSemenParticlesSmall(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small semen particle effects at the specified position with z-coordinate of
                1. This method delegates to CreateBloodParticlesSmall, effectively treating semen as
                a blood particle type.
            </summary>
            <param name="color">The blood color type (used for blood particle creation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateSemenParticlesSmall(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small semen particle effects with clustered spawning pattern. Uses dedicated
                semen particle emitter and implements clustering where 60% of particles spawn near
                previous positions. Particles emit with velocity based on spawn position plus base
                velocity, with brightness varying 80-100%.
            </summary>
            <param name="color">The blood color type (parameter appears unused in implementation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateShaderExplosion(EffectsController.ExplosionSize,Vector3,System.Single)">
            <summary>
                Creates shader-based particle explosions of specified size. Supports various
                explosion scales from Tiny to Massive, with optional white flash suppression
                (LargeNoWhite). All particle systems respect the delay parameter for synchronized
                effects.
            </summary>
            <param name="size">The explosion size enum (Tiny, Small, Medium, Large, Massive, LargeNoWhite)</param>
            <param name="position">The world position for the explosion center</param>
            <param name="delay">The delay in seconds before particles start emitting</param>
        </member>
        <member name="M:EffectsController.CreateShellSpeedTrail(System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates speed trail effects for fast-moving projectiles like shells. The trail is
                oriented using the angleZ parameter to match projectile rotation. Returns the Puff
                component for attachment to moving objects.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="angleZ">The rotation angle in degrees for trail orientation</param>
            <param name="velocity">The initial velocity vector</param>
            <returns>The created Puff component for the speed trail</returns>
        </member>
        <member name="M:EffectsController.CreateShinyMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates shiny metallic particle effects with rotation. Uses two shiny metal
                emitters, each receiving 1 + count/2 particles at 1.2x force for polished metal
                destruction effects with realistic spinning.
            </summary>
            <param name="x">The x-coordinate of the metal origin</param>
            <param name="y">The y-coordinate of the metal origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning metal pieces</param>
        </member>
        <member name="M:EffectsController.CreateShockWave(System.Single,System.Single,System.Single)">
            <summary>
                Creates a standard shockwave effect with visual distortion. Returns the wave
                instance for additional customization. Used for medium-scale explosions and impacts.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
            <returns>The created ExplosionGroundWave component</returns>
        </member>
        <member name="M:EffectsController.CreateShrapnel(Shrapnel,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates shrapnel debris with initial velocity inheritance. This basic overload
                creates white-colored shrapnel pieces that spread randomly within the radius and
                inherit the specified initial velocity.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
        </member>
        <member name="M:EffectsController.CreateShrapnel(Shrapnel,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates colored shrapnel debris with initial velocity inheritance. Spreads pieces
                randomly within the radius, applies the specified color tint (if not white), and
                launches with force proportional to distance from origin plus the inherited
                velocity.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
            <param name="shrapnelColor">The color tint to apply to the shrapnel pieces</param>
        </member>
        <member name="M:EffectsController.CreateShrapnel(Shrapnel,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates shrapnel debris with a custom material override. Spreads pieces randomly
                within the radius and applies the specified shared material to each piece's renderer
                before launching.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="sharedMaterial">The material to apply to all shrapnel pieces</param>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
        </member>
        <member name="M:EffectsController.CreateShrapnelBlindStar(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Transform)">
            <summary>
                Creates stunning star effects that attach to and follow a unit. Uses PuffTwoLayer
                effects cycling through 3 star variants. Each star is parented to the unit transform
                so it moves with the stunned character. Increments the global stunned stars counter
                for effect management.
            </summary>
            <param name="x">The x-coordinate for star creation (before parenting)</param>
            <param name="y">The y-coordinate for star creation (before parenting)</param>
            <param name="radius">The spread radius for star positioning</param>
            <param name="force">The initial force for star movement (before parenting)</param>
            <param name="count">The number of star effects to create</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="unitTransform">The transform to parent the stars to (usually the stunned unit)</param>
        </member>
        <member name="M:EffectsController.CreateShrapnelCircle(Shrapnel,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates shrapnel debris in a circular arc pattern. Distributes pieces evenly along
                an arc (size based on count), launching each outward from its position on the
                circle. Arc size ranges from 0.1 to 2π radians.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="x">The x-coordinate of the circle center</param>
            <param name="y">The y-coordinate of the circle center</param>
            <param name="radius">The radius of the circular pattern</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create along the arc</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
        </member>
        <member name="M:EffectsController.CreateSlimeExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,Vector3,BloodColor)">
            <summary>
                Creates a full-scale slime or blood explosion based on color. Includes main
                explosion, extra blood gushes, slime particles, camera shake, sound, wildlife
                disturbance, screen flash, 360-degree blood spray, and muzzle flash glow. The most
                comprehensive organic explosion effect.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spread for extra effects</param>
            <param name="offsetYRadius">The vertical spread for extra effects</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused)</param>
            <param name="puffSpeed">The particle speed multiplier (unused)</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="extraExplosionsCount">Number of additional blood gush effects</param>
            <param name="shrapnelCount">Number of slime particles to create</param>
            <param name="shrapnelForce">The velocity force for particles</param>
            <param name="flashEffectM">The screen flash effect intensity</param>
            <param name="normal">The surface normal direction (unused)</param>
            <param name="bloodColor">The blood color type (Green or Red supported)</param>
        </member>
        <member name="M:EffectsController.CreateSlimeExplosionSmall(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,Vector3)">
            <summary>
                Creates a small slime/organic explosion effect. Spawns green slime particles,
                creates visual splatter, shakes camera, plays wet explosion sound, and disturbs
                nearby wildlife. The normal parameter is accepted but not used in the current
                implementation.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spawn radius (unused)</param>
            <param name="offsetYRadius">The vertical spawn radius (unused)</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused)</param>
            <param name="puffSpeed">The particle speed multiplier (unused)</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="shrapnelCount">Number of slime particles to create</param>
            <param name="shrapnelForce">The velocity force for slime particles</param>
            <param name="normal">The surface normal direction (unused)</param>
        </member>
        <member name="M:EffectsController.CreateSlimeParticles(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates slime particle effects with the specified color and parameters. Delegates to
                the color-based overload after converting the BloodColor enum to its corresponding
                Unity Color, reducing the particle count by half.
            </summary>
            <param name="color">The blood color type to use for slime particles</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of particles to create (will be halved internally)</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateSlimeParticles(Color,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates slime particle effects with a specific Unity Color. Uses a clustered
                spawning pattern where 60% of particles spawn near previous positions to create more
                organic slime trails. Particles emit with velocity based on their spawn position
                relative to the center plus base velocity components.
            </summary>
            <param name="color">The Unity Color for the slime particles</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateSmallExplosion(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small-scale explosion effects with shader particles and optional flames.
                Uses random shader explosion size (Small, Medium, or Large) and spawns 0-3 flame
                effects in various patterns. Includes camera shake, sound, and accident ticker
                reset.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
        </member>
        <member name="M:EffectsController.CreateSmallFireTrail(Transform,Vector3)">
            <summary>
                Creates a smaller fire trail particle system attached to a parent transform. Similar
                to standard fire trail but with reduced particle count and size. Used for smaller
                burning projectiles or effects.
            </summary>
            <param name="parent">The transform to attach the fire trail to</param>
            <param name="localOffset">The local position offset from the parent</param>
            <returns>The created ParticleSystem component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateSmallWhiteParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color)">
            <summary>
                Creates small white particles with two color variations. Combines smaller white
                particles (one-quarter count) with dirt dots at 1.1x force (three-quarters count)
                for fine powder or dust effects.
            </summary>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color variation for the particles</param>
            <param name="color2">The second color variation for the particles</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single spark particle with default lifetime. Color interpolates from
                yellow (1,1,0.3) to red (1,0,0) based on the redM parameter for temperature-based
                coloring.
            </summary>
            <param name="x">The x-coordinate for the spark</param>
            <param name="y">The y-coordinate for the spark</param>
            <param name="z">The z-coordinate for the spark</param>
            <param name="offsetRadius">The random position offset radius</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single spark particle with custom lifetime multiplier. Allows control over
                how long the spark remains visible while maintaining temperature-based color
                interpolation.
            </summary>
            <param name="x">The x-coordinate for the spark</param>
            <param name="y">The y-coordinate for the spark</param>
            <param name="z">The z-coordinate for the spark</param>
            <param name="offsetRadius">The random position offset radius</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for the spark</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single)">
            <summary>
                Creates a single spark particle with explicit color and lifetime control. Bypasses
                temperature interpolation for direct color specification, useful for non-fire spark
                effects.
            </summary>
            <param name="x">The x-coordinate for the spark</param>
            <param name="y">The y-coordinate for the spark</param>
            <param name="z">The z-coordinate for the spark</param>
            <param name="offsetRadius">The random position offset radius</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="color">The explicit color for the spark</param>
            <param name="lifeM">The lifetime multiplier for the spark</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticles(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates multiple spark particles with 3D positioning and lifetime control. Each
                spark gets temperature-based coloring and the specified lifetime multiplier.
            </summary>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="z">The z-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for all sparks</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates multiple spark particles at z=0 with lifetime control. This 2D convenience
                method forwards to the 3D version for standard spark effects on the main gameplay
                plane.
            </summary>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for all sparks</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates spark particles using a specific emitter with default lifetime. Allows
                customization of the spark type while maintaining standard spark behavior and
                coloring.
            </summary>
            <param name="emitter">The particle emitter to use for sparks</param>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates spark particles using a specific emitter with lifetime control. Provides
                full control over spark type, duration, and temperature-based coloring for
                specialized spark effects.
            </summary>
            <param name="emitter">The particle emitter to use for sparks</param>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for all sparks</param>
        </member>
        <member name="M:EffectsController.CreateSparkShower(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a mixed spark shower with both shower and floating particles. The
                particlesFloatM parameter controls the ratio between shower sparks (falling) and
                floating sparks (drifting), allowing for customized spark behavior combinations.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The total number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
            <param name="particlesFloatM">The ratio of floating particles (0=all shower, 1=all float)</param>
        </member>
        <member name="M:EffectsController.CreateStoneShrapnel(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates multiple stone debris pieces that fly outward from an impact point. Each
                piece is randomly positioned within the specified radius and launched with velocity
                proportional to its distance from center.
            </summary>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="count">The number of stone shrapnel pieces to create</param>
        </member>
        <member name="M:EffectsController.CreateSuddenSparkShower(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a sudden burst of short-lived floating spark particles. Uses floating spark
                emitter with 20-40% lifetime for quick burst effects like impacts, electrical
                shorts, or sudden friction.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The number of sparks in the burst</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
        </member>
        <member name="M:EffectsController.CreateSummonMagicParticle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates magical summoning particles with initial velocity. Used for spell casting
                and magical summoning effects, allowing the particles to move in a specified
                direction upon creation.
            </summary>
            <param name="x">The x-coordinate where the magic particle appears</param>
            <param name="y">The y-coordinate where the magic particle appears</param>
            <param name="xI">The initial x-velocity of the particle</param>
            <param name="yI">The initial y-velocity of the particle</param>
        </member>
        <member name="M:EffectsController.CreateTimeBroMuzzleFlashEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a time-manipulation muzzle flash that ignores time scaling. Used for Time
                Bro's weapons to ensure effects play at normal speed during slow motion. Creates
                both flash and glow effects with ignoreTimeScale enabled.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>
        <member name="M:EffectsController.CreateTravellingExplosion(System.Single,System.Single,System.Single,Vector2,System.Single)">
            <summary>
                Placeholder for creating moving explosion effects. Currently not implemented and
                performs no action. Parameters are accepted but unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="velocity">The intended movement velocity</param>
            <param name="life">The intended lifetime</param>
        </member>
        <member name="M:EffectsController.CreateWaterDrip(System.Single,System.Single,System.Single,System.Single,System.Single,BloodColor)">
            <summary>
                Creates a water drip particle effect at the specified position. The particle emits
                with zero velocity and randomized size/lifetime. Note: All offset and color
                parameters appear unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal offset (unused in implementation)</param>
            <param name="offsetYRadius">The vertical offset (unused in implementation)</param>
            <param name="scaleM">The scale multiplier for particle size</param>
            <param name="color">The blood color (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateWaterDrip(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,BloodColor)">
            <summary>
                Creates a water drip particle effect with position offset and initial velocity.
                Spawns particle at a random position within the offset radius with specified
                velocity and scaled size/lifetime.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="xI">The initial horizontal velocity</param>
            <param name="yI">The initial vertical velocity</param>
            <param name="scaleM">The scale multiplier for particle size</param>
            <param name="color">The blood color (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateWhiteFlashPop(System.Single,System.Single)">
            <summary>
                Creates a bright white flash explosion effect. Used for energy-based explosions and
                special weapon impacts that need a clean, bright visual burst.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateWhiteFlashPopSmall(System.Single,System.Single)">
            <summary>
                Creates a smaller version of the white flash explosion effect. Used for minor energy
                impacts and smaller special weapon effects that need a bright but less prominent
                visual burst.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateWoodDarkParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates dark wood particle effects with uniform spread radius. This convenience
                overload calls the full version with equal x and y offset radii for circular spread
                patterns.
            </summary>
            <param name="x">The x-coordinate of the dark wood origin</param>
            <param name="y">The y-coordinate of the dark wood origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>
        <member name="M:EffectsController.CreateWoodDarkParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates dark wood particle effects with elliptical spread. Uses four dark wood
                emitters with counts of half, half, third, and third of the total, with varying
                forces (1.2x, 1.1x, 1.0x, 1.0x) for burnt or aged wood destruction effects.
            </summary>
            <param name="x">The x-coordinate of the dark wood origin</param>
            <param name="y">The y-coordinate of the dark wood origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>
        <member name="M:EffectsController.CreateWoodParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates rotating wood particle effects with uniform spread radius. This convenience
                overload calls the full version with equal x and y offset radii for circular spread
                patterns.
            </summary>
            <param name="x">The x-coordinate of the wood debris origin</param>
            <param name="y">The y-coordinate of the wood debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>
        <member name="M:EffectsController.CreateWoodParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates rotating wood particle effects with elliptical spread. Uses three wood
                particle emitters with varying forces (1.2x, 1.1x, 1.0x) plus wood dots at high
                force (40 + 1.6x). Wood dots use random wood colors from the theme for realistic
                variety.
            </summary>
            <param name="x">The x-coordinate of the wood debris origin</param>
            <param name="y">The y-coordinate of the wood debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>
        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector2,System.Single,System.Boolean)">
            <summary>
                Spawns an explosion effect at the specified 2D position using the ExplosionSpawner
                system.
            </summary>
            <param name="position">The 2D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or secondary explosions.</param>
        </member>
        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
                Spawns an explosion effect at the specified 3D position using the ExplosionSpawner
                system.
            </summary>
            <param name="position">The 3D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or secondary explosions.</param>
        </member>
        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector2,System.Single,System.Boolean,UnityEngine.Vector3[]@,System.Single[]@)">
            <summary>
                Spawns an explosion effect at the specified 2D position and returns information
                about the explosion components created.
            </summary>
            <param name="position">The 2D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or secondary explosions.</param>
            <param name="positions">Output array containing the positions of all explosion components created.</param>
            <param name="sizes">Output array containing the sizes of all explosion components created.</param>
        </member>
        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector3,System.Single,System.Boolean,UnityEngine.Vector3[]@,System.Single[]@)">
            <summary>
                Spawns an explosion effect at the specified 3D position and returns information
                about the explosion components created.
            </summary>
            <param name="position">The 3D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or secondary explosions.</param>
            <param name="positions">Output array containing the positions of all explosion components created.</param>
            <param name="sizes">Output array containing the sizes of all explosion components created.</param>
        </member>
        <member name="M:EffectsController.SprayBlood(BloodColor,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Sprays blood onto surrounding terrain using raycasts. Casts rays in a circular
                pattern and applies blood to any blocks hit within range. Red blood additionally
                bloodies nearby doodads. Used to create persistent blood decals on the environment.
            </summary>
            <param name="bloodColor">The type of blood to spray</param>
            <param name="rays">The number of raycast directions to check</param>
            <param name="x">The x-coordinate of spray origin</param>
            <param name="y">The y-coordinate of spray origin</param>
            <param name="range">The maximum spray distance</param>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:EffectsController.ExplodeParticle">
            <summary>
                Particle system for general explosion particle effects.
            </summary>
        </member>
        <member name="F:EffectsController.Explosion">
            <summary>
                Particle system for standard-sized explosion effects, the default explosion size.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionLarge">
            <summary>
                Particle system for large explosion effects, used for powerful explosives.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionLargeNoWhite">
            <summary>
                Particle system for large explosions without white flash, for darker explosion
                visuals.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionMassive">
            <summary>
                Particle system for massive explosion effects, used for extreme destructive blasts.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionNuclear">
            <summary>
                Particle system for nuclear-scale explosion effects, the largest explosion type.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionSmall">
            <summary>
                Particle system for small explosion effects, standard grenade-sized blasts.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionSpawner">
            <summary>
                Main explosion prefab (Explosion) used by all SpawnExplosion() methods as the
                template for creating explosions of various sizes and types throughout the game.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionTiny">
            <summary>
                Particle system for tiny explosion effects, used for very small blasts and impacts.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionTravelling">
            <summary>
                Particle system for travelling explosion effects that move through space.
            </summary>
        </member>
        <member name="F:EffectsController.FireTrail">
            <summary>
                Particle system for standard fire trail effects following projectiles or movement.
            </summary>
        </member>
        <member name="F:EffectsController.FireTrailSmall">
            <summary>
                Particle system for small fire trail effects for lighter projectiles.
            </summary>
        </member>
        <member name="F:EffectsController.FlameLicks">
            <summary>
                Particle system for standard flame licking effects on burning objects.
            </summary>
        </member>
        <member name="F:EffectsController.OilyFlameLicks">
            <summary>
                Particle system for oily flame effects with different visual properties than
                standard flames.
            </summary>
        </member>
        <member name="F:EffectsController.SmokeTrail">
            <summary>
                Particle system for smoke trail effects from rockets or smoking objects.
            </summary>
        </member>
        <member name="F:EffectsController.acidMeltBigDog">
            <summary>
                Melting animation prefab instantiated when living big dog mook units dissolve from
                acid damage after their acid melt timer expires, sized for large canines.
            </summary>
        </member>
        <member name="F:EffectsController.acidMeltDeadBigDog">
            <summary>
                Melting animation prefab instantiated when dead big dog mook units dissolve from
                acid damage, creating a dissolving effect for large canine corpses.
            </summary>
        </member>
        <member name="F:EffectsController.acidMeltDeadDog">
            <summary>
                Melting animation prefab instantiated when dead dog mook units dissolve from acid
                damage, creating a dissolving effect for canine corpses.
            </summary>
        </member>
        <member name="F:EffectsController.acidMeltDog">
            <summary>
                Melting animation prefab instantiated when living dog mook units dissolve from acid
                damage after their acid melt timer expires, creating a canine-specific dissolving
                effect.
            </summary>
        </member>
        <member name="F:EffectsController.acidMeltGrenadier">
            <summary>
                Melting animation prefab instantiated when living grenadier units dissolve from acid
                damage after their acid melt timer expires, creating a grenadier-specific dissolving
                effect.
            </summary>
        </member>
        <member name="F:EffectsController.backgroundBloodSprayPrefab">
            <summary>
                Background blood spray prefab (BackgroundBloodSpray) used by
                CreateBackgroundBloodSpray() to generate animated blood spray effects with velocity,
                creating dynamic blood visuals on background surfaces.
            </summary>
        </member>
        <member name="F:EffectsController.bigDogSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when living big dog mook
                units are covered in acid, creating an exposed skeleton appearance for large
                canines.
            </summary>
        </member>
        <member name="F:EffectsController.bigMookMeltingPrefab">
            <summary>
                Melting animation prefab instantiated when living big mook units dissolve from acid
                damage after their acid melt timer expires, sized for larger units.
            </summary>
        </member>
        <member name="F:EffectsController.bigMookSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when living big mook units
                are covered in acid, creating an exposed skeleton appearance specific to their
                larger size.
            </summary>
        </member>
        <member name="F:EffectsController.blankDoodadGibPrefab">
            <summary>
                Blank doodad piece prefab template for creating custom environmental debris.
            </summary>
        </member>
        <member name="F:EffectsController.blankGibPrefab">
            <summary>
                Blank gib prefab template for creating custom body part debris.
            </summary>
        </member>
        <member name="F:EffectsController.bloodArtery1Prefab">
            <summary>
                First arterial blood spray effect prefab, creates directional pulsing blood stream
                for severe wounds.
            </summary>
        </member>
        <member name="F:EffectsController.bloodArtery2Prefab">
            <summary>
                Second arterial blood spray effect prefab variant, creates alternative pulsing blood
                stream for arterial wounds.
            </summary>
        </member>
        <member name="F:EffectsController.bloodBlockOverlayPrefabs">
            <summary>
                Array of blood overlay sprite prefabs (SpriteSM) used to randomly select and apply
                blood splatter overlays to blocks, creating variety in blood-covered surface
                appearances.
            </summary>
        </member>
        <member name="F:EffectsController.bloodExplosion">
            <summary>
                Blood explosion effect prefab that creates red blood burst for extreme gore effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGush1Prefab">
            <summary>
                First blood gush effect prefab, creates a medium blood spray when units are severely
                damaged.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGush2Prefab">
            <summary>
                Second blood gush effect prefab variant for medium blood spray effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGush3Prefab">
            <summary>
                Third blood gush effect prefab variant, adds variety to medium blood spray visuals.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGushGreen1Prefab">
            <summary>
                First green blood gush effect prefab for alien blood effects. Not currently used but
                available for green-blooded enemies.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGushGreen2Prefab">
            <summary>
                Second green blood gush effect prefab variant for alien blood. Not currently used
                but available for variety.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGushGreen3Prefab">
            <summary>
                Third green blood gush effect prefab variant for alien blood variety. Not currently
                used but available for effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodLargeGush1Prefab">
            <summary>
                First large blood gush effect prefab, creates massive blood spray for extreme damage
                or large units.
            </summary>
        </member>
        <member name="F:EffectsController.bloodLargeGush2Prefab">
            <summary>
                Second large blood gush effect prefab variant for massive blood spray effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodLargeGush3Prefab">
            <summary>
                Third large blood gush effect prefab variant, adds variety to extreme blood effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSmallSplash1Prefab">
            <summary>
                First small blood splash effect prefab, used for minor damage or smaller units.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSmallSplash2Prefab">
            <summary>
                Second small blood splash effect prefab variant for minor blood effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSplash1Prefab">
            <summary>
                First blood splash effect prefab variant, creates standard blood splatter when units
                take damage.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSplash2Prefab">
            <summary>
                Second blood splash effect prefab variant, provides visual variety for blood
                splatter effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSplatDecalSmallPrefab">
            <summary>
                Small blood splat decal prefab used by CreateBackgroundBloodSplat() to place
                stationary blood splatter effects on surfaces, creating persistent blood visuals
                from damage.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSprayExplode1Prefab">
            <summary>
                First blood spray explosion effect prefab, creates radial blood burst from explosive
                damage.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSprayExplode2Prefab">
            <summary>
                Second blood spray explosion effect prefab variant for explosive blood burst
                effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSpurt1Prefab">
            <summary>
                First blood spurt effect prefab, creates directional blood jets accompanying gush
                effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSpurt2Prefab">
            <summary>
                Second blood spurt effect prefab variant for directional blood jet effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSpurt3Prefab">
            <summary>
                Third blood spurt effect prefab variant, provides variety for blood spurt visuals.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTinySplash1Prefab">
            <summary>
                First tiny blood splash effect prefab, used for minimal damage or very small blood
                droplets.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTinySplash2Prefab">
            <summary>
                Second tiny blood splash effect prefab variant for minimal blood effects.
            </summary>
        </member>
        <member name="F:EffectsController.blueMuzzleFlashRoundPrefab">
            <summary>
                Blue-colored round muzzle flash puff effect for energy weapons.
            </summary>
        </member>
        <member name="F:EffectsController.boulderRollPoof">
            <summary>
                Cached instance of the boulder rolling poof effect, created from
                boulderRollPoofPrefab when needed.
            </summary>
        </member>
        <member name="F:EffectsController.boulderRollPoofPrefab">
            <summary>
                Reference to the boulder rolling poof effect prefab, loaded on demand for rolling
                boulder dust trails.
            </summary>
        </member>
        <member name="F:EffectsController.bulletPoofPrefab">
            <summary>
                Bullet impact poof effect that creates small dust cloud when bullets hit surfaces.
            </summary>
        </member>
        <member name="F:EffectsController.chakramTrail">
            <summary>
                Projectile trail prefab for chakram weapons, creating a spinning visual trail effect
                behind thrown chakrams.
            </summary>
        </member>
        <member name="F:EffectsController.corpseSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when dead regular units are
                covered in acid, creating an exposed skeleton appearance on corpses.
            </summary>
        </member>
        <member name="F:EffectsController.deadBigDogSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when dead big dog mook units
                are covered in acid, creating an exposed skeleton appearance on large canine
                corpses.
            </summary>
        </member>
        <member name="F:EffectsController.deadBigMookSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when dead big mook units are
                covered in acid, creating an exposed skeleton appearance on large corpses.
            </summary>
        </member>
        <member name="F:EffectsController.deadDogSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when dead dog mook units are
                covered in acid, creating an exposed skeleton appearance on canine corpses.
            </summary>
        </member>
        <member name="F:EffectsController.deadGrenadierSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when dead grenadier mook
                units are covered in acid, creating an exposed skeleton appearance on grenadier
                corpses.
            </summary>
        </member>
        <member name="F:EffectsController.dogSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when living dog mook units
                are covered in acid, creating an exposed skeleton appearance specific to canine
                units.
            </summary>
        </member>
        <member name="F:EffectsController.explosion">
            <summary>
                Generic explosion puff effect used in various explosion methods for creating blast
                visuals.
            </summary>
        </member>
        <member name="F:EffectsController.explosionBig">
            <summary>
                Big explosion puff effect prefab for larger blast visuals. Not currently used but
                available for medium-sized explosions.
            </summary>
        </member>
        <member name="F:EffectsController.explosionGroundWavePrefab">
            <summary>
                Ground wave explosion effect prefab for terrain-following blast waves. Not currently
                used but available for ground impacts.
            </summary>
        </member>
        <member name="F:EffectsController.explosionHuge">
            <summary>
                Huge explosion puff effect prefab for massive blast visuals. Not currently used but
                available for large explosions.
            </summary>
        </member>
        <member name="F:EffectsController.explosionMassive">
            <summary>
                Massive explosion puff effect prefab for extreme blast visuals. Not currently used
                but available for devastating explosions.
            </summary>
        </member>
        <member name="F:EffectsController.explosionMusicalShockWavePrefab">
            <summary>
                Musical shockwave explosion effect prefab for special sound-based attacks. Not
                currently used but available for sonic weapons.
            </summary>
        </member>
        <member name="F:EffectsController.explosionRangePrefab">
            <summary>
                Prefab for the explosion range indicator effect that shows the area of effect for
                explosions.
            </summary>
        </member>
        <member name="F:EffectsController.explosionShockWaveHugePrefab">
            <summary>
                Huge shockwave explosion effect prefab for massive radial blasts. Not currently used
                but available for extreme explosions.
            </summary>
        </member>
        <member name="F:EffectsController.explosionShockWavePrefab">
            <summary>
                Shockwave explosion effect prefab for radial blast waves. Not currently used but
                available for concussive blasts.
            </summary>
        </member>
        <member name="F:EffectsController.explosionSparkShrapnel">
            <summary>
                Spark shrapnel prefab for explosion effects. Also used by CutsceneEffectsController
                for cinematic explosions.
            </summary>
        </member>
        <member name="F:EffectsController.fileCabinetGibPrefab">
            <summary>
                File cabinet debris piece for office environment destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.flameSheetBackgroundParticle1">
            <summary>
                First background flame sheet particle emitter for large area fire effects.
            </summary>
        </member>
        <member name="F:EffectsController.flameSheetBackgroundParticle2">
            <summary>
                Second background flame sheet particle variant for visual diversity in fires.
            </summary>
        </member>
        <member name="F:EffectsController.flameSheetBackgroundParticle3">
            <summary>
                Third background flame sheet particle variant for complex fire visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.flameSheetBackgroundParticle4">
            <summary>
                Fourth background flame sheet particle variant for maximum fire effect variety.
            </summary>
        </member>
        <member name="F:EffectsController.freezeDamageEffect">
            <summary>
                Freeze damage visual effect prefab that shows ice crystals and freezing on damaged
                units.
            </summary>
        </member>
        <member name="F:EffectsController.grenadeTrail">
            <summary>
                Projectile trail prefab for grenades, creating a visible path that follows grenade
                projectiles through the air.
            </summary>
        </member>
        <member name="F:EffectsController.grenadierSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when living grenadier mook
                units are covered in acid, creating an exposed skeleton appearance specific to
                grenadiers.
            </summary>
        </member>
        <member name="F:EffectsController.groundExplodePoofPrefab">
            <summary>
                Ground explosion poof effect for terrain-based explosions, used by
                CreateGroundExplodePoofEffect method.
            </summary>
        </member>
        <member name="F:EffectsController.laserBurnSprite">
            <summary>
                Laser burn mark puff effect for laser weapon impact visuals.
            </summary>
        </member>
        <member name="F:EffectsController.liftOffBlastFlameWall">
            <summary>
                Flame wall explosion prefab (FlameWallExplosion) used by various units (BroBase,
                BroshipTrooper, DoubleBroSeven, MookArmouredGuy) when performing lift-off moves,
                creating fiery blast effects during aerial maneuvers.
            </summary>
        </member>
        <member name="F:EffectsController.lostSoulSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when HellLostSoul units are
                covered in acid, creating an exposed skeleton appearance for demonic entities.
            </summary>
        </member>
        <member name="F:EffectsController.meleeStrikePrefab1">
            <summary>
                Standard melee strike impact effect prefab, creates visual feedback when melee
                attacks connect.
            </summary>
        </member>
        <member name="F:EffectsController.meleeStrikePrefabLarge">
            <summary>
                Large melee strike impact effect prefab for heavy melee attacks or powered strikes.
            </summary>
        </member>
        <member name="F:EffectsController.meleeStrikeYScale">
            <summary>
                Protected static Y-scale multiplier (default 1) used to alternate the vertical
                orientation of melee strike effects, flipping between 1 and -1 after each strike to
                create visual variety.
            </summary>
        </member>
        <member name="F:EffectsController.meltingBigMookCorpsePrefab">
            <summary>
                Melting animation prefab instantiated when dead big mook units dissolve from acid
                damage, creating a dissolving effect for large corpses.
            </summary>
        </member>
        <member name="F:EffectsController.meltingCorpsePrefab">
            <summary>
                Melting animation prefab instantiated when dead regular units dissolve from acid
                damage, creating a dissolving effect for corpses.
            </summary>
        </member>
        <member name="F:EffectsController.meltingGrenadierCorpsePrefab">
            <summary>
                Melting animation prefab instantiated when dead grenadier units dissolve from acid
                damage, creating a dissolving effect for grenadier corpses.
            </summary>
        </member>
        <member name="F:EffectsController.metalDoodadGibPrefab">
            <summary>
                Metal debris piece for metallic object destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashBigGlowPrefab">
            <summary>
                Large distortion glow effect prefab for heavy weapon muzzle flashes, creating a more
                intense heat distortion visual.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashBigPrefab">
            <summary>
                Large muzzle flash puff effect for heavy weapons.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashGlowPrefab">
            <summary>
                Standard distortion glow effect prefab that accompanies muzzle flashes from small
                firearms, creating a heat distortion visual.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashHugeGlowPrefab">
            <summary>
                Massive distortion glow effect prefab for tank cannons and extreme weapons, creating
                maximum heat distortion.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashMediumPrefab">
            <summary>
                Medium-sized muzzle flash puff effect for larger weapons.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashPrefab">
            <summary>
                Standard muzzle flash puff effect for small firearms.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashRoundPrefab">
            <summary>
                Round-shaped muzzle flash puff effect for specific weapon types.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashSmallGlowPrefab">
            <summary>
                Small distortion glow effect prefab for light weapons and pistols, creating subtle
                heat distortion.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashTankCannonPrefab">
            <summary>
                Tank cannon muzzle flash puff effect for vehicle weaponry.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashVomitPrefab">
            <summary>
                Vomit-style muzzle flash puff effect for acid or bile weapons.
            </summary>
        </member>
        <member name="F:EffectsController.particlesGlassShards">
            <summary>
                Particle emitter for glass shard effects when windows or glass objects break.
            </summary>
        </member>
        <member name="F:EffectsController.predabroPlasmaPop">
            <summary>
                Plasma pop effect prefab specifically for Predabro plasma weapon impacts, creates
                energy burst visual.
            </summary>
        </member>
        <member name="F:EffectsController.predictionTrail">
            <summary>
                Projectile trail prefab for trajectory prediction, used to show predicted paths for
                projectiles.
            </summary>
        </member>
        <member name="F:EffectsController.projectileFlickPuff">
            <summary>
                Standard projectile impact flicker effect prefab. Not currently used but available
                for bullet hits.
            </summary>
        </member>
        <member name="F:EffectsController.projectileLargeFlickPuff">
            <summary>
                Large projectile impact flicker effect prefab for heavy weapon impacts and
                explosions.
            </summary>
        </member>
        <member name="F:EffectsController.projectileWhiteFlickPuff">
            <summary>
                White projectile impact flicker effect prefab. Not currently used but available for
                energy weapon hits.
            </summary>
        </member>
        <member name="F:EffectsController.redWarningDiamondHugePrefab">
            <summary>
                Huge red diamond warning indicator prefab for extreme danger warnings, used by
                CreateRedWarningDiamondHuge method.
            </summary>
        </member>
        <member name="F:EffectsController.redWarningDiamondLargePrefab">
            <summary>
                Large red diamond warning indicator prefab for major threats, used by
                CreateRedWarningDiamondLarge method.
            </summary>
        </member>
        <member name="F:EffectsController.redWarningPulsePrefab">
            <summary>
                Red warning pulse effect prefab for danger indicators, used by
                CreateRedWarningEffect method.
            </summary>
        </member>
        <member name="F:EffectsController.shellSpeedTrailPrefab">
            <summary>
                Speed trail puff effect prefab (Puff) used to create motion blur trail effects
                behind fast-moving projectiles like shells and bullets, enhancing the visual sense
                of speed.
            </summary>
        </member>
        <member name="F:EffectsController.shockWaveExplodePoofPrefab">
            <summary>
                Shockwave explosion poof effect for radial blast visuals. Not currently used but
                available for shockwave effects.
            </summary>
        </member>
        <member name="F:EffectsController.shrapnelStonePrefab">
            <summary>
                Prefab for stone shrapnel particles created by explosions or impacts on stone
                surfaces.
            </summary>
        </member>
        <member name="F:EffectsController.slimeExplosion">
            <summary>
                Slime explosion effect prefab that creates green slime burst visuals for alien or
                acid explosions.
            </summary>
        </member>
        <member name="F:EffectsController.slimeExplosionSmall">
            <summary>
                Small slime explosion effect prefab for minor alien or acid burst visuals.
            </summary>
        </member>
        <member name="F:EffectsController.smokeSmall1Prefab">
            <summary>
                First small smoke puff effect variant, used for minor smoke effects from impacts or
                fires.
            </summary>
        </member>
        <member name="F:EffectsController.smokeSmall2Prefab">
            <summary>
                Second small smoke puff effect variant, provides visual variety for smoke effects.
            </summary>
        </member>
        <member name="F:EffectsController.smokeSmall3Prefab">
            <summary>
                Third small smoke puff effect variant, adds additional variety to smoke visuals.
            </summary>
        </member>
        <member name="F:EffectsController.sparkParticleFire">
            <summary>
                Particle emitter for fire sparks used in CreateFireSparks method for burning
                effects.
            </summary>
        </member>
        <member name="F:EffectsController.sparkParticleFloat">
            <summary>
                Particle emitter for floating spark effects that drift through the air.
            </summary>
        </member>
        <member name="F:EffectsController.sparkParticleShower">
            <summary>
                Particle emitter for sudden spark shower effects from impacts or explosions.
            </summary>
        </member>
        <member name="F:EffectsController.tinyPopPrefab">
            <summary>
                Tiny pop effect prefab used for minimal visual feedback on light impacts or small
                events.
            </summary>
        </member>
        <member name="F:EffectsController.unitMeltingPrefab">
            <summary>
                Melting animation prefab instantiated when regular units dissolve from acid damage
                after their acid melt timer expires, creating a dissolving visual effect.
            </summary>
        </member>
        <member name="F:EffectsController.unitSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when regular units are
                covered in acid, creating an exposed skeleton appearance while the unit melts.
            </summary>
        </member>
        <member name="F:EffectsController.whiteFlashPopPrefab">
            <summary>
                White flash pop effect prefab for bright impact flashes, used by CreateWhiteFlashPop
                method.
            </summary>
        </member>
        <member name="F:EffectsController.whiteFlashPopSmallPrefab">
            <summary>
                Small white flash pop effect prefab for subtle bright flashes, used by
                CreateWhiteFlashPopSmall method.
            </summary>
        </member>
        <member name="F:EffectsController.woodDoodadGibPiece">
            <summary>
                Wood debris piece for wooden object destruction effects.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:EffectsController.CreateAirDashPoofEffect(System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
                Creates an air dash trail effect with automatic orientation based on dash direction.
                Flips horizontally for left/right dashes and rotates 90 degrees for vertical dashes
                to match the movement direction.
            </summary>
            <param name="x">The x-coordinate where the dash effect appears</param>
            <param name="y">The y-coordinate where the dash effect appears</param>
            <param name="velocity">The dash velocity used to determine effect orientation</param>
        </member>
        <member name="M:EffectsController.CreateBoulderRollPoof_Local(System.Single,System.Single,System.Int32)">
            <summary>
                Creates a dust poof effect for rolling boulders or heavy objects. The effect
                orientation is based on the rolling direction, flipping horizontally when rolling
                left. Uses the BoulderRollPoof prefab cached property.
            </summary>
            <param name="x">The x-coordinate where the boulder poof appears</param>
            <param name="y">The y-coordinate where the boulder poof appears</param>
            <param name="direction">The rolling direction (-1 for left, 1 for right)</param>
        </member>
        <member name="M:EffectsController.CreateDashPoofEffect_Local(System.Single,System.Single,System.Int32)">
            <summary>
                Creates a local dash poof effect visible only on the current client. Used internally
                by the networked version or directly for local-only effects. The effect is
                horizontally flipped when dashing left (direction less than 0).
            </summary>
            <param name="x">The x-coordinate where the dash effect appears</param>
            <param name="y">The y-coordinate where the dash effect appears</param>
            <param name="direction">The facing direction (-1 for left, 1 for right) that determines effect orientation</param>
        </member>
        <member name="M:EffectsController.CreateDashPoofEffect_Networked(System.Single,System.Single,System.Int32)">
            <summary>
                Creates a dash poof effect synchronized across all network clients. This networked
                version ensures all players see the same dash visual effect when a character
                performs a dash move. Internally uses RPC to call CreateDashPoofEffect_Local on all
                clients.
            </summary>
            <param name="x">The x-coordinate where the dash effect appears</param>
            <param name="y">The y-coordinate where the dash effect appears</param>
            <param name="direction">The facing direction (-1 for left, 1 for right) that determines effect orientation</param>
        </member>
        <member name="M:EffectsController.CreateFallPoofEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
                Creates a dust trail effect when a character is falling or wall-sliding. Randomly
                selects between two fall poof variations and orients based on direction. Used for
                visual feedback during aerial movement and wall interactions.
            </summary>
            <param name="x">The x-coordinate of the effect</param>
            <param name="y">The y-coordinate of the effect</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The effect color type (default is None for regular dust)</param>
        </member>
        <member name="M:EffectsController.CreateFootPoofEffect(System.Single,System.Single,System.Single,UnityEngine.Vector3,BloodColor)">
            <summary>
                Creates dust or blood effects from footsteps during movement. Randomly selects from
                three foot poof variations for visual variety. Supports different colored effects
                for walking through blood or other liquids.
            </summary>
            <param name="x">The x-coordinate of the footstep</param>
            <param name="y">The y-coordinate of the footstep</param>
            <param name="delay">The delay before the effect appears</param>
            <param name="velocity">The movement velocity (currently unused but part of signature)</param>
            <param name="bloodColor">The color type for bloody footprints (default is None for dust)</param>
        </member>
        <member name="M:EffectsController.CreateGroundExplodePoofEffect(System.Single,System.Single,System.Int32)">
            <summary>
                Creates a ground explosion poof effect using the default ground explode prefab. This
                is a convenience overload that calls the prefab-specific version with the standard
                ground explosion effect.
            </summary>
            <param name="x">The x-coordinate of the ground explosion</param>
            <param name="y">The y-coordinate of the ground explosion</param>
            <param name="direction">The explosion direction (-1 for left, 1 for right)</param>
        </member>
        <member name="M:EffectsController.CreateGroundExplodePoofEffect(Puff,System.Single,System.Single,System.Int32)">
            <summary>
                Creates a ground explosion poof effect with a custom puff prefab. Allows specifying
                different puff types for varied ground explosion visuals. Returns the created Puff
                instance for additional customization.
            </summary>
            <param name="poofPrefab">The custom puff prefab to use for the explosion</param>
            <param name="x">The x-coordinate of the ground explosion</param>
            <param name="y">The y-coordinate of the ground explosion</param>
            <param name="direction">The explosion direction (-1 for left, 1 for right)</param>
            <returns>The created Puff instance for further configuration</returns>
        </member>
        <member name="M:EffectsController.CreateJumpPoofEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
                Creates a dust cloud effect when a character jumps. Randomly selects between two
                jump poof variations and flips the effect based on the character's facing direction.
                Supports colored effects for jumping from bloody or liquid surfaces.
            </summary>
            <param name="x">The x-coordinate of the jump origin</param>
            <param name="y">The y-coordinate of the jump origin</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The effect color type (default is None for regular dust)</param>
        </member>
        <member name="M:EffectsController.CreateLandPoofEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
                Creates a dust cloud impact effect when a character lands on solid ground. Randomly
                selects between two landing variations and orients based on direction. The effect
                scales with landing force for more dramatic impacts from higher falls.
            </summary>
            <param name="x">The x-coordinate of the landing point</param>
            <param name="y">The y-coordinate of the landing point</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The effect color type (default is None for regular dust)</param>
        </member>
        <member name="M:EffectsController.CreateLandSplashEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
                Creates a liquid splash effect when a character lands in water or other liquids.
                Randomly selects between two splash variations and orients based on direction. The
                blood color parameter allows for different liquid types (water, blood, oil).
            </summary>
            <param name="x">The x-coordinate of the splash point</param>
            <param name="y">The y-coordinate of the splash point</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The liquid type color (None for water, or specific blood colors)</param>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:EffectsController.airDashPoofPrefab">
            <summary>
                Air dash poof effect prefab that creates cloud effect when performing aerial dash
                moves.
            </summary>
        </member>
        <member name="F:EffectsController.dashPoof1Prefab">
            <summary>
                Dash movement poof effect that creates dust cloud during rapid dash movements.
            </summary>
        </member>
        <member name="F:EffectsController.fallPoof1Prefab">
            <summary>
                First falling poof effect, creates air disturbance visuals during falls.
            </summary>
        </member>
        <member name="F:EffectsController.fallPoof2Prefab">
            <summary>
                Second falling poof effect variant for variety in fall visuals.
            </summary>
        </member>
        <member name="F:EffectsController.footPoof1Prefab">
            <summary>
                First footstep poof effect variant, creates dust clouds when characters run or walk.
            </summary>
        </member>
        <member name="F:EffectsController.footPoof2Prefab">
            <summary>
                Second footstep poof effect variant, provides visual variety for movement dust.
            </summary>
        </member>
        <member name="F:EffectsController.footPoof3Prefab">
            <summary>
                Third footstep poof effect variant, adds additional variety to footstep effects.
            </summary>
        </member>
        <member name="F:EffectsController.jumpPoof1Prefab">
            <summary>
                First jump takeoff poof effect, creates dust cloud when characters jump.
            </summary>
        </member>
        <member name="F:EffectsController.jumpPoof2Prefab">
            <summary>
                Second jump takeoff poof effect variant for visual variety when jumping.
            </summary>
        </member>
        <member name="F:EffectsController.landPoof1Prefab">
            <summary>
                First landing poof effect, creates dust cloud when characters land from jumps.
            </summary>
        </member>
        <member name="F:EffectsController.landPoof2Prefab">
            <summary>
                Second landing poof effect variant for landing impact variety.
            </summary>
        </member>
        <member name="F:EffectsController.landSplash1Prefab">
            <summary>
                First water landing splash effect when landing in water or liquid surfaces.
            </summary>
        </member>
        <member name="F:EffectsController.landSplash2Prefab">
            <summary>
                Second water landing splash effect variant for liquid impact variety.
            </summary>
        </member>
        <member name="F:EffectsController.whitePunchPopPrefab">
            <summary>
                White punch pop effect prefab for powerful punch impacts, creates bright flash on
                contact.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single)">
            <summary>
                Creates a basic FlickerFader effect at the specified 2D position. This is the
                simplest effect creation method for FlickerFader-based visual effects with default
                z-depth of 0.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Int32,System.Int32,BloodColor)">
            <summary>
                Creates a scaled Puff effect with optional blood coloring. Supports different blood
                types (red, green, oil, frozen, quicksand) and allows independent x/y scaling for
                stretched effects. Returns the created Puff instance for additional customization.
            </summary>
            <param name="puffPrefab">The Puff effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xScale">The horizontal scale factor (1 for normal, -1 for flipped)</param>
            <param name="yScale">The vertical scale factor</param>
            <param name="bloodColor">The blood color type to apply (None for no coloring)</param>
            <returns>The created Puff instance for further configuration</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,UnityEngine.Vector3)">
            <summary>
                Creates a delayed Puff effect with initial velocity and scaling. The effect appears
                after the specified delay and moves according to the velocity vector. Useful for
                timed or physics-based particle effects.
            </summary>
            <param name="puffPrefab">The Puff effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay in seconds before the effect appears</param>
            <param name="xScale">The horizontal scale factor</param>
            <param name="yScale">The vertical scale factor</param>
            <param name="velocity">The initial velocity vector for the effect</param>
        </member>
        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,UnityEngine.Vector3)">
            <summary>
                Creates a delayed FlickerFader effect with initial velocity and scaling. Similar to
                the Puff version but for FlickerFader-type effects. The effect appears after the
                delay and moves with the specified velocity.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay in seconds before the effect appears</param>
            <param name="xScale">The horizontal scale factor</param>
            <param name="yScale">The vertical scale factor</param>
            <param name="velocity">The initial velocity vector for the effect</param>
        </member>
        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single)">
            <summary>
                Creates a FlickerFader effect at a specific 3D position. Provides full control over
                the z-depth for layering effects in the scene. Returns the created instance for
                additional configuration.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <returns>The created FlickerFader instance for further customization</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates a FlickerFader effect at the specified position. This is a convenience
                overload that delegates to the full version with z-coordinate of 0 for standard 2D
                positioning.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The delay before the effect starts</param>
            <param name="velocity">The initial velocity vector for the effect</param>
            <returns>The created FlickerFader component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates a FlickerFader effect with full 3D positioning. Instantiates the prefab and
                configures its delay and velocity settings. FlickerFader effects are used for
                various fading animations throughout the game.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the effect starts</param>
            <param name="velocity">The initial velocity vector for the effect</param>
            <returns>The created FlickerFader component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(DistortionGrow,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a DistortionGrow effect for visual distortion animations. Instantiates the
                distortion prefab and sets its delay. Used for heat haze, explosion distortions, and
                other warping visual effects.
            </summary>
            <param name="distortionPrefab">The DistortionGrow prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The delay before the distortion starts</param>
            <param name="z">The z-coordinate in world space (default 0)</param>
            <returns>The created DistortionGrow component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Single,Vector3,BloodColor)">
            <summary>
                Creates a Puff effect with blood color tinting and scale variations. Supports
                horizontal flipping for xScale parameter values and applies blood coloring.
                Configures delay and velocity for the puff animation.
            </summary>
            <param name="puffPrefab">The Puff prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the puff starts (converted to xScale if not 0)</param>
            <param name="velocity">The initial velocity (y component used as yScale if delay is not 0)</param>
            <param name="bloodColor">The blood color for tinting the effect</param>
            <returns>The created Puff component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(PuffTwoLayer,System.Single,System.Single,System.Single,Vector3,BloodColor)">
            <summary>
                Creates a two-layer Puff effect with blood color support. Instantiates the prefab
                and applies blood coloring to both layers. Used for more complex puff animations
                with foreground and background elements.
            </summary>
            <param name="puffPrefab">The PuffTwoLayer prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The delay before the effect starts (interpreted as xScale)</param>
            <param name="velocity">The initial velocity (y component used as yScale)</param>
            <param name="bloodColor">The blood color for tinting both layers</param>
            <returns>The created PuffTwoLayer component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(FaderSprite,System.Single,System.Single,System.Single)">
            <summary>
                Creates a FaderSprite effect at the specified position. Simple instantiation method
                for fading sprite effects without additional configuration. Used for basic fade-out
                animations.
            </summary>
            <param name="prefab">The FaderSprite prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <returns>The created FaderSprite component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Single,Vector3,Transform)">
            <summary>
                Creates a Puff effect with optional parent transform attachment. Configures scale
                based on delay parameter and can parent the effect to a moving object. Used for
                effects that need to follow characters or projectiles.
            </summary>
            <param name="puffPrefab">The Puff prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay (used as xScale when not 0)</param>
            <param name="velocity">The velocity (y component used as yScale when delay is not 0)</param>
            <param name="parentTransform">Optional transform to parent the effect to</param>
            <returns>The created Puff component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(PuffLaserBurn,System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates a laser burn Puff effect with specialized behavior. Instantiates the laser
                burn prefab and configures its timing and scale properties. Used for scorching and
                burning visual effects from laser weapons.
            </summary>
            <param name="puffPrefab">The PuffLaserBurn prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the burn effect starts</param>
            <param name="velocity">The initial velocity vector</param>
            <returns>The created PuffLaserBurn component</returns>
        </member>
        <member name="M:EffectsController.CreateFlexEffectAir(UnityEngine.Transform)">
            <summary>
                Creates an air flex effect that follows the specified transform. This visual effect
                indicates air/wind-based status from muscle temple power-ups.
            </summary>
            <param name="followTransform">The transform that the flex effect should follow and be parented to.</param>
            <returns>The created MuscleTempleFlexEffect instance attached to the transform.</returns>
        </member>
        <member name="M:EffectsController.CreateFlexEffectGolden(UnityEngine.Transform)">
            <summary>
                Creates a golden flex effect that follows the specified transform. This visual
                effect indicates golden/powered-up status from muscle temple power-ups.
            </summary>
            <param name="followTransform">The transform that the flex effect should follow and be parented to.</param>
            <returns>The created MuscleTempleFlexEffect instance attached to the transform.</returns>
        </member>
        <member name="M:EffectsController.CreateFlexEffectInvulnerable(UnityEngine.Transform)">
            <summary>
                Creates an invulnerability flex effect that follows the specified transform. This
                visual effect indicates invulnerability status from muscle temple power-ups.
            </summary>
            <param name="followTransform">The transform that the flex effect should follow and be parented to.</param>
            <returns>The created MuscleTempleFlexEffect instance attached to the transform.</returns>
        </member>
        <member name="M:EffectsController.CreateSmoke(System.Single,System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
                Creates a smoke particle effect with random variation. Randomly selects from three
                different smoke prefabs to add visual variety. The smoke can be delayed and given
                initial velocity for dynamic smoke trails.
            </summary>
            <param name="x">The x-coordinate where smoke originates</param>
            <param name="y">The y-coordinate where smoke originates</param>
            <param name="delay">The delay before smoke appears</param>
            <param name="velocity">The initial velocity for smoke movement</param>
        </member>
        <member name="M:EffectsController.CreateTeleportFlexExplosion(UnityEngine.Vector3)">
            <summary>
                Creates a teleportation explosion effect at the specified position. This animated
                effect plays when teleporting with muscle temple powers.
            </summary>
            <param name="pos">The position where the teleport explosion effect should appear.</param>
            <returns>The created AnimatedTexture effect instance.</returns>
        </member>
        <member name="M:EffectsController.CreateTeleportFlexOut(UnityEngine.Vector3)">
            <summary>
                Creates a teleportation exit effect at the specified position. This animated effect
                plays at the destination when teleporting with muscle temple powers.
            </summary>
            <param name="pos">The position where the teleport exit effect should appear.</param>
            <returns>The created AnimatedTexture effect instance.</returns>
        </member>
        <member name="M:EffectsController.SpawnMuscleTempleAvatar(UnityEngine.Vector3)">
            <summary>
                Spawns the muscle temple avatar effect at the specified position. This is an
                animated visual effect related to the muscle temple power-up system.
            </summary>
            <param name="position">The position where the avatar effect should appear.</param>
        </member>
        <member name="M:EffectsController.SpawnSparklePuff(UnityEngine.Vector3,System.Single)">
            <summary>
                Creates a sparkle puff effect that moves outward from the spawn position with random
                direction.
            </summary>
            <param name="position">The position where the sparkle puff originates.</param>
            <param name="speed">The speed at which the sparkle particles move outward in random directions.</param>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:EffectsController.boomerangWindPrefab">
            <summary>
                Wind trail puff effect for boomerang weapon movement visuals.
            </summary>
        </member>
        <member name="F:EffectsController.electricity1Prefab">
            <summary>
                First electricity spark puff effect variant for electrical damage visuals.
            </summary>
        </member>
        <member name="F:EffectsController.electricity2Prefab">
            <summary>
                Second electricity spark puff effect variant for visual diversity in electrical
                effects.
            </summary>
        </member>
        <member name="F:EffectsController.electricity3Prefab">
            <summary>
                Third electricity spark puff effect used in CreateElectricityEffect method.
            </summary>
        </member>
        <member name="F:EffectsController.fireSpark1Prefab">
            <summary>
                First fire spark shrapnel prefab that creates sparks ejected from fires and
                explosions.
            </summary>
        </member>
        <member name="F:EffectsController.fireSpark2Prefab">
            <summary>
                Second fire spark shrapnel prefab variant for varied spark effects from fires.
            </summary>
        </member>
        <member name="F:EffectsController.flame1Prefab">
            <summary>
                First flame effect prefab variant used for fire and burning visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.flame2Prefab">
            <summary>
                Second flame effect prefab variant used for fire and burning visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.flame3Prefab">
            <summary>
                Third flame effect prefab variant used for fire and burning visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.flameCandle1Prefab">
            <summary>
                First candle flame puff effect prefab for small persistent fire effects.
            </summary>
        </member>
        <member name="F:EffectsController.flameCandle2Prefab">
            <summary>
                Second candle flame puff effect variant for visual variety in small fires.
            </summary>
        </member>
        <member name="F:EffectsController.flameCandle3Prefab">
            <summary>
                Third candle flame puff effect variant for diverse small fire visuals.
            </summary>
        </member>
        <member name="F:EffectsController.flameCandle4Prefab">
            <summary>
                Fourth candle flame puff effect variant for maximum variety in small fire effects.
            </summary>
        </member>
        <member name="F:EffectsController.leaf1Prefab">
            <summary>
                First leaf shrapnel prefab used in CreateLeafBurst for foliage destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.leaf2Prefab">
            <summary>
                Second leaf shrapnel prefab variant for varied foliage destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.puffDisappearPrefab">
            <summary>
                Standard disappearing puff effect for object removal or teleportation.
            </summary>
        </member>
        <member name="F:EffectsController.puffDisappearRingPrefab">
            <summary>
                Ring-shaped disappearing puff effect for enhanced teleportation visuals.
            </summary>
        </member>
        <member name="F:EffectsController.puffNinjaSmokePrefab">
            <summary>
                Ninja smoke puff effect for stealth abilities and smoke bomb visuals.
            </summary>
        </member>
        <member name="F:EffectsController.puffPeckShinePrefab">
            <summary>
                Peck shine puff effect for impact or special ability visual feedback.
            </summary>
        </member>
        <member name="F:EffectsController.sparkleDisappearPrefab">
            <summary>
                Sparkle effect for magical or special disappearing animations.
            </summary>
        </member>
        <!-- Character State & Effects Methods -->
        <member name="M:EffectsController.CreateAmmoBubble(System.Single,System.Single)">
            <summary>
                Displays an ammunition indicator bubble at the specified position. Reuses the
                singleton bubble instance by restarting and repositioning it. Shown when players
                collect special ammunition.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateBloodTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates blood trail particle effects at z-depth 0. This convenience overload calls
                the full 3D version with default z positioning for standard blood trail effects.
            </summary>
            <param name="x">The x-coordinate where the blood trail originates</param>
            <param name="y">The y-coordinate where the blood trail originates</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses 2 variants, 2+ uses 3 variants)</param>
        </member>
        <member name="M:EffectsController.CreateBloodTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates blood trail particle effects with full control. Uses identical logic to
                slime trails but with blood-specific particle emitters. Small particles use 2
                variations, large particles use 3 variations with size halving for proper scaling.
            </summary>
            <param name="x">The x-coordinate where the blood trail originates</param>
            <param name="y">The y-coordinate where the blood trail originates</param>
            <param name="z">The z-coordinate (depth) of the particle</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses small variants, 2+ uses large variants)</param>
        </member>
        <member name="M:EffectsController.CreateEvilFloatParticle(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single dark floating particle for evil or supernatural effects. Randomly
                selects from four dark color variations ranging from pure black to dark gray (0.231,
                0.231, 0.231). Uses special evil float particles for ominous atmospheric effects.
            </summary>
            <param name="x">The x-coordinate where the particle appears</param>
            <param name="y">The y-coordinate where the particle appears</param>
            <param name="force">The force applied to the floating particle</param>
            <param name="xI">The initial x-velocity of the particle</param>
            <param name="yI">The initial y-velocity of the particle</param>
        </member>
        <member name="M:EffectsController.CreateFleshParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a complex mix of flesh particle effects for gore and gibbing. Combines
                multiple particle types: flesh dust dots at 1.4x force, medium flesh chunks at
                reduced force and offset, and three types of small flesh particles with the third
                type using 1.1x force. The most detailed gore effect available.
            </summary>
            <param name="x">The x-coordinate of the flesh origin</param>
            <param name="y">The y-coordinate of the flesh origin</param>
            <param name="count">The total number of particles to distribute among types</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateFreeLifeBubble(System.Single,System.Single)">
            <summary>
                Displays a free life indicator bubble at the specified position. Reuses the
                singleton bubble instance by restarting and repositioning it. Shown when players
                collect extra life pickups.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateHeroIndicator(Unit)">
            <summary>
                Creates a colored visual indicator above a unit to identify the player. The
                indicator is colored based on the unit's player number and follows the unit's
                position.
            </summary>
            <param name="unit">The unit to attach the hero indicator to. The indicator will be parented to this unit's transform.</param>
        </member>
        <member name="M:EffectsController.CreateKickPlayerBubble(System.Single,System.Single)">
            <summary>
                Creates a new kick player reaction bubble at the specified position. Unlike other
                bubbles, this creates a new instance each time rather than reusing a singleton.
                Returns the bubble for further configuration.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <returns>The created ReactionBubble instance for additional customization</returns>
        </member>
        <member name="M:EffectsController.CreatePromotedBubble(System.Single,System.Single)">
            <summary>
                Displays a promotion indicator bubble at the specified position. Reuses the
                singleton bubble instance by restarting and repositioning it. Shown when players
                achieve promotion milestones.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateSlimeDrip">
            <summary>
                Creates a slime drip particle spawner effect. Instantiates a new spawner from the
                prefab that can be configured to emit slime droplet particles. Returns null if the
                effects controller instance is not available.
            </summary>
            <returns>A ParticleSpawner configured for slime drips, or null if creation fails</returns>
        </member>
        <member name="M:EffectsController.CreateSlimeParticles(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates clustered slime particles with drift behavior. Complex positioning algorithm
                with 60% chance to create new cluster and 40% to continue from previous position.
                Particles drift inward based on force parameter. Creates half the requested count
                plus one, with 0.1x multiplier on offset radii for tighter clustering.
            </summary>
            <param name="color">The blood color type for the slime</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The base count (actual is count/2 + 1)</param>
            <param name="offsetXRadius">The horizontal spread (multiplied by 0.1)</param>
            <param name="offsetYRadius">The vertical spread (multiplied by 0.1)</param>
            <param name="force">The inward drift force</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
        </member>
        <member name="M:EffectsController.CreateSlimeParticlesSpray(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a directional spray of slime particles based on blood color type. Particles
                emit in a circular pattern with force variance controlling the spread angle.
                Converts BloodColor enum to appropriate color before creating the spray effect.
            </summary>
            <param name="color">The blood color type for the slime</param>
            <param name="x">The x-coordinate of the spray origin</param>
            <param name="y">The y-coordinate of the spray origin</param>
            <param name="z">The z-coordinate of the spray origin</param>
            <param name="count">The number of slime particles to spray</param>
            <param name="offsetXRadius">The horizontal offset for spray origin</param>
            <param name="offsetYRadius">The vertical offset for spray origin</param>
            <param name="force">The base force for particle velocity</param>
            <param name="xI">The initial x-velocity direction</param>
            <param name="yI">The initial y-velocity direction</param>
            <param name="forceVariance">The spread control (1.0 = full variance)</param>
        </member>
        <member name="M:EffectsController.CreateSlimeParticlesSpray(UnityEngine.Color,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a directional spray of slime particles with explicit color. Emits particles
                in a circular pattern using Math.Point3OnCircle for even distribution. Force
                variance parameter controls how much the particles spread from the main direction.
            </summary>
            <param name="color">The explicit color for the slime particles</param>
            <param name="x">The x-coordinate of the spray origin</param>
            <param name="y">The y-coordinate of the spray origin</param>
            <param name="z">The z-coordinate of the spray origin</param>
            <param name="count">The number of slime particles to spray</param>
            <param name="offsetXRadius">The horizontal offset for spray origin</param>
            <param name="offsetYRadius">The vertical offset for spray origin</param>
            <param name="force">The base force for particle velocity</param>
            <param name="xI">The initial x-velocity direction</param>
            <param name="yI">The initial y-velocity direction</param>
            <param name="forceVariance">The spread control (1.0 = full variance)</param>
        </member>
        <member name="M:EffectsController.CreateSlimeTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates slime trail particle effects at z-depth 0. This convenience overload calls
                the full 3D version with default z positioning for standard slime trail effects.
            </summary>
            <param name="x">The x-coordinate where the slime trail originates</param>
            <param name="y">The y-coordinate where the slime trail originates</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses 2 variants, 2+ uses 3 variants)</param>
        </member>
        <member name="M:EffectsController.CreateSlimeTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates slime trail particle effects with full control. Automatically selects
                between small and large variants based on size multiplier (threshold at 2). Small
                particles randomly pick from 2 variations, large particles from 3 variations. Large
                particles have their size halved for proper scaling.
            </summary>
            <param name="x">The x-coordinate where the slime trail originates</param>
            <param name="y">The y-coordinate where the slime trail originates</param>
            <param name="z">The z-coordinate (depth) of the particle</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses small variants, 2+ uses large variants)</param>
        </member>
        <member name="M:EffectsController.CreateWaterDrip">
            <summary>
                Creates a water drip particle spawner effect. Instantiates a new spawner from the
                prefab that can be configured to emit water droplet particles. Returns null if the
                effects controller instance is not available.
            </summary>
            <returns>A ParticleSpawner configured for water drips, or null if creation fails</returns>
        </member>
        <member name="M:EffectsController.GetBloodColor(BloodColor)">
            <summary>
                Converts a BloodColor enum value to its corresponding Unity Color. Returns preset
                color values for different blood types: red (default), green (alien), oil
                (mechanical), or frozen (ice blue).
            </summary>
            <param name="color">The blood color type to convert</param>
            <returns>The Unity Color corresponding to the specified blood type</returns>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:EffectsController.AlienEggPop">
            <summary>
                Alien egg hatching animation effect used when alien eggs burst open to release
                facehuggers.
            </summary>
        </member>
        <member name="F:EffectsController.BlackBloodParticlesBig">
            <summary>
                Large black blood particle emitter for major oil or mechanical fluid splatter.
            </summary>
        </member>
        <member name="F:EffectsController.BlackBloodParticlesDots">
            <summary>
                Dot-sized black blood particle emitter used when BloodColor is Oil.
            </summary>
        </member>
        <member name="F:EffectsController.BlackBloodParticlesSmall">
            <summary>
                Small black blood particle emitter for minor oil or mechanical leaks.
            </summary>
        </member>
        <member name="F:EffectsController.FrozenBloodColor">
            <summary>
                The color used for frozen or ice blood effects. Default is light blue (0.19, 0.7,
                1.0).
            </summary>
        </member>
        <member name="F:EffectsController.GreenBloodColor">
            <summary>
                The color used for alien or acid blood effects. Default is pure green.
            </summary>
        </member>
        <member name="F:EffectsController.GreenBloodParticlesBig">
            <summary>
                Large green blood particle emitter for major alien blood splatter effects.
            </summary>
        </member>
        <member name="F:EffectsController.GreenBloodParticlesDots">
            <summary>
                Dot-sized green blood particle emitter used when BloodColor is Green.
            </summary>
        </member>
        <member name="F:EffectsController.GreenBloodParticlesSmall">
            <summary>
                Small green blood particle emitter for minor alien blood effects.
            </summary>
        </member>
        <member name="F:EffectsController.OilBloodColor">
            <summary>
                The color used for oil or mechanical blood effects. Default is dark gray (0.1, 0.1,
                0.1).
            </summary>
        </member>
        <member name="F:EffectsController.PoopBloodParticlesDots">
            <summary>
                Dot-sized sewerage particle emitter used when BloodColor is Sewerage.
            </summary>
        </member>
        <member name="F:EffectsController.PoopParticlesBig">
            <summary>
                Large sewerage particle emitter for major waste splatter effects.
            </summary>
        </member>
        <member name="F:EffectsController.PoopParticlesSmall">
            <summary>
                Small sewerage particle emitter for minor waste effects.
            </summary>
        </member>
        <member name="F:EffectsController.QuicksandBloodColor">
            <summary>
                The color used for sand or dust blood effects. Default is a brown/tan color (0.7,
                0.5, 0.3).
            </summary>
        </member>
        <member name="F:EffectsController.RedBloodColor">
            <summary>
                The color used for standard red blood effects. Default is pure red.
            </summary>
        </member>
        <member name="F:EffectsController.RedBloodParticlesBig">
            <summary>
                Large red blood particle emitter for major blood splatter effects from standard
                enemies.
            </summary>
        </member>
        <member name="F:EffectsController.RedBloodParticlesDots">
            <summary>
                Dot-sized red blood particle emitter used when BloodColor is Red or unspecified.
            </summary>
        </member>
        <member name="F:EffectsController.RedBloodParticlesSmall">
            <summary>
                Small red blood particle emitter for minor blood effects and wounds.
            </summary>
        </member>
        <member name="F:EffectsController.ammoBubble">
            <summary>
                Ammunition reaction bubble effect shown when players collect ammo. Not currently
                used in codebase.
            </summary>
        </member>
        <member name="F:EffectsController.bloodParticlesDripsBlack">
            <summary>
                Black blood drip particle emitter for oil leaking effects from mechanical units.
            </summary>
        </member>
        <member name="F:EffectsController.bloodParticlesDripsGreen">
            <summary>
                Green blood drip particle emitter for alien bleeding effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodParticlesDripsRed">
            <summary>
                Red blood drip particle emitter for continuous bleeding effects from wounds.
            </summary>
        </member>
        <member name="F:EffectsController.broCoveredInAcidMaterial">
            <summary>
                Material applied to bros when they are covered in acid damage effects. Not currently
                used in codebase.
            </summary>
        </member>
        <member name="F:EffectsController.bubbleParticles">
            <summary>
                Particle emitter for underwater bubble effects, emits rising bubbles with varying
                sizes.
            </summary>
        </member>
        <member name="F:EffectsController.freeLifeBubble">
            <summary>
                Free life reaction bubble effect shown when players gain extra lives. Not currently
                used in codebase.
            </summary>
        </member>
        <member name="F:EffectsController.heroIndicator">
            <summary>
                Hero indicator sprite prefab (SpriteSM) used by CreateHeroIndicator() to display
                player-colored visual indicators above hero units for identification.
            </summary>
        </member>
        <member name="F:EffectsController.kickBubble">
            <summary>
                Kick reaction bubble template used to create kick indicator bubbles above players.
            </summary>
        </member>
        <member name="F:EffectsController.kickConfirmMaterial">
            <summary>
                Material for kick indicator bubbles during confirmation phase. Not currently used in
                codebase.
            </summary>
        </member>
        <member name="F:EffectsController.kickConfirmedMaterial">
            <summary>
                Material for kick indicator bubbles when kick is confirmed, used by TestVanDammeAnim
                for visual feedback.
            </summary>
        </member>
        <member name="F:EffectsController.kickdDefaultMaterial">
            <summary>
                Default material for kick indicator bubbles in normal state. Not currently used in
                codebase.
            </summary>
        </member>
        <member name="F:EffectsController.mookCoveredInAcidMaterial">
            <summary>
                Material applied to mooks when they are covered in acid damage effects. Not
                currently used in codebase.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleAvatarEffect">
            <summary>
                Animated texture prefab used by CreateMuscleTempleAvatar() to create visual effects
                related to muscle temple power-ups and avatar transformations.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleFlexEffectAir">
            <summary>
                Air flex visual effect prefab (MuscleTempleFlexEffect) that follows units with
                air/floating muscle temple power-ups, indicating enhanced aerial abilities.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleFlexEffectGolden">
            <summary>
                Golden flex visual effect prefab (MuscleTempleFlexEffect) that follows units with
                golden muscle temple power-ups, creating a golden aura around powered-up characters.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleFlexEffectInvulnerable">
            <summary>
                Invulnerability flex visual effect prefab (MuscleTempleFlexEffect) that follows
                units with invulnerability muscle temple power-ups, indicating temporary damage
                immunity.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleFlexTeleportExplosion">
            <summary>
                Animated texture prefab for the explosion effect that plays when a unit arrives at
                their destination after muscle temple teleportation.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleFlexTeleportOut">
            <summary>
                Animated texture prefab for the departure effect that plays when a unit begins
                muscle temple teleportation, indicating the start of the teleport sequence.
            </summary>
        </member>
        <member name="F:EffectsController.promotedBubble">
            <summary>
                Promotion reaction bubble effect shown when players are promoted or level up.
            </summary>
        </member>
        <member name="F:EffectsController.semenParticlesDots">
            <summary>
                Dot-sized particle emitter for specialized white fluid effects.
            </summary>
        </member>
        <member name="F:EffectsController.semenParticlesSmall">
            <summary>
                Small particle emitter for specialized white fluid spray effects.
            </summary>
        </member>
        <member name="F:EffectsController.sparklePuff">
            <summary>
                Sparkle particle effect prefab (Puff) used by CreateSparklePuff() to generate
                sparkle effects with customizable lifetime for various magical or special visual
                feedback.
            </summary>
        </member>
        <member name="F:EffectsController.waterParticlesDrip">
            <summary>
                Water drip particle emitter for water leaking and dripping effects.
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:EffectsController.CreateSlimeCover(System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Creates a slime cover on nearby terrain surfaces within a specified radius. Casts
                rays from the center point to grid positions and adds slime to surfaces hit.
            </summary>
            <param name="damage">The damage value or intensity of the slime cover to apply.</param>
            <param name="x">The X coordinate of the center position for slime coverage.</param>
            <param name="y">The Y coordinate of the center position for slime coverage.</param>
            <param name="radius">The radius from the center point to check for surfaces to cover with slime.</param>
            <param name="onlyDownward">If true, only applies slime to surfaces below the center Y position. Default is false.</param>
        </member>
        <member name="M:EffectsController.DeregisterTickingBillboard(OilAccidentTicker)">
            <summary>
                Removes an oil accident ticker billboard from the tracking system. Typically called
                when the billboard is destroyed or no longer needs updates.
            </summary>
            <param name="ticker">The oil accident ticker billboard to deregister</param>
        </member>
        <member name="M:EffectsController.RegisterTickingBillboard(OilAccidentTicker)">
            <summary>
                Registers an oil accident ticker billboard to the tracking system. Sets the ticker's
                initial counter value to match the current accident timer. Used for "days since last
                accident" warning signs that reset when explosions occur nearby.
            </summary>
            <param name="ticker">The oil accident ticker billboard to register</param>
        </member>
        <member name="M:EffectsController.ResetAccidentTicker">
            <summary>
                Resets the global accident timer to zero and updates all registered oil accident
                ticker displays. Called when an explosion or accident occurs to reset all "days
                since last accident" counters in the level.
            </summary>
        </member>
        <member name="M:EffectsController.StartRainAndLightning">
            <summary>
                Activates weather effects including rain particles and lightning. Enables the
                LightningController component, activates rain visual effects that follow the camera,
                and adjusts fog positioning based on level theme (City/America or Hell) and game
                mode. In deathmatch modes, raises fog to y=70 for better visibility.
            </summary>
        </member>
        <!-- Environmental Interaction Properties -->
        <member name="P:EffectsController.BoulderRollPoof">
            <summary>
                Gets the puff effect used when boulders roll. Lazy-loads the Puff component from the
                prefab reference on first access and caches it for subsequent use. Used for
                dust/debris effects from rolling objects.
            </summary>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:EffectsController._oilAccidentTickers">
            <summary>
                Private list tracking all registered OilAccidentTicker objects in the scene, used to
                update oil accident counter displays when accidents occur.
            </summary>
        </member>
        <member name="F:EffectsController._timeSinceAccident">
            <summary>
                Private timer tracking elapsed time since the last oil-related accident, incremented
                in Update() and reset to zero when ResetAccidentTicker() is called.
            </summary>
        </member>
        <member name="F:EffectsController.ashHolder">
            <summary>
                Transform container for ash particle effects that follows the camera in burning
                environments.
            </summary>
        </member>
        <member name="F:EffectsController.backgroundWoodShrapnel1">
            <summary>
                First wood shrapnel variant for background wooden object destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.backgroundWoodShrapnel2">
            <summary>
                Second wood shrapnel variant for background wooden object destruction variety.
            </summary>
        </member>
        <member name="F:EffectsController.backgroundWoodShrapnel3">
            <summary>
                Third wood shrapnel variant for background wooden object destruction diversity.
            </summary>
        </member>
        <member name="F:EffectsController.backgroundWoodShrapnel4">
            <summary>
                Fourth wood shrapnel variant for background wooden object destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTrailPuffBigParticle1">
            <summary>
                First large blood trail particle emitter for heavy bleeding effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTrailPuffBigParticle2">
            <summary>
                Second large blood trail particle variant for major blood splatter trails.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTrailPuffBigParticle3">
            <summary>
                Third large blood trail particle variant for extreme bleeding visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTrailPuffParticle1">
            <summary>
                First blood trail particle emitter used randomly for blood trail variety.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTrailPuffParticle2">
            <summary>
                Second blood trail particle emitter alternated with first for visual diversity.
            </summary>
        </member>
        <member name="F:EffectsController.dustParticles">
            <summary>
                Particle emitter for dust cloud effects from impacts, falls, and environmental
                disturbances.
            </summary>
        </member>
        <member name="F:EffectsController.evilFloatParticles">
            <summary>
                Particle emitter for evil floating ambient particles in dark environments.
            </summary>
        </member>
        <member name="F:EffectsController.fireAndAsh">
            <summary>
                Flag indicating whether fire and ash environmental effects are active, used in
                BurningJungle theme.
            </summary>
        </member>
        <member name="F:EffectsController.fireWorks">
            <summary>
                Array of victory firework effect prefabs launched when levels are completed in
                campaign mode.
            </summary>
        </member>
        <member name="F:EffectsController.fireWorksCount">
            <summary>
                Counter tracking number of fireworks launched, used to vary launch positions and
                prefab selection.
            </summary>
        </member>
        <member name="F:EffectsController.fireWorksCounter">
            <summary>
                Timer that controls the interval between launching victory fireworks.
            </summary>
        </member>
        <member name="F:EffectsController.fireworksOn">
            <summary>
                Static flag controlling whether victory fireworks should be displayed on level
                completion.
            </summary>
        </member>
        <member name="F:EffectsController.flashEffect">
            <summary>
                Full screen flash effect component for bright flashes from explosions and other
                intense effects.
            </summary>
        </member>
        <member name="F:EffectsController.fogObject">
            <summary>
                Transform for standard fog visual effect used in City and America themes.
            </summary>
        </member>
        <member name="F:EffectsController.forceFireworksOn">
            <summary>
                Instance flag to force fireworks display regardless of game state, useful for
                testing or special events.
            </summary>
        </member>
        <member name="F:EffectsController.gustFrequency">
            <summary>
                Frequency value that determines how often wind gusts occur, used by the wind system
                to create periodic wind variations on affected objects.
            </summary>
        </member>
        <member name="F:EffectsController.gustM">
            <summary>
                Gust magnitude multiplier that controls the intensity of individual wind gusts when
                they occur, amplifying the wind effect during gust periods.
            </summary>
        </member>
        <member name="F:EffectsController.hellFogObject">
            <summary>
                Transform for hell-themed red fog effect used in Hell levels.
            </summary>
        </member>
        <member name="F:EffectsController.lightObject">
            <summary>
                GameObject reference for global lighting control in the scene.
            </summary>
        </member>
        <member name="F:EffectsController.lightningController">
            <summary>
                Component that manages lightning strike effects during rain weather conditions.
            </summary>
        </member>
        <member name="F:EffectsController.offsetM">
            <summary>
                Position offset multiplier (default 1.0) used in wind calculations to determine
                spatial variations in wind effects across different positions.
            </summary>
        </member>
        <member name="F:EffectsController.oilParticleParent">
            <summary>
                Parent transform used by oil-related objects (OilTankBlock, DoodadOilParticle,
                DoodadOilSpawner) to organize and manage oil particle effects in the scene
                hierarchy.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffBigParticle1">
            <summary>
                First large smoke plume particle emitter for bigger explosion dust effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffBigParticle2">
            <summary>
                Second large smoke plume particle variant for massive dust clouds.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticle1">
            <summary>
                First smoke plume particle emitter for dust and smoke puff effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticle2">
            <summary>
                Second smoke plume particle variant for visual variety in dust clouds.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticleBlack1">
            <summary>
                First black smoke plume particle emitter for dark smoke effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticleBlack2">
            <summary>
                Second black smoke plume particle variant for visual diversity.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticleHell">
            <summary>
                Hell-themed smoke plume particle emitter for infernal visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticlePink">
            <summary>
                Pink smoke plume particle emitter for special visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticlePitchBlack">
            <summary>
                Pitch black smoke plume particle emitter for the darkest smoke effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticlePurple">
            <summary>
                Purple smoke plume particle emitter for magical or alien effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumeShrapnelPrefab">
            <summary>
                Shrapnel prefab for smoke plume particle effects from explosions.
            </summary>
        </member>
        <member name="F:EffectsController.rainAndLightning">
            <summary>
                Flag indicating whether rain and lightning weather effects are currently active.
            </summary>
        </member>
        <member name="F:EffectsController.rainFollowTransform">
            <summary>
                Cached transform reference for camera following used by rain and ash effects.
            </summary>
        </member>
        <member name="F:EffectsController.rainHolder">
            <summary>
                Transform container for rain particle effects that follows the camera position.
            </summary>
        </member>
        <member name="F:EffectsController.slimeCoverPrefab">
            <summary>
                Slime ground cover prefab for upward-facing surfaces, used in CreateSlimeCover
                method.
            </summary>
        </member>
        <member name="F:EffectsController.slimeCoverSidesPrefab">
            <summary>
                Slime ground cover prefab for side surfaces (walls), used in CreateSlimeCover
                method.
            </summary>
        </member>
        <member name="F:EffectsController.slimeDripSpawner">
            <summary>
                Particle spawner prefab (ParticleSpawner) used by CreateSlimeDrip() to generate
                slime dripping particle effects from surfaces, creating environmental slime
                interactions.
            </summary>
        </member>
        <member name="F:EffectsController.slimeParticles">
            <summary>
                Particle emitter for slime-related environmental effects and acid splashes.
            </summary>
        </member>
        <member name="F:EffectsController.slimeTrailPuffBigParticle1">
            <summary>
                First large slime trail particle emitter for heavy slime disturbance effects.
            </summary>
        </member>
        <member name="F:EffectsController.slimeTrailPuffBigParticle2">
            <summary>
                Second large slime trail particle variant for major slime impacts.
            </summary>
        </member>
        <member name="F:EffectsController.slimeTrailPuffBigParticle3">
            <summary>
                Third large slime trail particle variant for maximum visual variety in slime
                effects.
            </summary>
        </member>
        <member name="F:EffectsController.slimeTrailPuffParticle1">
            <summary>
                First slime trail particle emitter for movement through slime effects.
            </summary>
        </member>
        <member name="F:EffectsController.slimeTrailPuffParticle2">
            <summary>
                Second slime trail particle variant for diverse slime movement visuals.
            </summary>
        </member>
        <member name="F:EffectsController.summonMagicParticle">
            <summary>
                Particle emitter for magical summoning effects used by warlock portals.
            </summary>
        </member>
        <member name="F:EffectsController.sunObject">
            <summary>
                Transform for sun lighting effect object used in City theme environments.
            </summary>
        </member>
        <member name="F:EffectsController.thickFogObject">
            <summary>
                Transform for thick fog visual effect for enhanced atmospheric density.
            </summary>
        </member>
        <member name="F:EffectsController.waterDripSpawner">
            <summary>
                Particle spawner prefab (ParticleSpawner) used by CreateWaterDrip() to generate
                water dripping particle effects from surfaces, creating environmental water
                interactions.
            </summary>
        </member>
        <member name="F:EffectsController.windGustPattern">
            <summary>
                Animation curve that defines the wind gust intensity pattern over time, used by the
                wind system to create realistic non-linear wind variations.
            </summary>
        </member>
        <member name="F:EffectsController.windStrength">
            <summary>
                Overall wind intensity multiplier that controls the strength of wind effects applied
                to physics-enabled objects like JigglyBit components.
            </summary>
        </member>
        <!-- Status Effects Methods -->
        <member name="M:EffectsController.CreateBlindedEffect(System.Single,System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
                Creates rotating star effects for stunned or blinded units. Uses a cycling counter
                to alternate between three different star prefab variations for visual variety. Each
                call increments the global stunned stars counter to ensure variation across multiple
                uses.
            </summary>
            <param name="x">The x-coordinate for the stars</param>
            <param name="y">The y-coordinate for the stars</param>
            <param name="delay">The delay before stars appear</param>
            <param name="velocity">The velocity parameter (currently unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateCreateTinyPop(System.Single,System.Single)">
            <summary>
                Creates a tiny popping effect for minor impacts or UI feedback. Produces a small
                burst animation at the specified position. Note: Method name contains redundant
                "Create".
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateDistortionHeatWaveEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a heat wave distortion effect and returns the DistortionGrow component for
                custom configuration. Allows fine-tuning of the distortion parameters after creation
                for specific heat shimmer effects.
            </summary>
            <param name="x">The x-coordinate of the heat source</param>
            <param name="y">The y-coordinate of the heat source</param>
            <param name="z">The z-coordinate (depth) of the effect</param>
            <returns>The DistortionGrow component for additional configuration</returns>
        </member>
        <member name="M:EffectsController.CreateDistortionWobbleLargeRingEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a large heat distortion ring effect. Used for major explosions and intense
                heat sources to create dramatic expanding air ripples visible across a wide area.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>
        <member name="M:EffectsController.CreateDistortionWobbleLargeRingFullScreenEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a massive screen-filling distortion effect with extreme parameters. Sets
                alpha to 9 for maximum intensity, growth rate to 1355 for rapid expansion, and
                growth lerp decrease to 0.1. Used for nuclear explosions or other catastrophic
                events that affect the entire screen.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>
        <member name="M:EffectsController.CreateDistortionWobblePinchEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a pinch-style distortion effect that pulls inward rather than expanding.
                Used for implosion effects, black holes, or vacuum-based attacks where the visual
                effect should appear to suck inward.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>
        <member name="M:EffectsController.CreateDistortionWobbleRingEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a medium-sized heat distortion ring effect. Used for standard explosions and
                moderate heat effects to create visible air ripples that expand from the impact
                point.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>
        <member name="M:EffectsController.CreateDistortionWobbleSmallRingEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a small heat distortion ring effect. Used for minor explosions and
                heat-based attacks to create a rippling air distortion that expands outward from the
                origin point.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>
        <member name="M:EffectsController.CreateElectricShock(System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates electrical shock visual effects with random variations. Randomly selects
                from three electricity prefabs with equal probability. Used for electrical damage,
                stun effects, and power-related visuals.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the shock effect starts</param>
            <param name="velocity">The initial velocity vector for the effect</param>
            <returns>The created Puff component for the electrical effect</returns>
        </member>
        <member name="M:EffectsController.CreateExplosionRangePop(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an explosion range indicator that expands to show blast radius. Instantiates
                the range pop prefab and sets its size based on the explosion range. Also resets the
                accident ticker for oil spill signs.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="range">The explosion radius to visualize</param>
            <returns>The created ExplosionRangePop component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateFreezeDamageEffect(System.Single,System.Single,UnityEngine.Transform)">
            <summary>
                Creates a freeze damage visual effect that can optionally attach to a parent
                transform. Used to show ice crystals or frost effects on frozen units. The effect is
                created at z-depth -10 for proper layering.
            </summary>
            <param name="x">The x-coordinate of the freeze effect</param>
            <param name="y">The y-coordinate of the freeze effect</param>
            <param name="parentTransform">Optional transform to parent the effect to (null for world space)</param>
        </member>
        <member name="M:EffectsController.CreateNinjaSmokeEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a ninja smoke bomb effect for stealth abilities. Produces a cloud of smoke
                at the specified position. Note: Velocity parameters are accepted but unused in the
                current implementation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreatePuffDisappearEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a disappearance puff effect with accompanying ring. Spawns both a main puff
                cloud and a ring effect with 0.25 unit vertical offset. Used for teleportation and
                vanishing abilities.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreatePuffDisappearRingEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates just the ring portion of a disappearance effect. Returns the Puff component
                for further manipulation. Note: Velocity parameters are accepted but unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
            <returns>The created Puff component for the ring effect</returns>
        </member>
        <member name="M:EffectsController.CreatePuffPeckShineEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a shining effect typically used for peck attacks or impacts. Returns the
                Puff component for further manipulation. Note: Velocity parameters are accepted but
                unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
            <returns>The created Puff component for the shine effect</returns>
        </member>
        <member name="M:EffectsController.CreateReviveZombieEffect(System.Single,System.Single,Transform)">
            <summary>
                Creates a zombie revival effect at the specified position. The effect is parented to
                the provided transform to follow the reviving unit. Used when necromancer abilities
                raise the undead.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateRevivedZombiePassiveEffect(System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a persistent effect for revived zombie units. The effect is parented to the
                zombie transform to provide continuous visual indication of undead status. Typically
                shows as a subtle aura or particle effect.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateSparkleDisappearEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a sparkly disappearance effect for magical vanishing. Produces a glittering
                particle effect at the specified position. Note: Velocity parameters are accepted
                but unused in the current implementation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateUndeadSelfReviveEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a self-revival effect for undead units coming back to life. Unlike other
                revival effects, this is not parented and plays as a one-shot animation at the
                revival location.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
        </member>
        <!-- Status Effects Fields -->
        <member name="F:EffectsController.bigDogCoveredInAcidMaterial">
            <summary>
                Material applied to big dog mook units (mega MookDog) when they are covered in acid,
                creating a visual acid effect on their sprite renderer.
            </summary>
        </member>
        <member name="F:EffectsController.bigMookCoveredInAcidMaterial">
            <summary>
                Material applied to big mook units (MookBigGuy and large MookSuicide) when they are
                covered in acid, creating a visual acid effect on their sprite renderer.
            </summary>
        </member>
        <member name="F:EffectsController.distortionHeatWavePrefab">
            <summary>
                Heat wave distortion effect prefab for thermal shimmer effects. Not currently used
                but available for heat-based visuals.
            </summary>
        </member>
        <member name="F:EffectsController.distortionPinchGrowPrefab">
            <summary>
                Pinching distortion effect prefab that creates a warping pinch visual, used by
                CreateDistortionPinch method.
            </summary>
        </member>
        <member name="F:EffectsController.distortionWobbleGrowPrefab">
            <summary>
                Standard wobbling distortion effect prefab for medium reality distortion visuals,
                used by CreateDistortionWobble method.
            </summary>
        </member>
        <member name="F:EffectsController.distortionWobbleLargeGrowPrefab">
            <summary>
                Large wobbling distortion effect prefab for major reality warping, used by
                CreateDistortionWobbleLarge and extreme distortion methods.
            </summary>
        </member>
        <member name="F:EffectsController.distortionWobbleSmallGrowPrefab">
            <summary>
                Small wobbling distortion effect prefab for minor reality warping visuals, used by
                CreateDistortionWobbleSmall method.
            </summary>
        </member>
        <member name="F:EffectsController.dogCoveredInAcidMaterial">
            <summary>
                Material applied to regular dog mook units (MookDog) when they are covered in acid,
                creating a visual acid effect on their sprite renderer.
            </summary>
        </member>
        <member name="F:EffectsController.grenadierMookCoveredInAcidMaterial">
            <summary>
                Material applied to grenadier mook units (MookGrenadier) when they are covered in
                acid, creating a visual acid effect on their sprite renderer.
            </summary>
        </member>
        <member name="F:EffectsController.hellBoomerCoveredInAcidMaterial">
            <summary>
                Material applied to hell boomer mook units (MookHellBoomer) when they are covered in
                acid, creating a visual acid effect on their sprite renderer.
            </summary>
        </member>
        <member name="F:EffectsController.reviveZombiePrefab">
            <summary>
                Zombie revival effect prefab for necromancy or undead resurrection visuals, used by
                CreateReviveZombieEffect method.
            </summary>
        </member>
        <member name="F:EffectsController.revivedZombiePassivePrefab">
            <summary>
                Passive effect prefab for active revived zombies, used by
                CreateRevivedZombiePassiveEffect method.
            </summary>
        </member>
        <member name="F:EffectsController.stunnedStars1Prefab">
            <summary>
                First stunned stars effect variant, rotating stars shown above stunned units.
            </summary>
        </member>
        <member name="F:EffectsController.stunnedStars2Prefab">
            <summary>
                Second stunned stars effect variant, provides visual variety for stun effects.
            </summary>
        </member>
        <member name="F:EffectsController.stunnedStars3Prefab">
            <summary>
                Third stunned stars effect variant, adds additional variety to stun visuals.
            </summary>
        </member>
        <member name="F:EffectsController.stunnedStarsCount">
            <summary>
                Static counter used to cycle through stunned star variants for visual variety.
            </summary>
        </member>
        <member name="F:EffectsController.undeadSelfRevivePrefab">
            <summary>
                Undead self-revival effect prefab that creates visual feedback when undead units
                resurrect themselves.
            </summary>
        </member>
        <!-- Audio System Methods -->
        <member name="M:EffectsController.PlayBloodSquirtSound(System.Single,System.Single,System.Single)">
            <summary>
                Plays blood squirt sound effect from the effort sounds collection. Protected method
                for blood spray and arterial bleeding audio. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>
        <member name="M:EffectsController.PlayExplosionHugeSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Plays huge explosion sound effect from the death sounds collection. Protected method
                used for major explosive events. Returns the AudioSource for further audio
                processing.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>
        <member name="M:EffectsController.PlayExplosionMassiveSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Plays massive explosion sound effect from the death sounds collection. Protected
                method for the largest explosive events. Returns the AudioSource for audio
                manipulation.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>
        <member name="M:EffectsController.PlayExplosionSound(System.Single,System.Single,System.Single)">
            <summary>
                Plays standard explosion sound effect from the death sounds collection. Protected
                method for regular explosive audio feedback. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>
        <member name="M:EffectsController.PlayGlassShatterSound(System.Single,System.Single,System.Single)">
            <summary>
                Plays glass shattering sound effect from the death sounds collection. Protected
                method for glass breaking audio feedback. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>
        <member name="M:EffectsController.PlaySlimeExplosionSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Plays slime explosion sound effect from the death sounds collection. Protected
                method that returns the AudioSource for further manipulation. Used for wet, organic
                explosion audio feedback.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>
        <member name="M:EffectsController.PlaySmallExplosionSound(System.Single,System.Single,System.Single)">
            <summary>
                Plays small explosion sound using attack2 sounds collection. Protected method for
                minor explosive effects. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>
        <member name="M:EffectsController.PlaySmallSlimeExplosionSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Plays small slime explosion sound using greeting sounds at 0.7 pitch. Protected
                method that creates a lower-pitched variant for smaller slime effects. Returns the
                AudioSource for manipulation.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>
        <!-- Audio System Fields -->
        <member name="F:EffectsController.bloodSoundHolder">
            <summary>
                Sound holder containing blood-related audio effects played when blood effects are
                created.
            </summary>
        </member>
        <member name="F:EffectsController.explosionHugeSoundHolder">
            <summary>
                Sound holder containing huge explosion audio effects for massive blast sounds.
            </summary>
        </member>
        <member name="F:EffectsController.explosionMassiveSoundHolder">
            <summary>
                Sound holder containing massive explosion audio effects for extreme blast sounds.
            </summary>
        </member>
        <member name="F:EffectsController.explosionSlimeSoundHolder">
            <summary>
                Sound holder containing slime explosion audio effects for alien/acid burst sounds.
            </summary>
        </member>
        <member name="F:EffectsController.explosionSoundHolder">
            <summary>
                Sound holder containing standard explosion audio effects for blast sounds.
            </summary>
        </member>
        <member name="F:EffectsController.glassSoundHolder">
            <summary>
                Sound holder containing glass breaking sound effects played when glass shatters.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:EffectsController.AttachLight(Unit)">
            <summary>
                Attaches a light source to a unit for illumination effects. Creates the light object
                6 units above the unit's position and parents it for movement tracking. Used for
                character lighting or special effects.
            </summary>
            <param name="unit">The unit to attach the light to</param>
        </member>
        <member name="M:EffectsController.CreateBoneParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates bone-colored particles using a specified emitter. Randomly selects bone
                colors from the theme for skeletal or ashen debris effects with appropriate pale
                color variations.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateDustParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates dirt-colored dust particles using a specified emitter. Randomly selects dirt
                colors from the theme for each particle. Uses the same distribution pattern as flesh
                dust but with theme-appropriate dirt coloring.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateDustParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates dust particles with a specified color using a custom emitter. Overrides the
                emitter's default coloring to apply the provided color uniformly to all created
                particles.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
        </member>
        <member name="M:EffectsController.CreateDustParticlesRow(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates particles in a horizontal row pattern using a specified emitter. Particles
                are distributed only along the x-axis while maintaining a constant y-position,
                creating a line effect. Supports separate x and y force components for directional
                control.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the row center</param>
            <param name="y">The y-coordinate of the row (remains constant)</param>
            <param name="count">The number of particles to create in the row</param>
            <param name="offsetXRadius">The horizontal spread radius for the row</param>
            <param name="xForce">The horizontal force component for particles</param>
            <param name="yForce">The vertical force component for particles</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
        </member>
        <member name="M:EffectsController.CreateFleshDustParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates flesh-colored dust particles using a specified emitter. Randomly selects
                flesh colors from the theme for each particle. Distributes particles within the
                offset radius with randomized size and energy values between the emitter's
                configured minimums and maximums.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single particle at the specified 3D position. The most basic particle
                creation method that simply emits one particle at the exact coordinates provided.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleSystem,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single particle using the modern ParticleSystem. This wrapper converts
                coordinates to a Vector3 and calls the vector-based overload for ParticleSystem
                compatibility.
            </summary>
            <param name="emitter">The ParticleSystem to emit from</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleSystem,UnityEngine.Vector3)">
            <summary>
                Creates a single particle using ParticleSystem at a vector position. Uses EmitParams
                for modern particle system control with default parameters.
            </summary>
            <param name="emitter">The ParticleSystem to emit from</param>
            <param name="position">The 3D position for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleSystem,UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
            <summary>
                Creates a single particle with position randomization and initial velocity. The
                particle appears randomly within the specified radius of the position and launches
                with the given velocity.
            </summary>
            <param name="emitter">The ParticleSystem to emit from</param>
            <param name="position">The center position for particle placement</param>
            <param name="radius">The randomization radius around the position</param>
            <param name="velocity">The initial velocity vector for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates a single colored particle at the specified position. Temporarily overrides
                the emitter's renderer color to apply the specified color to the emitted particle.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
            <param name="color">The color to apply to the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single particle with force-based random velocity. The particle's initial
                velocity is randomized within a unit circle and scaled by the force parameter, then
                combined with the specified initial velocity components.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates a single colored particle with force-based velocity. Combines color override
                with velocity randomization for colored particles with dynamic movement.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="color">The color to apply to the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a particle with life and size multipliers at z=1. This wrapper adds default
                z-position and zero z-velocity, calling the full 3D version for particles with
                customized lifetime and size.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="lifeM">Lifetime multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a particle with custom z-position, life, and size multipliers. Adds zero
                z-velocity as a default, forwarding to the full implementation with complete 3D
                control.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="lifeM">Lifetime multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a fully customized particle with 3D position and velocity. The most
                comprehensive single particle creation method, supporting custom lifetime and size
                multipliers along with full 3D velocity control including z-axis movement.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="zI">The initial z-velocity to add</param>
            <param name="lifeM">Lifetime multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates white particles using a specified emitter. The generic particle creation
                method that uses white color for all particles. Provides the base implementation for
                themed particle methods.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
            <summary>
                Creates multiple rotating particles with uniform spread. This wrapper uses equal x
                and y offset radii for circular distribution patterns when creating spinning
                particles.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particles</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
            <param name="angularVelocityMin">The minimum rotation speed</param>
            <param name="angularVelocityMax">The maximum rotation speed</param>
        </member>
        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
            <summary>
                Creates multiple rotating particles at z=0 with elliptical spread. This wrapper adds
                default z-position for 2D particle effects with rotation and custom distribution
                patterns.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius</param>
            <param name="yOffsetRadius">The vertical spread radius</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
            <param name="angularVelocityMin">The minimum rotation speed</param>
            <param name="angularVelocityMax">The maximum rotation speed</param>
        </member>
        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
            <summary>
                Creates multiple rotating particles with full 3D control. The comprehensive particle
                creation method supporting elliptical distribution, custom colors, and randomized
                angular velocity for realistic spinning debris effects. Each particle gets a random
                rotation speed between min and max.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="z">The z-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius</param>
            <param name="yOffsetRadius">The vertical spread radius</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
            <param name="angularVelocityMin">The minimum rotation speed for particles</param>
            <param name="angularVelocityMax">The maximum rotation speed for particles</param>
        </member>
        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single)">
            <summary>
                Creates multiple particles with color interpolation between two colors. Each
                particle gets a random color between color1 and color2, creating gradient effects.
                Supports full 3D positioning, elliptical distribution, and randomized angular
                velocity for realistic multi-colored particle effects.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="z">The z-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius</param>
            <param name="yOffsetRadius">The vertical spread radius</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color for interpolation</param>
            <param name="color2">The second color for interpolation</param>
            <param name="angularVelocityMin">The minimum rotation speed for particles</param>
            <param name="angularVelocityMax">The maximum rotation speed for particles</param>
        </member>
        <member name="M:EffectsController.CreateSandParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates sand-colored particles using a specified emitter. Randomly selects sand
                colors from the theme for desert or beach-appropriate particle effects with natural
                sand color variations.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.GetBloodOverlay">
            <summary>
                Returns a random blood overlay sprite for terrain decoration. Selects randomly from
                the bloodBlockOverlayPrefabs array and instantiates it. Used to add blood decals to
                blocks and surfaces.
            </summary>
            <returns>The transform of the instantiated blood overlay sprite</returns>
        </member>
        <member name="M:EffectsController.InstantiateEffect(UnityEngine.Object)">
            <summary>
                Instantiates an effect object at the origin with default rotation. Supports object
                pooling for IPoolableEffect types.
            </summary>
            <param name="prefab">The effect prefab to instantiate. Can be any Unity Object type.</param>
            <returns>The instantiated effect object, either from the pool or newly created.</returns>
        </member>
        <member name="M:EffectsController.InstantiateEffect(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
                Instantiates an effect object at the specified position and rotation. Supports
                object pooling for IPoolableEffect types to improve performance.
            </summary>
            <param name="prefab">The effect prefab to instantiate. Can be any Unity Object type.</param>
            <param name="pos">The position where the effect should be instantiated.</param>
            <param name="rot">The rotation of the instantiated effect.</param>
            <returns>The instantiated effect object, either from the pool or newly created.</returns>
        </member>
        <member name="M:EffectsController.OnDestroy">
            <summary>
                Unity lifecycle method called when the EffectsController is destroyed. Clears the
                static instance reference.
            </summary>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:EffectsController.groundLayer">
            <summary>
                Static layer mask used for ground collision detection in various effect placement
                calculations.
            </summary>
        </member>
        <member name="F:EffectsController.tempOffset">
            <summary>
                Protected static temporary Vector3 storage used internally by shrapnel creation
                methods to calculate random or circular offset positions without allocating new
                Vector3 objects each time.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:FallingBlock.FirstFrame">
            <summary>
                Initializes the falling block on its first frame of existence. Sets up initial
                physics values, rotation angles, shake timers, and stores the original position and
                grid coordinates for later reference. This method ensures proper initialization
                happens only once.
            </summary>
        </member>
        <member name="M:FallingBlock.HideSurroundingDecorations">
            <summary>
                Hides decorative elements on adjacent blocks that would visually conflict with this
                falling block. Uses raycasting to find blocks above and below, then hides their
                bottom and top decorations respectively if the hideSurroundingDecorationsAtStart
                flag is set.
            </summary>
        </member>
        <member name="M:FallingBlock.ResetBlock">
            <summary>
                Resets the falling block to its original state when the level is restarted or reset.
                Restores position, rotation, visual state, and all physics properties to their
                initial values. Clears any disturbance or damage states and re-enables the block for
                normal operation.
            </summary>
        </member>
        <member name="M:FallingBlock.SetupBlock(System.Int32,System.Int32,Block,Block)">
            <summary>
                Overrides the base block setup to clear the setupBlockAtStart flag and delegate to
                base implementation. Ensures that automatic start setup doesn't occur after manual
                setup has been called.
            </summary>
            <param name="row">The grid row position</param>
            <param name="collumn">The grid column position</param>
            <param name="aboveBlock">Reference to the block above (if any)</param>
            <param name="belowBlock">Reference to the block below (if any)</param>
        </member>
        <member name="M:FallingBlock.SetupBlockAtStart">
            <summary>
                Performs initial setup for blocks that need special initialization at level start.
                Updates position from transform, hides surrounding decorations if configured, sets
                up the block in the map grid, and ensures no duplicate blocks exist at the same
                position.
            </summary>
        </member>
        <member name="M:FallingBlock.ShouldEnable">
            <summary>
                Determines whether this block should be enabled for updates. Always returns true for
                falling blocks, ensuring they remain active to process physics and interactions even
                when off-screen.
            </summary>
            <returns>Always returns true to keep the block active</returns>
        </member>
        <member name="M:FallingBlock.Update">
            <summary>
                Main update loop that handles the entire lifecycle of a falling block. Manages
                shaking animations when disturbed, physics-based falling with acceleration and
                collision detection, rolling mechanics when pushed, and various environmental
                interactions like quicksand and wind. Updates position, rotation, and handles state
                transitions throughout the block's existence.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:FallingBlock.DamageInternal(System.Int32,System.Single,System.Single)">
            <summary>
                Processes damage dealt to the falling block, potentially triggering it to fall.
                Handles different damage thresholds, applies push forces for horizontal impacts, and
                initiates collapse when health drops below the collapse threshold. Prioritizes
                falling for strong downward impacts.
            </summary>
            <param name="damage">The amount of damage to apply</param>
            <param name="xI">The horizontal impact force</param>
            <param name="yI">The vertical impact force</param>
        </member>
        <member name="M:FallingBlock.HitUnits">
            <summary>
                Damages units and doodads beneath the falling block when it's moving fast enough.
                Applies crushing damage in an area based on the block's velocity, with special
                handling for destructible doodads that can slow the block's fall.
            </summary>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:FallingBlock.bounceDamage">
            <summary>
                Damage dealt to the block itself when it bounces in sandstorm conditions. Only
                applied when the value is greater than 0, representing wear from repeated impacts
                during extended bouncing sequences.
            </summary>
        </member>
        <member name="F:FallingBlock.collapseHealthPoint">
            <summary>
                The health threshold below which the block will collapse and be destroyed. When
                health drops to or below this value (default -15), the block enters its destruction
                sequence. Negative values allow the block to take some damage before breaking.
            </summary>
        </member>
        <member name="F:FallingBlock.landDamage">
            <summary>
                The amount of crushing damage dealt to blocks beneath when this block lands after
                falling. Default value of 1 applies minor impact damage to whatever it lands on.
            </summary>
        </member>
        <member name="F:FallingBlock.otherShrpnelPrefab">
            <summary>
                Optional prefab for creating additional shrapnel effects when the block is
                destroyed. Can be configured to spawn different visual debris for variety.
            </summary>
        </member>
        <member name="F:FallingBlock.shakeAmountOnLand">
            <summary>
                The intensity of camera shake when the block lands or bounces (default 0.2). Higher
                values create more dramatic impact effects, with the shake centered on the block's
                position for proper directional feedback.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:FallingBlock.Bounce">
            <summary>
                Processes bouncing behavior when the block hits a surface with sufficient velocity.
                Reverses and dampens velocity based on bounce settings, triggers camera shake, plays
                sound effects, and handles special physics for sandstorm conditions or very bouncy
                blocks.
            </summary>
        </member>
        <member name="M:FallingBlock.ClampToBounds(System.Single@,System.Single@)">
            <summary>
                Constrains both horizontal and vertical movement to keep the block within valid
                bounds. Uses raycasting in opposite directions to detect boundaries and adjusts
                movement deltas to prevent clipping through obstacles on any side.
            </summary>
            <param name="offSetX">Reference to the horizontal offset, modified if bounds are hit</param>
            <param name="offsetY">Reference to the vertical offset, modified if bounds are hit</param>
        </member>
        <member name="M:FallingBlock.ClampToCeiling(System.Single@)">
            <summary>
                Constrains upward movement to prevent the falling block from passing through
                ceilings. Uses raycasting to detect solid obstacles above and adjusts the vertical
                movement delta to stop at the ceiling surface, accounting for the block's
                half-height.
            </summary>
            <param name="yIT">Reference to the vertical movement delta in pixels, modified if a ceiling is hit</param>
            <returns>True if movement was clamped due to ceiling collision, false if no collision occurred</returns>
        </member>
        <member name="M:FallingBlock.ClampToGround(System.Single@)">
            <summary>
                Constrains downward movement to prevent the falling block from passing through
                ground. Uses raycasting to detect solid surfaces below and adjusts the vertical
                movement delta to stop at the ground surface. Also handles special interactions with
                AssMouthOrifice objects that can consume the block and sets up parent transform
                relationships for moving platforms.
            </summary>
            <param name="yIT">Reference to the vertical movement delta in pixels, modified if ground is hit</param>
            <returns>True if movement was clamped due to ground collision, false if no collision occurred</returns>
        </member>
        <member name="M:FallingBlock.ClampToWalls(System.Single@)">
            <summary>
                Constrains horizontal movement to prevent the falling block from passing through
                walls. Uses raycasting to detect solid obstacles in the direction of movement and
                adjusts the movement delta to stop at the wall surface, accounting for the block's
                half-width on each side.
            </summary>
            <param name="xIT">Reference to the horizontal movement delta in pixels, modified if a wall is hit</param>
            <returns>True if movement was clamped due to wall collision, false if no collision occurred</returns>
        </member>
        <member name="M:FallingBlock.ClearBlock">
            <summary>
                Removes this block from the map grid at its current column and row position. Ensures
                the grid cell is marked as empty so other objects can occupy the space and collision
                detection works properly.
            </summary>
        </member>
        <member name="M:FallingBlock.FinishRoll(System.Single)">
            <summary>
                Completes the rolling animation and settles the block in its new position. Adjusts
                the X coordinate based on roll direction, sends network updates if the local player
                initiated the roll, and triggers the settling process with appropriate offsets.
            </summary>
            <param name="final_zAngle">The final rotation angle after rolling (typically a multiple of 90 degrees)</param>
        </member>
        <member name="M:FallingBlock.GetExtraFallSpeed">
            <summary>
                Returns additional fall speed to be added to the base maximum fall speed. Virtual
                method that can be overridden by derived classes to implement variable falling
                speeds based on block type or environmental conditions.
            </summary>
            <returns>Extra fall speed to add (default is 0)</returns>
        </member>
        <member name="M:FallingBlock.Land">
            <summary>
                Handles the landing sequence when a falling block comes to rest on a solid surface.
                Resets velocities, updates grid position, assigns the block back to the map, applies
                landing damage to blocks below, and handles special cases like landing in quicksand
                or transforming into a boulder.
            </summary>
        </member>
        <member name="M:FallingBlock.RollOverRPC(System.Int32)">
            <summary>
                Network-synchronized method that initiates the block rolling animation in response
                to a push. Sets up the rolling state, calculates pivot points for rotation, and
                triggers the animation sequence. Automatically clears the block from its current
                position and prepares it to move to the adjacent grid cell.
            </summary>
            <param name="direction">The roll direction - positive (1) for right, negative (-1) for left</param>
        </member>
        <member name="M:FallingBlock.SetPosition(System.Single)">
            <summary>
                Updates the block's visual position with an optional horizontal offset for shake
                effects. Sets the transform position and applies the offset to the sprite renderer,
                rounding to pixel-perfect positions for clean visual presentation.
            </summary>
            <param name="xOffset">The horizontal offset to apply for shake animation</param>
        </member>
        <member name="M:FallingBlock.SetRotation">
            <summary>
                Applies the current rotation angle to the block's transform. Updates the Euler
                angles to match the internal zAngle value, used during rolling and spinning
                animations.
            </summary>
        </member>
        <member name="M:FallingBlock.SetRotation(System.Single)">
            <summary>
                Sets a new rotation angle for the block and immediately applies it to the transform.
                Used for instant rotation changes without animation.
            </summary>
            <param name="newAngle">The new rotation angle in degrees</param>
        </member>
        <member name="M:FallingBlock.SetSpeed(System.Single,System.Single)">
            <summary>
                Directly sets the velocity of the falling block and immediately triggers it to start
                falling. Used when external forces need to launch the block with specific speeds,
                bypassing the normal shaking phase.
            </summary>
            <param name="xi">The horizontal velocity to apply</param>
            <param name="yi">The vertical velocity to apply</param>
        </member>
        <member name="M:FallingBlock.SetVerticalShakePosition(System.Single)">
            <summary>
                Updates the block's visual position with a vertical offset for chain shake effects.
                Used when the block is attached to chains and shakes vertically rather than
                horizontally, applying rounded pixel-perfect offsets to the sprite.
            </summary>
            <param name="yOffset">The vertical offset to apply for shake animation</param>
        </member>
        <member name="M:FallingBlock.Settle(System.Single,System.Single,System.Int32,System.Single)">
            <summary>
                Completes the settling process after a block finishes rolling or falling. Updates
                the block's position and rotation, checks for solid ground beneath, assigns it back
                to the map grid if stable, and triggers appropriate sound effects. If no solid
                ground is found, the block continues falling.
            </summary>
            <param name="newX">The new X coordinate for the block's center position</param>
            <param name="newY">The new Y coordinate for the block's center position</param>
            <param name="colOffset">Column offset applied during settling (-1 for left roll, 1 for right roll, 0 for vertical drop)</param>
            <param name="final_zAngle">The final rotation angle to apply to the block</param>
        </member>
        <member name="M:FallingBlock.SettleBlockAfterRoll(System.Single,System.Single,System.Int32,System.Single,System.Double,Networking.PID)">
            <summary>
                Network-synchronized settling method called after a block completes its roll
                animation. Validates the timestamp to prevent out-of-order updates, settles the
                block at the new position, and clears the pushing player reference if they initiated
                the roll.
            </summary>
            <param name="X">The new X coordinate for the block</param>
            <param name="Y">The new Y coordinate for the block</param>
            <param name="colOffset">Column offset from the roll direction</param>
            <param name="final_zAngle">The final rotation angle</param>
            <param name="photonTimeStamp">Network timestamp for synchronization ordering</param>
            <param name="sender">The player ID who initiated the roll</param>
        </member>
        <member name="M:FallingBlock.StartFalling">
            <summary>
                Initiates the falling state of the block after the shaking phase completes. Clears
                the block from its grid position, removes any parent transform relationships, hides
                attached decorations if configured, and triggers surrounding blocks to potentially
                collapse.
            </summary>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:FallingBlock.Rotation">
            <summary>
                Gets the current rotation angle of the block as an integer. Returns the internal
                zAngle value cast to int for simplified rotation state checking.
            </summary>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:FallingBlock.bounceThreshold">
            <summary>
                The minimum downward velocity required for the block to bounce when hitting the
                ground. When falling slower than this threshold (default -200), the block will
                bounce instead of landing solidly. Also bypassed when a parachute is active,
                allowing bouncing at any speed.
            </summary>
        </member>
        <member name="F:FallingBlock.forceRequiredToRoll">
            <summary>
                The accumulated horizontal push force threshold required to initiate rolling
                (default 0.1). When pushForce exceeds this value in either direction and there's
                clear space, the block begins its rolling animation. Lower values make blocks easier
                to push.
            </summary>
        </member>
        <member name="F:FallingBlock.halfHeight">
            <summary>
                Half of the block's pixel height (default 8), calculated from pixelHeight. Used
                frequently in collision calculations to determine the block's center-to-edge
                distances.
            </summary>
        </member>
        <member name="F:FallingBlock.maxFallSpeed">
            <summary>
                The maximum downward velocity the block can achieve while falling (default -1200).
                This terminal velocity caps the acceleration from gravity to prevent excessive
                speeds. Can be modified by GetExtraFallSpeed() for special block types.
            </summary>
        </member>
        <member name="F:FallingBlock.minSpinAmount">
            <summary>
                The minimum rotation speed maintained while spinning. Prevents the spin from slowing
                below this threshold, ensuring continuous rotation for blocks configured to spin
                during their fall.
            </summary>
        </member>
        <member name="F:FallingBlock.parentedToTransform">
            <summary>
                Reference to a moving platform or object this block is resting on. When set, the
                block follows the transform's movement to stay attached to moving surfaces like
                elevators or vehicles.
            </summary>
        </member>
        <member name="F:FallingBlock.parentedToTransformLastPosition">
            <summary>
                The previous frame's position of the parent transform. Used to calculate the delta
                movement each frame and apply it to the block's position, ensuring smooth following
                of moving platforms.
            </summary>
        </member>
        <member name="F:FallingBlock.pixelHeight">
            <summary>
                The height of the block in pixels (default 16). Used for collision detection,
                raycasting distances, and determining the block's physical boundaries.
            </summary>
        </member>
        <member name="F:FallingBlock.rollingPivot">
            <summary>
                The world position point around which the block rotates when rolling. Set to the
                bottom corner of the block in the direction of roll (8 units horizontally from
                center, 8 units below center). Used as the rotation center for the rolling animation
                to simulate realistic physics.
            </summary>
        </member>
        <member name="F:FallingBlock.spinAmount">
            <summary>
                The current rotation speed for spinning blocks. Decreases over time and controls how
                fast the block rotates around its pivot point when shouldSpin is true. Measured in
                degrees per second.
            </summary>
        </member>
        <member name="F:FallingBlock.startY">
            <summary>
                The original Y coordinate where the block started, stored during initialization.
                Used to detect if the block has moved significantly from its starting position when
                checking if it's still stable.
            </summary>
        </member>
        <member name="F:FallingBlock.xFallingSpeed">
            <summary>
                Horizontal acceleration applied while falling. Allows blocks to drift sideways
                during their fall, though this value is typically 0 for standard falling blocks
                unless affected by external forces.
            </summary>
        </member>
        <member name="F:FallingBlock.yFallingSpeed">
            <summary>
                Vertical acceleration rate while falling (default -1000). This gravity value is
                applied each frame to increase downward velocity until maxFallSpeed is reached.
                Negative values indicate downward acceleration.
            </summary>
        </member>
        <member name="F:FallingBlock.zAngle">
            <summary>
                The current rotation angle of the block in degrees around the Z-axis. Updated
                continuously during rolling animations and used to set the transform's rotation.
                Normalized to stay within reasonable ranges by subtracting 360 when exceeding 180
                degrees.
            </summary>
        </member>
        <member name="F:FallingBlock.zAngleI">
            <summary>
                The angular velocity in degrees per second for rotation animations. During rolling,
                this value accelerates from ±420 to ±1200 degrees/second to create a realistic
                rolling motion. Positive values rotate counterclockwise, negative values clockwise.
            </summary>
        </member>
        <member name="F:FallingBlock.zAngleTarget">
            <summary>
                The target rotation angle the block is animating towards during rolling. When
                rolling left, this is increased by 90 degrees; when rolling right, decreased by 90.
                The animation completes when zAngle reaches this target value.
            </summary>
        </member>
        <member name="F:FallingBlock.zOffset">
            <summary>
                Z-axis position offset applied to the block's transform. Used to adjust rendering
                depth, particularly when the block enters quicksand (set to 8) to make it appear
                partially submerged.
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:FallingBlock.AssignBlockToMap">
            <summary>
                Assigns this falling block to its current grid position in the map. Virtual method
                that updates the map's block grid to reference this block at its current column and
                row coordinates.
            </summary>
        </member>
        <member name="M:FallingBlock.CollapseSurroundingBackgroundBlocks">
            <summary>
                Triggers collapse on all background blocks adjacent to this falling block's
                position. Affects blocks directly above, below, left, and right to create a more
                dynamic destruction effect.
            </summary>
        </member>
        <member name="M:FallingBlock.CollapseSurroundingBlocksOnFall">
            <summary>
                Comprehensive method that triggers various collapse effects when the block starts
                falling. Disturbs blocks above, collapses nearby cages and cage bars, triggers
                background block collapse if enabled, and crumbles adjacent bridges.
            </summary>
        </member>
        <member name="M:FallingBlock.CrumbleBridge(System.Single)">
            <summary>
                Handles crumble effects when this block is part of a bridge structure. If the chance
                exceeds 0.4, triggers collapse with 80% of the original chance value to create a
                weakening cascade effect.
            </summary>
            <param name="chance">The crumble chance factor (0 to 1)</param>
        </member>
        <member name="M:FallingBlock.CrumbleSurroundingBridges">
            <summary>
                Sends crumble messages to bridge blocks adjacent to this falling block. Uses both
                raycasting and direct grid lookups to find bridges to the left and right, applying a
                reduced collapse chance to create a ripple effect.
            </summary>
        </member>
        <member name="M:FallingBlock.DelayedCollapseAbove">
            <summary>
                Handles delayed collapse effects for blocks above this one. Resets the collapse
                chance to maximum before delegating to the base implementation, ensuring maximum
                cascade potential.
            </summary>
        </member>
        <member name="M:FallingBlock.InformSurroundingBlocksOfCollapse">
            <summary>
                Notifies surrounding blocks about this block's collapse, unless it's currently in
                quicksand. Overrides base behavior to prevent cascade effects when sinking in
                quicksand.
            </summary>
        </member>
        <member name="M:FallingBlock.RollOnToUnits">
            <summary>
                Checks for and damages units in the path of a rolling block. Called during the
                rolling animation to crush units that would be hit by the rotating block edge.
            </summary>
        </member>
        <member name="M:FallingBlock.StepOn(TestVanDammeAnim)">
            <summary>
                Handles when a unit steps on this block. Stores reference to the stepping unit and
                triggers the step-on behavior if the unit belongs to the player or is an enemy, and
                the block isn't already disturbed, invulnerable, or in edit mode.
            </summary>
            <param name="unit">The unit that stepped on the block</param>
        </member>
        <member name="M:FallingBlock.StepOn(Grenade)">
            <summary>
                Handles when a grenade lands on this block. Triggers the step-on behavior if the
                grenade belongs to the player and the block isn't already disturbed, invulnerable,
                or in edit mode.
            </summary>
            <param name="grenade">The grenade that landed on the block</param>
        </member>
        <member name="M:FallingBlock.StepOnBlock">
            <summary>
                Standard step-on behavior that extends the shake time before falling. Only triggers
                if the block is configured to be disturbed by impacts, increasing shake duration by
                42.5% to give players more warning time.
            </summary>
        </member>
        <member name="M:FallingBlock.StepOnBlockForced">
            <summary>
                Forced step-on behavior that bypasses invulnerability. Clears invulnerable state,
                extends shake time by 42.5%, and always triggers disturbance through network
                synchronization.
            </summary>
        </member>
        <member name="M:FallingBlock.StepOnBlockImmediate">
            <summary>
                Immediate step-on behavior that triggers instant falling. Clears invulnerability and
                sets shake time to zero, causing the block to skip the warning phase and fall
                immediately.
            </summary>
        </member>
        <member name="M:FallingBlock.SupportedByDoodad(Doodad)">
            <summary>
                Handles special support relationships when this block is held up by a doodad.
                Specifically checks for chain doodads and stores a reference for chain-specific
                shaking behavior when disturbed.
            </summary>
            <param name="doodad">The doodad providing support to this block</param>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:FallingBlock.chainAttachmentSupport">
            <summary>
                Reference to a chain doodad that's supporting this block. When set, the block
                exhibits special shaking behavior (vertical instead of horizontal) and can pull on
                the chain when disturbed before falling.
            </summary>
        </member>
        <member name="F:FallingBlock.collapseBackgroundBlocks">
            <summary>
                Controls whether background layer blocks are affected when this block falls (default
                true). When enabled, background blocks at and around the falling block's position
                will also collapse, creating more thorough destruction.
            </summary>
        </member>
        <!-- State & Behavior Methods -->
        <member name="M:FallingBlock.AboutToHitFloor">
            <summary>
                Checks if the block is within 1 unit of hitting the floor below. Uses downward
                raycasting to detect imminent ground collision, used for preemptive collision
                handling.
            </summary>
            <returns>True if ground is detected within 1 unit below</returns>
        </member>
        <member name="M:FallingBlock.AboutToHitWall">
            <summary>
                Checks if the block is within 1 unit of hitting a wall on either side. Uses
                raycasting left and right to detect imminent wall collisions, primarily used for
                very bouncy blocks to preemptively stop movement.
            </summary>
            <returns>True if a wall is detected within 1 unit to the left or right</returns>
        </member>
        <member name="M:FallingBlock.Collapse(System.Single,System.Single,System.Single)">
            <summary>
                Initiates or updates the collapse sequence for the block. If the block still has
                health above the collapse threshold, it becomes disturbed (starts shaking).
                Otherwise, delegates to the base collapse behavior to destroy the block.
            </summary>
            <param name="xI">The horizontal force of the collapse trigger</param>
            <param name="yI">The vertical force of the collapse trigger</param>
            <param name="chance">The probability factor for collapse (lower values are stored as higher priority)</param>
        </member>
        <member name="M:FallingBlock.CollapseForced(System.Single,System.Single,System.Single)">
            <summary>
                Forces the block to collapse immediately, bypassing normal health checks. Delegates
                directly to the base implementation for immediate destruction.
            </summary>
            <param name="xI">The horizontal force of the collapse</param>
            <param name="yI">The vertical force of the collapse</param>
            <param name="chance">The collapse chance factor</param>
        </member>
        <member name="M:FallingBlock.DestroyBlockInternal(System.Boolean)">
            <summary>
                Internal method that handles the actual destruction of the block. Ensures
                surrounding blocks are notified to potentially collapse if this is the first
                destruction call and the parameter allows it.
            </summary>
            <param name="CollapseBlocksAround">Whether to trigger collapse checks on surrounding blocks</param>
        </member>
        <member name="M:FallingBlock.Disturb">
            <summary>
                Triggers the block to enter a disturbed state and begin shaking before falling.
                Checks various conditions including invulnerability and support status. If supported
                by chains, triggers chain shaking instead. Plays effort sounds and initiates the
                shake-to-fall sequence.
            </summary>
        </member>
        <member name="M:FallingBlock.IsBelowBlockSolid">
            <summary>
                Determines if there's a solid, stable block directly below this one. Uses raycasting
                to find blocks below and verifies they are enabled, not falling, not rolling, and
                not ladder-type blocks. Also checks for solid falling doodads.
            </summary>
            <returns>True if a solid, stable block exists below</returns>
        </member>
        <member name="M:FallingBlock.IsSolid">
            <summary>
                Indicates whether this block acts as a solid obstacle for movement and collision.
                Always returns false for falling blocks, allowing units to pass through them (though
                they may take damage).
            </summary>
            <returns>Always returns false as falling blocks are not solid obstacles</returns>
        </member>
        <member name="M:FallingBlock.NotBroken">
            <summary>
                Checks if the block is still in a stable, unbroken state. Returns true if the block
                hasn't been disturbed, is still supported by a solid block below, hasn't moved
                significantly from its starting position, and hasn't been destroyed.
            </summary>
            <returns>True if the block is stable and unbroken, false otherwise</returns>
        </member>
        <member name="M:FallingBlock.NotRolling">
            <summary>
                Checks if the block is currently in a stable state and not rolling in either
                direction. Used to determine if the block can accept new interactions or forces.
            </summary>
            <returns>True if not rolling left or right, false if currently rolling</returns>
        </member>
        <member name="M:FallingBlock.Push(System.Single)">
            <summary>
                Applies horizontal push force to potentially make the block roll sideways.
                Accumulates force over time and triggers rolling when the threshold is exceeded,
                checking for clear space and ability to roll onto units in the target direction.
            </summary>
            <param name="xINormalized">The normalized horizontal force to apply (positive for right, negative for left)</param>
            <returns>True if the push triggered a roll, false otherwise</returns>
        </member>
        <member name="M:FallingBlock.RollOver(System.Int32)">
            <summary>
                Initiates the rolling animation in the specified direction. Clears parent transform
                relationships and triggers network synchronization if not already being pushed by a
                player.
            </summary>
            <param name="direction">The roll direction (1 for right, -1 for left)</param>
        </member>
        <member name="M:FallingBlock.Rotate(System.Int32)">
            <summary>
                Instantly rotates the block by 90-degree increments in the specified direction.
                Updates both the current angle and target angle, then applies the rotation to the
                transform.
            </summary>
            <param name="direction">The number of 90-degree rotations to apply (positive for counterclockwise)</param>
        </member>
        <!-- State & Behavior Properties -->
        <member name="P:FallingBlock.beingPushedByPlayerTimeStamp">
            <summary>
                Gets or sets the network timestamp when a player started pushing this block to roll.
                Used for synchronization to ensure proper ordering of roll commands and prevent
                conflicts when multiple players interact with the same block. Set to
                double.PositiveInfinity when no player is pushing.
            </summary>
        </member>
        <member name="P:FallingBlock.lastSettleTime">
            <summary>
                Gets or sets the network timestamp of when this block last settled after rolling.
                Used to track the most recent settle operation and prevent out-of-order network
                updates from reverting the block to previous positions.
            </summary>
        </member>
        <!-- State & Behavior Fields -->
        <member name="F:FallingBlock.becomeBoulderOnLand">
            <summary>
                Transforms this falling block into a boulder doodad upon landing. When true, the
                block is destroyed and replaced with a BoulderBlock at the landing position, already
                in a disturbed (rolling) state.
            </summary>
        </member>
        <member name="F:FallingBlock.beingPushedByPlayer">
            <summary>
                Network player ID of the player currently pushing this block to roll. Used for
                network synchronization to ensure the pushing player has authority over the roll
                action and its completion.
            </summary>
        </member>
        <member name="F:FallingBlock.bounceOffWalls">
            <summary>
                Determines whether the block bounces horizontally when hitting walls. When true,
                horizontal velocity is reversed and dampened on wall impact. When false, the block
                stops immediately on wall contact.
            </summary>
        </member>
        <member name="F:FallingBlock.chainShakeTime">
            <summary>
                Separate shake timer used when the block is supported by chains. Creates a vertical
                shaking effect instead of horizontal, with a shorter duration than normal shaking.
            </summary>
        </member>
        <member name="F:FallingBlock.disturbedByImpact">
            <summary>
                Determines whether this block responds to being stepped on or hit (default true).
                When false, the block ignores step-on events and won't start shaking from impacts,
                useful for blocks that should only fall from direct damage.
            </summary>
        </member>
        <member name="F:FallingBlock.hasCollapsedSurroundingBlocks">
            <summary>
                Flag preventing multiple collapse cascade triggers. Set to true after the first
                collapse of surrounding blocks to ensure the cascade effect only happens once per
                fall event, preventing infinite collapse loops.
            </summary>
        </member>
        <member name="F:FallingBlock.hideSurroundingDecorationsAtStart">
            <summary>
                Configuration flag that determines whether decorations on adjacent blocks should be
                hidden during setup. When true, removes visual decorations from blocks above and
                below to prevent clipping or visual conflicts.
            </summary>
        </member>
        <member name="F:FallingBlock.invulnerable">
            <summary>
                Flag indicating whether the block is currently immune to being disturbed (default
                true). Prevents the block from shaking or falling due to damage or impacts while
                active, typically set during initialization.
            </summary>
        </member>
        <member name="F:FallingBlock.invulnerableTime">
            <summary>
                Duration in seconds that the block remains invulnerable to disturbance after certain
                events (default 0.5). Countdown timer that prevents the block from being triggered
                immediately after spawning or resetting.
            </summary>
        </member>
        <member name="F:FallingBlock.isInQuicksand">
            <summary>
                Tracks whether the block is currently falling through quicksand. Used to prevent
                duplicate splash effects and modify physics behavior while in quicksand, including
                reduced fall speed and special visual effects.
            </summary>
        </member>
        <member name="F:FallingBlock.looseXVelocityOnBounce">
            <summary>
                Controls whether horizontal velocity is reduced when bouncing off the ground. When
                true, the block loses sideways momentum on each bounce, eventually falling straight
                down. Particularly relevant for veryBouncy blocks.
            </summary>
        </member>
        <member name="F:FallingBlock.originalCollumn">
            <summary>
                The block's starting grid column position, stored during initialization. Used to
                restore the block to its original location when the level is reset or restarted.
            </summary>
        </member>
        <member name="F:FallingBlock.originalRow">
            <summary>
                The block's starting grid row position, stored during initialization. Used alongside
                originalCollumn to restore the block's position during reset operations.
            </summary>
        </member>
        <member name="F:FallingBlock.originalShakeTime">
            <summary>
                The initial shake duration value (default 0.5), stored during initialization. Used
                to reset shakeTime to its original value and to calculate extended shake times when
                stepped on.
            </summary>
        </member>
        <member name="F:FallingBlock.rollingLeft">
            <summary>
                Flag indicating the block is currently rolling to the left. When true, the block is
                in the middle of a 90-degree counterclockwise rotation animation moving one grid
                space left. Mutually exclusive with rollingRight.
            </summary>
        </member>
        <member name="F:FallingBlock.rollingRight">
            <summary>
                Flag indicating the block is currently rolling to the right. When true, the block is
                in the middle of a 90-degree clockwise rotation animation moving one grid space
                right. Mutually exclusive with rollingLeft.
            </summary>
        </member>
        <member name="F:FallingBlock.setupBlockAtStart">
            <summary>
                Flag indicating whether this block needs special setup when the level starts. When
                true, triggers SetupBlockAtStart() during the first Update() call to handle
                positioning and decoration hiding.
            </summary>
        </member>
        <member name="F:FallingBlock.shakeCounter">
            <summary>
                Running counter that tracks shake animation progress. Incremented each frame during
                shaking and used with sine functions to create the visual shake effect before
                falling.
            </summary>
        </member>
        <member name="F:FallingBlock.shakeTime">
            <summary>
                The duration in seconds that the block shakes before starting to fall (default 0.5).
                When disturbed, this countdown begins and the block falls when it reaches zero.
            </summary>
        </member>
        <member name="F:FallingBlock.shouldHideAttatchments">
            <summary>
                Determines whether decorative attachments above the block should be hidden when it
                starts falling (default true). Prevents visual glitches with attached decorations
                that would otherwise float in the air.
            </summary>
        </member>
        <member name="F:FallingBlock.shouldSpin">
            <summary>
                Enables rotation animation while the block is falling. When true, the block spins
                around its center based on spinAmount and movement direction, creating a tumbling
                effect during the fall.
            </summary>
        </member>
        <member name="F:FallingBlock.snapToMap">
            <summary>
                Forces the block to align precisely to the grid after settling. When true, the
                block's position is snapped to exact grid coordinates (multiples of 16) at the end
                of each update, ensuring pixel-perfect alignment.
            </summary>
        </member>
        <member name="F:FallingBlock.steppedOnBy">
            <summary>
                Stores a reference to the unit that most recently stepped on this block. Set when a
                unit triggers the StepOn method, allowing the block to track which specific unit
                caused it to potentially fall. Used for attribution of the falling trigger.
            </summary>
        </member>
        <member name="F:FallingBlock.veryBouncy">
            <summary>
                Special physics mode for blocks that bounce multiple times before settling. When
                true, applies different velocity calculations, maintains momentum longer, and allows
                repeated bouncing with reduced damping compared to normal blocks.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:FallingBlock.CalculateAboveBlock">
            <summary>
                Uses raycasting to find and cache a reference to the block directly above this one.
                Used to trigger cascade effects when this block falls or is destroyed.
            </summary>
        </member>
        <member name="M:FallingBlock.ClearBlockOnRoll">
            <summary>
                Handles cleanup when a block starts rolling, including repositioning oil pools to
                the new location. Clears the block from its current grid position, updates oil pool
                positions if present, and triggers collapse on any blocks directly above.
            </summary>
        </member>
        <member name="M:FallingBlock.PlayEffortSound">
            <summary>
                Plays the straining/effort sound effect when the block is disturbed or shaking. Uses
                the configured effort sounds from the sound holder at 30% volume with 3D
                positioning.
            </summary>
        </member>
        <member name="M:FallingBlock.PlayHitSound">
            <summary>
                Plays the impact sound effect when the block hits a surface. Uses the configured hit
                sounds from the sound holder at 30% volume with 3D positioning.
            </summary>
        </member>
        <member name="M:FallingBlock.PlaySplashSound">
            <summary>
                Plays the splash sound effect when the block enters quicksand or liquid. Uses the
                configured splash gunk sound from the sound holder at 50% volume with 3D
                positioning.
            </summary>
        </member>
        <!-- Unity Lifecycle Methods -->
        <member name="M:GameModeController.Awake">
            <summary>
                Unity Awake lifecycle method that initializes the GameModeController singleton, sets
                up player arrays, and configures initial game mode settings.
            </summary>
        </member>
        <member name="M:GameModeController.Start">
            <summary>
                Unity Start lifecycle method that resets level state, adds mode-specific components
                (like RaceModeController), and clears deathmatch statistics.
            </summary>
        </member>
        <member name="M:GameModeController.Update">
            <summary>
                Unity Update lifecycle method that handles exhibition mode timeout, monitors level
                completion conditions, manages victory timers, and processes input for debug
                commands.
            </summary>
        </member>
        <!-- Unity Lifecycle Fields -->
        <member name="F:GameModeController.forcePlayLevel">
            <summary>
                Forces the level to play normally even if level editor is active. Used for testing
                levels in editor mode.
            </summary>
        </member>
        <member name="F:GameModeController.instance">
            <summary>
                Singleton instance of the GameModeController. Provides global access to game mode
                management.
            </summary>
        </member>
        <member name="F:GameModeController.lastInputTimer">
            <summary>
                Timer tracking seconds since last player input in exhibition mode. Increments each
                frame and resets on any key press. When exceeding 150 seconds, automatically returns
                to join screen for exhibition builds.
            </summary>
        </member>
        <member name="F:GameModeController.levelEditor">
            <summary>
                Reference to the LevelEditorGUI component for managing level editing functionality.
            </summary>
        </member>
        <member name="F:GameModeController.maxPlayersJoined">
            <summary>
                Tracks the maximum number of players that have joined the current level. Used to
                determine if match should end when all players are eliminated in death match modes.
                Prevents immediate match end if only one player ever joined.
            </summary>
        </member>
        <!-- Game Mode Management Methods -->
        <member name="M:GameModeController.GetLevelResult">
            <summary>
                Gets the final result of the current level.
            </summary>
            <returns>The level result (Success, Fail, ForcedFail, or Unknown if level is not finished or instance is null).</returns>
        </member>
        <member name="M:GameModeController.IsHelicopterVictory">
            <summary>
                Determines if the level ended with a helicopter victory (players successfully
                evacuated).
            </summary>
            <returns>True if the level is finished and at least one player made it to the helicopter, false otherwise.</returns>
        </member>
        <member name="M:GameModeController.IsInHardMode">
            <summary>
                Determines if the game is currently in Hard Mode based on campaign type and game
                state.
            </summary>
            <returns>True if the game is in hard mode, false otherwise. Hard mode can be enabled through world map campaign settings, custom campaign options, or forced by map data.</returns>
        </member>
        <member name="M:GameModeController.IsLevelFinished">
            <summary>
                Checks if the current level has been completed.
            </summary>
            <returns>True if the level is finished (victory or defeat has been determined), false if the level is still in progress.</returns>
        </member>
        <member name="M:GameModeController.ShowStandardHUDS">
            <summary>
                Determines whether standard HUD elements should be displayed based on the current
                game mode.
            </summary>
            <returns>True if standard HUD should be shown (Campaign mode without brutality scoring), false for competitive modes or when showing brutality score.</returns>
        </member>
        <!-- Game Mode Management Properties -->
        <member name="P:GameModeController.AllowPlayerDropIn">
            <summary>
                Indicates whether players can join mid-game in the current game mode and conditions.
            </summary>
        </member>
        <member name="P:GameModeController.GameMode">
            <summary>
                Gets or sets the current game mode.
            </summary>
        </member>
        <member name="P:GameModeController.Instance">
            <summary>
                Gets the singleton instance of GameModeController.
            </summary>
        </member>
        <member name="P:GameModeController.IsDeathMatchMode">
            <summary>
                Gets whether the current game mode is Deathmatch.
            </summary>
        </member>
        <member name="P:GameModeController.IsHardcoreMode">
            <summary>
                Gets whether the game is in Hardcore mode (permadeath campaign mode).
            </summary>
        </member>
        <member name="P:GameModeController.SpawnBeforeCountdown">
            <summary>
                Determines whether players should spawn before the countdown starts based on the
                current game mode.
            </summary>
        </member>
        <member name="P:GameModeController.deathMatchLives">
            <summary>
                Gets the number of lives each player has in Deathmatch mode.
            </summary>
        </member>
        <!-- Game Mode Management Fields -->
        <member name="F:GameModeController.broPlayer">
            <summary>
                In Suicide Horde mode, indicates which player is currently playing as the Bro
                (cycles through players).
            </summary>
        </member>
        <member name="F:GameModeController.campaignBeforeBrodown">
            <summary>
                Stores the campaign reference that was active before entering a Bro-down, used to
                restore campaign context after tiebreaker.
            </summary>
        </member>
        <member name="F:GameModeController.cheatsEnabled">
            <summary>
                Static flag indicating whether cheat functionality is enabled. When true, allows
                debug commands and special key combinations. Always returns true when running in
                Unity editor regardless of this field's value.
            </summary>
        </member>
        <member name="F:GameModeController.deathmatchHero">
            <summary>
                Stores the hero type selection for each player in Deathmatch mode. Initialized with
                HeroType.None for all 4 players.
            </summary>
        </member>
        <member name="F:GameModeController.forceDraw">
            <summary>
                Forces a draw/tie outcome during match end determination. When true, forces the
                match to end in a tie regardless of actual player performance. Used for debugging or
                special scenarios where a draw result is required.
            </summary>
        </member>
        <member name="F:GameModeController.forceRestartOnDeathInHardcoreThisLevel">
            <summary>
                Forces a level restart on death in Hardcore mode for this specific level. Used by
                boss fights like Satan that require full restart.
            </summary>
        </member>
        <member name="F:GameModeController.gameModeBeforeBrodown">
            <summary>
                Stores the game mode that was active before entering a Bro-down tiebreaker, used to
                restore proper mode after tiebreaker.
            </summary>
        </member>
        <member name="F:GameModeController.isPlayerDoingBrodown">
            <summary>
                Tracks which players are participating in a Bro-down tiebreaker round. Used when
                matches end in a draw.
            </summary>
        </member>
        <member name="F:GameModeController.levelNumBeforeBrodown">
            <summary>
                Stores the level number that was active before entering a Bro-down, used to restore
                level progression after tiebreaker.
            </summary>
        </member>
        <member name="F:GameModeController.publishRun">
            <summary>
                Indicates whether the current campaign run is for publishing. When true, the game
                treats successful completion differently, redirecting back to level editor instead
                of normal victory screens. Used when testing custom campaigns before publishing.
            </summary>
        </member>
        <member name="F:GameModeController.switchSilently">
            <summary>
                Controls whether level transitions display the level over screen. When true,
                suppresses the normal level completion UI and switches levels immediately. Used for
                seamless transitions during cutscenes or special sequences.
            </summary>
        </member>
        <!-- Level Flow & Transitions Methods -->
        <member name="M:GameModeController.FinishCampaignFromCutscene(System.Boolean)">
            <summary>
                Completes the current campaign from a cutscene, determining the appropriate next
                scene based on campaign type.
            </summary>
            <param name="forceWorldMap">If true, forces return to world map regardless of campaign type</param>
            <returns>The name of the scene to load next</returns>
            <remarks>
                Called when campaigns end via cutscenes. If returning to world map or forceWorldMap
                is true, finishes the campaign progress and returns the world map scene. Otherwise,
                returns the victory scene and resets arcade progress. Also saves player progress
                after completion.
            </remarks>
        </member>
        <member name="M:GameModeController.HasEveryBodyVotedToSkip">
            <summary>
                Checks if all active players have voted to skip the current level.
            </summary>
            <returns>True if all playing players have voted to skip, false if any active player hasn't voted or no players are active.</returns>
        </member>
        <member name="M:GameModeController.InSwitchingScenesPhase">
            <summary>
                Checks if the game is currently in the process of switching between levels or
                scenes.
            </summary>
            <returns>True if currently switching levels, false otherwise</returns>
            <remarks>
                Used by other systems to prevent actions during level transitions. The
                switchingLevel flag is set when DetermineLevelOutcome is called and cleared when the
                new level loads.
            </remarks>
        </member>
        <member name="M:GameModeController.LevelFinish(LevelResult)">
            <summary>
                Initiates the level finish sequence with the specified result.
            </summary>
            <param name="result">The result of the level (Success, Fail, ForcedFail, or Unknown).</param>
        </member>
        <member name="M:GameModeController.LevelFinishRPC(System.Int32,LevelResult)">
            <summary>
                RPC method that finalizes the level completion across all clients.
            </summary>
            <param name="finishedLevelNum">The level number that finished (used to verify synchronization).</param>
            <param name="result">The result of the level.</param>
        </member>
        <member name="M:GameModeController.LoadNextScene(GameState)">
            <summary>
                Loads the next scene immediately without transition effects. Used for quick scene
                changes.
            </summary>
            <param name="sceneAndGameState">The GameState object containing scene and game configuration to apply</param>
            <remarks>
                Marked with [AllowedRPC] for network synchronization. Calls LoadSceneCore for the
                loading logic but loads the level directly without fade effects. Used when immediate
                transitions are needed.
            </remarks>
        </member>
        <member name="M:GameModeController.LoadNextSceneFade(GameState)">
            <summary>
                Loads the next scene with a fade transition effect. Used for smooth scene
                transitions.
            </summary>
            <param name="sceneAndGameState">The GameState object containing scene and game configuration to apply</param>
            <remarks>
                Marked with [AllowedRPC] for network synchronization. Calls LoadSceneCore to handle
                the actual loading logic, then triggers a fade-to-black transition for visual
                smoothness. Commonly used for campaign level transitions and returning to menus.
            </remarks>
        </member>
        <member name="M:GameModeController.MakeFinishInstant">
            <summary>
                Forces the level to finish immediately by setting the win timer to near zero.
            </summary>
        </member>
        <member name="M:GameModeController.OnDisable">
            <summary>
                Unity callback when the component is disabled. Currently empty but provides hook for
                cleanup operations.
            </summary>
        </member>
        <member name="M:GameModeController.RequestHostRestartLevel">
            <summary>
                Handles client requests to restart the level. Called via RPC when non-host players
                request a restart.
            </summary>
            <remarks>
                This method is marked with [AllowedRPC] to permit network calls. Sets the next scene
                to the current active scene and initiates the level switch process. Only the host
                can execute the actual restart.
            </remarks>
        </member>
        <member name="M:GameModeController.RestartLevel">
            <summary>
                Restarts the current level by reloading the active scene. Handles host/client logic
                for multiplayer compatibility.
            </summary>
            <remarks>
                If the player is the host, immediately switches to the current scene and clears
                persistent blocks if enabled. If the player is a client, sends an RPC request to the
                host to restart the level and displays a chat message. This is commonly used by the
                pause menu restart option and when players fail in certain conditions.
            </remarks>
        </member>
        <member name="M:GameModeController.ReturnToWorldMap">
            <summary>
                Initiates a return to the world map scene, saving the scene transition in game
                state.
            </summary>
        </member>
        <member name="M:GameModeController.SendReady">
            <summary>
                Sends a ready signal from the local player to all other players, used for
                vote-to-skip functionality.
            </summary>
        </member>
        <member name="M:GameModeController.SetSwitchDelay(System.Single)">
            <summary>
                Sets the delay before switching to the next level, allowing UI elements time to
                display.
            </summary>
            <param name="d">The delay in seconds before the level switch occurs</param>
            <remarks>
                Used by various game systems to control transition timing. Common values are 1.5-5
                seconds depending on what needs to be shown (victory screens, score displays, etc.).
            </remarks>
        </member>
        <member name="M:GameModeController.SwitchLevel">
            <summary>
                Switches to the next level or scene, handling all necessary game state updates and
                synchronization.
            </summary>
            <remarks>
                Only executed by the host. Performs the following operations: - Stops all controller
                rumble effects - Updates GameState with new session ID, random seed, campaign info,
                and level number - Sends the new game state to all other players via RPC - Loads the
                next scene (stored in nextScene field) - Resets level-specific variables for the new
                level This is the primary method for transitioning between levels in all game modes.
            </remarks>
        </member>
        <member name="M:GameModeController.VoteToSkipRPC(PID)">
            <summary>
                RPC method that registers a player's vote to skip the level.
            </summary>
            <param name="sender">The PID of the player voting to skip.</param>
        </member>
        <!-- Level Flow & Transitions Properties -->
        <member name="P:GameModeController.CheatsEnabled">
            <summary>
                Gets or sets whether cheat codes are enabled. Always returns true in the Unity
                editor.
            </summary>
            <remarks>
                Controls access to debug features like instant level completion (Ctrl+F11) and
                forced draws (Ctrl+F8). Automatically enabled in the Unity editor for testing
                purposes.
            </remarks>
        </member>
        <member name="P:GameModeController.LevelFinished">
            <summary>
                Gets or sets whether the current level has been completed. Used to track level
                completion state.
            </summary>
            <remarks>
                This property is checked by many systems to determine if gameplay should continue or
                if transition sequences should begin. Set to true when victory/defeat conditions are
                met.
            </remarks>
        </member>
        <!-- Level Flow & Transitions Fields -->
        <member name="F:GameModeController.deathMatchRewardCounter">
            <summary>
                Timer controlling ammo box spawn frequency during death match reward phase.
                Increments each frame and spawns an ammo box every 2 seconds, then decrements by 3.5
                to create periodic spawning. Only active when deathMatchRewarded is true.
            </summary>
        </member>
        <member name="F:GameModeController.deathMatchRewarded">
            <summary>
                Indicates whether the death match winner is currently receiving reward ammo boxes.
                When true, periodically spawns ammo boxes from the top of the screen. Becomes false
                when the winning player dies.
            </summary>
        </member>
        <member name="F:GameModeController.deathMatchWinnerPlayerNum">
            <summary>
                Player number (0-3) of the death match winner during reward phase. Set to -1 when no
                winner is determined. Used to check if winner is still alive to continue receiving
                rewards.
            </summary>
        </member>
        <member name="F:GameModeController.nextScene">
            <summary>
                The name of the next scene to load when transitioning levels. Empty string by
                default.
            </summary>
        </member>
        <member name="F:GameModeController.playersVotedToSkip">
            <summary>
                Tracks which players have voted to skip the current level results screen. Reset on
                each level.
            </summary>
        </member>
        <member name="F:GameModeController.resetWinsOnLevelSwitch">
            <summary>
                Controls whether player round wins are reset when switching levels. When true, calls
                ResetPlayerRoundWins() before switching to the next level. Used to start fresh
                scoring in new matches.
            </summary>
        </member>
        <member name="F:GameModeController.stillNeedToReady">
            <summary>
                Array tracking which players (0-3) still need to ready up before level transition.
                Set for all playing players when waiting for ready state. Players signal ready
                through vote-to-skip mechanism, clearing their flag.
            </summary>
        </member>
        <member name="F:GameModeController.switchLevelDelay">
            <summary>
                Time delay in seconds before switching to the next level. Defaults to 1.5 seconds.
            </summary>
        </member>
        <member name="F:GameModeController.switchingLevel">
            <summary>
                Indicates whether the game is currently in the process of switching levels/scenes.
            </summary>
        </member>
        <member name="F:GameModeController.waitingForAllPlayersToReady">
            <summary>
                Indicates whether the game is waiting for all players to ready before switching
                levels. When true, level transition is delayed until all players in stillNeedToReady
                array have signaled ready.
            </summary>
        </member>
        <!-- Player Score Management Methods -->
        <member name="M:GameModeController.AddPoint(System.Int32)">
            <summary>
                Adds a round win point to the specified player's score.
            </summary>
            <param name="playernum">The player number (0-3) to award a point to</param>
            <remarks>
                Increments the player's round win counter. Used in competitive modes to track match
                progress toward overall victory conditions.
            </remarks>
        </member>
        <member name="M:GameModeController.DoesPlayerNumDamage(System.Int32,System.Int32)">
            <summary>
                Determines if damage should be applied between two player numbers based on the
                current game mode.
            </summary>
            <param name="fromNum">The player number dealing damage (negative values for enemies/environment)</param>
            <param name="toNum">The player number receiving damage (negative values for enemies/environment)</param>
            <returns>True if damage should be applied, false if it should be prevented</returns>
            <remarks>
                Implements friendly fire rules per game mode: - Campaign/ExplosionRun/Race: No
                friendly fire between players (0-3), enemies (-1) damage players -
                DeathMatch/BroDown/SuicideHorde: Full friendly fire enabled between all players -
                Special case: -2 and -1 can damage each other (enemy vs enemy) - Values below -5
                represent special damage sources that affect their designated targets Critical for
                implementing proper damage rules in different game modes.
            </remarks>
        </member>
        <member name="M:GameModeController.GetBrodownBroCount">
            <summary>
                Gets the number of players currently participating in a Brodown tiebreaker round.
            </summary>
            <returns>The count of players marked for Brodown participation</returns>
            <remarks>
                Iterates through the isPlayerDoingBrodown array to count active participants. Used
                to set up Brodown rounds when ties occur in competitive modes. Players who tied in
                the previous round are marked for participation.
            </remarks>
        </member>
        <member name="M:GameModeController.GetExplosionRunFailM">
            <summary>
                Calculates the failure rate in Explosion Run mode as a ratio of fails to total
                attempts.
            </summary>
            <returns>The failure rate as a decimal (0.0 to 1.0), or 0 if no attempts</returns>
            <remarks>
                Divides total failures by total attempts to provide a failure percentage. Used for
                difficulty scaling and statistics tracking. Returns 0 if no attempts have been made
                to avoid division by zero.
            </remarks>
        </member>
        <member name="M:GameModeController.GetExplosionRunLevelFails">
            <summary>
                Gets the number of consecutive failures in the current Explosion Run session.
            </summary>
            <returns>The count of recent consecutive failures</returns>
            <remarks>
                Tracks recent performance for difficulty adjustment. Reset to 0 on successful
                completion. High failure counts may trigger encouragement messages or difficulty
                adjustments.
            </remarks>
        </member>
        <member name="M:GameModeController.GetExplosionRunTotalAttempts">
            <summary>
                Gets the total number of Explosion Run attempts in the current session.
            </summary>
            <returns>The total attempt count as an integer</returns>
            <remarks>
                Incremented each time an Explosion Run level starts. Used for statistics and
                calculating failure rates. Persists across level attempts within a session.
            </remarks>
        </member>
        <member name="M:GameModeController.GetExplosionRunWinsInARow">
            <summary>
                Gets the current win streak in Explosion Run mode.
            </summary>
            <returns>The number of consecutive Explosion Run victories</returns>
            <remarks>
                Tracks momentum in Explosion Run mode. Reset to 0 on any failure. Used for special
                announcements and achievements when players maintain winning streaks.
            </remarks>
        </member>
        <member name="M:GameModeController.GetPlayerRoundWins(System.Int32)">
            <summary>
                Gets the number of round wins for a specific player.
            </summary>
            <param name="playerNum">The player number (0-3).</param>
            <returns>The number of rounds won by the player, or 0 if invalid player number.</returns>
        </member>
        <member name="M:GameModeController.GetWinnerNum">
            <summary>
                Gets the player number of the current deathmatch round winner.
            </summary>
            <returns>The winning player number (0-3), or -1 if no winner</returns>
            <remarks>
                Set when a deathmatch round ends with a clear winner. Used during the reward phase
                to identify who should receive visual feedback and score updates.
            </remarks>
        </member>
        <member name="M:GameModeController.IsMatchLeader(System.Int32)">
            <summary>
                Determines if a player is currently leading the match in round wins.
            </summary>
            <param name="playerNum">The player number (0-3) to check.</param>
            <returns>True if the player has the most round wins (or is tied for most), false otherwise.</returns>
        </member>
        <member name="M:GameModeController.ResetPlayerRoundWins">
            <summary>
                Resets all players' round win counts to zero.
            </summary>
        </member>
        <member name="M:GameModeController.ResetPlayerRoundWins(System.Int32)">
            <summary>
                Resets a specific player's round win count to zero.
            </summary>
            <param name="playerNum">The player number (0-3) to reset.</param>
        </member>
        <member name="M:GameModeController.SetupIntroActions">
            <summary>
                Sets up countdown timers and intro sequences based on the current game mode.
            </summary>
            <remarks>
                Adds appropriate countdown actions via TriggerManager: - ExplosionRun: 2-second
                offset if not in level editor - DeathMatch/Race/BroDown: Standard countdown with no
                offset - SuicideHorde: Immediate countdown start Called during level initialization
                to ensure proper intro timing for each mode.
            </remarks>
        </member>
        <!-- Player Score Management Fields -->
        <member name="F:GameModeController.campaignLevelFailCount">
            <summary>
                Tracks consecutive failures on the current campaign level. Used to trigger
                celebration on eventual success after multiple failures.
            </summary>
        </member>
        <member name="F:GameModeController.explosionRunFailCount">
            <summary>
                Static counter tracking consecutive failures in Explosion Run mode for the current
                level. Increments on failure, resets to 0 on success. Used to calculate fail rate
                statistics.
            </summary>
        </member>
        <member name="F:GameModeController.explosionRunFailTotalFails">
            <summary>
                Static counter tracking total Explosion Run failures across all sessions. Increments
                by 1 for each failure. Multiplied by 0.8 when attempts over 4 to decay old data.
                Used with explosionRunTotalAttempts to calculate fail rate.
            </summary>
        </member>
        <member name="F:GameModeController.explosionRunTotalAttempts">
            <summary>
                Static counter tracking total Explosion Run attempts across all sessions. Increments
                by 1 for each attempt. Multiplied by 0.8 when over 4 attempts to decay old data.
                Used to calculate overall success/fail ratio.
            </summary>
        </member>
        <member name="F:GameModeController.explosionRunWinsInARow">
            <summary>
                Static counter tracking consecutive Explosion Run victories. Increments on win,
                resets to 0 on failure. Displayed to players when reaching streaks of 3 or more
                wins.
            </summary>
        </member>
        <member name="F:GameModeController.lastPlayerToWin">
            <summary>
                The player number (0-3) of the last player to win a round. -1 if no winner yet.
            </summary>
        </member>
        <member name="F:GameModeController.playerRoundWins">
            <summary>
                Array tracking the number of round wins for each player in multi-round game modes.
            </summary>
        </member>
        <!-- Internal Game Flow Methods -->
        <member name="M:GameModeController.DetermineLevelOutcome">
            <summary>
                Determines what happens after level completion based on game mode, player
                performance, and level results.
            </summary>
            <remarks>
                This is the core method that decides post-level flow: - For Campaign: Handles
                success/failure, checkpoint logic, mission screens, and campaign completion - For
                ExplosionRun/Race: Manages round wins, ties, and transitions to Brodown for ties -
                For DeathMatch: Calculates winner based on kills minus suicides, handles ties with
                Brodown - For BroDown: Returns to previous game mode with winner determination - For
                SuicideHorde: Restarts with random level selection Sets the next scene, switch
                delay, and handles all mode-specific victory/defeat logic.
            </remarks>
        </member>
        <member name="M:GameModeController.InRewardPhase">
            <summary>
                Checks if the game is currently in the deathmatch reward phase where ammo boxes drop
                from the sky.
            </summary>
            <returns>True if in the reward phase, false otherwise</returns>
            <remarks>
                During this phase in deathmatch, ammo boxes periodically spawn and fall from above
                as a reward for the round winner. Used to trigger special visual effects and prevent
                premature level transitions.
            </remarks>
        </member>
        <member name="M:GameModeController.LoadSceneCore(GameState)">
            <summary>
                Core scene loading logic shared by LoadNextScene and LoadNextSceneFade. Handles game
                state setup.
            </summary>
            <param name="sceneAndGameState">The GameState to apply before loading</param>
            <remarks>
                Performs essential pre-load operations: - Runs garbage collection in editor builds -
                Clears join-through-friend-invite flag - Hides overlay messages - Clears map data -
                Applies the new game state - Resets time scale to 1 - Manages persistent blocks for
                optimization - Handles instant fade for certain transitions This centralized method
                ensures consistent state management across all scene loads.
            </remarks>
        </member>
        <member name="M:GameModeController.ReceiveStatsFromMaster(System.Byte[])">
            <summary>
                Receives and applies synchronized statistics data from the host player.
            </summary>
            <param name="stats">Serialized statistics data from the host</param>
            <remarks>
                Marked with [AllowedRPC] for network calls. Deserializes the received stats data and
                applies it to the local StatisticsController. Ensures all players have consistent
                statistics for score screens and progression tracking.
            </remarks>
        </member>
        <member name="M:GameModeController.ResetForNextLevel">
            <summary>
                Resets internal timers and flags in preparation for the next level.
            </summary>
        </member>
        <member name="M:GameModeController.SyncStats">
            <summary>
                Synchronizes statistics from the host to all other players in multiplayer sessions.
            </summary>
            <remarks>
                Serializes the current statistics data and sends it to all other players via RPC.
                Called when the level finishes to ensure all players have consistent stat tracking.
                Only executed by the host to maintain authoritative stat management.
            </remarks>
        </member>
        <member name="M:GameModeController.WaitForAllPlayersToReadyBeforeSwitch">
            <summary>
                Initiates waiting for all players to ready up before switching levels in multiplayer
                modes.
            </summary>
            <remarks>
                Sets waitingForAllPlayersToReady flag and marks all currently playing players as
                needing to ready. Used in competitive modes (DeathMatch, Race) to ensure all players
                are prepared for the next round. The Update method monitors the stillNeedToReady
                array until all players are ready.
            </remarks>
        </member>
        <!-- Internal Game Flow Fields -->
        <member name="F:GameModeController.lastDebugLivesTime">
            <summary>
                Unused timer field likely intended for debug display of player lives. Currently not
                referenced anywhere in the codebase.
            </summary>
        </member>
        <member name="F:GameModeController.levelFinished">
            <summary>
                Indicates whether the current level has been completed (win/loss determined).
            </summary>
        </member>
        <member name="F:GameModeController.levelHasStarted">
            <summary>
                Tracks whether the current level has officially started gameplay (after countdown
                and initial setup).
            </summary>
        </member>
        <member name="F:GameModeController.levelResult">
            <summary>
                The outcome of the current level (Success, Fail, ForcedFail, or Unknown).
            </summary>
        </member>
        <member name="F:GameModeController.levelStartCounter">
            <summary>
                Countdown timer at level start before gameplay begins. Defaults to 2 seconds.
            </summary>
        </member>
        <member name="F:GameModeController.winTimer">
            <summary>
                Countdown timer after level completion before transitioning to next scene. Defaults
                to 2 seconds.
            </summary>
        </member>
        <!-- Core Singleton & Instance Management Properties -->
        <member name="P:GameState.Instance">
            <summary>
                Gets the singleton instance of the GameState class, creating it if it doesn't exist.
                This singleton manages persistent game state across all scenes.
            </summary>
        </member>
        <member name="P:GameState.sessionID">
            <summary>
                Gets or sets the current network session ID. Used to maintain session continuity
                across scene transitions in multiplayer games.
            </summary>
        </member>
        <!-- Core Singleton & Instance Management Fields -->
        <member name="F:GameState.instance">
            <summary>
                Private static field holding the singleton instance of GameState. Accessed through
                the Instance property.
            </summary>
        </member>
        <member name="F:GameState.sessionID2">
            <summary>
                Private backing field for the sessionID property. Stores the network session
                identifier. Defaults to byte.MaxValue.
            </summary>
        </member>
        <!-- Campaign & Level Properties -->
        <member name="P:GameState.campaignName">
            <summary>
                Gets or sets the name of the current campaign being played. Used to track which
                campaign the player is in across level transitions.
            </summary>
        </member>
        <!-- Campaign & Level Fields -->
        <member name="F:GameState._campaignName">
            <summary>
                Public backing field for the campaignName property. Stores the current campaign
                name.
            </summary>
        </member>
        <member name="F:GameState.customLevelID">
            <summary>
                The unique identifier for custom levels. Used when loading user-created content from
                Steam Workshop or Playtomic.
            </summary>
        </member>
        <member name="F:GameState.levelNumber">
            <summary>
                The current level number within the campaign. Used to track progression and
                determine which level to load.
            </summary>
        </member>
        <member name="F:GameState.loadCustomCampaign">
            <summary>
                Flag indicating whether the game should load a custom campaign (user-created
                content) rather than built-in campaigns.
            </summary>
        </member>
        <!-- Core State Management Methods -->
        <member name="M:GameState.Apply">
            <summary>
                Applies the current GameState values to their respective game systems. Sets the
                static instance, updates network session ID, level editor state, checkpoint data,
                and other persistent values. Called after loading to restore game state.
            </summary>
        </member>
        <member name="M:GameState.ClearSuperCheckPointStatus">
            <summary>
                Clears all super checkpoint related data, resetting the load offsets and checkpoint
                position. Called when starting fresh or when checkpoint data should be discarded.
            </summary>
        </member>
        <member name="M:GameState.FullRefresh">
            <summary>
                Performs a complete refresh of the GameState by pulling current values from various
                game systems. Updates session ID, scene name, level editor status, publish run data,
                and checkpoint information. Used before scene transitions to ensure state
                consistency.
            </summary>
        </member>
        <member name="M:GameState.PickRandomSeed">
            <summary>
                Generates a new random seed based on the current time's millisecond value. Called
                during GameState construction and when a new random seed is needed.
            </summary>
        </member>
        <member name="M:GameState.ResetToDefault">
            <summary>
                Resets all GameState values to their default states. This includes clearing scene
                data, campaign info, game modes, level editor status, and checkpoint data. Commonly
                called when returning to main menu or starting a new game session.
            </summary>
        </member>
        <member name="M:GameState.SelectiveRefresh">
            <summary>
                Performs a selective refresh of the GameState, updating only session ID, scene name,
                level editor status, and publish run data. Does not update checkpoint-related data.
                Used for lighter state updates.
            </summary>
        </member>
        <member name="M:GameState.ToString">
            <summary>
                Returns a formatted string representation of all GameState values for debugging
                purposes. Includes scene info, campaign data, session details, game modes,
                checkpoint status, and other state information.
            </summary>
            <returns>A multi-line string containing all GameState values formatted for debug output.</returns>
        </member>
        <!-- Scene Transition Methods -->
        <member name="M:GameState.FadeToNextScene(System.String)">
            <summary>
                Initiates a fade transition to the next scene. Blocks input during the fade, sets up
                the scene to load, and triggers the fade effect. Disables audio low pass filter for
                the transition.
            </summary>
            <param name="nextScene">Optional scene name to load. If empty, uses the scene stored in GameState.sceneToLoad.</param>
        </member>
        <member name="M:GameState.GoBackToFreshMainMenuFromAnywhere">
            <summary>
                Attempts to return to the main menu from any game screen or state. Handles different
                scenarios including being in menus, world map, hero select, or during loading.
                Returns false if unable to determine current state.
            </summary>
            <returns>True if successfully initiated return to main menu, false if current state couldn't be determined.</returns>
        </member>
        <member name="M:GameState.LoadLevel(System.String)">
            <summary>
                Loads the specified level or scene, handling all necessary setup including network
                handshakes, scene type detection, and custom campaign loading. This is the main
                method for transitioning between game scenes.
            </summary>
            <param name="nextScene">Optional scene name to load. If empty, uses the scene stored in GameState.sceneToLoad.</param>
        </member>
        <member name="M:GameState.OnCustomLevelLoad(Campaign)">
            <summary>
                Callback method invoked when a custom level finishes loading from Playtomic. Sets
                the loaded campaign as current and initiates the scene transition.
            </summary>
            <param name="camp">The campaign data that was loaded from the online service.</param>
        </member>
        <!-- Scene Transition Properties -->
        <member name="P:GameState.sceneToLoad">
            <summary>
                Gets or sets the name of the scene that should be loaded next. This property is used
                to coordinate scene transitions throughout the game.
            </summary>
        </member>
        <!-- Scene Transition Fields -->
        <member name="F:GameState._blockInputForFade">
            <summary>
                Tracks whether input was blocked specifically for scene fade transitions. Used to
                properly restore input state after fade operations complete.
            </summary>
        </member>
        <member name="F:GameState._sceneToLoad">
            <summary>
                Private backing field for the sceneToLoad property. Stores the name of the next
                scene to load.
            </summary>
        </member>
        <!-- Level Editor Fields -->
        <member name="F:GameState.gameMode">
            <summary>
                The current game mode (Campaign, ExplosionRun, DeathMatch, BroDown, SuicideHorde,
                Cutscene, Race, or NotSet). Determines gameplay rules and objectives for the current
                session.
            </summary>
        </member>
        <member name="F:GameState.levelEditorActive">
            <summary>
                Indicates whether the level editor is currently active. Synchronized with
                LevelEditorGUI.levelEditorActive during state refresh operations.
            </summary>
        </member>
        <member name="F:GameState.loadMode">
            <summary>
                Specifies how the map should be loaded (Campaign, LoadFromMapdata, LoadFromFile,
                Generated, or NotSet). This determines the loading strategy when transitioning to a
                new level.
            </summary>
        </member>
        <member name="F:GameState.publishRun">
            <summary>
                Indicates whether the current session is a publish run for testing a level before
                uploading. Synchronized with GameModeController.publishRun during state refresh
                operations.
            </summary>
        </member>
        <member name="F:GameState.publishRunSuccessful">
            <summary>
                Indicates whether the publish run was completed successfully. Synchronized with
                LevelEditorGUI.publishRunSuccessful during state refresh operations.
            </summary>
        </member>
        <!-- World Map & Navigation Fields -->
        <member name="F:GameState.immediatelyGoToCustomCampaign">
            <summary>
                Flag to bypass menus and immediately load a custom campaign. Used for quick-loading
                user-created content from various menu screens.
            </summary>
        </member>
        <member name="F:GameState.returnToWorldMap">
            <summary>
                Flag indicating whether the game should return to the world map after the current
                level. Used to control navigation flow between levels and the campaign map.
            </summary>
        </member>
        <member name="F:GameState.startNewWorldMapGame">
            <summary>
                Flag indicating whether to start a new world map campaign game. Used when initiating
                a fresh campaign playthrough from the main menu.
            </summary>
        </member>
        <!-- Checkpoint & Spawn Management Fields -->
        <member name="F:GameState.nextXLoadOffset">
            <summary>
                The X-axis offset for the next map load position. Used with super checkpoints to
                determine spawn location when continuing from a checkpoint.
            </summary>
        </member>
        <member name="F:GameState.nextYLoadOffset">
            <summary>
                The Y-axis offset for the next map load position. Used with super checkpoints to
                determine spawn location when continuing from a checkpoint.
            </summary>
        </member>
        <member name="F:GameState.persistPastLevelLoad">
            <summary>
                Determines whether certain game elements should persist when loading a new level.
                Used to maintain continuity for specific objects or state across level transitions.
            </summary>
        </member>
        <member name="F:GameState.startFromSuperCheckPoint">
            <summary>
                Indicates whether the level should start from a super checkpoint position. When
                true, uses superCheckpointStartPos to determine spawn location.
            </summary>
        </member>
        <member name="F:GameState.superCheckpointStartPos">
            <summary>
                The grid position where players should spawn when starting from a super checkpoint.
                Only used when startFromSuperCheckPoint is true.
            </summary>
        </member>
        <!-- Save Game & Progress Properties -->
        <member name="P:GameState.hardCoreMode">
            <summary>
                Gets whether the game is currently in hardcore mode (Iron Bro mode). This mode
                features permanent death and is only available in world map campaigns.
            </summary>
        </member>
        <member name="P:GameState.hardMode">
            <summary>
                Gets whether the game is currently in hard mode. Returns the world map hard mode
                status if in a world map campaign, otherwise returns arcade hard mode status.
            </summary>
        </member>
        <!-- Save Game & Progress Fields -->
        <member name="F:GameState.arcadeHardMode">
            <summary>
                Hard mode setting for arcade (non-world map) game modes. Used when
                currentWorldmapSave is null or not in a world map campaign.
            </summary>
        </member>
        <member name="F:GameState.currentWorldmapSave">
            <summary>
                The current world map save slot data containing campaign progress. Holds information
                about unlocked levels, collected items, and difficulty settings for the active
                campaign.
            </summary>
        </member>
        <!-- Map Generation Fields -->
        <member name="F:GameState.mapGenSeed">
            <summary>
                The seed value used for procedural map generation when useRandomMapGenSeed is true.
                Allows for reproducible randomly generated levels.
            </summary>
        </member>
        <member name="F:GameState.randomSeed">
            <summary>
                The random seed used for level generation and other randomized game elements. Used
                to ensure consistency in procedural generation.
            </summary>
        </member>
        <member name="F:GameState.useRandomMapGenSeed">
            <summary>
                Determines whether to use a specific seed for map generation. When true, uses
                mapGenSeed value; when false, uses default generation behavior.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:Grenade.Awake">
            <summary>
                Initializes the grenade when the GameObject is created. Sets up the fragile
                collision layer for detecting breakable objects and initializes the bounce tracking
                list if needed.
            </summary>
        </member>
        <member name="M:Grenade.RegisterGrenade">
            <summary>
                Registers this grenade with the Map's tracking systems. If the grenade is marked as
                shootable, it's added to the shootable grenades list for AI targeting. All grenades
                are added to the general grenade tracking list.
            </summary>
        </member>
        <member name="M:Grenade.SetToDisable(System.Boolean)">
            <summary>
                Sets whether this grenade should start in a disabled state. Used for pre-placed
                grenades in levels that shouldn't be active immediately.
            </summary>
            <param name="disabledAtStart">True to start disabled, false for normal behavior</param>
        </member>
        <member name="M:Grenade.SetupGrenade(System.Int32,System.Int32,UnityEngine.MonoBehaviour)">
            <summary>
                Initializes grenade ownership and visual properties. Sets the player number, random
                seed, and who fired the grenade. Configures trail renderer colors based on the
                player number, using player-specific colors for players 0-3 and red/yellow for
                others.
            </summary>
            <param name="newSeed">Random seed for consistent behavior</param>
            <param name="pNum">Player number who owns this grenade</param>
            <param name="_FiredBy">The unit that launched this grenade</param>
        </member>
        <member name="M:Grenade.Start">
            <summary>
                Completes grenade initialization after all Awake calls. Caches the main material,
                sets up the ground collision layer, registers the grenade with game systems, and
                handles special disabled spawn states for pre-placed grenades.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:Grenade.disabledAtStart">
            <summary>
                When true, the grenade starts in a disabled state. Used for pre-placed grenades in
                levels that shouldn't be active until triggered. Set via SetToDisable method.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:Grenade.Death">
            <summary>
                Handles the grenade explosion. Damages terrain, creates visual effects, and damages
                units within the blast radius. Only the local player's grenades calculate unit
                damage to prevent networking issues. Awards achievements for special kills and
                triggers explosion effects.
            </summary>
        </member>
        <member name="M:Grenade.DestroyGrenade">
            <summary>
                Removes the grenade from all tracking systems and destroys the GameObject. Called
                after the explosion effects have been created.
            </summary>
        </member>
        <member name="M:Grenade.Knock(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Applies knockback force to the grenade from explosions or other impacts. Adjusts
                velocity based on the impact force and grenade weight, adds rotational spin, and
                plays a defend sound.
            </summary>
            <param name="xDiff">Horizontal position difference from impact source</param>
            <param name="yDiff">Vertical position difference from impact source</param>
            <param name="xI">Incoming horizontal velocity of the impact</param>
            <param name="yI">Incoming vertical velocity of the impact</param>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:Grenade.blastForce">
            <summary>
                Physics knockback force applied to units caught in the explosion. Determines how far
                units are pushed away from the blast center. Defaults to 50 force units.
            </summary>
        </member>
        <member name="F:Grenade.damage">
            <summary>
                Base explosion damage dealt to units, terrain, and destructibles. Applied through
                various multipliers for different explosion zones. Defaults to 5 damage.
            </summary>
        </member>
        <member name="F:Grenade.damageType">
            <summary>
                Type of damage this grenade inflicts, determining how units resist or react to the
                explosion. Also used when damaging fragile objects during flight.
            </summary>
        </member>
        <member name="F:Grenade.firedBy">
            <summary>
                Reference to the unit that launched this grenade. Used for damage attribution,
                achievement tracking, and determining local ownership for networking. Set during
                initialization.
            </summary>
        </member>
        <member name="F:Grenade.friendlyFire">
            <summary>
                Determines if this grenade damages units on the same team as the thrower. When true,
                explosion damages all units. When false, only damages enemies. Defaults to true.
            </summary>
        </member>
        <member name="F:Grenade.panicCounter">
            <summary>
                Timer controlling when to trigger panic in nearby AI units. Decrements each frame
                when life is below 0.5 seconds, triggering Map.PanicUnits every 0.045 seconds to
                make enemies flee.
            </summary>
        </member>
        <member name="F:Grenade.playerNum">
            <summary>
                Identifies which player threw this grenade for damage attribution and scoring. Also
                determines trail color for players 0-3. Defaults to -1 for non-player grenades.
            </summary>
        </member>
        <member name="F:Grenade.range">
            <summary>
                Explosion radius in world units. Controls the area of effect for damage to units,
                terrain, and doodads. Also scales visual explosion effects. Defaults to 48 units.
            </summary>
        </member>
        <member name="F:Grenade.shootable">
            <summary>
                When true, this grenade can be targeted and detonated by projectiles. Registers with
                Map.RegisterShootableGrenade for AI targeting systems.
            </summary>
        </member>
        <!-- Special Abilities Methods -->
        <member name="M:Grenade.GiveBrotatoAchievementOnKill">
            <summary>
                Marks this grenade to award the Hot Brotato achievement if it kills a mook. Called
                by special abilities or power-ups that enable achievement-granting grenades.
            </summary>
        </member>
        <!-- Special Abilities Fields -->
        <member name="F:Grenade.giveBrotatoAwardIfIKillAMook">
            <summary>
                When true, awards the Hot Brotato achievement if this grenade kills a mook enemy.
                Checked during explosion damage and enemy bounce kills. Set via
                GiveBrotatoAchievementOnKill method by special abilities or power-ups.
            </summary>
        </member>
        <member name="F:Grenade.giveMartiniAchievement">
            <summary>
                When true, awards the Martini achievement when this grenade kills enemies by
                bouncing off them. Only triggers during successful enemy bounce kills, not regular
                explosions.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:Grenade.Bounce(System.Boolean,System.Boolean)">
            <summary>
                Handles physics response when the grenade hits surfaces. Reduces velocities, applies
                angular friction for realistic rolling, interacts with doors, triggers ground
                effects like mines, and plays impact sounds based on collision force.
            </summary>
            <param name="bounceX">True if bouncing on the X axis (hit vertical surface)</param>
            <param name="bounceY">True if bouncing on the Y axis (hit horizontal surface)</param>
        </member>
        <member name="M:Grenade.BounceOffEnemies">
            <summary>
                Processes bouncing off enemy units when the grenade hits them from above. Checks if
                the grenade has sufficient downward velocity, then attempts to hit units below.
                Supports both single and multiple bounce modes. Applies upward velocity based on
                weight and reduces horizontal speed. Awards achievements for special bounce kills.
            </summary>
        </member>
        <member name="M:Grenade.CanBounceOnEnemies">
            <summary>
                Determines if the grenade has sufficient downward velocity to bounce off enemies.
                Prevents slow-moving grenades from triggering enemy bounces.
            </summary>
            <returns>True if downward velocity exceeds 120 units/second</returns>
        </member>
        <member name="M:Grenade.HitFragile">
            <summary>
                Detects and damages fragile objects in the grenade's path during flight. Uses
                velocity direction to check ahead for breakable objects on the fragile layer.
                Creates visual puff effects on impact and either bounces off doors or sends damage
                messages to other fragile objects like glass.
            </summary>
        </member>
        <member name="M:Grenade.Launch(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Primary method for spawning and launching grenades into the world. Handles complex
                wall collision detection to prevent grenades from spawning inside terrain. Registers
                the grenade as a fetchable object for AI awareness and initializes trail tracking.
            </summary>
            <param name="newX">Initial X position</param>
            <param name="newY">Initial Y position</param>
            <param name="xI">Initial horizontal velocity</param>
            <param name="yI">Initial vertical velocity</param>
        </member>
        <member name="M:Grenade.ReduceLife(System.Single)">
            <summary>
                Multiplies the grenade's remaining fuse time by the specified factor. Used to create
                shorter fuses for special grenade types or launch methods. Ensures a minimum life of
                0.01 seconds to prevent instant detonation.
            </summary>
            <param name="launchLifeM">Multiplier for the remaining life (0-1 reduces, &gt;1 extends)</param>
        </member>
        <member name="M:Grenade.RunMovement">
            <summary>
                Updates grenade physics each frame. Checks for collisions with fragile objects,
                handles bouncing off enemies if enabled, and processes base movement physics.
            </summary>
        </member>
        <member name="M:Grenade.SetMinLife(System.Single)">
            <summary>
                Ensures the grenade has at least the specified fuse time remaining. Used to prevent
                instant explosions when grenades are thrown or knocked.
            </summary>
            <param name="amount">Minimum life time in seconds</param>
        </member>
        <member name="M:Grenade.SetPosition">
            <summary>
                Updates the grenade's transform position. Simple override that calls the base
                implementation to maintain position synchronization.
            </summary>
        </member>
        <member name="M:Grenade.ThrowGrenade(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Launches a grenade that was previously held by a unit. Unparents the grenade, sets
                its position and velocity, resets visual effects, and ensures a minimum fuse time of
                0.7 seconds.
            </summary>
            <param name="XI">Horizontal throw velocity</param>
            <param name="YI">Vertical throw velocity</param>
            <param name="newX">Release X position</param>
            <param name="newY">Release Y position</param>
            <param name="_playerNum">Player number who threw the grenade</param>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:Grenade.ShouldTimeslice">
            <summary>
                Indicates that grenades should not participate in time-slicing optimization. Always
                returns false to ensure grenades update every frame for accurate physics and timing.
            </summary>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:Grenade.alreadyBouncedOffUnits">
            <summary>
                Tracks units this grenade has bounced off when bounceOffEnemiesMultiple is false.
                Prevents the same unit from being hit multiple times. List is populated during
                BounceOffEnemies calls.
            </summary>
        </member>
        <member name="F:Grenade.angularFrictionM">
            <summary>
                Multiplier for angular velocity calculations when useAngularFriction is enabled.
                Higher values create more spin from movement and impacts. Defaults to 1.0.
            </summary>
        </member>
        <member name="F:Grenade.bounceOffEnemies">
            <summary>
                Enables the grenade to bounce off enemy units when falling from above. Checked each
                frame during movement updates to trigger bounce detection.
            </summary>
        </member>
        <member name="F:Grenade.bounceOffEnemiesMultiple">
            <summary>
                When true, allows bouncing off the same enemy multiple times. When false, uses
                alreadyBouncedOffUnits list to track and prevent repeated bounces.
            </summary>
        </member>
        <member name="F:Grenade.bounceYOffset">
            <summary>
                Vertical offset applied during enemy bounce detection. Adjusts the collision check
                position relative to the grenade center. Defaults to 2 units upward.
            </summary>
        </member>
        <member name="F:Grenade.fragileLayer">
            <summary>
                Layer mask for detecting breakable objects like glass during flight. Set to
                "DirtyHippie" layer during initialization. Used by HitFragile method for collision
                detection.
            </summary>
        </member>
        <member name="F:Grenade.useAngularFriction">
            <summary>
                Enables realistic rotation physics when bouncing. When true, horizontal movement
                creates rotation and impacts affect spin based on the angularFrictionM multiplier.
            </summary>
        </member>
        <member name="F:Grenade.weight">
            <summary>
                Mass factor affecting physics calculations. Higher weight reduces knockback effects
                and bounce height. Used in velocity calculations for both throwing and impact
                responses. Defaults to 1.0.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:Grenade.CreateWarningEffect">
            <summary>
                Spawns a red warning diamond effect at the grenade's position. Creates either a
                normal or large warning indicator based on the largeWarning flag setting.
            </summary>
        </member>
        <member name="M:Grenade.MakeEffects">
            <summary>
                Creates explosion visual and audio effects when the grenade detonates. Spawns either
                a huge or normal explosion based on the hugeExplosion flag, plays the death sound,
                and damages nearby destructible doodads.
            </summary>
        </member>
        <member name="M:Grenade.ResetTrail">
            <summary>
                Resets trail effect tracking to the current position. Prevents visual artifacts when
                the grenade is teleported or initially thrown by clearing the trail history.
            </summary>
        </member>
        <member name="M:Grenade.RunTrail">
            <summary>
                Updates the grenade's visual trail effect each frame. Supports two trail types:
                FireTrail creates spark particles along the path, while ColorTrail creates a colored
                line based on the throwing player's color and grenade velocity. Includes
                optimization to prevent excessive trail length.
            </summary>
        </member>
        <member name="M:Grenade.RunWarnings">
            <summary>
                Creates visual and audio warnings before explosion. Increases warning intensity as
                the fuse burns down, with faster flickering and higher pitch beeps when life drops
                below 0.5 seconds. Alternates grenade material and creates warning diamonds. Also
                triggers AI unit panic reactions.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:Grenade.createdTrail">
            <summary>
                Reference to the active ProjectileTrail effect instance. Created when the grenade
                has sufficient velocity and destroyed when velocity drops too low. Used for
                ColorTrail type.
            </summary>
        </member>
        <member name="F:Grenade.dontMakeEffects">
            <summary>
                When true, skips creating visual explosion effects in the Death method. Used for
                silent explosions or when effects are handled externally.
            </summary>
        </member>
        <member name="F:Grenade.explosion">
            <summary>
                Standard explosion visual effect component. Assigned in Unity Inspector and likely
                triggered during the Death method for normal-sized explosions.
            </summary>
        </member>
        <member name="F:Grenade.explosionBig">
            <summary>
                Large explosion visual effect component. Assigned in Unity Inspector and likely
                triggered for grenades with enhanced explosion visuals.
            </summary>
        </member>
        <member name="F:Grenade.fire1">
            <summary>
                Visual fire effect component slot 1. Assigned in Unity Inspector for grenades with
                burning or fire trail effects. Controlled by FlickerFader component behavior.
            </summary>
        </member>
        <member name="F:Grenade.fire2">
            <summary>
                Visual fire effect component slot 2. Assigned in Unity Inspector for grenades with
                burning or fire trail effects. Controlled by FlickerFader component behavior.
            </summary>
        </member>
        <member name="F:Grenade.fire3">
            <summary>
                Visual fire effect component slot 3. Assigned in Unity Inspector for grenades with
                burning or fire trail effects. Controlled by FlickerFader component behavior.
            </summary>
        </member>
        <member name="F:Grenade.flickerCounter">
            <summary>
                Timer controlling the material swap rate for warning flashes. Increments each frame
                and triggers flashes at 0.0667 second intervals when life is below 0.5 seconds, or
                0.133 second intervals otherwise.
            </summary>
        </member>
        <member name="F:Grenade.hasHeroTrail">
            <summary>
                Flag indicating this grenade should display a hero-colored trail. Currently unused
                in base class but available for derived grenade types.
            </summary>
        </member>
        <member name="F:Grenade.hugeExplosion">
            <summary>
                When true, creates an enhanced explosion effect with additional visual elements and
                low-pass audio filtering. Used for special high-powered grenades.
            </summary>
        </member>
        <member name="F:Grenade.hugeExplosionLowPassM">
            <summary>
                Audio low-pass filter multiplier applied to huge explosion sound effects. Lower
                values create more muffled, bass-heavy explosion sounds. Used when hugeExplosion is
                true. Defaults to 0.1 for deep, rumbling explosions.
            </summary>
        </member>
        <member name="F:Grenade.largeWarning">
            <summary>
                When true, displays a larger warning diamond effect during countdown. Used for
                grenades with larger blast radius or special importance. Standard grenades use the
                normal size.
            </summary>
        </member>
        <member name="F:Grenade.lastTrailAlphaM">
            <summary>
                Alpha transparency multiplier for trail effects. Set to 0.5 when trail is reset,
                though current implementation doesn't actively use this value. Defaults to 0.1.
                Reserved for future trail fading effects.
            </summary>
        </member>
        <member name="F:Grenade.lastTrailX">
            <summary>
                Stores the X coordinate where the last trail segment was drawn. Used to calculate
                distance between trail points and prevent excessive trail length. Updated
                continuously during trail rendering.
            </summary>
        </member>
        <member name="F:Grenade.lastTrailY">
            <summary>
                Stores the Y coordinate where the last trail segment was drawn. Works with
                lastTrailX to track trail continuity and calculate segment distances for
                optimization.
            </summary>
        </member>
        <member name="F:Grenade.mainMaterial">
            <summary>
                The grenade's default visual material cached from the renderer at startup. Used for
                material swapping during warning flashes before explosion.
            </summary>
        </member>
        <member name="F:Grenade.mainMaterialShowing">
            <summary>
                Tracks which material is currently displayed during warning flashes. Toggles between
                true (main material) and false (other material) to create the flickering countdown
                effect before explosion. Defaults to true.
            </summary>
        </member>
        <member name="F:Grenade.otherMaterial">
            <summary>
                Alternate material for visual warning effects. Swapped with mainMaterial during the
                countdown phase to create a flashing warning effect before detonation.
            </summary>
        </member>
        <member name="F:Grenade.pulseCount">
            <summary>
                Counts the number of warning flashes during countdown. Used to trigger warning
                effects and beep sounds on odd-numbered pulses, creating a rhythmic warning pattern.
            </summary>
        </member>
        <member name="F:Grenade.shrapnel">
            <summary>
                Reference to shrapnel projectile prefab. Assigned in Unity Inspector for grenades
                that spawn shrapnel on explosion. Used by derived grenade types.
            </summary>
        </member>
        <member name="F:Grenade.smoke1">
            <summary>
                Smoke visual effect component slot 1. Assigned in Unity Inspector for smoke trails
                or explosion smoke. Likely triggered on explosion or during flight.
            </summary>
        </member>
        <member name="F:Grenade.smoke2">
            <summary>
                Smoke visual effect component slot 2. Assigned in Unity Inspector for smoke trails
                or explosion smoke. Likely triggered on explosion or during flight.
            </summary>
        </member>
        <member name="F:Grenade.trailDrawDelay">
            <summary>
                Frame counter that delays trail drawing after launch. Set to 2 frames on launch to
                prevent trail artifacts at spawn point. Decrements each frame until reaching 0.
            </summary>
        </member>
        <member name="F:Grenade.trailRenderer">
            <summary>
                Line renderer component for drawing colored trails. Configured in SetupGrenade to
                match the throwing player's color. Null for grenades without colored trails.
            </summary>
        </member>
        <member name="F:Grenade.trailType">
            <summary>
                Determines the visual trail style for this grenade. FireTrail creates spark
                particles along the flight path, while ColorTrail creates a colored line based on
                the throwing player.
            </summary>
        </member>
        <!-- Audio System Methods -->
        <member name="M:Grenade.PlayDeathSound">
            <summary>
                Plays the grenade explosion sound effect at the default volume of 0.7.
            </summary>
        </member>
        <member name="M:Grenade.PlayDeathSound(System.Single)">
            <summary>
                Plays the grenade explosion sound effect at the specified volume level.
            </summary>
            <param name="v">Volume level for the explosion sound (0.0 to 1.0)</param>
        </member>
        <member name="M:Grenade.PlaySpecialSound(System.Single)">
            <summary>
                Plays special grenade sound effects positioned between the grenade and camera for
                better audibility. Used for unique grenade effects like cluster bomb separations.
            </summary>
            <param name="v">Volume level for the special sound (0.0 to 1.0)</param>
        </member>
        <!-- Audio System Fields -->
        <member name="F:Grenade.maxVelocityBounceVolume">
            <summary>
                Impact velocity at which bounce sounds reach maximum volume. Used to scale volume
                between minimum and maximum based on impact force. Defaults to 210 units per second.
            </summary>
        </member>
        <member name="F:Grenade.minVelocityBounceSound">
            <summary>
                Minimum impact velocity required to play bounce sound effects. Prevents sounds from
                playing on gentle contacts. Defaults to 33 units per second.
            </summary>
        </member>
        <member name="F:Grenade.sound">
            <summary>
                Cached reference to the global Sound instance. Lazily initialized when first playing
                death sounds to avoid repeated GetInstance() calls. Used for performance
                optimization when playing explosion audio.
            </summary>
        </member>
        <member name="F:Grenade.soundHolder">
            <summary>
                Container for all grenade-related sound effects including defend sounds (knockback),
                hit sounds (bouncing), death sounds (explosion), special sounds, and greeting sounds
                (countdown beeps). Central audio management for the grenade.
            </summary>
        </member>
        <!-- Networking & RPC Methods -->
        <member name="M:Grenade.PackState(UnityStream)">
            <summary>
                Serializes the grenade's network state for synchronization. Packs the X/Y position
                and enabled state into the stream, then calls base packing for additional data.
            </summary>
            <param name="stream">The network stream to write state data to</param>
            <returns>The stream with serialized grenade state</returns>
        </member>
        <member name="M:Grenade.UnpackState(UnityStream)">
            <summary>
                Deserializes the grenade's network state from a stream. Reads position and enabled
                state, applies them to the grenade, then calls base unpacking for additional data.
            </summary>
            <param name="stream">The network stream to read state data from</param>
            <returns>The stream after reading grenade state</returns>
        </member>
        <!-- Networking & RPC Properties -->
        <member name="P:Grenade.FiredLocally">
            <summary>
                Determines if this grenade was fired by the local player rather than a remote
                networked player. Uses lazy evaluation to check if the firedBy unit is owned
                locally, falling back to the grenade's own ownership. Critical for preventing
                duplicate damage calculations in multiplayer.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:Grenade.RunUpdate">
            <summary>
                Allows external code to force an immediate update cycle. Simply calls the Update
                method to process physics and effects outside the normal update loop.
            </summary>
        </member>
        <member name="M:Grenade.Update">
            <summary>
                Main update loop called each frame. Processes base physics updates, runs warning
                effects when the fuse is below 1 second, and updates the visual trail.
            </summary>
            <returns>Always returns true to continue updating</returns>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:HeroController.Awake">
            <summary>
                Unity Awake method that initializes the HeroController singleton. Sets up the
                instance reference, registers network event handlers for player drops and
                disconnections, and initializes hero tracking collections. Also sets the initial
                spawn point if one exists in the scene.
            </summary>
        </member>
        <member name="M:HeroController.OnDestroy">
            <summary>
                Unity OnDestroy cleanup method. Unregisters network event handlers, clears the
                singleton instance reference, and disposes of all tracking collections to prevent
                memory leaks and ensure clean shutdown.
            </summary>
        </member>
        <member name="M:HeroController.Start">
            <summary>
                Unity Start method that initializes the HeroController. Sets up game state, loads
                input settings from PlayerPrefs, finds the spawn point, initializes perks system,
                spawns joined players, and begins the game sequence. Core initialization point for
                multiplayer hero management.
            </summary>
        </member>
        <member name="M:HeroController.Update">
            <summary>
                Main update loop for HeroController. Handles debug inputs, processes player drops,
                manages join messages, runs hero respawn logic, checks level completion, monitors
                player drop-ins, and updates time boost effects each frame.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Properties -->
        <member name="P:HeroController.Instance">
            <summary>
                Gets the singleton instance of HeroController, creating it if necessary. Provides
                global access to the hero controller for managing player spawning and game state.
                Uses lazy initialization with FindObjectOfType if the instance is null.
            </summary>
            <returns>The singleton HeroController instance.</returns>
        </member>
        <member name="P:HeroController.InstanceExists">
            <summary>
                Gets whether a HeroController instance currently exists in the scene. Used to check
                availability before accessing the singleton instance to avoid unnecessary creation.
            </summary>
            <returns>True if an instance exists; otherwise, false.</returns>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:HeroController.inst">
            <summary>
                Private static instance reference for the singleton pattern. Stores the single
                HeroController instance to ensure only one exists. Accessed through the public
                Instance property with lazy initialization.
            </summary>
        </member>
        <member name="F:HeroController.playerPrefabReference">
            <summary>
                Reference to the Player prefab GameObject used for instantiating new players.
                Contains the template for creating networked player instances when players join the
                game session.
            </summary>
        </member>
        <member name="F:HeroController.players">
            <summary>
                Static array holding all four possible Player instances. Central storage for player
                data, character references, and game state. Indexed by player number (0-3) for
                direct access to player information.
            </summary>
        </member>
        <!-- Character State & Effects Methods -->
        <member name="M:HeroController.AllBrosUseSteroids">
            <summary>
                Activates steroid power-up for all living players simultaneously. Applies different
                time boost behavior based on game mode (competitive vs cooperative). Includes global
                time slow and color shift effects for dramatic impact.
            </summary>
        </member>
        <member name="M:HeroController.GetCorpseExplosionChance">
            <summary>
                Gets the chance for corpses to explode from any playing player's upgrades. Returns
                the exploding corpse chance value from the first playing player found. Used for
                applying consistent corpse explosion mechanics across all players.
            </summary>
            <returns>The corpse explosion chance (0.0-1.0) or -1 if no players playing.</returns>
        </member>
        <member name="M:HeroController.GetPrimaryFireLevel(System.Int32)">
            <summary>
                Gets the primary fire upgrade level for a specific player. Retrieves the modified
                value from the player's inventory value orchestrator. Returns 0 for invalid player
                numbers or if no upgrades are active.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>The primary fire level (0 or higher).</returns>
        </member>
        <member name="M:HeroController.GetSecondaryFireLevel(System.Int32)">
            <summary>
                Gets the secondary fire (special ability) upgrade level for a specific player.
                Retrieves the modified value from the player's inventory value orchestrator. Returns
                0 for invalid player numbers or if no upgrades are active.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>The secondary fire level (0 or higher).</returns>
        </member>
        <member name="M:HeroController.OneBroUseSteroids(System.Int32)">
            <summary>
                Activates steroid power-up for a single player with default settings. Applies
                networked steroid effect, Time Bro boost for 0.5 seconds, global time slow, and
                color shift visual effect. Standard quick steroid activation.
            </summary>
            <param name="playerNum">The player number to apply steroids to.</param>
        </member>
        <member name="M:HeroController.OneBroUseSteroids(System.Int32,System.Single,System.Boolean,System.Boolean,System.Single)">
            <summary>
                Activates steroid power-up for a single player with customizable parameters. Allows
                control over duration, visual effects, and whether to use high-five or standard time
                slow mechanics. Advanced steroid activation method.
            </summary>
            <param name="playerNum">The player number to apply steroids to.</param>
            <param name="duration">Duration of the steroid effect in seconds.</param>
            <param name="timeSlowColors">Whether to apply time slow color shift effect.</param>
            <param name="highFiveSlowDown">Use high-five time slow instead of standard.</param>
            <param name="timeSlowDuration">Duration of the time slow effect.</param>
        </member>
        <member name="M:HeroController.SetHeroInvulnerable(System.Int32,System.Single)">
            <summary>
                Sets a specific hero to invulnerable state for the specified duration. Validates the
                player number and checks that the player has a character instance before applying
                the invulnerability effect without showing halo or other visual indicators.
            </summary>
            <param name="playerNum">The player number to set invulnerable.</param>
            <param name="duration">Duration in seconds for the invulnerability effect.</param>
        </member>
        <member name="M:HeroController.SetHeroesWillComebackToLife(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets heroes within range to resurrect after death for the specified duration. This
                effect allows heroes to automatically respawn at their death location after being
                killed, useful for special game modes or power-ups.
            </summary>
            <param name="x">X coordinate of the center position.</param>
            <param name="y">Y coordinate of the center position.</param>
            <param name="range">Radius of the effect area.</param>
            <param name="duration">Duration in seconds for the resurrection effect.</param>
        </member>
        <member name="M:HeroController.SetHerosInvulnerable(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Sets all heroes within a specified range of a position to invulnerable state. Checks
                each player's distance from the center point and applies invulnerability if they are
                within the circular range. Optionally shows a visual halo effect.
            </summary>
            <param name="x">X coordinate of the center position.</param>
            <param name="y">Y coordinate of the center position.</param>
            <param name="range">Radius of the effect area.</param>
            <param name="duration">Duration in seconds for the invulnerability effect.</param>
            <param name="showHalo">Whether to display a visual halo effect on affected heroes.</param>
        </member>
        <member name="M:HeroController.SetOffscreenHeroesInvulnerable(System.Single)">
            <summary>
                Sets all offscreen heroes to invulnerable state for the specified duration. Loops
                through all players and applies invulnerability to characters that are not visible
                on screen. Also resets their teleport counter to -2 to prevent immediate
                teleportation.
            </summary>
            <param name="duration">Duration in seconds for the invulnerability effect.</param>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:HeroController.timeBoostTime">
            <summary>
                Remaining duration of time manipulation effects. Tracks how long time dilation from
                Time Bro abilities or power-ups should continue. Decrements each frame and restores
                normal time when it reaches zero.
            </summary>
        </member>
        <member name="F:HeroController.ultraHealthyHeroes">
            <summary>
                Flag indicating if heroes have enhanced health. When true, heroes may have
                additional hit points or damage resistance. Used for special game modes or
                difficulty modifiers.
            </summary>
        </member>
        <!-- Input & Control Methods -->
        <member name="M:HeroController.SetAllControllerRumble(System.Single)">
            <summary>
                Sets controller vibration/rumble for all connected players simultaneously. Used for
                major events that should provide feedback to everyone, such as large explosions or
                environmental effects.
            </summary>
            <param name="amount">The intensity of the rumble effect (0-1 range) for all controllers.</param>
        </member>
        <member name="M:HeroController.SetControllerRumble(System.Int32,System.Single)">
            <summary>
                Sets controller vibration/rumble for a specific player. Provides haptic feedback
                through the controller to enhance game feel for explosions, impacts, or other
                significant events.
            </summary>
            <param name="playerNum">The player number whose controller should rumble.</param>
            <param name="amount">The intensity of the rumble effect (0-1 range).</param>
        </member>
        <!-- Player Management Methods -->
        <member name="M:HeroController.AddHeroToAlreadyChosenHeroes(HeroType)">
            <summary>
                Adds a hero type to the list of already chosen heroes. Prevents duplicate entries
                and maintains the history of selected heroes for game modes that cycle through
                available characters.
            </summary>
            <param name="currentType">The hero type to add to the chosen list.</param>
        </member>
        <member name="M:HeroController.AddLife(System.Int32)">
            <summary>
                Adds one life to a specific player. Validates that the player exists and is actively
                playing before calling the player's AddLife method. Used for life pickups, rewards,
                or game mechanics that grant extra lives.
            </summary>
            <param name="playerNum">The player number to add a life to.</param>
        </member>
        <member name="M:HeroController.AddLocalPlayer(System.Int32,System.Int32)">
            <summary>
                Adds a new local player to the game session. Validates the controller isn't already
                in use, gets the player's username from the platform, and sends a join request to
                the server. Marks countdown as finished upon joining.
            </summary>
            <param name="playernum">The player slot to add to (-1 for next available).</param>
            <param name="controllerID">The controller ID for the new player.</param>
        </member>
        <member name="M:HeroController.AddPlayer(System.Int32,System.Int32,PID)">
            <summary>
                RPC method that adds a new player to the game. For local players, instantiates the
                player prefab with network buffering. For remote players, resets ping sampling. Also
                ensures enough bros are unlocked for all joined players.
            </summary>
            <param name="playerNum">The slot number for the new player.</param>
            <param name="controllerNum">The controller ID for the new player.</param>
            <param name="playerPID">The network player ID.</param>
        </member>
        <member name="M:HeroController.AssignPlayerCharacter(System.Int32,TestVanDammeAnim)">
            <summary>
                Assigns a character instance to a player who is not currently alive. Used during
                respawn operations to link the new character to the player's data structure. Only
                works if the player isn't already alive.
            </summary>
            <param name="playerNum">The player number to assign the character to.</param>
            <param name="character">The TestVanDammeAnim character instance to assign.</param>
        </member>
        <member name="M:HeroController.AttachHeroToHelicopter(UnityEngine.Vector3,System.Single,TestVanDammeAnim,Helicopter,System.Boolean)">
            <summary>
                Attaches a hero to a helicopter for extraction or transport. Disables the hero's
                normal functionality, parents them to the helicopter transform, and positions them
                appropriately. Handles special cases for different hero types.
            </summary>
            <param name="localPosition">Local position relative to helicopter for attachment.</param>
            <param name="direction">Direction the hero should face (-1 or 1).</param>
            <param name="hero">The hero character to attach to the helicopter.</param>
            <param name="heli">The helicopter to attach the hero to.</param>
            <param name="startExplosions">Whether to trigger explosion effects on attachment.</param>
        </member>
        <member name="M:HeroController.AutoJoinLocalHost">
            <summary>
                Automatically joins the primary user as the host player. Gets the primary controller
                from the platform, uses the player name from options, and directly calls the join
                game request for immediate hosting.
            </summary>
        </member>
        <member name="M:HeroController.ChangeBro(System.Int32,HeroType)">
            <summary>
                Changes a player's hero type mid-game. Creates a new hero of the specified type at
                the current position, transfers ownership, and destroys the old hero. Handles
                special cases for vehicles and maintains game state consistency.
            </summary>
            <param name="playerNum">The player number to change heroes for.</param>
            <param name="newHeroType">The new hero type to switch to.</param>
        </member>
        <member name="M:HeroController.DecreaseAmmo">
            <summary>
                Resets ammunition tracking for all players to -1. Called during game state
                transitions to clear previous ammo counts before respawning or starting new rounds.
            </summary>
        </member>
        <member name="M:HeroController.DeregisterPlayer(PID)">
            <summary>
                Removes a player from the game by their PID. Searches through all player slots to
                find the matching PID and calls DropoutRPC to remove them.
            </summary>
            <param name="pid">The PID of the player to deregister.</param>
        </member>
        <member name="M:HeroController.DetachHeroFromHelicopter(TestVanDammeAnim)">
            <summary>
                Detaches a hero from a helicopter and restores normal functionality. Re-enables
                physics, unparents from helicopter, and allows the hero to resume normal gameplay.
                Updates the player's helicopter status accordingly.
            </summary>
            <param name="hero">The hero character to detach from the helicopter.</param>
        </member>
        <member name="M:HeroController.Dropout(System.Int32,System.Boolean)">
            <summary>
                Main dropout logic for removing a player from the game. Handles pause menu cleanup
                if the player was pausing, and optionally sends an RPC to notify all other players
                of the dropout.
            </summary>
            <param name="playerNum">The player number to drop out.</param>
            <param name="sendRPC">Whether to send network notification of the dropout.</param>
        </member>
        <member name="M:HeroController.DropoutRPC(System.Int32)">
            <summary>
                RPC method that performs the actual player removal. Destroys the player's
                GameObject, resets controller colors for local players, clears all player data,
                removes from death order, and marks local players as dropped out.
            </summary>
            <param name="playerNum">The player number to remove from the game.</param>
        </member>
        <member name="M:HeroController.FindAndFlashNextSpawnDoor(System.Int32)">
            <summary>
                Finds and highlights the next spawn door for a player in Suicide Horde mode.
                Randomly selects from available mook doors that are visible and not destroyed,
                ensuring no duplicate assignments. Flashes the door with the player's color.
            </summary>
            <param name="playerNum">The player number to find a spawn door for.</param>
        </member>
        <member name="M:HeroController.FlagPlayerToDrop(System.Int32)">
            <summary>
                Flags a player for removal during the next update cycle. Adds the player number to a
                pending drop list, preventing duplicate entries. Used for deferred player removal to
                avoid mid-frame state issues.
            </summary>
            <param name="playerNum">The player number to flag for dropping.</param>
        </member>
        <member name="M:HeroController.FlashSpecialAmmo(System.Int32)">
            <summary>
                Triggers a visual flash effect on the special ammunition display in the player's
                HUD. Used to draw attention to ammo changes or special events.
            </summary>
            <param name="playerNum">The player number whose ammo display should flash.</param>
        </member>
        <member name="M:HeroController.GetCurrentHeroType(System.Int32)">
            <summary>
                Gets the current hero type for a specific player. Returns None if the player doesn't
                exist or has no hero type assigned.
            </summary>
            <param name="playerNum">The player number to get hero type for.</param>
            <returns>The current HeroType or HeroType.None if not found.</returns>
        </member>
        <member name="M:HeroController.GetDefaultPlayerName(System.Int32)">
            <summary>
                Generates a default player name based on the player ID. Returns names in the format
                "P1", "P2", etc. for players who haven't set custom names.
            </summary>
            <param name="playerID">The zero-based index of the player.</param>
            <returns>A default name string like "P1" for player 0.</returns>
        </member>
        <member name="M:HeroController.GetFireKeyDown(System.Int32@)">
            <summary>
                Detects if any controller is pressing the join game button (fire key). Excludes
                input from the DaisyWheel controller to prevent menu conflicts. Updates the
                controllerNum reference with the pressing controller's ID.
            </summary>
            <param name="controllerNum">Output parameter that receives the controller number pressing fire.</param>
            <returns>True if a valid controller pressed the join button; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.GetHeroColor(System.Int32)">
            <summary>
                Gets the color associated with a specific player number. Returns predefined colors
                for players 0-3 with additional colors available. Uses a switch with offset to
                provide unique colors for each player slot. Colors: Blue, Red, Orange, Purple.
            </summary>
            <param name="playerNum">The player number to get color for (0-3).</param>
            <returns>The Color associated with the player number.</returns>
        </member>
        <member name="M:HeroController.GetHeroColorName(System.String)">
            <summary>
                Gets the localized color name for a specific player number. Returns translated
                strings for "Blue", "Red", "Orange", and "Purple" based on player index. Falls back
                to "WHITE" for invalid player numbers.
            </summary>
            <param name="playerNum">The player number to get color name for.</param>
            <returns>The localized color name string.</returns>
        </member>
        <member name="M:HeroController.GetHeroName(HeroType)">
            <summary>
                Converts a HeroType enum value to its display name string. Provides proper
                formatting and spacing for hero names like "B.A. Broracus", "Bro Hard", etc. Falls
                back to the enum's ToString() for unhandled types.
            </summary>
            <param name="type">The HeroType to get the display name for.</param>
            <returns>The formatted display name of the hero.</returns>
        </member>
        <member name="M:HeroController.GetHeroPrefab(HeroType)">
            <summary>
                Retrieves the prefab for a specific hero type from the theme's hero collection.
                Returns the TestVanDammeAnim prefab that can be instantiated to create the hero
                character.
            </summary>
            <param name="heroType">The hero type to get the prefab for.</param>
            <returns>The hero prefab or null if not found.</returns>
        </member>
        <member name="M:HeroController.GetHeroType(System.Int32,System.Collections.Generic.List{HeroType},System.Collections.Generic.List{HeroType},System.Boolean)">
            <summary>
                Determines the next hero type for a player based on game mode and availability.
                Handles forced hero mode, random selection, elimination mode cycling, and
                yet-to-be-seen hero prioritization. Complex logic for fair hero distribution.
            </summary>
            <param name="playerNum">The player requesting a hero.</param>
            <param name="unlockedBros">List of all unlocked hero types.</param>
            <param name="yetToBeSeenUnlockedHereos">Heroes unlocked but not yet played.</param>
            <param name="ignoreYetToBeSeenHeroes">Whether to skip unseen hero prioritization.</param>
            <returns>The selected HeroType for the player.</returns>
        </member>
        <member name="M:HeroController.GetLastSpecialAmmo(System.Int32)">
            <summary>
                Gets the last recorded special ammunition count for a player. Returns the stored
                value or 0 if no ammo count was previously recorded.
            </summary>
            <param name="playerNum">The player number to get ammo for.</param>
            <returns>The last special ammo count or 0 if none recorded.</returns>
        </member>
        <member name="M:HeroController.GetMostRightHero">
            <summary>
                Finds and returns the hero character that is positioned furthest to the right. Only
                considers alive heroes and compares their X positions to find the rightmost one.
            </summary>
            <returns>The TestVanDammeAnim hero furthest right, or null if none alive.</returns>
        </member>
        <member name="M:HeroController.GetNextUnusedPlayerNumber">
            <summary>
                Finds the first available player slot that is not currently in use. Scans through
                all four slots and returns the index of the first one where playersPlaying is false.
                Used when adding new players to find where to place them.
            </summary>
            <returns>The first available player slot (0-3) or -1 if all slots are full.</returns>
        </member>
        <member name="M:HeroController.GetNthAvailableSlot(System.Int32)">
            <summary>
                Finds the Nth available player slot that is not currently occupied. Scans through
                all four player slots and counts empty slots until reaching the requested index.
                Used for assigning new players to available positions.
            </summary>
            <param name="n">The zero-based index of the available slot to find.</param>
            <returns>Player slot number (0-3) or -1 if not enough slots available.</returns>
        </member>
        <member name="M:HeroController.GetNthLocalPlayerPlaying(System.Int32)">
            <summary>
                Gets the player number of the Nth local player who is actively playing. Counts only
                local players (IsMine) who have joined the game. Used for split-screen and local
                co-op player management.
            </summary>
            <param name="n">The zero-based index of the local player to find.</param>
            <returns>Player number (0-3) of the Nth local player or -1 if not found.</returns>
        </member>
        <member name="M:HeroController.GetPidFromControl(System.Int32)">
            <summary>
                Maps a controller ID to its corresponding network Player ID (PID). Used to identify
                which network player corresponds to a given local controller input for proper
                multiplayer synchronization.
            </summary>
            <param name="controlID">The local controller ID to map.</param>
            <returns>The PID enum value for the controller, or PID.NoID if not found.</returns>
        </member>
        <member name="M:HeroController.GetPlayerName(System.Int32)">
            <summary>
                Retrieves the name of a specific player. Returns either the custom name set via
                SetPlayerName or the default name if none was set.
            </summary>
            <param name="index">The player index to get the name for.</param>
            <returns>The player's name string.</returns>
        </member>
        <member name="M:HeroController.GetPlayerNumForControllerID(System.Int32)">
            <summary>
                Gets the player number associated with a specific controller ID. Only checks local
                players (IsMine) and returns -1 if the controller is not assigned to any player.
                Used for mapping controller input to the correct player.
            </summary>
            <param name="controllerID">The controller ID to look up.</param>
            <returns>Player number (0-3) or -1 if not found.</returns>
        </member>
        <member name="M:HeroController.GetPlayerUsingController(System.Int32)">
            <summary>
                Finds the Player instance that is using a specific controller ID. Only returns local
                players (IsMine) that match the controller number. Used for mapping controller input
                to the correct player object.
            </summary>
            <param name="controllerID">The controller ID to search for.</param>
            <returns>The Player using the controller or null if not found.</returns>
        </member>
        <member name="M:HeroController.GetSpecialAmmo(System.Int32,System.Int32)">
            <summary>
                Gets the appropriate special ammunition count for a player, choosing between the
                current count and the last recorded count based on which is higher. Used to maintain
                ammo across respawns.
            </summary>
            <param name="playerNum">The player number to get ammo for.</param>
            <param name="currentSpecialAmmo">The current special ammo count.</param>
            <returns>The maximum of current and last recorded ammo counts.</returns>
        </member>
        <member name="M:HeroController.GiveAllLifelessPlayersALife">
            <summary>
                Gives one life to all players who are currently at zero lives. Loops through all
                playing players and grants a life to those who have no lives remaining, preventing
                complete elimination from the game.
            </summary>
        </member>
        <member name="M:HeroController.HaveAllHerosBeenInstantiated">
            <summary>
                Checks whether all active players have had their hero characters instantiated. Used
                as a readiness check before starting gameplay to ensure all players have spawned
                characters in the scene.
            </summary>
            <returns>True if all playing players have character instances; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsControIdRegisteredToPID(System.Int32,PID)">
            <summary>
                Checks if a controller ID is already registered to a specific network player ID.
                Prevents the same controller-PID combination from joining multiple times, ensuring
                each network player has only one slot.
            </summary>
            <param name="controlId">The controller ID to check.</param>
            <param name="pid">The player network ID to check against.</param>
            <returns>True if this controller-PID combination is already registered; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsControllerIDUsed(System.Int32)">
            <summary>
                Checks if a controller ID is already assigned to an active player. Used internally
                to prevent duplicate controller assignments when players join the game.
            </summary>
            <param name="controllerID">The controller ID to check.</param>
            <returns>True if the controller is already in use; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerActiveForControllerID(System.Int32)">
            <summary>
                Checks if the player using a specific controller is active and alive with lives
                remaining. More comprehensive than just checking if the controller is in use, this
                ensures the player can actually participate in gameplay.
            </summary>
            <param name="controllerID">The controller ID to check.</param>
            <returns>True if the player is active, alive, and has lives; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerPlaying(System.Int32)">
            <summary>
                Checks whether a specific player is currently active in the game. Used to determine
                which player slots are occupied for spawning and input handling.
            </summary>
            <param name="index">The player index to check.</param>
            <returns>True if the player at the given index is playing; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsTypeInUse(HeroType)">
            <summary>
                Checks if a specific hero type is currently being used by any player. Iterates
                through all playing players to see if any have the specified hero type assigned.
                Used to prevent duplicate hero selection.
            </summary>
            <param name="typeTocheck">The HeroType to check for usage.</param>
            <returns>True if the hero type is in use; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.KickPlayersIfHeHasNotJoined(PID)">
            <summary>
                Initiates a timeout check for a player who is expected to join. Starts a coroutine
                that will kick the player if they haven't joined within the timeout period (2
                seconds).
            </summary>
            <param name="playerPid">The PID of the player to monitor for joining.</param>
        </member>
        <member name="M:HeroController.KickPlayersIfHeHasNotJoinedRoutine(PID)">
            <summary>
                Coroutine that waits 2 seconds then checks if a player has joined. If the player's
                PID is not found in the active players list, sends a kick command to remove them
                from the session.
            </summary>
            <param name="playerPid">The PID of the player to check and potentially kick.</param>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>
        <member name="M:HeroController.MonitorPlayerDropin(System.Int32)">
            <summary>
                Monitors a potential player slot for controller input to join the game. Checks for
                fire button press from a logged-in controller and initiates the join process if
                valid input is detected.
            </summary>
            <param name="playernum">The player slot number to monitor for drop-in.</param>
        </member>
        <member name="M:HeroController.PlayerExists(System.Int32)">
            <summary>
                Checks if a player exists and has valid data at the specified player number.
                Verifies both that the player object is not null and that it reports existing
                through its Exists() method.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player exists with valid data; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.RecieveHeroTypeFromMaster(HeroType,System.Int32,HeroType[],Ack)">
            <summary>
                Client-side RPC that receives the hero type assignment from the master. Updates the
                local hero type, synchronizes the already-chosen heroes list, and triggers the spawn
                process for the assigned hero.
            </summary>
            <param name="nextHeroTypeRecieved">The hero type assigned by the master.</param>
            <param name="playerNum">The player number receiving the assignment.</param>
            <param name="updatedHeroAlreadyChosenTypes">Updated list of heroes already chosen.</param>
            <param name="ackResponse">Network acknowledgment response.</param>
        </member>
        <member name="M:HeroController.RegisterHeroToPlayer(TestVanDammeAnim,System.Int32,HeroType)">
            <summary>
                Registers a spawned hero character to a specific player slot. Links the hero
                instance to the player data, activates the HUD, sets the hero type, and handles
                rescue bro visibility. Core method for establishing the player-hero connection.
            </summary>
            <param name="hero">The TestVanDammeAnim hero instance to register.</param>
            <param name="playerNum">The player number to register the hero to.</param>
            <param name="heroTypeEnum">The type of hero being registered.</param>
        </member>
        <member name="M:HeroController.RequestAllPlayerData(PID,System.Boolean)">
            <summary>
                RPC method that sends complete player data to a specific network target. Broadcasts
                all player slots' information including playing status, lives (optionally), and
                special ammo counts. Used when players join to synchronize game state.
            </summary>
            <param name="targetId">The network PID to send the data to.</param>
            <param name="requestLives">Whether to include life counts in the synchronization.</param>
        </member>
        <member name="M:HeroController.RequestHeroTypeFromMaster(System.Int32,System.Boolean)">
            <summary>
                Client-side method to request a hero type assignment from the master/host. Sends
                available hero types and preferences to the master who will assign an appropriate
                hero based on game rules and availability.
            </summary>
            <param name="PlayerNum">The player number requesting a hero.</param>
            <param name="ignoreYetToBeSeenHeroes">Whether to ignore heroes the player hasn't unlocked yet.</param>
        </member>
        <member name="M:HeroController.RequestHeroTypeFromMasterRPC(PID,System.Int32,HeroType[],HeroType,HeroType[],Ack,System.Boolean)">
            <summary>
                Server-side RPC that processes hero type requests from clients. Determines the
                appropriate hero based on game mode, availability, and player preferences, then
                sends the assignment back to the requesting client.
            </summary>
            <param name="Requestee">The PID of the requesting player.</param>
            <param name="PlayerNum">The player slot number.</param>
            <param name="unlockedTypes">Array of heroes the player has unlocked.</param>
            <param name="preferedNextHero">The player's preferred hero choice.</param>
            <param name="yetToBeSeenUnlockedHereos">Heroes unlocked but not yet seen by player.</param>
            <param name="ackRequest">Network acknowledgment request.</param>
            <param name="ignoreYetToBeSeenHeroes">Whether to skip unseen heroes.</param>
        </member>
        <member name="M:HeroController.RequestJoinGame(System.Int32,PID,System.String)">
            <summary>
                Processes a request to join the game from a client. Host-only method that validates
                the request, assigns an available player slot, broadcasts the addition to all
                players, and requests player data synchronization. Prevents duplicate joins and
                handles full games.
            </summary>
            <param name="controllerNum">The controller number of the joining player.</param>
            <param name="requesteeID">The network PID of the requesting player.</param>
            <param name="playerName">The display name of the joining player.</param>
        </member>
        <member name="M:HeroController.RestartAllHeroesBubbles">
            <summary>
                Shows the start bubble animation for all living heroes. Creates visual feedback at
                level start or after checkpoints to indicate player positions and readiness.
            </summary>
        </member>
        <member name="M:HeroController.SetAllHeroesImmuneToOutOfBounds">
            <summary>
                Makes all living heroes immune to out-of-bounds death. Prevents heroes from dying
                when they go outside level boundaries, used during transitions or special sequences.
            </summary>
        </member>
        <member name="M:HeroController.SetAllHeroesInvulnerable(System.Single)">
            <summary>
                Sets all living heroes to invulnerable state for the specified duration. Loops
                through all player slots and applies invulnerability to each active character. Used
                for level transitions or special events.
            </summary>
            <param name="duration">Duration in seconds for the invulnerability effect.</param>
        </member>
        <member name="M:HeroController.SetIsPlaying(System.Int32,System.Boolean)">
            <summary>
                Updates a player's playing status. Synchronizes with the platform controller,
                updates network room information, and manages player state. Handles both joining and
                leaving players with proper platform integration.
            </summary>
            <param name="index">The player index to update.</param>
            <param name="isPlaying">True if the player is joining; false if leaving.</param>
        </member>
        <member name="M:HeroController.SetLives(System.Int32,System.Int32)">
            <summary>
                Sets the number of lives for one or all players. Can target a specific player or set
                lives for all players when playerNum is -1. Updates both the lives count and any
                powerups that track lives.
            </summary>
            <param name="playerNum">The player to set lives for, or -1 for all players.</param>
            <param name="livesCount">The number of lives to set.</param>
        </member>
        <member name="M:HeroController.SetOriginalSpecialAmmoCount(System.Int32,System.Int32)">
            <summary>
                Sets the original special ammunition count displayed in the HUD. Updates the player
                HUD's tracking of the base ammo count for display purposes, separate from the actual
                current ammo.
            </summary>
            <param name="playerNum">The player number to update HUD for.</param>
            <param name="count">The original ammo count to display.</param>
        </member>
        <member name="M:HeroController.SetPlayerCharacter(System.Int32,TestVanDammeAnim)">
            <summary>
                Assigns a character instance to a specific player slot. Links the spawned
                TestVanDammeAnim character to the player's data for tracking and control.
            </summary>
            <param name="index">The player index to assign the character to.</param>
            <param name="character">The TestVanDammeAnim character instance to assign.</param>
        </member>
        <member name="M:HeroController.SetPlayerName(System.Int32,System.String)">
            <summary>
                Sets a custom name for a specific player. Overwrites the default "P1" style names
                with player-chosen or platform-provided names.
            </summary>
            <param name="index">The player index to set the name for.</param>
            <param name="pName">The custom name to assign to the player.</param>
        </member>
        <member name="M:HeroController.SetSpecialAmmo(System.Int32,System.Int32)">
            <summary>
                Sets the special ammunition count for a specific player. Updates the ammo tracking
                array if the count is non-negative, used for restoring ammo counts after respawn or
                power-ups.
            </summary>
            <param name="playerNum">The player number to set ammo for.</param>
            <param name="specialAmmo">The special ammo count to set.</param>
        </member>
        <member name="M:HeroController.SpawnJoinedPlayers">
            <summary>
                Spawns hero characters for all joined players who haven't been spawned yet. Handles
                different game modes (BroDown, SuicideHorde, etc.) with appropriate spawn behavior.
                Uses RPC calls to synchronize player addition across the network.
            </summary>
        </member>
        <member name="M:HeroController.SpawnSuicideBro(System.Int32)">
            <summary>
                Spawns a player in Suicide Horde mode. Calls the player's RespawnBro method without
                checkpoint and clears any associated spawn door reference. Used specifically for the
                Suicide Horde game mode's unique spawning system.
            </summary>
            <param name="playerNum">The player number to spawn as suicide bro.</param>
        </member>
        <member name="M:HeroController.UpdatePlayerData(System.Int32,System.Boolean,PID,System.String,System.Int32)">
            <summary>
                RPC method that updates all player data for a specific slot. Synchronizes player
                information across the network including playing status, network ID, name, and
                controller assignment. Core method for keeping player data consistent.
            </summary>
            <param name="index">The player slot index to update.</param>
            <param name="isPlaying">Whether the player is actively playing.</param>
            <param name="pid">The network player ID.</param>
            <param name="playerName">The player's display name.</param>
            <param name="controller">The controller ID assigned to this player.</param>
        </member>
        <member name="M:HeroController.UpdatePlayerUserData(System.Int32,System.Int32,System.String)">
            <summary>
                Updates a player's controller and name information and broadcasts the change to
                other players. Also updates the primary user ID for single-player scenarios. Used
                when players change controllers or update their names mid-game.
            </summary>
            <param name="playerNum">The player number to update.</param>
            <param name="controllerNum">The new controller ID.</param>
            <param name="playerName">The new player name.</param>
        </member>
        <!-- Player Management Fields -->
        <member name="F:HeroController.BotBrainLeader">
            <summary>
                Specifies which player number the bot brain should follow. When using AI control,
                bots will follow and assist the specified player. Initialized to -1 (no leader) for
                each slot.
            </summary>
        </member>
        <member name="F:HeroController.PIDS">
            <summary>
                Network Player IDs for each player slot. Maps local player indices to network
                identities for multiplayer synchronization. Initialized to NoID and updated when
                players join. Critical for network communication.
            </summary>
        </member>
        <member name="F:HeroController.UseBotBrain">
            <summary>
                Tracks whether each player slot is using AI bot brain control. When true, the player
                is controlled by AI instead of human input. Used for bot players in single player or
                when players disconnect.
            </summary>
        </member>
        <member name="F:HeroController.ammoCounts">
            <summary>
                Tracks current special ammunition counts for each player. Initialized to -1 to
                indicate no ammo data. Used for maintaining ammo state across respawns and for HUD
                display. Array indexed by player number.
            </summary>
        </member>
        <member name="F:HeroController.lastAmmoCounts">
            <summary>
                Stores the last known special ammunition count for each player. Used to restore ammo
                after respawn or to track ammo changes. Helps maintain ammo persistence across
                death/respawn cycles.
            </summary>
        </member>
        <member name="F:HeroController.playerControllerIDs">
            <summary>
                Maps player slots to physical controller IDs. Tracks which gamepad or input device
                controls each player. Initialized to -1 (no controller) and updated when players
                join with their controller ID.
            </summary>
        </member>
        <member name="F:HeroController.playerNames">
            <summary>
                Stores display names for each player slot. Can be custom names from platform
                profiles or default names like "P1". Initialized as empty strings and updated when
                players join or change names.
            </summary>
        </member>
        <member name="F:HeroController.playersPlaying">
            <summary>
                Private array tracking which player slots are actively in the game. True indicates
                the slot is occupied by a joined player, false means empty. Core state for player
                management.
            </summary>
        </member>
        <!-- Player Status Methods -->
        <member name="M:HeroController.AreAllHerosDead">
            <summary>
                Checks if all player heroes are currently dead. Used to determine game over
                conditions or trigger respawn sequences when no players remain alive.
            </summary>
            <returns>True if no players are alive; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.AreAllOtherHerosDead(System.Int32)">
            <summary>
                Checks if all heroes except the specified player are dead. Note: Current
                implementation has a bug and always returns false due to misplaced return statement.
                Intended to check if only one player remains alive.
            </summary>
            <param name="playerNum">The player number to exclude from the death check.</param>
            <returns>Always returns false due to implementation bug.</returns>
        </member>
        <member name="M:HeroController.AtLeastOnePlayerStillHasALife">
            <summary>
                Checks if any playing player has at least one life remaining. Used to determine if
                the game should continue or trigger game over. Returns true as long as any player
                can still respawn.
            </summary>
            <returns>True if at least one player has lives remaining; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.GetFirstHeroAlive">
            <summary>
                Finds the first player who has a living hero character. Scans through all player
                slots in order and returns the index of the first one with an alive character.
                Defaults to 0 if no living heroes found.
            </summary>
            <returns>The player number of the first living hero, or 0 if none alive.</returns>
        </member>
        <member name="M:HeroController.GetFirstPlayerPosition(System.Int32)">
            <summary>
                Gets the position of the first living player other than the specified one. Used for
                finding ally positions for AI or camera logic. Falls back to checkpoint position if
                no other living players exist.
            </summary>
            <param name="ignorePlayerNum">The player number to exclude from the search.</param>
            <returns>Vector2 position of the first other living player or checkpoint position.</returns>
        </member>
        <member name="M:HeroController.GetLocalPlayerCount">
            <summary>
                Gets the count of local players (non-network players) in the game. Checks the IsMine
                property of each player's PID to identify local vs remote players. Used for
                split-screen and local co-op scenarios.
            </summary>
            <returns>The number of local players (0-4).</returns>
        </member>
        <member name="M:HeroController.GetPlayerLives(System.Int32)">
            <summary>
                Gets the number of lives remaining for a specific player. Returns 0 if the player
                doesn't exist or isn't playing.
            </summary>
            <param name="playerNum">The player number to get lives for.</param>
            <returns>The number of lives remaining for the player.</returns>
        </member>
        <member name="M:HeroController.GetPlayersAliveCount">
            <summary>
                Counts the number of players who are currently alive. Checks each playing player to
                see if they have a character instance that is alive. Used for gameplay logic that
                depends on active player count.
            </summary>
            <returns>The number of players with living characters.</returns>
        </member>
        <member name="M:HeroController.GetPlayersOnHelicopterAmount">
            <summary>
                Counts players who are both alive and currently on the extraction helicopter. Used
                for level completion checks to ensure all players have reached the extraction point
                before ending the level.
            </summary>
            <returns>The number of living players on the helicopter.</returns>
        </member>
        <member name="M:HeroController.GetPlayersPlayingCount">
            <summary>
                Gets the total number of players currently marked as playing. Counts all players
                with isPlaying flag set to true, regardless of whether they are alive or have
                spawned characters.
            </summary>
            <returns>The count of players currently in the game.</returns>
        </member>
        <member name="M:HeroController.GetTotalLives">
            <summary>
                Calculates the total remaining lives across all playing players. Sums up the Lives
                count for each active player to determine overall lives pool for game over
                conditions.
            </summary>
            <returns>The total number of lives remaining for all players.</returns>
        </member>
        <member name="M:HeroController.HasJustStarted">
            <summary>
                Checks if the game has just started by testing if input is still delayed. Returns
                true during the initial game startup period before player input is enabled, used to
                prevent premature actions.
            </summary>
            <returns>True if the game just started and input is delayed; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.HaveAllPlayersHaveSpawned">
            <summary>
                Checks if all players have completed spawning and are no longer in first deployment
                state. Game mode aware, checking only the expected number of players for BroDown or
                SuicideHorde modes.
            </summary>
            <returns>True if all expected players have spawned; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.HaveAllPlayersJoined">
            <summary>
                Checks if all players who are supposed to be playing have joined the game. Considers
                different game modes (BroDown, SuicideHorde) to determine expected player count.
                Sets AllPlayersHaveJoined field when all expected players join.
            </summary>
            <returns>True if all expected players have joined; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsAnyHeroDead">
            <summary>
                Checks if any playing hero is currently dead. Only considers players who are
                actively playing, ignoring empty slots. Used for respawn timing logic.
            </summary>
            <returns>True if any playing player is dead; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsAnyPlayerDead">
            <summary>
                Checks if any active player is currently dead. Only considers players who are marked
                as playing, ignoring empty slots. Used for game logic that triggers when at least
                one player needs respawning.
            </summary>
            <returns>True if any playing player is dead; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsDead(System.Int32)">
            <summary>
                Protected method that checks if a specific player is dead. Returns true if the
                player exists but has no living character instance, indicating they are awaiting
                respawn.
            </summary>
            <param name="playerNum">The player number to check death status for.</param>
            <returns>True if the player is dead; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlaying(System.Int32)">
            <summary>
                Checks if a specific player slot is active and playing. Simple accessor for the
                player's isPlaying flag without additional validation.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player is marked as playing; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.NumberOfPlayers">
            <summary>
                Counts the total number of players currently in the game. Includes both local and
                remote players who have joined but may not necessarily be alive. Used for game logic
                that depends on participant count.
            </summary>
            <returns>The total number of players marked as playing (0-4).</returns>
        </member>
        <member name="M:HeroController.NumberOfPlayersOnThisPC">
            <summary>
                Counts only local players on this machine. Checks each player's PID to determine if
                they belong to the local client. Used for split-screen management and local input
                handling.
            </summary>
            <returns>The number of local players (0-4).</returns>
        </member>
        <member name="M:HeroController.PlayerHasALife(System.Int32)">
            <summary>
                Checks if a specific player has any lives remaining. Used to determine if a player
                can still respawn after death.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player has at least one life; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.PlayerHasDied(System.Int32)">
            <summary>
                Public entry point for handling player death. Manages the complete death process
                including life deduction, death order tracking, game over checks, avatar updates,
                and network synchronization through RPC calls.
            </summary>
            <param name="playerNum">The player number who died.</param>
        </member>
        <member name="M:HeroController.PlayerHasDiedRPC(System.Int32)">
            <summary>
                RPC method that notifies all clients when a player dies. Updates death tracking,
                manages lives, handles game over conditions, and coordinates the death state across
                the network. Only processes on non-host clients.
            </summary>
            <param name="playerNum">The player number who died.</param>
        </member>
        <member name="M:HeroController.PlayerIsAlive(System.Int32)">
            <summary>
                Simple check to determine if a player is currently alive. Verifies the player is
                playing and has a living character instance in the game world.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player has a living character; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.PlayerIsBeingRescuedOrRespawned(System.Int32)">
            <summary>
                Checks if a player is currently in the process of being rescued or respawned. Used
                to prevent interference with ongoing rescue operations and to track player state
                during transitions.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player is being rescued or respawned; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.PlayerIsInvulnerable(System.Int32)">
            <summary>
                Checks if a specific player is currently invulnerable. Returns true only if the
                player is alive and their character's invulnerable property is set.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player is alive and invulnerable; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.PlayerIsNotInStealth(System.Int32)">
            <summary>
                Checks if a player exists and is not currently in stealth mode. Used by AI and
                detection systems to determine if a player should be visible to enemies.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player exists and is not stealthed; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.PlayerIsOnHelicopter(System.Int32)">
            <summary>
                Checks if a specific player is currently on the extraction helicopter. Used for
                level completion checks to ensure all players have reached extraction.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player is alive and on the helicopter; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.ResetPlayersPlaying">
            <summary>
                Resets all player states to not playing. Clears the isPlaying flag for all four
                player slots, used when returning to menus or resetting the game session.
            </summary>
        </member>
        <member name="M:HeroController.UpdateDeathOrder(System.Int32[])">
            <summary>
                Updates the local death order array to match the authoritative version from the
                host. Ensures all clients maintain consistent death ordering for respawn priority
                and other death-related mechanics.
            </summary>
            <param name="latestDeathOrder">The authoritative death order array from the host.</param>
        </member>
        <!-- Player Detection Methods -->
        <member name="M:HeroController.CanSeePlayer(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Int32@)">
            <summary>
                Performs a line of sight check for players in a specific direction. Uses raycasting
                to ensure no obstacles block the view. Checks both players and their owned units
                (like SnakeBroskin's grenade hologram).
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="xRange">Maximum horizontal distance for line of sight.</param>
            <param name="yRange">Maximum vertical distance for line of sight.</param>
            <param name="seenPlayerNum">Output parameter for the player number if seen.</param>
            <returns>True if a player is visible in the specified direction; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.CanSeePlayer(System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32@)">
            <summary>
                Line of sight check with both X and Y direction constraints. Most restrictive
                visibility check that requires the target to be in the correct quadrant and have an
                unobstructed line of sight.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Horizontal direction (-1 for left, 1 for right).</param>
            <param name="yDirection">Vertical direction (-1 for down, 1 for up).</param>
            <param name="xRange">Maximum horizontal distance for line of sight.</param>
            <param name="yRange">Maximum vertical distance for line of sight.</param>
            <param name="seenPlayerNum">Output parameter for the player number if seen.</param>
            <returns>True if a player is visible in the specified quadrant; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.CanSeePlayer(System.Int32,System.Single,System.Single)">
            <summary>
                Checks if a specific player is visible from a given position. Uses raycasting to
                verify line of sight is not blocked by terrain or obstacles. Considers stealth mode
                - returns false if the player is in stealth.
            </summary>
            <param name="lookForPlayerNum">The specific player number to look for.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <returns>True if the specified player is visible and not in stealth; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.CanSeePlayer(System.Single,System.Single,System.Single,System.Single,System.Int32@)">
            <summary>
                Omnidirectional line of sight check for any player within range. Checks all living
                players and their units for visibility without direction constraints. Respects
                stealth mode and uses raycasting for obstacle detection.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xRange">Maximum horizontal distance for line of sight.</param>
            <param name="yRange">Maximum vertical distance for line of sight.</param>
            <param name="seenPlayerNum">Output parameter for the nearest visible player number.</param>
            <returns>True if any player is visible within range; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.GetActualNearestPlayer(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Finds the truly nearest player using combined X and Y distance. More accurate than
                GetNearestPlayer for finding the closest player as it uses actual distance rather
                than treating X and Y separately.
            </summary>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <param name="xRange">Maximum horizontal distance to search.</param>
            <param name="yRange">Maximum vertical distance to search.</param>
            <returns>Player index (0-3) of nearest player or -1 if none in range.</returns>
        </member>
        <member name="M:HeroController.GetNearestPlayer(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Finds the nearest player within a specified rectangular range. Returns the player
                index of the closest player within the range or -1 if no players are found. Uses
                Manhattan distance for range checking.
            </summary>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <param name="xRange">Maximum horizontal distance to search.</param>
            <param name="yRange">Maximum vertical distance to search.</param>
            <returns>Player index (0-3) of nearest player or -1 if none in range.</returns>
        </member>
        <member name="M:HeroController.GetNearestPlayer(System.Single,System.Single,System.Single,System.Single,System.Int32@)">
            <summary>
                Finds the nearest player within range and updates the current nearest reference.
                Returns true if a closer player was found than the current nearest. Used for
                iterative searches to find the closest among multiple candidates.
            </summary>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <param name="xRange">Maximum horizontal distance to search.</param>
            <param name="yRange">Maximum vertical distance to search.</param>
            <param name="currentNearest">Reference to current nearest player, updated if closer found.</param>
            <returns>True if a closer player was found; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.GetNearestPlayerPos(System.Single,System.Single)">
            <summary>
                Finds the position of the nearest living player to the specified coordinates.
                Returns the player's position as a Vector3 or a far-away position (1000, 1000, 0) if
                no players are alive.
            </summary>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <returns>Vector3 position of the nearest player or (1000, 1000, 0) if none found.</returns>
        </member>
        <member name="M:HeroController.GetNearestPlayerPos(System.Single,System.Single,System.Int32@)">
            <summary>
                Finds the position of the nearest living player and returns their player number.
                Uses squared distance for efficiency and updates the playerNum reference with the
                nearest player's index.
            </summary>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <param name="playerNum">Output parameter for the nearest player's number.</param>
            <returns>Vector3 position of the nearest player or (1000, 1000, 0) if none found.</returns>
        </member>
        <member name="M:HeroController.GetPlayerPos(System.Int32,System.Single@,System.Single@)">
            <summary>
                Gets the position of a specific player through reference parameters. If the player
                doesn't exist or isn't alive, returns (-1000, -1000) as an invalid position marker.
            </summary>
            <param name="playerNum">The player number to get position for.</param>
            <param name="xPos">Output parameter that receives the player's X position.</param>
            <param name="yPos">Output parameter that receives the player's Y position.</param>
        </member>
        <member name="M:HeroController.GetPlayerPos(System.Int32)">
            <summary>
                Gets the position of a specific player as a Vector3. Returns the player's current
                position or (-1000, -1000, 0) if the player doesn't exist or isn't alive.
            </summary>
            <param name="playerNum">The player number to get position for.</param>
            <returns>Vector3 position of the player or (-1000, -1000, 0) if invalid.</returns>
        </member>
        <member name="M:HeroController.GetPlayerPosition(System.Int32)">
            <summary>
                Gets the position of a specific player as a Vector3. Returns the player's current
                world position or Vector3.zero if the player doesn't exist or has no character
                instance.
            </summary>
            <param name="playerNum">The player number to get position for.</param>
            <returns>Vector3 position of the player or Vector3.zero if invalid.</returns>
        </member>
        <member name="M:HeroController.GetPlayerTransform(System.Int32)">
            <summary>
                Gets the Transform component of a specific player's character. Returns null if the
                player doesn't exist, isn't playing, or has no character instance.
            </summary>
            <param name="playerNum">The player number to get the transform for.</param>
            <returns>The player's character Transform or null if unavailable.</returns>
        </member>
        <member name="M:HeroController.GetRandomPlayerPlaying">
            <summary>
                Gets the player number of a random living player. Useful for AI that needs to target
                a random player rather than the nearest one. Returns -1 if no players are alive.
            </summary>
            <returns>Player number (0-3) of a random living player or -1 if none.</returns>
        </member>
        <member name="M:HeroController.GetRandomPlayerPos(System.Single@,System.Single@,System.Int32@)">
            <summary>
                Gets the position of a random living player through reference parameters. Randomly
                selects from all alive players and returns their position and player number. Returns
                false if no players are alive.
            </summary>
            <param name="xPos">Output parameter for the selected player's X position.</param>
            <param name="yPos">Output parameter for the selected player's Y position.</param>
            <param name="playerNum">Output parameter for the selected player's number.</param>
            <returns>True if a living player was found; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.GetRandomPlayerPos">
            <summary>
                Gets the position of a random living player as a Vector3. Returns a far-away
                position (1000, 1000, 0) if no players are alive. Used for AI targeting when any
                player target is acceptable.
            </summary>
            <returns>Vector3 position of a random living player or (1000, 1000, 0) if none.</returns>
        </member>
        <member name="M:HeroController.IsAnotherPlayerNearby(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Checks if any player other than the specified player is within range. Used for co-op
                mechanics, friendly fire detection, and ensuring players don't interact with their
                own detection zones.
            </summary>
            <param name="currentPlayerNum">Player number to exclude from the search.</param>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <param name="xRange">Maximum horizontal distance to search.</param>
            <param name="yRange">Maximum vertical distance to search.</param>
            <returns>True if another player is found within range; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerNearby(System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Int32@)">
            <summary>
                Checks if any player is within the specified range and returns their position.
                Updates reference parameters with the nearest player's coordinates and player
                number. Used for AI targeting and interaction systems.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xRange">Horizontal detection range.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="playerX">Output parameter for found player's X position.</param>
            <param name="playerY">Output parameter for found player's Y position.</param>
            <param name="seenPlayer">Output parameter for found player's number.</param>
            <returns>True if a player is found within range; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerNearby(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single@,System.Single@,System.Int32@)">
            <summary>
                Directional player detection that checks for players in a specific direction. Only
                detects players in the direction specified by xDirection parameter and returns their
                position and player number through reference parameters.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="xRange">Horizontal detection range in the specified direction.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="playerX">Output parameter for found player's X position.</param>
            <param name="playerY">Output parameter for found player's Y position.</param>
            <param name="seenPlayerNum">Output parameter for found player's number.</param>
            <returns>True if a player is found in the specified direction; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerNearby(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Basic proximity check to determine if any player is within the specified rectangular
                range. Simple boolean check without returning player information.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xRange">Horizontal detection range.</param>
            <param name="yRange">Vertical detection range.</param>
            <returns>True if any player is within range; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerNearby(System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
                Directional proximity check that only detects players in the specified direction.
                Used for directional attacks, line of sight checks, and facing-dependent
                interactions.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="xRange">Horizontal detection range in the specified direction.</param>
            <param name="yRange">Vertical detection range.</param>
            <returns>True if a player is found in the specified direction; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerNearby(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Int32@)">
            <summary>
                Directional player detection that finds players in a specific direction and returns
                their player number. Only detects players whose position relative to the check point
                matches the specified direction.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="xRange">Horizontal detection range in the specified direction.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="seenPlayerNum">Output parameter for found player's number.</param>
            <returns>True if a player is found in the specified direction; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerNearby(System.Int32,System.Single,System.Single,System.Int32,System.Single@,System.Single,System.Single@,System.Single@)">
            <summary>
                Checks if a specific player is nearby in a given direction and returns their
                position. Updates the xRange parameter and target position references if the player
                is found within the directional constraints.
            </summary>
            <param name="playerNum">The specific player number to check for.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="xRange">Reference to horizontal range, updated based on player distance.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="targetX">Output parameter for the player's X position if found.</param>
            <param name="targetY">Output parameter for the player's Y position if found.</param>
            <returns>True if the specified player is found in range and direction; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerNearby(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single@,System.Single,System.Single@,System.Single@)">
            <summary>
                Checks if a specific player is nearby with both X and Y direction constraints. Most
                restrictive proximity check that requires the player to be in the correct quadrant
                relative to the check position.
            </summary>
            <param name="playerNum">The specific player number to check for.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Horizontal direction (-1 for left, 1 for right).</param>
            <param name="yDirection">Vertical direction (-1 for down, 1 for up).</param>
            <param name="xRange">Reference to horizontal range, updated based on player distance.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="targetX">Output parameter for the player's X position if found.</param>
            <param name="targetY">Output parameter for the player's Y position if found.</param>
            <returns>True if the player is found in the specified quadrant; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerNearby(System.Int32,System.Single,System.Single,System.Single@,System.Single,System.Single@,System.Single@)">
            <summary>
                Checks if a specific player is within range without direction constraints. Updates
                the xRange parameter and returns the player's position through reference parameters
                if found.
            </summary>
            <param name="playerNum">The specific player number to check for.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xRange">Reference to horizontal range, updated based on player distance.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="targetX">Output parameter for the player's X position if found.</param>
            <param name="targetY">Output parameter for the player's Y position if found.</param>
            <returns>True if the specified player is within range; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerThisWay(System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
                Checks if a specific player is positioned in the given direction from a point. Used
                for directional AI decisions and determining relative player positions.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <returns>True if the player is in the specified direction; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerThisWay(System.Single,System.Single,System.Int32)">
            <summary>
                Checks if any player is positioned in the given direction from a point. Searches all
                playing players to find if any are in the specified direction. Used for AI
                directional awareness without caring which specific player.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <returns>True if any player is in the specified direction; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.IsPlayerThisWay(System.Single,System.Single,System.Int32,System.Int32@)">
            <summary>
                Checks if any player is in the given direction and returns the nearest one. Finds
                the closest player in the specified direction based on absolute X distance and
                updates the seenPlayerNum reference with their index.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="seenPlayerNum">Output parameter for the nearest player's number in that direction.</param>
            <returns>True if a player is found in the direction; otherwise, false.</returns>
        </member>
        <!-- Player Detection Fields -->
        <member name="F:HeroController.fragileLayer">
            <summary>
                Layer mask for fragile/destructible terrain detection. Used to identify breakable
                surfaces that might affect spawn positions or require special handling during
                physics checks.
            </summary>
        </member>
        <member name="F:HeroController.groundLayer">
            <summary>
                Layer mask for ground collision detection. Used in raycasting operations to detect
                solid ground for spawn position validation, line of sight checks, and movement
                calculations.
            </summary>
        </member>
        <member name="F:HeroController.rayCastHit">
            <summary>
                Shared RaycastHit structure for physics queries. Reused across multiple raycast
                operations to avoid allocation overhead. Stores hit information from the most recent
                raycast operation.
            </summary>
        </member>
        <!-- Rescue System Methods -->
        <member name="M:HeroController.CheckRescueBros(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Checks for rescue bros within range of the specified position and initiates rescue
                if found. Handles the rescue animation, network RPC calls, and returns whether any
                rescue was initiated. Only the host processes the actual rescue logic.
            </summary>
            <param name="playerNum">The player number checking for rescues.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="range">Range to check for rescue bros.</param>
            <returns>True if a rescue was initiated; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.DestroyRescueBroRPC(RescueBro)">
            <summary>
                RPC method to destroy a rescue bro across all clients. Handles null checks and
                ensures proper cleanup of the rescue bro game object to prevent orphaned references
                in multiplayer games.
            </summary>
            <param name="rescueBro">The RescueBro instance to destroy.</param>
        </member>
        <member name="M:HeroController.MayIRescueThisBro(System.Int32,RescueBro,Ack)">
            <summary>
                Server-side validation method for rescue attempts. Coordinates rescue operations
                across the network to ensure only one player can rescue a bro. Handles both
                character swapping and respawning scenarios based on game state.
            </summary>
            <param name="playerNum">The player number attempting the rescue.</param>
            <param name="rescueBro">The RescueBro object being rescued.</param>
            <param name="ackRequest">Network acknowledgment for the rescue request.</param>
        </member>
        <member name="M:HeroController.RespawnBro(System.Int32,RescueBro,System.Int32[],Ack)">
            <summary>
                RPC method that respawns a dead player when their bro is rescued. Updates the death
                order to maintain consistency across the network and calls the player's RespawnBro
                method to create their new character at the rescue location.
            </summary>
            <param name="rescuedPlayer">The player number being respawned.</param>
            <param name="rescueBro">The RescueBro that triggered the respawn.</param>
            <param name="latestDeathOrder">Array tracking the order of player deaths.</param>
            <param name="ackResponse">Network acknowledgment for the operation.</param>
        </member>
        <member name="M:HeroController.SwapBro(System.Int32,RescueBro,System.Int32[],Ack)">
            <summary>
                RPC method that performs character swapping when rescuing a bro while alive. Swaps
                the current character with the rescued bro type, maintaining the player's position
                and state. Updates death order tracking for consistency.
            </summary>
            <param name="playerNum">The player number performing the swap.</param>
            <param name="rescueBro">The RescueBro being swapped to.</param>
            <param name="latestDeathOrder">Array tracking the order of player deaths.</param>
            <param name="ackResponse">Network acknowledgment for the operation.</param>
        </member>
        <!-- Rescue System Fields -->
        <member name="F:HeroController.nextSpawnDoor">
            <summary>
                Array tracking the assigned spawn door for each player in Suicide Horde mode. Each
                player gets a specific mook door to spawn from, preventing spawn conflicts and
                providing visual indicators of where players will appear.
            </summary>
        </member>
        <!-- Game State Management Methods -->
        <member name="M:HeroController.DoCountDown">
            <summary>
                Coroutine that manages the pre-game countdown sequence. Handles different countdown
                behaviors for various game modes, displays countdown numbers and announcements,
                manages encouragement messages for struggling players, and triggers game start when
                countdown completes. Special handling for edit mode, test runs, and DeathMatch.
            </summary>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>
        <member name="M:HeroController.GetCheckPointOffset(System.Int32)">
            <summary>
                Calculates the spawn offset for a player at a checkpoint based on their player
                number. Players 0-1 spawn 8 units apart, players 2-3 spawn 12 units apart, creating
                a staggered formation to prevent spawn overlapping.
            </summary>
            <param name="playerNum">The player number to get offset for.</param>
            <returns>Vector2 offset to apply to the checkpoint position.</returns>
        </member>
        <member name="M:HeroController.GetCheckPointPosition(System.Int32,System.Boolean)">
            <summary>
                Calculates the final spawn position for a player at the current checkpoint. For
                airdrop spawns, positions the player high above the screen. For ground spawns,
                applies the player-specific offset to prevent overlapping.
            </summary>
            <param name="playerNum">The player number to get spawn position for.</param>
            <param name="spawnViaAirDrop">Whether the player should spawn via airdrop from above.</param>
            <returns>Vector3 world position where the player should spawn.</returns>
        </member>
        <member name="M:HeroController.GetCurrentCheckPointID">
            <summary>
                Gets the ID of the current checkpoint. Used to track progression through the level
                and determine respawn locations. Returns -1 if no checkpoint has been activated.
            </summary>
            <returns>The current checkpoint ID or -1 if none set.</returns>
        </member>
        <member name="M:HeroController.NotifyBrosReleased">
            <summary>
                RPC method that sets the BrosReleased flag to true. Used to synchronize the game
                start state across all players, indicating that players can begin moving and
                playing.
            </summary>
        </member>
        <member name="M:HeroController.NumberOfConnectedMachines">
            <summary>
                Counts the number of remote machines connected to the game session. Iterates through
                all PIDs checking for non-local connections. Used for network game management and
                connection tracking.
            </summary>
            <returns>The count of connected remote machines.</returns>
        </member>
        <member name="M:HeroController.PlayerDelay(System.Int32)">
            <summary>
                Sets a delay timer for a specific player, preventing immediate actions after certain
                events. Uses the configured playerDelayTime from the HeroController instance to set
                the delay duration.
            </summary>
            <param name="playerNum">The player number to apply the delay to.</param>
        </member>
        <member name="M:HeroController.RegisterHiddenExplosives(HiddenExplosives)">
            <summary>
                Registers a hidden explosive object for tracking. Creates the hiddenExplosives list
                if it doesn't exist and adds the explosive to it. Used to manage triggered
                explosives that are revealed during gameplay.
            </summary>
            <param name="hiddenExplosive">The HiddenExplosives instance to register.</param>
        </member>
        <member name="M:HeroController.RemoveHiddenExplosives(HiddenExplosives)">
            <summary>
                Removes a hidden explosive from the tracking list. Called when an explosive is
                triggered or destroyed to clean up references.
            </summary>
            <param name="hiddenExplosive">The HiddenExplosives instance to remove.</param>
        </member>
        <member name="M:HeroController.RequestCheckpointSet(UnityEngine.Vector2,System.Int32)">
            <summary>
                Server-side RPC handler for checkpoint requests. Broadcasts the checkpoint update to
                all connected players to ensure everyone has the same checkpoint data. Only
                processed by the host/server.
            </summary>
            <param name="checkPointPos">The world position of the checkpoint.</param>
            <param name="checkPointID">The unique ID of the checkpoint.</param>
        </member>
        <member name="M:HeroController.ResetLossCounter">
            <summary>
                Resets the game over countdown timer if all players are dead. Checks each player's
                death state and if all are dead with remaining time, resets the loss timer and stops
                any active fade effects. Prevents premature game over transitions.
            </summary>
        </member>
        <member name="M:HeroController.SetCheckPoint(UnityEngine.Vector2,System.Int32)">
            <summary>
                Sets a new checkpoint position and ID. Updates the local checkpoint data and sends
                an RPC to the server to synchronize the checkpoint across all players. Primary
                public interface for checkpoint management.
            </summary>
            <param name="checkPointPos">The world position of the new checkpoint.</param>
            <param name="checkPointID">The unique ID of the checkpoint.</param>
        </member>
        <member name="M:HeroController.SetCheckPointInternal(UnityEngine.Vector2,System.Int32)">
            <summary>
                Internal method that actually updates the checkpoint data. Sets the checkpoint start
                position, ID, and resets the checkPointSet flag. Called via RPC to ensure all
                clients have synchronized checkpoint data.
            </summary>
            <param name="checkPointPos">The world position of the checkpoint.</param>
            <param name="checkPointID">The unique ID of the checkpoint.</param>
        </member>
        <!-- Game State Management Properties -->
        <member name="P:HeroController.BrosReleased">
            <summary>
                Gets or sets whether the bros (players) have been released to start playing. When
                set to true by the host, sends an RPC to notify all other players. Network-aware
                property that synchronizes game start state across multiplayer sessions.
            </summary>
            <returns>True if bros have been released; otherwise, false.</returns>
        </member>
        <member name="P:HeroController.isCountdownFinished">
            <summary>
                Gets or sets whether the game countdown has completed. Used to track the pre-game
                countdown state and determine when players can begin playing.
            </summary>
            <returns>True if the countdown is finished; otherwise, false.</returns>
        </member>
        <!-- Game State Management Fields -->
        <member name="F:HeroController.AllPlayersHaveJoined">
            <summary>
                Indicates whether all expected players have joined the game session. Used to delay
                game start or enable certain features only after everyone is ready. Set by join
                detection logic.
            </summary>
        </member>
        <member name="F:HeroController.IDroppedOutThisRound">
            <summary>
                Tracks whether the local player has dropped out during the current round. Used to
                manage rejoin behavior and prevent duplicate dropout processing. Reset at the start
                of each new round.
            </summary>
        </member>
        <member name="F:HeroController.WaitForAllPlayersToSpawnBeforeStarting">
            <summary>
                When true, delays game start until all joined players have spawned their characters.
                Ensures synchronized starts in multiplayer. Hidden in inspector as it's typically
                set programmatically based on game mode.
            </summary>
        </member>
        <member name="F:HeroController._cameraHoldAfterLastHeroDeathTime">
            <summary>
                Time in seconds to hold the camera position after the last hero dies. Prevents
                immediate camera transitions on death, giving players time to see what happened
                before respawn or game over.
            </summary>
        </member>
        <member name="F:HeroController._connectRegistered">
            <summary>
                Indicates whether network connection event handlers have been registered. Prevents
                duplicate registration of OnDisconnect handlers which could cause multiple
                executions of cleanup code.
            </summary>
        </member>
        <member name="F:HeroController._curJoinMessageIndex">
            <summary>
                Tracks the current index for cycling through join notification messages. Used to
                display varied messages when players join the game, preventing repetitive
                notifications.
            </summary>
        </member>
        <member name="F:HeroController._isCountdownFinished">
            <summary>
                Private backing field for the isCountdownFinished property. Tracks whether the
                pre-game countdown sequence has completed. Set to true when players can begin
                playing after the 3-2-1-GO countdown.
            </summary>
        </member>
        <member name="F:HeroController.brosHaveBeenReleased">
            <summary>
                Private backing field for the BrosReleased property. Indicates whether players have
                been released to start playing. Synchronized across network to ensure all players
                start simultaneously.
            </summary>
        </member>
        <member name="F:HeroController.checkPointSet">
            <summary>
                Indicates whether a checkpoint has been explicitly set this session. Used to
                differentiate between default spawn positions and player-activated checkpoints for
                spawn logic.
            </summary>
        </member>
        <member name="F:HeroController.checkPointStart">
            <summary>
                World position of the current checkpoint spawn location. Default is (128, 196) which
                represents the typical level start position. Updated when players activate new
                checkpoints during gameplay.
            </summary>
        </member>
        <member name="F:HeroController.currentCheckPointID">
            <summary>
                ID of the currently active checkpoint. Used to track level progression and determine
                respawn locations. Set to -1 when no checkpoint is active. Static to persist across
                scene transitions.
            </summary>
        </member>
        <member name="F:HeroController.explosivesCounter">
            <summary>
                Timer for tracking explosive-related events. Used internally for managing timed
                explosive spawns, detonations, or cooldowns related to explosive game mechanics.
            </summary>
        </member>
        <member name="F:HeroController.faded">
            <summary>
                Tracks whether the screen has faded to black. Used during game over sequences, level
                transitions, or cutscenes to manage visual state and prevent duplicate fade
                operations.
            </summary>
        </member>
        <member name="F:HeroController.finishedCounter">
            <summary>
                Timer tracking time since level completion. Increments after level finish to manage
                post-completion sequences, delays before transitions, and ensure completion
                animations play fully.
            </summary>
        </member>
        <member name="F:HeroController.forceInvulnerability">
            <summary>
                Debug flag that makes all players permanently invulnerable. Used for testing,
                debugging, or special game modes where players cannot be damaged. Accessed via debug
                key commands.
            </summary>
        </member>
        <member name="F:HeroController.forceSpecificBro">
            <summary>
                Forces all players to spawn as a specific hero type when set. Used for testing,
                special game modes, or themed levels. Set to HeroType.None for normal hero selection
                behavior.
            </summary>
        </member>
        <member name="F:HeroController.heroesHaveBeenReleasedFromTransport">
            <summary>
                Indicates whether heroes have been released from the initial transport sequence.
                Used to track if the opening helicopter drop or transport animation has completed
                and players can begin normal gameplay.
            </summary>
        </member>
        <member name="F:HeroController.lossCounterTime">
            <summary>
                Maximum time allowed after all players die before game over. Set to 0.5 seconds by
                default. Gives a brief window for revival mechanics or last-second saves before
                triggering the loss condition.
            </summary>
        </member>
        <member name="F:HeroController.lossTimer">
            <summary>
                Countdown timer for game over when all players are dead. Starts at 0.5 seconds and
                counts down to trigger loss condition. Can be reset if players gain lives or special
                conditions are met.
            </summary>
        </member>
        <member name="F:HeroController.nextHeroType">
            <summary>
                Stores the next hero type to be spawned. Used for hero selection queueing and
                ensuring the correct hero spawns after death or level start. Hidden in inspector as
                it's managed programmatically.
            </summary>
        </member>
        <member name="F:HeroController.playerDelayTime">
            <summary>
                Default delay duration applied to players for various events. Set to 0.5 seconds.
                Used by PlayerDelay method to create consistent timing for player state transitions.
            </summary>
        </member>
        <member name="F:HeroController.suicideBroSpawnDelay">
            <summary>
                Array of spawn delays for each player in Suicide Horde mode. Negative values create
                staggered spawn times: -2, -2.25, -2.5, -2.75 seconds. Prevents all players spawning
                simultaneously at doors.
            </summary>
        </member>
        <!-- Game Flow Control Methods -->
        <member name="M:HeroController.BeginGame">
            <summary>
                Coroutine that manages the game start sequence. Waits for all players to spawn, then
                either announces "GO!" immediately or starts a countdown based on GameModeController
                settings. Handles different spawn timing for various game modes.
            </summary>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>
        <member name="M:HeroController.BoostHeroes(System.Single)">
            <summary>
                Applies a speed boost to all living player characters for the specified duration.
                Enhances movement and action speed, typically used for power-ups or special game
                events that accelerate gameplay.
            </summary>
            <param name="time">Duration in seconds for the hero speed boost.</param>
        </member>
        <member name="M:HeroController.CanSpawn(System.Int32)">
            <summary>
                Checks if a player is eligible to spawn or respawn. Returns true only if the player
                exists, has lives remaining, and is currently dead. Used internally by respawn logic
                to determine spawn eligibility.
            </summary>
            <param name="playerNum">The player number to check spawn eligibility for.</param>
            <returns>True if the player can spawn; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.CancelTimeBroBoost">
            <summary>
                Immediately cancels any active time manipulation effects from Time Bro. Restores
                normal time flow by clearing boost timers and resetting time scale if Time Bro
                effects were active.
            </summary>
        </member>
        <member name="M:HeroController.GoBackToMainMenu">
            <summary>
                Returns the game to the main menu. Performs cleanup operations including stopping
                Steam integration, clearing cutscene state, resetting time scale, and loading the
                MainMenu scene.
            </summary>
        </member>
        <member name="M:HeroController.HighFiveBoost(System.Single)">
            <summary>
                Activates high-five time dilation effect, slowing time to 50% speed for the
                specified duration. Creates a bullet-time effect that enhances the high-five moment
                between players.
            </summary>
            <param name="time">Duration in seconds for the time dilation effect.</param>
        </member>
        <member name="M:HeroController.IsPlayerNearbyActivatedCheckPoint(UnityEngine.Vector2@,System.Boolean@)">
            <summary>
                Checks if any player is near an activated checkpoint and returns the checkpoint
                data. Updates the position and airdrop flag references if a player is found near a
                checkpoint. Used for respawn location determination.
            </summary>
            <param name="pos">Reference parameter that receives the checkpoint position if found.</param>
            <param name="spawnViaAirdrop">Reference parameter that indicates if spawn should be via airdrop.</param>
            <returns>True if a player is near an activated checkpoint; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.OnDisconnect">
            <summary>
                Handles network disconnection events. Drops out all local players, displays a
                disconnection error notification to the user for 5 seconds, and prepares the game
                state for returning to the menu or reconnecting.
            </summary>
        </member>
        <member name="M:HeroController.ReduceBroRespawnDelay(System.Single)">
            <summary>
                Reduces the respawn delay timer by the specified time. Resets to 0.4 seconds if no
                heroes are dead, otherwise decrements the timer. Controls the pacing of automatic
                respawns.
            </summary>
            <param name="t">Time in seconds to reduce from the respawn delay.</param>
        </member>
        <member name="M:HeroController.RunHeroRespawnLogic(System.Int32)">
            <summary>
                Executes complex respawn logic for a player based on game mode. Handles Campaign
                checkpoint respawns, DeathMatch spawn queue system, and SuicideHorde spawn doors.
                Checks lives, death status, and spawn conditions before respawning.
            </summary>
            <param name="playerNum">The player number to run respawn logic for.</param>
        </member>
        <member name="M:HeroController.SetRoundBeginTimeStamp(System.Single)">
            <summary>
                Sets the synchronized timestamp for when the round should begin. Used in multiplayer
                to ensure all players start at the same time by setting a future timestamp for
                coordinated round starts.
            </summary>
            <param name="timestamp">The network time when the round should begin.</param>
        </member>
        <member name="M:HeroController.StartCountdown">
            <summary>
                Initiates the game countdown sequence. Cancels any delayed announcements and starts
                the countdown coroutine through the Announcer system. Called to begin the pre-game
                countdown before releasing players.
            </summary>
        </member>
        <member name="M:HeroController.SyncRespawnQueue(System.Int32[])">
            <summary>
                Synchronizes the deathmatch respawn queue from the network host. Converts the array
                to a list for local spawn order management in deathmatch games.
            </summary>
            <param name="_deathmatchSpawnQueue">Array of player numbers in spawn order.</param>
        </member>
        <member name="M:HeroController.TimeBroBoost(System.Single)">
            <summary>
                Activates Time Bro's time manipulation ability, slowing time to 35% speed for the
                specified duration. More extreme time dilation than high-five, specific to the Time
                Bro character's special ability.
            </summary>
            <param name="time">Duration in seconds for the time manipulation effect.</param>
        </member>
        <member name="M:HeroController.TimeBroBoostHeroes(System.Single)">
            <summary>
                Applies Time Bro's time boost effect to all living heroes for the specified
                duration. Gives all players enhanced abilities similar to Time Bro's powers, used
                for special cooperative moments.
            </summary>
            <param name="time">Duration in seconds for the Time Bro boost effect.</param>
        </member>
        <!-- Game Flow Control Fields -->
        <member name="F:HeroController.RoundHasBegun">
            <summary>
                Tracks whether the current round has officially started. Set to true when the
                synchronized start time is reached or countdown completes. Controls game flow state
                transitions.
            </summary>
        </member>
        <member name="F:HeroController.allDead">
            <summary>
                Tracks whether all players are currently dead. Used to trigger game over sequences,
                manage respawn timing, and control camera behavior when no living players remain.
            </summary>
        </member>
        <member name="F:HeroController.beginRoundAtTimeStamp">
            <summary>
                Network timestamp for synchronized round start. Stores the exact time when all
                players should begin the round, ensuring multiplayer synchronization across
                different network latencies.
            </summary>
        </member>
        <member name="F:HeroController.broRespawnDelay">
            <summary>
                Minimum delay between automatic respawn attempts. Set to 0.4 seconds to prevent
                respawn spam and ensure death animations complete before new spawn attempts begin.
            </summary>
        </member>
        <member name="F:HeroController.inputDelay">
            <summary>
                Delay in seconds before player input is processed after spawning. Set to 0.25
                seconds by default. Prevents accidental inputs during spawn animations and ensures
                players have time to orient themselves.
            </summary>
        </member>
        <member name="F:HeroController.timeStampSet">
            <summary>
                Indicates whether the round begin timestamp has been set. Prevents multiple
                timestamp assignments and ensures the round starts at the designated time across all
                clients.
            </summary>
        </member>
        <member name="F:HeroController.waitForPlayersTimeout">
            <summary>
                Timeout duration for waiting for all players to join or spawn. Prevents infinite
                waiting if a player fails to connect or load. Game proceeds when timeout expires
                regardless of missing players.
            </summary>
        </member>
        <!-- Camera System Methods -->
        <member name="M:HeroController.AddTemporaryPlayerTarget(System.Int32,UnityEngine.Transform)">
            <summary>
                RPC method that adds a temporary follow target for a specific player's camera. Used
                for cutscenes or special camera focus events where the camera needs to track
                something other than the player character temporarily.
            </summary>
            <param name="playerNum">The player number whose camera should follow the target.</param>
            <param name="target">The transform for the camera to follow.</param>
        </member>
        <member name="M:HeroController.AddToExtents(UnityEngine.Vector3,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
                Adds a position to the camera view extents calculation. Updates the minimum and
                maximum X/Y bounds by reference to include the given position. Used internally for
                calculating camera bounds that encompass all relevant targets.
            </summary>
            <param name="pos">The position to include in the extents.</param>
            <param name="minX">Reference to minimum X bound, updated if pos.x is smaller.</param>
            <param name="maxX">Reference to maximum X bound, updated if pos.x is larger.</param>
            <param name="minY">Reference to minimum Y bound, updated if pos.y is smaller.</param>
            <param name="maxY">Reference to maximum Y bound, updated if pos.y is larger.</param>
        </member>
        <member name="M:HeroController.CanFollow(UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Determines if a position can be followed by the camera while keeping it within
                screen bounds. Calculates whether including this position would push the camera view
                beyond acceptable limits with the specified buffer.
            </summary>
            <param name="otherPosition">The position to check for followability.</param>
            <param name="minX">Current minimum X bound of the camera.</param>
            <param name="maxX">Current maximum X bound of the camera.</param>
            <param name="minY">Current minimum Y bound of the camera.</param>
            <param name="maxY">Current maximum Y bound of the camera.</param>
            <param name="requiredBuffer">Buffer distance from screen edges (default 24).</param>
            <returns>True if the position can be followed within bounds; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.CanLookForReposition">
            <summary>
                Determines if the camera can look for repositioning opportunities. Returns false if
                controlled by trigger actions, in ExplosionRun mode, within reposition delay
                cooldown, or if any player has a temporary camera target. Sets a 0.6 second cooldown
                when conditions aren't met.
            </summary>
            <returns>True if camera repositioning is allowed; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.GetGetFollowPosition(UnityEngine.Vector3@)">
            <summary>
                Calculates the optimal camera follow position based on all active players, extra
                targets, and game state. This complex method handles multiple scenarios including
                death cam, race mode, helicopter sequences, and ensures all important elements stay
                in view. Updates the position parameter by reference.
            </summary>
            <param name="pos">Reference parameter that receives the calculated follow position.</param>
            <returns>True if a valid follow position was calculated; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.RemoveTemporaryPlayerTarget(System.Int32)">
            <summary>
                RPC method that removes the temporary follow target for a player's camera, returning
                it to normal player following behavior. Called when special camera events end.
            </summary>
            <param name="playerNum">The player number to remove the temporary target from.</param>
        </member>
        <member name="M:HeroController.StopFollowing(UnityEngine.Transform)">
            <summary>
                Removes a transform from the extra camera follow positions list. Called when an
                object no longer needs camera attention, such as when it's destroyed or becomes
                irrelevant.
            </summary>
            <param name="trans">The transform to stop following.</param>
        </member>
        <member name="M:HeroController.TryFollow(UnityEngine.Transform)">
            <summary>
                Adds a transform to the list of extra camera follow positions if not already
                present. Used for dynamic camera targets like important game objects or NPCs that
                the camera should include in its view calculations.
            </summary>
            <param name="trans">The transform to add to camera following.</param>
        </member>
        <!-- Camera System Fields -->
        <member name="F:HeroController.followingPreferredPlayer">
            <summary>
                Player number that the camera should prefer to follow. Set to -1 for no preference.
                Used to bias camera positioning toward specific players during gameplay or
                cutscenes.
            </summary>
        </member>
        <member name="F:HeroController.lastCameraFollowPos">
            <summary>
                Stores the last calculated camera follow position. Used for smooth camera
                interpolation and to track camera movement history. Updated each frame when
                calculating new follow positions.
            </summary>
        </member>
        <member name="F:HeroController.lastFollowTimeSwitch">
            <summary>
                Timestamp of the last camera follow target switch. Used to prevent rapid camera
                target changes and ensure smooth transitions between follow targets.
            </summary>
        </member>
        <member name="F:HeroController.lastFollowTimeSwitchBack">
            <summary>
                Timestamp of the last switch back to default camera following. Tracks when the
                camera returned from following special targets to prevent oscillation between
                targets.
            </summary>
        </member>
        <member name="F:HeroController.repositionDelay">
            <summary>
                Cooldown timer for camera repositioning attempts. Prevents rapid camera adjustments
                by enforcing a minimum delay between reposition checks. Set when repositioning is
                blocked to create smoother camera behavior.
            </summary>
        </member>
        <member name="F:HeroController.timeSinceFinish">
            <summary>
                Time elapsed since level completion. Used for post-level timing, delayed
                transitions, and ensuring completion sequences play out fully before moving to next
                level.
            </summary>
        </member>
        <member name="F:HeroController.wasFollowingExtra">
            <summary>
                Tracks whether the camera was previously following extra targets beyond players.
                Used to detect state changes in camera following behavior and manage transitions
                between following players only versus including additional targets.
            </summary>
        </member>
        <!-- UI/HUD System Methods -->
        <member name="M:HeroController.DisableHud">
            <summary>
                Disables the HUD display for all players. Loops through all player slots and calls
                DisableHud on each player instance. Used during cutscenes or special game states
                where HUD should be hidden.
            </summary>
        </member>
        <member name="M:HeroController.EnableHud">
            <summary>
                Enables the HUD display for all players. Loops through all player slots and calls
                EnableHud on each player instance. Used to restore HUD visibility after cutscenes or
                special events.
            </summary>
        </member>
        <member name="M:HeroController.FlashAvatar(System.Int32,System.Single,System.Boolean)">
            <summary>
                Triggers a flashing effect on the player's avatar for the specified duration. Used
                to draw attention to status changes, damage, or special events. The avatar will
                flash for the given time period.
            </summary>
            <param name="playerNum">The player number whose avatar should flash.</param>
            <param name="time">Duration in seconds for the flash effect.</param>
            <param name="primaryAvatar">True to flash primary avatar; false for secondary.</param>
        </member>
        <member name="M:HeroController.GetAvatarMaterial(HeroType)">
            <summary>
                Retrieves the avatar material associated with a specific hero type. Each hero can
                have a unique avatar material for special visual effects in the HUD. Returns null if
                no custom material exists for the hero type.
            </summary>
            <param name="heroType">The hero type to get avatar material for.</param>
            <returns>The avatar Material for the hero type or null if not found.</returns>
        </member>
        <member name="M:HeroController.MustShowHuds">
            <summary>
                Returns whether HUDs must be shown based on the global mustShowHUDS flag. Simple
                accessor for the HUD visibility state used by various game systems.
            </summary>
            <returns>True if HUDs must be shown; otherwise, false.</returns>
        </member>
        <member name="M:HeroController.SetAvatarAngry(System.Int32,System.Boolean)">
            <summary>
                Sets the player's avatar to the angry expression state. Updates the HUD avatar
                display to show an aggressive face, typically during combat or special actions. Can
                target either primary or secondary avatar displays.
            </summary>
            <param name="playerNum">The player number whose avatar to update.</param>
            <param name="primaryAvatar">True to update primary avatar; false for secondary.</param>
        </member>
        <member name="M:HeroController.SetAvatarBounceDown(System.Int32,System.Boolean)">
            <summary>
                Triggers a downward bounce animation on the player's avatar. Creates a visual
                feedback effect where the avatar appears to compress or bounce downward, often used
                for impact or landing effects.
            </summary>
            <param name="playerNum">The player number whose avatar should bounce down.</param>
            <param name="primaryAvatar">True to bounce primary avatar; false for secondary.</param>
        </member>
        <member name="M:HeroController.SetAvatarBounceUp(System.Int32,System.Boolean)">
            <summary>
                Triggers an upward bounce animation on the player's avatar. Creates a visual
                feedback effect where the avatar appears to stretch or bounce upward, often used for
                jump or spring effects.
            </summary>
            <param name="playerNum">The player number whose avatar should bounce up.</param>
            <param name="primaryAvatar">True to bounce primary avatar; false for secondary.</param>
        </member>
        <member name="M:HeroController.SetAvatarCalm(System.Int32,System.Boolean)">
            <summary>
                Sets the player's avatar to the calm expression state. Updates the HUD avatar
                display to show the normal, non-angry face for the specified player. Can target
                either primary or secondary avatar displays.
            </summary>
            <param name="playerNum">The player number whose avatar to update.</param>
            <param name="primaryAvatar">True to update primary avatar; false for secondary.</param>
        </member>
        <member name="M:HeroController.SetAvatarDead(System.Int32,System.Boolean)">
            <summary>
                Sets the player's avatar to the dead state. Updates the HUD to show the death
                animation or static dead frame, indicating the player has died. Can target either
                primary or secondary avatar displays.
            </summary>
            <param name="playerNum">The player number whose avatar to mark as dead.</param>
            <param name="primaryAvatar">True to update primary avatar; false for secondary.</param>
        </member>
        <member name="M:HeroController.SetAvatarFire(System.Int32,System.Boolean)">
            <summary>
                Sets the player's avatar to display fire animation. Shows the avatar with flames,
                typically used when the player is on fire or using fire-based abilities. Can target
                either primary or secondary avatar displays.
            </summary>
            <param name="playerNum">The player number whose avatar to set on fire.</param>
            <param name="primaryAvatar">True to update primary avatar; false for secondary.</param>
        </member>
        <member name="M:HeroController.SetAvatarFireFrame(System.Int32,System.Int32)">
            <summary>
                Sets a specific frame of the fire animation for the player's avatar. Allows precise
                control over which frame of the burning animation is displayed, useful for
                synchronized effects.
            </summary>
            <param name="playerNum">The player number whose avatar fire frame to set.</param>
            <param name="frame">The specific animation frame number to display.</param>
        </member>
        <member name="M:HeroController.SetAvatarFrame(System.Int32,System.Int32)">
            <summary>
                Internal method to set a specific animation frame for the player's avatar. Provides
                low-level control over avatar animation state for custom effects or specific
                animation requirements.
            </summary>
            <param name="playerNum">The player number whose avatar frame to set.</param>
            <param name="avatarFrame">The specific frame number to display.</param>
        </member>
        <member name="M:HeroController.SetAvatarMaterial(System.Int32,UnityEngine.Material)">
            <summary>
                Sets a custom material for the player's avatar display. Allows special visual
                effects by replacing the avatar's rendering material, such as for power-ups or
                status effects.
            </summary>
            <param name="playerNum">The player number whose avatar material to change.</param>
            <param name="material">The Material to apply to the avatar.</param>
        </member>
        <member name="M:HeroController.ShowHuds">
            <summary>
                Shows all player HUD displays if mustShowHUDS flag is true. Iterates through all
                players and calls Show() on each HUD component to make health, ammo, and lives
                visible.
            </summary>
        </member>
        <member name="M:HeroController.SwitchAvatarMaterial(SpriteSM,HeroType)">
            <summary>
                Switches a sprite's material to match the specified hero type's avatar material.
                Retrieves the appropriate material and applies it to the sprite if available.
                Returns whether the switch was successful.
            </summary>
            <param name="sprite">The SpriteSM to update with new material.</param>
            <param name="heroType">The hero type whose avatar material to use.</param>
            <returns>True if material was found and applied; otherwise, false.</returns>
        </member>
        <!-- UI/HUD System Fields -->
        <member name="F:HeroController.blankAvatar">
            <summary>
                Material used as a placeholder avatar when no hero-specific avatar is available.
                Displayed in the HUD before a hero is selected or as a fallback for missing avatar
                materials.
            </summary>
        </member>
        <member name="F:HeroController.doubleBroSevenAvatarCount">
            <summary>
                Tracks the current avatar index for Double Bro Seven. Used to cycle through
                available avatar textures, providing visual variety for this character's HUD
                representation.
            </summary>
        </member>
        <member name="F:HeroController.infoBarColor">
            <summary>
                Color used for the info bar display during countdown and announcements. Default is
                black. Can be customized per level or game mode to match the visual theme.
            </summary>
        </member>
        <member name="F:HeroController.mustShowHUDS">
            <summary>
                Global flag controlling HUD visibility. When true, all player HUDs must be shown.
                Used to force HUD display during gameplay and hide during cutscenes or menus.
            </summary>
        </member>
        <member name="F:HeroController.textureDoubleBroSevenAvatars">
            <summary>
                Array of avatar textures specifically for the Double Bro Seven character. Supports
                multiple avatar variations for this unique hero type that can cycle through
                different appearances.
            </summary>
        </member>
        <!-- Serialization Methods -->
        <member name="M:HeroController.DeserializeForJoin(UnityStream)">
            <summary>
                Deserializes player data received during network join. Unpacks and updates the local
                arrays for playing status, controller IDs, and PIDs from the received stream data.
            </summary>
            <param name="stream">The UnityStream containing serialized player data.</param>
        </member>
        <member name="M:HeroController.OnAfterDeserialize">
            <summary>
                Unity deserialization callback that rebuilds the hero data dictionary from the
                serialized list. Handles duplicate keys by incrementing enum values to ensure data
                integrity. Part of the ISerializationCallbackReceiver interface.
            </summary>
        </member>
        <member name="M:HeroController.OnBeforeSerialize">
            <summary>
                Unity serialization callback that converts the internal hero data dictionary to a
                serializable list format. Part of the ISerializationCallbackReceiver interface
                implementation for saving game state.
            </summary>
        </member>
        <member name="M:HeroController.PackState(UnityStream)">
            <summary>
                Packs the HeroController's network state for synchronization. Includes checkpoint
                position, bros released status, round timestamps, and checkpoint ID. Overrides base
                class to add hero-specific state data.
            </summary>
            <param name="stream">The UnityStream to pack state into.</param>
            <returns>The stream with packed state data.</returns>
        </member>
        <member name="M:HeroController.SerializeForJoin(UnityStream)">
            <summary>
                Serializes essential player data for network join operations. Packs the playing
                status, controller IDs, and network PIDs into the stream for transmission to joining
                players.
            </summary>
            <param name="stream">The UnityStream to serialize data into.</param>
        </member>
        <member name="M:HeroController.UnpackState(UnityStream)">
            <summary>
                Unpacks network state data to synchronize the HeroController. Restores checkpoint
                position, bros released status, timestamps, and checkpoint ID from the stream.
                Ensures proper state synchronization across the network.
            </summary>
            <param name="stream">The UnityStream containing packed state data.</param>
            <returns>The stream after unpacking.</returns>
        </member>
        <!-- Testing/Debug Methods -->
        <member name="M:HeroController.DebugDraw">
            <summary>
                Comprehensive debug GUI display showing detailed player and game state information.
                Displays camera positions, player data tables including controllers, PIDs, playing
                status, hero states, positions, bot brain settings, and following relationships.
                Includes interactive controls for bot brain configuration during debug sessions.
            </summary>
        </member>
        <member name="M:HeroController.FindRemotePlayerToFollow(Player)">
            <summary>
                Finds a suitable remote player for bot brain following behavior. Prioritizes remote
                players over local ones, returning the first remote player found or the last local
                player if no remote players exist. Returns -1 if no suitable follow target is found.
            </summary>
            <param name="player">The player looking for someone to follow.</param>
            <returns>The player index to follow or -1 if none found.</returns>
        </member>
        <member name="M:HeroController.SetTestInfo(HeroType)">
            <summary>
                Sets which hero type should always be chosen for testing purposes. Overrides normal
                hero selection to force a specific character for debugging and testing.
            </summary>
            <param name="alwaysChoose">The HeroType to always select during testing.</param>
        </member>
        <member name="M:HeroController.UpdateDebugInputs">
            <summary>
                Processes debug keyboard inputs for development and testing. Handles force
                invulnerability (F8), force level finish (Ctrl+Shift+F9), HUD toggle (Ctrl+F12), and
                editor-only commands like speed boost and unlock clearing.
            </summary>
        </member>
        <!-- Testing/Debug Fields -->
        <member name="F:HeroController.alwaysChooseHero">
            <summary>
                Forces all players to spawn as a specific hero type when set. Used for testing
                specific heroes or creating themed gameplay experiences. Set to HeroType.None for
                normal random/sequential hero selection.
            </summary>
        </member>
        <!-- Inner Class HeroDefinition Fields -->
        <member name="F:HeroController.HeroDefinition.avatar">
            <summary>
                Avatar material for the hero in the HeroDefinition. Used for HUD display to show the
                hero's face/portrait. Each hero has a unique avatar material for visual
                identification.
            </summary>
        </member>
        <member name="F:HeroController.HeroDefinition.characterReference">
            <summary>
                Reference to the hero character prefab in the HeroDefinition. Points to the
                TestVanDammeAnim asset that will be instantiated when this hero type is spawned.
            </summary>
        </member>
        <member name="F:HeroController.HeroDefinition.name">
            <summary>
                Display name of the hero in the HeroDefinition data structure. Used for UI display,
                announcements, and hero selection screens. Part of the hero configuration system.
            </summary>
        </member>
        <!-- Inner Class HeroSetupKeyPair Fields -->
        <member name="F:HeroController.HeroSetupKeyPair.data">
            <summary>
                The HeroDefinition data in the key-value pair structure. Contains the actual hero
                configuration including name, prefab reference, and avatar material for the
                associated HeroType.
            </summary>
        </member>
        <member name="F:HeroController.HeroSetupKeyPair.enumName">
            <summary>
                The HeroType enum value in the key-value pair structure. Maps the enum to its
                corresponding HeroDefinition data for serialization and configuration management.
            </summary>
        </member>
        <!-- Player Management Section -->
        <member name="M:HeroController.GetPlayerNums(PID)">
            <summary>
                Gets all player numbers associated with a specific player ID. Iterates through all 4
                possible player slots and returns a list of player numbers where the PID matches.
                Used for finding which player slots belong to a specific connected player.
            </summary>
            <param name="playerID">The player ID to search for.</param>
            <returns>List of player numbers (0-3) that match the given player ID.</returns>
        </member>
        <member name="F:HeroController.heroList">
            <summary>
                Serializable list of hero setup data using the HeroSetupKeyPair inner class. This
                list is populated during OnBeforeSerialize from the internal _heroData dictionary
                and restored during OnAfterDeserialize. Used for Unity's serialization system to
                persist hero configuration data.
            </summary>
        </member>
        <member name="F:HeroController.deathmatchSpawnQueue">
            <summary>
                Queue of player numbers waiting to spawn in deathmatch mode. When multiple players
                need to respawn and spawning is limited (e.g., helicopter capacity), this queue
                tracks the order. The host manages the queue and syncs it to other players via the
                SyncRespawnQueue RPC.
            </summary>
        </member>
        <member name="F:HeroController._playersToDrop">
            <summary>
                Static list of player numbers flagged to be dropped from the game. Players are added
                to this list via FlagPlayerToDrop and are actually dropped during the next Update
                cycle. This deferred dropping prevents issues with immediate disconnection.
            </summary>
        </member>
        <member name="F:HeroController.playerDeathOrder">
            <summary>
                Tracks the order in which players died during the current game session. Used by the
                rescue system to determine which player should be revived when a rescue bro is
                collected. Earlier deaths get priority for revival. Synced across network.
            </summary>
        </member>
        <!-- Player Status Section -->
        <member name="F:HeroController.heroAlreadyChosenTypes">
            <summary>
                Static list tracking which hero types have already been selected during the current
                game session. Used to prevent duplicate hero selection when spawning new characters,
                ensuring variety. The list is trimmed when it grows too large relative to active
                players.
            </summary>
        </member>
        <!-- Rescue System Section -->
        <member name="F:HeroController.rescueBros">
            <summary>
                List of all active rescue bros in the current level. Rescue bros register themselves
                on Start and are removed when freed or destroyed. Used for proximity checks when
                players attempt to rescue bros and for finding the nearest rescue bro to players.
            </summary>
        </member>
        <member name="F:HeroController.hiddenExplosives">
            <summary>
                Static list of all registered hidden explosives in the game. Hidden explosives
                register via RegisterHiddenExplosives and are removed via RemoveHiddenExplosives.
                List is cleared on Awake and OnDestroy. Used for managing special explosive objects.
            </summary>
        </member>
        <!-- Camera System Section -->
        <member name="F:HeroController.extraFollowPositions">
            <summary>
                Static list of additional transform positions for the camera to follow beyond player
                characters. Objects can register via TryFollow and unregister via StopFollowing.
                Camera system checks these positions when determining view bounds and focus area.
            </summary>
        </member>
        <!-- Serialization Section -->
        <member name="M:HeroController.ConvertHeroArrayToIntArray(HeroType[])">
            <summary>
                Converts an array of HeroType enums to an array of integers for serialization. Uses
                Array.ConvertAll with a lambda to cast each HeroType to its integer value. Used when
                hero type data needs to be transmitted or stored as integers.
            </summary>
            <param name="heroArray">The array of HeroType enums to convert.</param>
            <returns>Array of integers representing the hero types.</returns>
        </member>
        <member name="M:HeroController.ConvertIntArrayToHeroArray(System.Int32[])">
            <summary>
                Converts an array of integers back to an array of HeroType enums after
                deserialization. Uses Array.ConvertAll with a lambda to cast each integer to
                HeroType. Reverse operation of ConvertHeroArrayToIntArray for restoring hero type
                data.
            </summary>
            <param name="intArray">The array of integers to convert.</param>
            <returns>Array of HeroType enums restored from the integers.</returns>
        </member>
        <!-- Hero Unlock System Methods -->
        <member name="M:HeroUnlockController.AreAnyMoreBrosAvailableToBeSavedInHardcoreMode">
            <summary>
                Checks if there are any heroes left to rescue in hardcore mode. Compares all
                unlocked heroes against those already available or dead in the current hardcore save
                to determine if more can be rescued.
            </summary>
            <returns>True if there are heroes that can still be rescued in hardcore mode, false if all are either available or dead.</returns>
        </member>
        <member name="M:HeroUnlockController.CheckFreedBrosUnlocks(System.Boolean)">
            <summary>
                Checks if the current freed prisoner count has reached any hero unlock thresholds
                and unlocks the appropriate heroes. Also sets the next hero type for immediate
                availability.
            </summary>
            <param name="announce">If true, displays an announcement when heroes are unlocked.</param>
        </member>
        <member name="M:HeroUnlockController.ClearHeroUnlockIntervals">
            <summary>
                Clears the cached hero unlock interval data and forces it to regenerate. The method
                also accesses the first unlock interval to trigger regeneration of the dictionary.
            </summary>
        </member>
        <member name="M:HeroUnlockController.ClearUnlocks">
            <summary>
                Resets all hero unlocks and clears the unlock progression data. If in exhibition
                build mode, also clears the cached unlock intervals to force regeneration.
            </summary>
        </member>
        <member name="M:HeroUnlockController.FreeBro">
            <summary>
                Handles the rescue of a prisoner and associated hero unlock progression. In hardcore
                mode, randomly selects an available hero to add to the player's roster. In normal
                mode, increments the freed prisoner counter through PlayerProgress.
            </summary>
        </member>
        <member name="M:HeroUnlockController.GetNextHeroToBeUnlocked">
            <summary>
                Determines which hero will be unlocked next based on the current rescue count.
                Iterates through the unlock intervals to find the next hero that hasn't been reached
                yet.
            </summary>
            <returns>The HeroType that will be unlocked next, or HeroType.None if all heroes are unlocked.</returns>
        </member>
        <member name="M:HeroUnlockController.GetNumberOfRescuesFromSinceUnlock">
            <summary>
                Calculates how many rescues have been performed since the last hero was unlocked.
                Used for tracking progress between unlock milestones.
            </summary>
            <returns>The number of rescues since the last unlock, or 0 if no unlocks have occurred yet.</returns>
        </member>
        <member name="M:HeroUnlockController.GetNumberOfRescuesToNextUnlock">
            <summary>
                Calculates how many more prisoner rescues are needed to unlock the next hero. Used
                by the level complete screen to show unlock progress to players.
            </summary>
            <returns>The number of rescues needed until the next hero unlock, or -1 if all heroes are unlocked.</returns>
        </member>
        <member name="M:HeroUnlockController.GetUnlockedHeroes(System.Boolean)">
            <summary>
                Gets a list of all currently unlocked heroes available for selection. Filters out
                heroes that aren't compatible with certain game modes (death match, explosion run,
                etc.) and optionally excludes heroes that haven't been played yet.
            </summary>
            <param name="ignoreYetToBeSeenHeroes">If true, excludes newly unlocked heroes that haven't been played yet.</param>
            <returns>A list of HeroType values representing all unlocked and available heroes.</returns>
        </member>
        <member name="M:HeroUnlockController.Initialize">
            <summary>
                Initializes the hero unlock system at game start. Removes any unlocked heroes that
                aren't available in the current campaign, checks for any new unlocks based on freed
                prisoner count, and preserves the next hero selection if valid.
            </summary>
        </member>
        <member name="M:HeroUnlockController.IsAvailableInCampaign(HeroType)">
            <summary>
                Checks if a specific hero can be unlocked in the current campaign mode. Heroes must
                be part of the unlock progression to be available (some heroes like Expendabros are
                special unlocks).
            </summary>
            <param name="hero">The hero type to check for campaign availability.</param>
            <returns>True if the hero can be unlocked through normal campaign progression, false otherwise.</returns>
        </member>
        <member name="M:HeroUnlockController.IsExpendaBro(HeroType)">
            <summary>
                Determines if a hero is one of the Expendabros characters (special cross-promotion
                heroes from The Expendables movie franchise). These heroes have special unlock
                conditions.
            </summary>
            <param name="hero">The hero type to check.</param>
            <returns>True if the hero is an Expendabro (LeeBroxmas, BroneyRoss, etc.), false otherwise.</returns>
        </member>
        <member name="M:HeroUnlockController.MakeSureTheresEnoughUnlockedBrosForAllTheJoinedPlayers">
            <summary>
                Ensures that enough heroes are unlocked to support all joined players. In exhibition
                builds, unlocks 4 specific heroes. In normal gameplay, automatically increases the
                freed prisoner count to unlock enough heroes for the player count.
            </summary>
        </member>
        <member name="M:HeroUnlockController.UnlockAllBros">
            <summary>
                Debug method that instantly unlocks all heroes by setting the freed prisoner count
                to 99999 and checking for unlocks. Used for testing purposes.
            </summary>
        </member>
        <member name="M:HeroUnlockController.UnlockEverythingButBroheart">
            <summary>
                Debug method that unlocks all heroes except BroveHeart by setting the freed prisoner
                count to 399. BroveHeart requires 400 rescues, so this leaves only that hero locked.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:HeroUnlockController.IsDeathMatchBro(HeroType)">
            <summary>
                Determines if a hero is available for selection in death match and similar
                competitive game modes. Most heroes are available except for a few special cases
                like CaseyBroback.
            </summary>
            <param name="nextHeroType">The hero type to check for death match availability.</param>
            <returns>True if the hero can be used in death match modes, false otherwise.</returns>
        </member>
        <!-- Level Loading & Transitions Methods -->
        <member name="M:LevelSelectionController.GetCurrentMap">
            <summary>
                Retrieves the MapData for the current level based on the game's load mode and
                settings. This is the primary method for obtaining level data and handles all
                different load scenarios.
            </summary>
            <returns>The MapData for the current level, or null if no valid level data could be loaded.</returns>
            <remarks>
                This method handles multiple loading scenarios: - Campaign mode: Loads from the
                current campaign's level array - LoadFromMapdata: Uses the pre-set MapDataToLoad -
                LoadFromFile: Loads individual level files from disk - Generated: Creates
                procedurally generated levels The method also handles initial setup when loadMode is
                NotSet, including editor test levels and last played custom levels. This is called
                by Map.LoadMap to get the level data.
            </remarks>
        </member>
        <member name="M:LevelSelectionController.GetMapDataForCampaign">
            <summary>
                Loads map data for the current campaign based on game mode and level number. Handles
                special cases for BroDown mode (player count based levels), versus modes with
                rotation, and victory screen for completed campaigns.
            </summary>
            <returns>The MapData for the current level, or victory screen data if the campaign is complete.</returns>
        </member>
        <member name="M:LevelSelectionController.GetMapDataFromFile">
            <summary>
                Loads map data from a file on disk. Attempts to load as a campaign first, falling
                back to single level loading if that fails. Updates the level file name tracking.
            </summary>
            <returns>The loaded MapData, or null if no valid file name is set.</returns>
        </member>
        <member name="M:LevelSelectionController.GotoNextCampaignScene">
            <summary>
                Handles the transition to the next scene in the campaign sequence, including special
                handling for the helicopter intro cutscene at the start of the main campaign.
            </summary>
            <remarks>
                This method has special logic for the campaign start: - If at level 0 (campaign
                start) and haven't shown the helicopter intro for non-custom campaigns, it loads the
                "MissionScreenVietnam" intro scene first - Otherwise, it loads the standard campaign
                scene The method sets the appropriate scene in GameState and calls
                GameModeController.LoadNextScene to handle the actual transition. Used when starting
                a new campaign from menus.
            </remarks>
        </member>
        <member name="M:LevelSelectionController.GotoNextLevel">
            <summary>
                Advances to the next level in the current campaign by incrementing the level number
                and reloading the current scene. Resets to level 0 if past the end of the campaign.
            </summary>
        </member>
        <member name="M:LevelSelectionController.ResetLevelAndGameModeToDefault">
            <summary>
                Resets all level selection and game mode settings to their default values. This
                comprehensive reset is called when returning to the main menu or starting a fresh
                game session.
            </summary>
            <remarks>
                This method performs a complete reset of the game state including: - Setting current
                level to 0 and clearing fail counts - Resetting all campaign loading flags and modes
                - Clearing custom campaign and workshop data - Resetting player wins and statistics
                - Clearing triggered once-only triggers - Setting the default campaign based on
                build type (Expendabros, Exhibition, or standard) This ensures a clean slate when
                starting new game sessions.
            </remarks>
        </member>
        <member name="M:LevelSelectionController.RestartCampaignScene">
            <summary>
                Initiates a restart of the current campaign scene by triggering a fade transition.
                This method is called when the player chooses to retry a failed level.
            </summary>
            <remarks>
                The method triggers a 2-second solid fade effect. The actual scene reload is handled
                by the fade system once the fade completes. This is typically called from the level
                failure screen when the player chooses to retry instead of returning to the menu.
            </remarks>
        </member>
        <!-- Campaign Management Methods -->
        <member name="M:LevelSelectionController.CompleteCurrentLevel">
            <summary>
                Marks the current level as complete by incrementing the level number and saving
                progress for online campaigns. Resets the helicopter intro flag for the next level.
            </summary>
        </member>
        <member name="M:LevelSelectionController.DmRotationLevelLoadComplete(Campaign)">
            <summary>
                Called when a deathmatch rotation level finishes downloading. Assigns the campaign
                to the appropriate rotation slot and initiates download of the next level if needed.
            </summary>
            <param name="campaign">The downloaded campaign to add to the rotation.</param>
        </member>
        <member name="M:LevelSelectionController.FindOnlineDeathmatchLevels">
            <summary>
                Queries Steam Workshop for deathmatch levels using either vote ranking (70% chance)
                or trend ranking (30% chance). Initiates the asynchronous query and sets up the
                callback handler.
            </summary>
        </member>
        <member name="M:LevelSelectionController.GetFormattedCampaignName(System.String)">
            <summary>
                Formats a campaign file name into a display name by converting to uppercase,
                removing prefixes, and looking up formatted names. Used for campaign display in UI
                and presence text.
            </summary>
            <param name="campaignFileName">The raw campaign file name to format (e.g., "WM_Mission1").</param>
            <returns>The formatted campaign name (e.g., "2" for "MISSION1") or the cleaned uppercase name if no lookup exists.</returns>
        </member>
        <member name="M:LevelSelectionController.LoadNextVersusCampaign">
            <summary>
                Loads the next campaign in the versus rotation system. Handles both online
                deathmatch rotation with Steam Workshop levels and offline rotation with local
                campaigns. Manages the campaign queue and initiates downloads for upcoming levels.
            </summary>
        </member>
        <member name="M:LevelSelectionController.SetLevelPresence">
            <summary>
                Sets the platform-specific presence text based on the current campaign and level.
                Displays different text for challenge levels, arcade levels, and campaign levels.
            </summary>
        </member>
        <member name="M:LevelSelectionController.UGC_UGCQueryCompleted(Steamworks.SteamUGCQueryCompleted_t,System.Boolean)">
            <summary>
                Callback handler for Steam Workshop queries. Processes the returned deathmatch
                levels, creates WorkshopLevelDetails objects, and selects levels for the current and
                next rotation slots.
            </summary>
            <param name="value">The Steam UGC query result containing workshop level information.</param>
            <param name="ioFailure">Whether the query failed due to an IO error.</param>
        </member>
        <!-- Campaign Management Properties -->
        <member name="P:LevelSelectionController.campaignToLoad">
            <summary>
                Gets or sets the name of the campaign that should be loaded. This property stores
                and retrieves the campaign name from the GameState singleton instance, ensuring that
                the campaign name persists across scene transitions.
            </summary>
            <remarks>
                This is a key property used throughout the game to determine which campaign should
                be loaded. It's set by various menu systems (CustomCampaignMenu,
                HeroSelectController, etc.) and read by the level loading system. The value is
                stored in GameState.Instance.campaignName to maintain consistency across the game
                session.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.currentCampaign">
            <summary>
                Gets or sets the currently loaded Campaign object containing all level data for the
                active campaign. Setting this property also updates the campaign name in GameState
                for persistence.
            </summary>
            <remarks>
                This property holds the actual Campaign object with all its levels, header
                information, and metadata. When set, it automatically updates
                GameState.Instance.campaignName with either the header name (if available) or the
                campaign's base name. This is the primary way to access level data for the current
                campaign. Setting to null clears the campaign name in GameState.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.levelFileNameToLoad">
            <summary>
                Gets or sets the name of the level file to be loaded. This property is used when
                loading individual level files from disk rather than campaign files. The property
                acts as a wrapper around the internal _levelFileNameToLoad field.
            </summary>
            <remarks>
                This property is typically set in the GetMapDataFromFile method to store the
                filename of the level that should be loaded. It's used by various game components
                like MainMenu, QuickLauncher, and SelectStartingAdvantage to specify which level
                file should be loaded when the game starts or transitions between scenes.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.loadCustomCampaign">
            <summary>
                Gets or sets whether a custom campaign (user-created or downloaded) should be loaded
                instead of the built-in campaigns. This flag is stored in the GameState singleton
                and controls the campaign loading behavior.
            </summary>
            <remarks>
                When true, the game will attempt to load campaigns from disk (either user-created or
                published workshop campaigns) rather than from the built-in resources. This flag is
                set by custom campaign menus and affects how campaigns are loaded in
                GetMapDataForCampaign. It's reset to false when returning to main menu or starting
                standard campaigns.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.returnToWorldMap">
            <summary>
                Gets or sets whether the game should return to the world map after completing the
                current level or campaign. This property controls the flow between the world map
                mode and individual levels.
            </summary>
            <remarks>
                When true, completing a level will return the player to the 3D world map instead of
                proceeding to the next level in sequence. This is used for the world map campaign
                mode where players can choose which territory to tackle next. The value is stored in
                GameState to persist across scene transitions.
            </remarks>
        </member>
        <!-- Campaign Management Fields -->
        <member name="F:LevelSelectionController.CurrentCampaign">
            <summary>
                Private backing field that stores the currently loaded campaign. Accessed through
                the currentCampaign property which handles campaign validation and loading.
            </summary>
        </member>
        <member name="F:LevelSelectionController.DefaultCampaign">
            <summary>
                The default campaign to load when no specific campaign is selected. Initialized to
                the offline campaign ("vietnam") by default.
            </summary>
        </member>
        <member name="F:LevelSelectionController.ExpendabrosCampaign">
            <summary>
                The campaign name for the Expendabros crossover content. Set to
                "Expendabros_Campaign" to identify and load Expendabros-specific levels.
            </summary>
        </member>
        <member name="F:LevelSelectionController.MapDataToLoad">
            <summary>
                Stores pre-loaded map data to be used when LoadFromMapdata mode is active. Allows
                external code to set specific map data before level loading.
            </summary>
        </member>
        <member name="F:LevelSelectionController.OfflineCampaign">
            <summary>
                The default campaign name used for offline single-player gameplay. Set to "vietnam"
                to use the standard Vietnam campaign levels.
            </summary>
        </member>
        <member name="F:LevelSelectionController.OnlineCampaign">
            <summary>
                The default campaign name used for online multiplayer gameplay. Set to
                "VietnamNetworked" to use the networked version of the Vietnam campaign levels.
            </summary>
        </member>
        <member name="F:LevelSelectionController._levelFileNameToLoad">
            <summary>
                Internal backing field for the levelFileNameToLoad property. Stores the file name of
                a level to be loaded from disk.
            </summary>
        </member>
        <member name="F:LevelSelectionController.currentVSRotationCampaign">
            <summary>
                Stores the current campaign in the versus mode rotation for online deathmatch games.
                When using online deathmatch level rotation, this holds the campaign that is
                currently active. Gets set when a deathmatch rotation level completes loading via
                DmRotationLevelLoadComplete. Used by LoadNextVersusCampaign to determine which
                campaign to load as the current campaign.
            </summary>
        </member>
        <member name="F:LevelSelectionController.currentWorkshopLevel">
            <summary>
                Stores details about the currently loaded Steam Workshop level. Used when playing
                custom user-created content from the Workshop. Null when playing built-in campaigns.
            </summary>
        </member>
        <member name="F:LevelSelectionController.defaultDeathmatchCampaignIncludedInRotation">
            <summary>
                Whether the default deathmatch campaign should be included in the versus rotation.
                Allows the built-in deathmatch maps to be part of the rotation.
            </summary>
        </member>
        <member name="F:LevelSelectionController.defaultRaceCampaignIncludedInRotation">
            <summary>
                Whether the default race campaign should be included in the versus rotation. Allows
                the built-in race maps to be part of the rotation.
            </summary>
        </member>
        <member name="F:LevelSelectionController.haveSetListCallResult">
            <summary>
                Private flag tracking whether the Steam Workshop query callback has been
                initialized. Prevents duplicate callback registration when querying Workshop
                content.
            </summary>
        </member>
        <member name="F:LevelSelectionController.isOnlineCampaign">
            <summary>
                Flag indicating whether the currently loaded campaign is an online multiplayer
                campaign. Used to determine networking behavior and level selection logic.
            </summary>
        </member>
        <member name="F:LevelSelectionController.lastVersusCampaign">
            <summary>
                Private field tracking the index of the last versus campaign played. Initialized to
                -100 to ensure no campaign matches on first selection. Used to prevent immediate
                repetition of versus campaigns.
            </summary>
        </member>
        <member name="F:LevelSelectionController.levelDetailsCurrentVSRotationCampaign">
            <summary>
                Stores the workshop level details for the current campaign in the versus rotation.
                Contains metadata about the current online deathmatch level including file ID and
                creator info. Set when online VS levels are loaded from Steam Workshop query
                results. Used to track which specific workshop level is currently active in the
                rotation.
            </summary>
        </member>
        <member name="F:LevelSelectionController.levelDetailsNextVSRotationCampaign">
            <summary>
                Stores the workshop level details for the next campaign queued in the versus
                rotation. Contains metadata about the next online deathmatch level to be loaded
                after the current one. Set when selecting random levels from the online VS levels
                list during Steam query processing. Cleared when the next level is promoted to
                current in LoadNextVersusCampaign.
            </summary>
        </member>
        <member name="F:LevelSelectionController.listCallResult">
            <summary>
                Private Steam API callback result for Workshop content queries. Used internally when
                fetching lists of available Workshop levels for versus mode or custom campaigns.
            </summary>
        </member>
        <member name="F:LevelSelectionController.loadPublishedCampaign">
            <summary>
                Flag indicating whether the game should load a published campaign from the Workshop
                or other external source. Checked during campaign loading to determine the source.
            </summary>
        </member>
        <member name="F:LevelSelectionController.nextVSRotationCampaign">
            <summary>
                Stores the next campaign queued in the versus mode rotation for online deathmatch
                games. When the current VS rotation campaign ends, this campaign becomes the new
                current campaign. Gets set by DmRotationLevelLoadComplete when a second campaign
                loads while one is already current. Cleared after being promoted to current campaign
                in LoadNextVersusCampaign.
            </summary>
        </member>
        <member name="F:LevelSelectionController.onlineVSLevels">
            <summary>
                Private list storing available online versus mode levels from the Workshop. Used to
                randomly select levels for versus mode rotation without repeating recently played
                levels.
            </summary>
        </member>
        <member name="F:LevelSelectionController.usingOnlineDMLevelRotation">
            <summary>
                Indicates whether the game is currently using online deathmatch level rotation mode.
                When true, LoadNextVersusCampaign will use the VS rotation campaign fields instead
                of standard progression. Set to false during initialization and controlled by the
                deathmatch menu system. Determines whether to use rotation-based campaign loading
                for versus mode.
            </summary>
        </member>
        <member name="F:LevelSelectionController.versusRotationList">
            <summary>
                List of campaign file names included in the versus mode rotation. Used for offline
                deathmatch and race modes to cycle through available maps.
            </summary>
        </member>
        <!-- Level Progression Properties -->
        <member name="P:LevelSelectionController.CurrentLevelNum">
            <summary>
                Gets or sets the current level number (index) within the active campaign. This
                property wraps GameState.Instance.levelNumber for consistency.
            </summary>
            <remarks>
                This zero-based index indicates which level in the campaign array is currently
                active. It's incremented when completing levels and reset when starting new
                campaigns. The value persists in GameState across scene transitions.
            </remarks>
        </member>
        <!-- Level Progression Fields -->
        <member name="F:LevelSelectionController.exhibitionCount">
            <summary>
                Counter for exhibition mode levels. Initialized to -1, likely incremented during
                exhibition gameplay to track progress or determine exhibition-specific behavior.
            </summary>
        </member>
        <member name="F:LevelSelectionController.levelNumBrodownBurningJungle">
            <summary>
                Constant defining the level number for the Brodown Burning Jungle level. Set to 1,
                used for identifying this specific level in campaigns or level sequences.
            </summary>
        </member>
        <member name="F:LevelSelectionController.levelNumBrodownCity">
            <summary>
                Constant defining the level number for the Brodown City level. Set to 2, used for
                identifying this specific level in campaigns or level sequences.
            </summary>
        </member>
        <member name="F:LevelSelectionController.shownHelicopterIntro">
            <summary>
                Flag tracking whether the helicopter intro sequence has been shown to the player.
                Prevents the intro from playing multiple times when starting campaigns from the
                beginning.
            </summary>
        </member>
        <member name="F:LevelSelectionController.totalNumberOfArcadeLevels">
            <summary>
                The total number of levels available in arcade mode. Set to 63, used to determine
                when players have completed all arcade content and for progress tracking.
            </summary>
        </member>
        <!-- Campaign State Queries Methods -->
        <member name="M:LevelSelectionController.GetCurrentCampaignLength">
            <summary>
                Gets the total number of levels in the current campaign based on the game mode.
            </summary>
            <returns>The number of levels in the current campaign. Returns 1 for cutscene mode, 0 if no campaign is loaded, or the actual campaign length for other modes.</returns>
            <remarks>
                This method handles special cases: - Cutscene mode always returns 1 (single scene) -
                Returns 0 if currentCampaign is null - Otherwise returns the Length property of the
                current campaign Used for determining when the player has completed a campaign and
                for progress tracking.
            </remarks>
        </member>
        <member name="M:LevelSelectionController.IsCustomCampaign">
            <summary>
                Determines whether the currently loaded campaign is a custom campaign (user-created
                or from Steam Workshop).
            </summary>
            <returns>True if either loadCustomCampaign or isOnlineCampaign flags are set, false for built-in campaigns.</returns>
            <remarks>
                This method is used throughout the game to determine if special handling is needed
                for custom content, such as different victory screens, achievement restrictions, or
                save game behavior. Custom campaigns include both locally created campaigns and
                those downloaded from Steam Workshop.
            </remarks>
        </member>
        <member name="M:LevelSelectionController.IsInProcGenCampaign">
            <summary>
                Determines whether the game is currently playing procedurally generated levels
                rather than pre-designed campaign levels.
            </summary>
            <returns>True if not in world map mode and the load mode is set to Generated, false otherwise.</returns>
            <remarks>
                Procedurally generated campaigns create levels on the fly using the map generation
                system. This mode is mutually exclusive with world map campaigns and affects how
                levels are loaded and progressed through.
            </remarks>
        </member>
        <member name="M:LevelSelectionController.IsInWorldMapCampaign">
            <summary>
                Determines whether the game is currently in world map campaign mode where players
                progress through a 3D world map selecting territories.
            </summary>
            <returns>True if the returnToWorldMap flag is set, false otherwise.</returns>
            <remarks>
                World map campaigns use a different progression system where players return to a 3D
                world map between levels to choose their next territory. This affects save systems,
                progression tracking, and scene transitions.
            </remarks>
        </member>
        <member name="M:LevelSelectionController.SpawnAsheAndHisCar">
            <summary>
                Determines whether Ash Williams and his car should spawn in the current level. This
                is used for special Evil Dead crossover content in specific levels.
            </summary>
            <returns>True if the current level's description contains "deep throat" (case-insensitive), false otherwise.</returns>
            <remarks>
                This method checks the level description for a specific keyword to enable special
                Evil Dead content. The check is case-insensitive. This appears to be an Easter egg
                or special crossover feature that spawns Ash Williams (from Evil Dead) and his
                iconic car in certain levels.
            </remarks>
        </member>
        <!-- Scene Management Properties -->
        <member name="P:LevelSelectionController.CurrentGameModeScene">
            <summary>
                Gets the appropriate scene name for the current game mode. Different game modes use
                different scenes to handle their specific gameplay requirements.
            </summary>
            <remarks>
                Returns the scene name based on GameModeController.GameMode: - ExplosionRun: Returns
                ExplosionRunSceneName - DeathMatch: Returns DeathmatchSceneName - SuicideHorde:
                Returns SuicideHordeSceneName - Race: Returns RaceRunSceneName - Default: Returns
                CampaignScene All non-campaign modes currently use "Test Evan2" as their scene name.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.CustomCampaignVictoryScene">
            <summary>
                Gets the name of the victory scene to use when completing a custom campaign. Returns
                different scene names based on whether Steam is enabled to handle different victory
                screen requirements.
            </summary>
            <remarks>
                Returns "VictoryCustomCampaignSteam" when Steam is enabled (for Steam Workshop
                integration and leaderboards), or "VictoryCustomCampaign" for non-Steam builds. This
                allows custom campaigns to have appropriate victory screens with or without Steam
                features.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.ExhibitionCampaign">
            <summary>
                Gets the name of the campaign to use in exhibition mode, which varies based on demo
                settings and current scene. This property determines which special campaign should
                be loaded for exhibition/demo builds.
            </summary>
            <remarks>
                The property returns different campaigns based on the current state: - "Victory" if
                already in the Victory scene - "AlienExhibition" if the alien demo is selected -
                "BossRushCampaign" if the boss rush demo is selected -
                "VIETNAM_EXHIBITION_TWITCHCON" as the default exhibition campaign This is primarily
                used for special demo builds shown at conventions or events.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.MainMenuScene">
            <summary>
                Gets the appropriate main menu scene name based on the build type. Returns different
                scene names for the Expendabros promotional build versus the standard Broforce
                build.
            </summary>
            <remarks>
                Returns "MainMenuExpendabros" for Expendabros builds (a special promotional version
                of the game), or "MainMenu" for standard Broforce builds. This allows the game to
                have different main menus for different versions while using the same codebase.
            </remarks>
        </member>
        <!-- Scene Management Fields -->
        <member name="F:LevelSelectionController.BrodownSceneName">
            <summary>
                The scene name used for brodown game mode. Default value is "Test Evan2".
            </summary>
        </member>
        <member name="F:LevelSelectionController.CampaignScene">
            <summary>
                The current scene name used for campaign mode. Default value is "Test Evan2".
            </summary>
        </member>
        <member name="F:LevelSelectionController.CampaignSceneDefault">
            <summary>
                The default scene name for campaign mode. Used as a fallback when no specific
                campaign scene is set. Default value is "Test Evan2".
            </summary>
        </member>
        <member name="F:LevelSelectionController.DeathmatchSceneName">
            <summary>
                The scene name used for deathmatch game mode. Default value is "Test Evan2".
            </summary>
        </member>
        <member name="F:LevelSelectionController.ExplosionRunSceneName">
            <summary>
                The scene name used for explosion run game mode. Default value is "Test Evan2".
            </summary>
        </member>
        <member name="F:LevelSelectionController.GameOverScene">
            <summary>
                The scene name for the game over cutscene. Set to "CutsceneGameOver" which plays
                when all players have died and no lives remain.
            </summary>
        </member>
        <member name="F:LevelSelectionController.HellArcade">
            <summary>
                The scene name for the Hell-themed arcade mode. Set to "WM_Hell" which represents
                the Hell world map used in arcade gameplay.
            </summary>
        </member>
        <member name="F:LevelSelectionController.HeroSelectScreen">
            <summary>
                The scene name for the hero selection screen. Set to "HeroSelect" which allows
                players to choose their character before starting gameplay.
            </summary>
        </member>
        <member name="F:LevelSelectionController.IntroScene">
            <summary>
                The scene name for the game's intro cutscene. Set to "Intro" which plays when
                starting a new campaign from the beginning.
            </summary>
        </member>
        <member name="F:LevelSelectionController.JoinScene">
            <summary>
                The scene name used for joining multiplayer games. Default value is "newJoin".
            </summary>
        </member>
        <member name="F:LevelSelectionController.MainMenuSceneExpendabros">
            <summary>
                The scene name for the Expendabros-specific main menu. Set to "MainMenuExpendabros"
                to provide a themed menu for the Expendabros crossover content.
            </summary>
        </member>
        <member name="F:LevelSelectionController.OfflineCustomVictoryScene">
            <summary>
                The scene name for the victory screen shown after completing offline custom
                campaigns. Set to "VictoryCustomCampaign" to provide a different ending for
                user-created content.
            </summary>
        </member>
        <member name="F:LevelSelectionController.RaceRunSceneName">
            <summary>
                The scene name used for race game mode. Default value is "Test Evan2".
            </summary>
        </member>
        <member name="F:LevelSelectionController.SuicideHordeSceneName">
            <summary>
                The scene name used for suicide horde game mode. Default value is "Test Evan2".
            </summary>
        </member>
        <member name="F:LevelSelectionController.VictoryScene">
            <summary>
                The scene name for the standard victory screen. Set to "Polaroid" which displays the
                victory polaroid photo sequence after completing a campaign.
            </summary>
        </member>
        <member name="F:LevelSelectionController.WorldMapScene">
            <summary>
                The scene name for the world map screen. Default value is "WorldMap3D".
            </summary>
        </member>
        <member name="F:LevelSelectionController._MainMenuScene">
            <summary>
                Private constant storing the main menu scene name. Set to "MainMenu" and used
                internally for scene transitions back to the main game menu.
            </summary>
        </member>
        <member name="F:LevelSelectionController.levelNumBrodownJungle">
            <summary>
                Constant defining the level number for the Brodown jungle level. Value is 0.
            </summary>
        </member>
        <!-- Scene State Properties -->
        <member name="P:LevelSelectionController.CurrentlyInGame">
            <summary>
                Gets whether the player is currently in an active game (not in the main menu).
            </summary>
            <remarks>
                Returns true if not in the main menu scene, false otherwise. This is a simple helper
                property that inverts IsMainMenuScene for convenience. Used by various systems to
                determine if gameplay systems should be active.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.IsCampaignScene">
            <summary>
                Gets whether the currently active scene is the campaign gameplay scene.
            </summary>
            <remarks>
                Performs a case-insensitive comparison with the CampaignScene name ("Test Evan2").
                Returns true when actively playing campaign levels, false in menus or other game
                modes.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.IsLoadingScene">
            <summary>
                Gets whether the currently active scene is the loading screen scene.
            </summary>
            <remarks>
                Checks if the active scene is "LoadingScreen" (case-insensitive). This is displayed
                during scene transitions and asset loading between gameplay scenes.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.IsMainMenuScene">
            <summary>
                Gets whether the currently active scene is the main menu scene.
            </summary>
            <remarks>
                Performs a case-insensitive comparison between the active scene name and the
                MainMenuScene property. This accounts for different main menu scenes in different
                builds (standard vs Expendabros). Used to determine if menu-specific behavior should
                be active.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.IsMainMenuSceneLoading">
            <summary>
                Gets whether the main menu scene is currently set to load next (during scene
                transitions).
            </summary>
            <remarks>
                Checks if GameState.Instance.sceneToLoad matches the main menu scene name
                (case-insensitive). This is useful for systems that need to prepare for returning to
                the main menu before the scene actually changes.
            </remarks>
        </member>
        <member name="P:LevelSelectionController.IsWorldMapScene">
            <summary>
                Gets whether the currently active scene is the 3D world map scene.
            </summary>
            <remarks>
                Checks if the active scene is "WorldMap3D" (case-insensitive). The world map is used
                in the world map campaign mode where players select territories to conquer.
            </remarks>
        </member>
        <!-- Menu Initialization & Setup Methods -->
        <member name="M:MainMenu.Awake">
            <summary>
                Initializes the main menu when the scene loads, setting up all core menu systems and
                resetting game state. Performs platform-specific setup, clears player progress data,
                initializes multiplayer connections, and begins the delayed menu initialization
                process. Also resets various game states to ensure a clean main menu experience.
            </summary>
        </member>
        <member name="M:MainMenu.DelayInitializeMenu">
            <summary>
                Coroutine that delays menu initialization by 3 seconds, then checks for PlayTogether
                hosting status before initializing. If hosting PlayTogether, it checks multiplayer
                status with the host user before proceeding. Otherwise, directly calls
                InitializeMenu() after the delay.
            </summary>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>
        <member name="M:MainMenu.InitializeMenu">
            <summary>
                Completes the menu initialization process after the initial delay. Activates the
                menu highlight, sets the menu as active, restores any previously saved highlight
                index, and transitions to the campaign menu if hosting PlayTogether.
            </summary>
        </member>
        <member name="M:MainMenu.SetupItems">
            <summary>
                Dynamically builds the main menu items list based on build configuration and player
                progress. Adds conditional menu items like Versus, Custom Campaign, Level Editor,
                and Join Online based on build type. Adjusts between "Start" and "Continue" arcade
                campaign based on player progress. Handles special logic for procedural generation
                test builds.
            </summary>
        </member>
        <member name="M:MainMenu.Start">
            <summary>
                Called at scene start to finalize initialization. Sets time scale to normal, checks
                for immediate custom campaign transition if requested, plays the Broforce
                announcement sound, and stops all controller rumble effects.
            </summary>
        </member>
        <member name="M:MainMenu.Update">
            <summary>
                Main update loop that handles initialization checks, editor-specific unlock cheats
                (F5 key), click-to-start text animation effects, mouse click detection for menu
                activation, and cheat code input processing.
            </summary>
        </member>
        <!-- Menu Initialization & Setup Fields -->
        <member name="F:MainMenu.clickToStartMesh">
            <summary>
                Text mesh component displaying the "click to start" prompt before the main menu is
                active.
            </summary>
        </member>
        <member name="F:MainMenu.gameStartedThroughtMainMenu">
            <summary>
                Static flag indicating whether the current game session was started through the main
                menu. Set to true in StartGame() method and used by other systems to determine game
                initialization context.
            </summary>
        </member>
        <member name="F:MainMenu.hasInitialized">
            <summary>
                Tracks whether the menu has completed its initialization process, preventing input
                processing before initialization.
            </summary>
        </member>
        <member name="F:MainMenu.haveCalibrated">
            <summary>
                Flag tracking whether initial calibration has occurred. Checked and set to true
                during the first Update() call. Purpose appears to be ensuring one-time
                initialization happens after menu is fully loaded.
            </summary>
        </member>
        <member name="F:MainMenu.instance">
            <summary>
                Static singleton instance of the MainMenu class. Set during Start() initialization
                and used throughout the codebase for global access to main menu functionality.
                Checked for null in static methods like Reload().
            </summary>
        </member>
        <member name="F:MainMenu.logo">
            <summary>
                Reference to the game logo GameObject displayed on the main menu. Animated during
                menu transitions with scaling effects. Hidden when transitioning to submenus and
                shown when returning to the main menu.
            </summary>
        </member>
        <member name="F:MainMenu.networkedBuild">
            <summary>
                Indicates whether this is a networked build that should transition to the Campaign
                scene instead of the Join scene.
            </summary>
        </member>
        <member name="F:MainMenu.optionsMenu">
            <summary>
                Reference to the options menu that can be accessed from the main menu.
            </summary>
        </member>
        <member name="F:MainMenu.starFieldAnimation">
            <summary>
                Animation component for the starfield background effect. Plays default animation on
                menu show and special "starfieldLobbyTransition" animation when transitioning to
                lobby or custom campaign screens.
            </summary>
        </member>
        <member name="F:MainMenu.wasShown">
            <summary>
                Static flag indicating whether the main menu has been shown at least once during the
                current game session.
            </summary>
        </member>
        <!-- Menu Navigation & State Methods -->
        <member name="M:MainMenu.GoBackToMenu">
            <summary>
                Returns to the main menu from a submenu, reactivating the main menu and playing a
                drum sound effect (attack sound at index 1 with 0.25 volume).
            </summary>
        </member>
        <member name="M:MainMenu.GoToOptions">
            <summary>
                Transitions from the main menu to the options menu. Deactivates the main menu,
                activates the options menu, and triggers the options menu transition-in animation.
            </summary>
        </member>
        <member name="M:MainMenu.HideRoutine">
            <summary>
                Coroutine that animates hiding the menu with a scaling effect over 1 second. Scales
                both the menu and optionally the logo from normal size to an enlarged size based on
                ScaleFactor, then deactivates the GameObjects when complete.
            </summary>
            <param name="hideLogo">Whether to also hide and scale the logo GameObject.</param>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>
        <member name="M:MainMenu.RunInput">
            <summary>
                Processes input for menu navigation, disabling up/down movement when transitioning
                between menus or showing explanations. Overrides base Menu class input handling to
                prevent navigation during transitions.
            </summary>
        </member>
        <member name="M:MainMenu.Show">
            <summary>
                Shows the main menu by activating both the menu and logo GameObjects, then starting
                the show animation coroutine.
            </summary>
        </member>
        <member name="M:MainMenu.ShowHideMenu">
            <summary>
                Manages menu show/hide coroutines, stopping any existing coroutine before starting a
                new one to prevent animation conflicts.
            </summary>
            <param name="showHideMethod">The coroutine method to execute for showing or hiding the menu.</param>
        </member>
        <member name="M:MainMenu.ShowRoutine">
            <summary>
                Coroutine that animates showing the menu with a scaling effect. Blocks input during
                animation, plays starfield animation, scales menu and logo from zero to normal size
                over approximately 1.2 seconds, then plays camera shake and impact sound when
                complete.
            </summary>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>
        <member name="M:MainMenu.TransitionToOnlineOrOffline(System.Boolean)">
            <summary>
                Static method that transitions from the main menu to either the online/offline
                selection menu or directly to custom campaign/exhibition mode based on build type
                and previous menu selections.
            </summary>
            <param name="onlineAvalable">Whether online multiplayer is available for the current platform/build.</param>
        </member>
        <!-- Menu Navigation & State Fields -->
        <member name="F:MainMenu.ScaleFactor">
            <summary>
                Scale multiplier applied during menu hide animations. Used in the HideRoutine to
                scale up the menu and logo by this factor (default 1.0) as they fade out. Affects
                the visual transition effect when hiding menus.
            </summary>
        </member>
        <member name="F:MainMenu._previousHighlightIndex">
            <summary>
                Static field that stores the previously highlighted menu option index. Used to
                restore menu highlight position when returning to the main menu from other screens.
                Reset to 0 after being applied.
            </summary>
        </member>
        <member name="F:MainMenu.currentInput">
            <summary>
                Accumulates keyboard input characters for cheat code detection. Characters are
                appended as typed and checked against known cheat strings. Initialized to empty
                string and grows with each character input during gameplay.
            </summary>
        </member>
        <member name="F:MainMenu.deathmatchCampaignSelectMenu">
            <summary>
                Reference to the deathmatch campaign selection menu UI element. Used when
                transitioning to deathmatch mode from various menu navigation paths. Activated and
                transitioned in when players choose deathmatch game modes.
            </summary>
        </member>
        <member name="F:MainMenu.explanationTime">
            <summary>
                Timestamp recording when the transition to the explanation screen began. Initialized
                to -1.5f.
            </summary>
        </member>
        <member name="F:MainMenu.hasOpenedWebPage">
            <summary>
                Flag preventing multiple Steam store page openings in a single session. Set to true
                after first opening the Steam store URL, preventing subsequent calls to
                GoToSteamPage from opening duplicate browser tabs.
            </summary>
        </member>
        <member name="F:MainMenu.showHideRoutine">
            <summary>
                Coroutine reference for the current menu show/hide animation routine. Stores the
                active coroutine to allow stopping previous animations before starting new ones. Set
                to null when animations complete.
            </summary>
        </member>
        <member name="F:MainMenu.transitioning">
            <summary>
                Flag indicating the menu is currently transitioning between scenes, preventing input
                during transitions.
            </summary>
        </member>
        <member name="F:MainMenu.transitioningToExplanation">
            <summary>
                Flag indicating the menu is transitioning to the game explanation screen.
            </summary>
        </member>
        <member name="F:MainMenu.worldMapOrArcadeMenu">
            <summary>
                Reference to the world map or arcade mode selection menu. Used when transitioning
                from the main menu to campaign selection screens. Activated and transitioned in when
                players select campaign or arcade modes.
            </summary>
        </member>
        <!-- Campaign & Level Management Methods -->
        <member name="M:MainMenu.CustomCampaign">
            <summary>
                Initiates transition to custom campaign menu after checking if the primary user has
                UGC restrictions. Shows an error dialog if restricted, otherwise sets up arcade
                difficulty mode and transitions to the difficulty menu with custom campaign flag
                set.
            </summary>
        </member>
        <member name="M:MainMenu.FilmMode">
            <summary>
                Opens film mode for creating cinematics by activating the level editor in film mode
                and loading the FilmScene.
            </summary>
        </member>
        <member name="M:MainMenu.GoToCampaignMenu">
            <summary>
                Transitions to the campaign selection menu (world map or arcade). In exhibition
                build mode, directly starts arcade mode instead. Otherwise deactivates main menu and
                activates the world map/arcade selection menu.
            </summary>
        </member>
        <member name="M:MainMenu.GoToCampaignMenu">
            <summary>
                Navigates to the campaign selection menu. For exhibition builds, directly starts
                arcade mode. For regular builds, transitions to the world map or arcade menu.
            </summary>
        </member>
        <member name="M:MainMenu.LevelEditor">
            <summary>
                Opens the level editor by setting up the game state for level editing mode, loading
                the last custom level, and transitioning to the campaign scene.
            </summary>
        </member>
        <member name="M:MainMenu.LoadProcGen">
            <summary>
                Loads the procedural generation game mode by loading persistent assets and
                transitioning to the RogueforceStartingPerk scene.
            </summary>
        </member>
        <member name="M:MainMenu.StartArcade">
            <summary>
                Starts an arcade campaign by resetting all game state, clearing hero unlocks,
                initializing the default campaign settings, and transitioning to the online/offline
                selection screen.
            </summary>
        </member>
        <member name="M:MainMenu.StartDeathMatch">
            <summary>
                Opens the deathmatch campaign selection menu and deactivates the main menu.
            </summary>
        </member>
        <member name="M:MainMenu.StartExplosionRun">
            <summary>
                Starts the Explosion Run game mode (beta feature) with the DefaultExplosionRun
                campaign and displays beta feedback text.
            </summary>
        </member>
        <member name="M:MainMenu.StartRace">
            <summary>
                Starts the Race game mode (beta feature) with the DefaultRace campaign and displays
                beta feedback text.
            </summary>
        </member>
        <member name="M:MainMenu.StartSuicideHorde">
            <summary>
                Starts the Suicide Horde game mode (beta feature) with the SuibroTest campaign,
                forcing offline mode, and displays beta feedback text.
            </summary>
        </member>
        <member name="M:MainMenu.TransitionToCustomCampaign">
            <summary>
                Performs the visual transition to the custom campaign menu by playing the starfield
                lobby transition animation, activating the custom campaign menu GameObject, and
                hiding the main menu with logo.
            </summary>
        </member>
        <member name="M:MainMenu.TransitionToExplanation">
            <summary>
                Initiates the transition to the game explanation screen by setting the
                transitioningToExplanation flag and recording the transition time.
            </summary>
        </member>
        <member name="M:MainMenu.TransitionToGame">
            <summary>
                Transitions from the main menu to the game by fading to either the Campaign scene
                (for networked builds) or the Join scene (for non-networked builds).
            </summary>
        </member>
        <!-- Campaign & Level Management Fields -->
        <member name="F:MainMenu.customCampaignMenu">
            <summary>
                Reference to the new custom campaign menu UI component. Activated when transitioning
                to custom campaign selection. GameObject is disabled during initialization and
                enabled when players select custom campaigns.
            </summary>
        </member>
        <member name="F:MainMenu.gameExplanation">
            <summary>
                Text UI element displaying beta feature explanations. Updated with beta disclaimer
                text when entering multiplayer or custom campaign features. Shows feedback request
                message to players during beta features.
            </summary>
        </member>
        <member name="F:MainMenu.thankYouBetaBackerText">
            <summary>
                TextMesh component displaying thank you message to beta backers. Activated alongside
                beta feature explanations when players access multiplayer or custom campaign
                features during beta testing.
            </summary>
        </member>
        <!-- Network & Multiplayer Methods -->
        <member name="M:MainMenu.FindAGameToJoin">
            <summary>
                Initiates the process of finding an online multiplayer game to join by calling
                TryToGoToLobby with Online mode.
            </summary>
        </member>
        <member name="M:MainMenu.FindALocalGameToJoin">
            <summary>
                Initiates the process of finding a local wireless multiplayer game to join by
                calling TryToGoToLobby with LocalWireless mode.
            </summary>
        </member>
        <member name="M:MainMenu.HostAGame">
            <summary>
                Initiates the process of hosting an online game by deactivating the main menu and
                opening the MakeOnlineMenu interface.
            </summary>
        </member>
        <member name="M:MainMenu.RecreateConnectObject">
            <summary>
                Recreates the multiplayer connection object if not immediately going to custom
                campaign or joining through friend invite. Disconnects existing connection, destroys
                the current Connect singleton if it exists, and instantiates a new connection
                prefab. Also releases player movement restrictions.
            </summary>
        </member>
        <member name="M:MainMenu.TransitionToLobby">
            <summary>
                Performs the visual transition to the multiplayer lobby by playing the starfield
                lobby transition animation, opening the lobby if it exists, and hiding the main menu
                with logo.
            </summary>
        </member>
        <member name="M:MainMenu.TryToGoToLobby">
            <summary>
                Attempts to transition to the multiplayer lobby after checking the primary user's
                multiplayer status for the specified mode. Shows a "please wait" overlay during the
                asynchronous status check, then transitions to lobby on success.
            </summary>
            <param name="mode">The multiplayer mode to check status for (Online or LocalWireless).</param>
        </member>
        <!-- Network & Multiplayer Fields -->
        <member name="F:MainMenu.connectPrefab">
            <summary>
                Prefab reference for the Connect networking component. Instantiated in
                RecreateConnectObject() to establish or refresh network connections. Used when
                starting games or resetting network state from the main menu.
            </summary>
        </member>
        <member name="F:MainMenu.lobby">
            <summary>
                Reference to the Lobby component handling multiplayer lobby functionality. Disabled
                during initialization, then opened via lobby.Open() when transitioning to
                multiplayer lobby screens from the main menu.
            </summary>
        </member>
        <member name="F:MainMenu.lobbyGUI">
            <summary>
                GameObject reference for the lobby GUI interface. Currently unused in the codebase -
                only the field declaration exists with no implementation references. Likely
                deprecated or placeholder for future use.
            </summary>
        </member>
        <!-- Audio System Methods -->
        <member name="M:MainMenu.PlayImpactSound">
            <summary>
                Static method that plays the main menu impact sound effect through the Sound
                singleton at 0.25 volume if the main menu instance exists.
            </summary>
        </member>
        <!-- Audio System Fields -->
        <member name="F:MainMenu.CameraShake">
            <summary>
                Animation component for camera shake effects during menu transitions. Played after
                the menu show animation completes to add impact to the menu appearance. Triggered
                alongside impact sound for dramatic effect.
            </summary>
        </member>
        <member name="F:MainMenu.impactSound">
            <summary>
                Audio clip for the impact sound effect played during menu transitions. Played
                through the Sound singleton at 0.25f volume when menus finish showing. Creates audio
                feedback for menu animation completion.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:MainMenu.CheckCheatString(System.String)">
            <summary>
                Checks if the current input string ends with the specified cheat string, performing
                a case-insensitive comparison.
            </summary>
            <param name="cheatString">The cheat code string to check against the current input.</param>
            <returns>True if the current input ends with the cheat string (case-insensitive), false otherwise.</returns>
        </member>
        <member name="M:MainMenu.CheckCheats">
            <summary>
                Monitors keyboard input for letters A through Z and processes each character through
                the cheat code system by calling ProcessCharacter for each key pressed.
            </summary>
        </member>
        <member name="M:MainMenu.ClearUnlocks">
            <summary>
                Clears all hero unlocks through HeroUnlockController and updates the visual
                appearance of any "RESET" menu items by setting their text color to a dark gray
                (0.06, 0.06, 0.06, 1.0).
            </summary>
        </member>
        <member name="M:MainMenu.ExitGame">
            <summary>
                Exits the game application by calling Application.Quit().
            </summary>
        </member>
        <member name="M:MainMenu.Feedback">
            <summary>
                Opens a web browser to navigate to the Broforce game forums feedback page.
            </summary>
        </member>
        <member name="M:MainMenu.GoToSteamPage">
            <summary>
                Opens the Steam store page for Broforce in a web browser. Prevents multiple page
                opens by tracking if the page has already been opened.
            </summary>
        </member>
        <member name="M:MainMenu.ProcessCharacter(System.Char)">
            <summary>
                Processes keyboard input characters for cheat code detection. Appends the character
                to the current input string and checks for various cheat codes including teabagging,
                unlock all bros, unlock all territories, and special editor modes.
            </summary>
            <param name="c">The character input from keyboard.</param>
        </member>
        <member name="M:MainMenu.Reload">
            <summary>
                Static method that reloads the main menu scene if a main menu instance exists, using
                GameState.LoadLevel with the main menu scene name from LevelSelectionController.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:Map.BlindUnits(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Blinds all enemy units within range of a position. Blinded units have impaired
                vision and targeting abilities.
            </summary>
            <param name="playerNum">Player number performing the blind effect</param>
            <param name="x">X position of the blind effect center</param>
            <param name="y">Y position of the blind effect center</param>
            <param name="range">Radius of the blind effect</param>
            <param name="blindTime">Duration of the blindness in seconds (default 9)</param>
        </member>
        <member name="M:Map.BurnBlocksAround(System.Int32,System.Int32,System.Int32,System.Boolean,UnityEngine.GameObject)">
            <summary>
                Burns blocks in the four cardinal directions (up, down, left, right) from a center
                position using raycasting. Can force burn non-oily blocks or only burn oily blocks
                based on the forced parameter.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="collumn">Grid column position of the center</param>
            <param name="row">Grid row position of the center</param>
            <param name="forced">If true, burns all blocks; if false, only burns oily blocks</param>
            <param name="ignoreGameObject">Optional GameObject to ignore during raycasting</param>
            <returns>Number of blocks that were burned</returns>
        </member>
        <member name="M:Map.BurnDamageBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
                Burns and damages a block at the specified grid position, sending both Damage and
                ForceBurn messages to all objects within a 6 unit radius. Used for guaranteed fire
                spreading to blocks.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
        </member>
        <member name="M:Map.BurnLargeObjects(System.Int32,System.Int32,System.Int32)">
            <summary>
                Burns large objects at a specific grid position by sending fire damage messages to
                all objects within a 7 unit radius sphere. Commonly used for spreading fire to
                destructible scenery.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
            <returns>True if any objects were found and damaged, false otherwise</returns>
        </member>
        <member name="M:Map.BurnLargeObjects(System.Int32,System.Single,System.Single)">
            <summary>
                Burns large objects at a specific world position by sending fire damage messages to
                all objects within a 7 unit radius sphere. Overload that accepts world coordinates
                instead of grid coordinates.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="x">World X position</param>
            <param name="y">World Y position</param>
            <returns>True if any objects were found and damaged, false otherwise</returns>
        </member>
        <member name="M:Map.BurnUnitsAround_Local(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Sets units on fire within a specified range from a position. Only affects units when
                the Demonstration.enemiesSetOnFire flag is enabled. Damage can be blocked by
                non-penetrating fire hitting units. Additionally can set ground blocks on fire if
                setGroundAlight is true.
            </summary>
            <param name="firedBy">The object that caused the fire</param>
            <param name="playerNum">Player number of the fire source</param>
            <param name="damage">Burn damage to apply</param>
            <param name="range">Radius of the fire effect</param>
            <param name="x">X position of the fire center</param>
            <param name="y">Y position of the fire center</param>
            <param name="penetrates">Whether fire goes through units or is blocked by the first unit hit</param>
            <param name="setGroundAlight">Whether to also set nearby ground blocks on fire</param>
        </member>
        <member name="M:Map.CanRollOntoUnits(System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks if a rolling object at the specified grid position can roll onto units in
                that location. Returns false if any heavy units are present that would block the
                roll.
            </summary>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
            <param name="direction">Direction of the roll (not used in current implementation)</param>
            <returns>True if the object can roll onto units at this position, false if blocked by heavy units</returns>
        </member>
        <member name="M:Map.CheckForCorpse(System.Single,System.Single,System.Single,System.Single,System.Single@)">
            <summary>
                Searches for the nearest corpse within the specified area. Performs line-of-sight
                checks to ensure the corpse is accessible. Used for abilities that interact with
                dead units, such as resurrection or corpse manipulation.
            </summary>
            <param name="x">The X coordinate to search from.</param>
            <param name="y">The Y coordinate to search from.</param>
            <param name="xRange">The maximum horizontal search distance.</param>
            <param name="yRange">The maximum vertical search distance.</param>
            <param name="corpseX">Output parameter that returns the X coordinate of the found corpse.</param>
            <returns>The nearest accessible corpse unit, or null if none found.</returns>
        </member>
        <member name="M:Map.CollectUnits(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
                Collects all units within range that match the specified criteria into a list. Used
                for area effects that need to process multiple units, such as chain lightning or
                area scans.
            </summary>
            <param name="damageSender">The object collecting units (used for team checks).</param>
            <param name="playerNum">The player number performing the collection, used for team filtering.</param>
            <param name="range">The square radius from the center point for detection.</param>
            <param name="x">The X coordinate of the collection center point.</param>
            <param name="y">The Y coordinate of the collection center point.</param>
            <param name="penetrates">If true, continues collecting all units; if false, stops at the first unit.</param>
            <param name="onlyLiving">If true, only collects living units; if false, includes dead units.</param>
            <param name="alreadyHitUnits">List to populate with collected units, also excludes units already in the list.</param>
            <returns>True if at least one unit was collected, false otherwise.</returns>
        </member>
        <member name="M:Map.ConstrainToBlocks(System.Single,System.Single,System.Single)">
            <summary>
                Checks if a sphere at the specified position overlaps with any solid blocks on the
                ground layer.
            </summary>
            <param name="x">The x-coordinate of the sphere center</param>
            <param name="y">The y-coordinate of the sphere center</param>
            <param name="size">The radius of the sphere to check</param>
            <returns>True if the sphere overlaps with any blocks on the ground layer; false otherwise</returns>
            <remarks>
                This method uses Unity's physics system to check for collisions with blocks. It's
                typically used to determine if a position is constrained by nearby terrain, useful
                for movement validation or spawn checks. The method uses Map.groundLayer as the
                layer mask for the physics check.
            </remarks>
        </member>
        <member name="M:Map.CrushUnitsAgainstWalls(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Checks units within range of a crushing force and either damages them if they're
                against a wall or pushes them away from the crusher position. Used for environmental
                crushers and moving walls.
            </summary>
            <param name="damageSender">The object causing the crushing damage</param>
            <param name="x">X position of the crusher</param>
            <param name="y">Y position of the crusher</param>
            <param name="range">Range of the crushing effect</param>
            <param name="xDirection">Horizontal direction of crushing force (1 for right, -1 for left, 0 for none)</param>
            <param name="yDirection">Vertical direction of crushing force (1 for up, -1 for down, 0 for none)</param>
        </member>
        <member name="M:Map.CrushUnitsAgainstWallsHorizontal(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Crushes units horizontally against walls within a specified size range. Uses
                raycasting to detect if there's a solid wall in the crush direction before applying
                damage.
            </summary>
            <param name="damageSender">The object causing the crushing damage</param>
            <param name="x">X position of the crusher</param>
            <param name="y">Y position of the crusher</param>
            <param name="crusherSize">Half-height of the crushing area</param>
            <param name="direction">Horizontal crushing direction (1 for right, -1 for left)</param>
        </member>
        <member name="M:Map.CrushUnitsAgainstWallsVertical(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Crushes units vertically against walls within a specified size range. Checks if
                units are positioned correctly relative to the crusher and uses raycasting to verify
                wall presence before applying crush damage.
            </summary>
            <param name="damageSender">The object causing the crushing damage</param>
            <param name="x">X position of the crusher</param>
            <param name="y">Y position of the crusher</param>
            <param name="crusherSize">Half-width of the crushing area</param>
            <param name="direction">Vertical crushing direction (1 for up, -1 for down)</param>
        </member>
        <member name="M:Map.DamageBackground(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Applies damage to both foreground and background blocks within a circular radius.
            </summary>
            <param name="damageSender">The entity causing the damage (used for damage attribution).</param>
            <param name="damage">The amount of damage to apply to affected blocks.</param>
            <param name="radius">The radius of the damage area in world units.</param>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <remarks>
                Iterates through all blocks within the damage radius and applies damage using the
                DestroyBackground damage type. Both foreground and background blocks are affected.
                The damage falls off based on distance from the center point.
            </remarks>
        </member>
        <member name="M:Map.DecapitateUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Attempts to decapitate the first eligible unit found within the specified area.
                Prioritizes headshot-capable units and applies decapitation effects, used for
                special finishing moves or precision attacks.
            </summary>
            <param name="damageSender">The object that initiated the decapitation attempt.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict if decapitation occurs.</param>
            <param name="damageType">The type of damage being inflicted.</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the attack center point.</param>
            <param name="y">The Y coordinate of the attack center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="knock">Whether to apply knockback force.</param>
            <returns>The unit that was decapitated, or null if no eligible unit was found.</returns>
        </member>
        <member name="M:Map.DoLevelEndExplosions">
            <summary>
                Coroutine that continuously generates random explosions across the visible screen
                area.
            </summary>
            <returns>An IEnumerator for the coroutine execution</returns>
            <remarks>
                This infinite coroutine creates explosions at random screen positions during the
                level-ending sequence. For each explosion attempt, it converts a random screen
                position to world coordinates with some overflow (140% screen width/height, centered
                at 80%). It then checks if the position contains solid blocks, background blocks, or
                ladders before creating an explosion there. The coroutine waits 0.1-0.4 seconds
                between explosions, creating a dramatic ending effect. Up to 50 position attempts
                are made per cycle to find a valid explosion location.
            </remarks>
        </member>
        <member name="M:Map.ExplodeUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates an explosion that damages and knocks back units within range. Units within
                killRange take full damage, while units between killRange and range are only knocked
                back. Also handles oil ignition and worm deaths.
            </summary>
            <param name="damageSender">The object causing the explosion</param>
            <param name="damage">Base damage amount</param>
            <param name="damageType">Type of damage to apply</param>
            <param name="range">Maximum range of the explosion effect</param>
            <param name="killRange">Range within which units take damage (units beyond this but within range are only knocked back)</param>
            <param name="x">X position of explosion center</param>
            <param name="y">Y position of explosion center</param>
            <param name="force">Knockback force multiplier</param>
            <param name="yI">Additional upward impulse for knockback</param>
            <param name="playerNum">Player number for damage ownership</param>
            <param name="forceTumble">Whether to force units to tumble when knocked back</param>
            <param name="knockSelf">Whether the damage sender can knock itself back</param>
            <param name="knockFriendlies">Whether to knock back friendly units</param>
            <returns>Number of units killed by the explosion</returns>
        </member>
        <member name="M:Map.FivePointPalmExplodingHeartTechnique(NetworkedUnit,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Applies the legendary Five Point Palm Exploding Heart Technique to units and certain
                destructible objects. This martial arts move plants a delayed explosion effect that
                triggers after a countdown, inspired by Kill Bill. Also affects DamageRelay objects,
                BossBlockPieces, and BossBlockRocketBatteries.
            </summary>
            <param name="damageSender">The networked unit performing the technique (must be networked for proper synchronization).</param>
            <param name="playerNum">The player number who performed the technique.</param>
            <param name="damage">The initial damage dealt by the palm strike.</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the palm strike center point.</param>
            <param name="y">The Y coordinate of the palm strike center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="penetrates">If true, the technique continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <returns>True if at least one unit or object was affected, false otherwise.</returns>
        </member>
        <member name="M:Map.FreezeUnits(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Freezes units within range of a position. Units that can be frozen will be frozen
                for the specified duration. Units that cannot be frozen will take 8 freeze damage
                instead. Returns true if any units were affected.
            </summary>
            <param name="firedBy">The object causing the freeze effect</param>
            <param name="playerNum">Player number performing the freeze</param>
            <param name="x">X position of the freeze center</param>
            <param name="y">Y position of the freeze center</param>
            <param name="range">Radius of the freeze effect</param>
            <param name="freezeTime">Duration of the freeze in seconds</param>
            <returns>True if at least one unit was frozen or damaged, false otherwise</returns>
        </member>
        <member name="M:Map.GeLivingtUnit(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Gets the first living, non-stealthed unit within the specified rectangular area. The
                method name contains a typo (should be GetLivingUnit) but is preserved for
                compatibility. Uses slightly expanded hit detection based on unit size for more
                forgiving targeting.
            </summary>
            <param name="playerNum">The player number searching for units, used for team filtering.</param>
            <param name="xRange">The horizontal radius from the center point for detection.</param>
            <param name="yRange">The vertical radius from the center point for detection.</param>
            <param name="x">The X coordinate of the search center point.</param>
            <param name="y">The Y coordinate of the search center point.</param>
            <returns>The first eligible living unit found, or null if none found.</returns>
        </member>
        <member name="M:Map.GetFirstUnit(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
                Finds the first unit within range that matches the specified criteria. Used for
                targeted abilities that need to select a single unit, such as grappling hooks or
                homing projectiles.
            </summary>
            <param name="damageSender">The object searching for a unit (used for team checks).</param>
            <param name="playerNum">The player number performing the search, used for team filtering.</param>
            <param name="range">The square radius from the center point for detection.</param>
            <param name="x">The X coordinate of the search center point.</param>
            <param name="y">The Y coordinate of the search center point.</param>
            <param name="onlyLiving">If true, only finds living units; if false, includes dead units.</param>
            <param name="includeSuicide">If true, includes suicide bomber units even if dead.</param>
            <param name="alreadyHitUnits">List of units to exclude from the search.</param>
            <returns>The first eligible unit found, or null if none found.</returns>
        </member>
        <member name="M:Map.GetNearbyMook(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
                Finds the nearest enemy mook in a specified horizontal direction. Uses Manhattan
                distance and filters by direction, health status, and unit type.
            </summary>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <param name="direction">The horizontal direction to search (1 for right, -1 for left)</param>
            <param name="canBeDead">Whether to include dead mooks in the search</param>
            <returns>The nearest mook matching criteria, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearbyMookVertical(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
                Finds the nearest enemy mook in a specified vertical direction. Uses Manhattan
                distance and filters by direction, health status, and unit type.
            </summary>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <param name="direction">The vertical direction to search (1 for up, -1 for down)</param>
            <param name="canBeDead">Whether to include dead mooks in the search</param>
            <returns>The nearest mook matching criteria, or null if none found</returns>
        </member>
        <member name="M:Map.HeadShotUnit(UnityEngine.MonoBehaviour,Unit,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Boolean,System.Single,System.Single)">
            <summary>
                Applies headshot damage to a unit with special headshot mechanics. Checks damage
                policies before applying damage and handles knockback separately.
            </summary>
            <param name="damageSender">The object that caused the headshot</param>
            <param name="unit">The unit to headshot</param>
            <param name="damage">The amount of damage to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="direction">The direction of the hit (-1 for left, 1 for right)</param>
            <param name="knock">Whether to apply knockback to the unit</param>
            <param name="xHit">The X position where the headshot hit</param>
            <param name="yHit">The Y position where the headshot hit</param>
        </member>
        <member name="M:Map.HitAllLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Damages all living units regardless of team within a rectangular area. Used for
                environmental hazards or attacks that damage everyone, including allies, except the
                damage sender's own player number.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number who caused the damage (units with this playerNum are immune).</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitAllLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
                Damages all living units regardless of team, tracking which units have been hit.
                Allows for damage effects that need to avoid hitting the same unit multiple times
                across multiple calls.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number who caused the damage (units with this playerNum are immune).</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="alreadyHit">List of units to skip and to add newly hit units to.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitClosestUnit(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Finds and damages the closest unit within range, checking line of sight. Prioritizes
                living units over dead ones but can optionally hit dead units if no living targets
                exist.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="playerNum">The player number of the attacker (determines which units are enemies)</param>
            <param name="damage">The amount of damage to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="knock">Whether to apply knockback</param>
            <param name="canGib">If false, dead units receive 0 damage (prevents gibbing)</param>
            <param name="firedLocally">Whether this damage was initiated locally (unused in this method)</param>
            <param name="checkIfUnitIsLocallyOwned">Whether to check unit ownership (unused in this method)</param>
            <param name="hitDead">Whether dead units can be targeted (default true)</param>
            <returns>The unit that was hit, or null if no valid target was found</returns>
        </member>
        <member name="M:Map.HitDeadUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Damages only dead units (corpses) within a square area. Used for attacks that can
                destroy or further damage corpses, such as explosives that gib bodies or effects
                that prevent resurrection.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="damage">The amount of damage to inflict on each corpse.</param>
            <param name="damageType">The type of damage being inflicted (affects corpse reactions).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to corpses.</param>
            <param name="yI">The vertical impulse force to apply to corpses.</param>
            <param name="penetrates">If true, damage continues through corpses; if false, stops at the first corpse hit.</param>
            <param name="knock">Whether to apply knockback force to corpses.</param>
            <returns>True if at least one corpse was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitHellUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Damages only hell-type enemy units within a square area. Used for attacks that
                specifically target demonic enemies while ignoring regular units, with options to
                filter by unit state and position.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="ignoreDeadUnits">If true, only damages living units.</param>
            <param name="onlyGroundUnits">If true, only hits units that are on the ground. Default is false.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is true.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitLivingHeroes(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Selectively damages either heroes or non-hero units based on the hitHeroes
                parameter. Used for attacks that need to differentiate between player characters and
                enemies, such as mind control effects or faction-specific attacks.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="hitHeroes">If true, only damages hero units; if false, only damages non-hero units.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Damages only living units within a square area. This overload uses equal horizontal
                and vertical range for a square hit area, commonly used for explosions and
                area-of-effect attacks.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is true.</param>
            <param name="onlyGroundUnits">If true, only hits units that are on the ground. Default is false.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Damages only living units within a rectangular area. Provides separate control over
                horizontal and vertical hit ranges, useful for attacks with non-square areas of
                effect.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is true.</param>
            <param name="onlyGroundUnits">If true, only hits units that are on the ground. Default is false.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Damages units within a square range using basic hit detection. Convenience overload
                that delegates to the canGib version with gibbing enabled by default.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="avoidID">Unit to avoid damaging (unless it catches friendly bullets)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The hit detection range (used for both horizontal and vertical axes)</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">Whether damage penetrates through units</param>
            <param name="knock">Whether to apply knockback</param>
            <returns>True if any units were hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Damages units within a square range with gibbing control. Convenience overload that
                delegates to the rectangular version with equal x/y ranges and headshots enabled by
                default.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="avoidID">Unit to avoid damaging (unless it catches friendly bullets)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The base damage amount</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The damage range (used for both axes)</param>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">Whether damage penetrates through units</param>
            <param name="knock">Whether to apply knockback</param>
            <param name="canGib">Whether units can be gibbed when killed</param>
            <returns>True if any units were hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Damages units within a rectangular area with separate x/y ranges and headshot
                control. Convenience overload that delegates to the full implementation with default
                blood color tracking and no hit unit list.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="avoidID">Unit to avoid damaging (unless it catches friendly bullets)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="canHeadShot">Whether this damage can trigger headshots for increased damage (default: true)</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,BloodColor@,System.Collections.Generic.List{Unit},System.Boolean)">
            <summary>
                Core implementation of HitUnits with full parameter control. This is the main
                implementation that handles all unit damage logic, with options for blood color
                tracking, hit unit lists, and circular vs rectangular damage areas. Most other
                HitUnits overloads delegate to this method.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="avoidID">Optional unit to exclude from damage, unless they have CatchFriendlyBullets enabled.</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="canHeadShot">Whether this damage can trigger headshots for increased damage.</param>
            <param name="bloodColor">Output parameter that returns the blood color of the last unit hit.</param>
            <param name="hitUnits">Optional list to populate with all units that were hit by this damage.</param>
            <param name="onlyDamageInRadius">If true, applies damage only to units within a circular radius instead of rectangular area.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
                Damages units along a line segment between two points. Standalone implementation for
                line-based damage detection, useful for beam weapons, laser attacks, or linear area
                effects. Always applies upward knockback.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="avoidID">Unit to avoid damaging (currently not implemented in this overload)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="startPos">The starting position of the line segment</param>
            <param name="endPos">The ending position of the line segment</param>
            <param name="width">The width of the line for hit detection (perpendicular distance from line)</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit},System.Boolean,System.Boolean)">
            <summary>
                Damages units within a square range with hit tracking and corpse filtering.
                Convenience overload that delegates to the corpse damage version with equal damage
                values for living and dead units.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitUnits">List of units to skip and to add newly hit units to.</param>
            <param name="ignoreDeadUnits">If true, only damages living units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit},System.Boolean)">
            <summary>
                Damages units with separate damage values for living and dead units. Convenience
                overload that delegates to the rectangular version with equal x/y ranges. Useful for
                explosions that need different corpse damage.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on living units</param>
            <param name="corpseDamage">The amount of damage to inflict on dead units (corpses)</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitUnits">List of units to skip and to add newly hit units to.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots (default: false)</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit},System.Boolean,System.Boolean)">
            <summary>
                Core implementation for damage with separate corpse damage values and rectangular
                areas. This is a standalone implementation (not a delegation) that handles all the
                damage logic for cases where living and dead units need different damage amounts.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on living units.</param>
            <param name="corpseDamage">The amount of damage to inflict on dead units (corpses).</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitUnits">List of units to skip and to add newly hit units to.</param>
            <param name="ignoreDeadUnits">If true, only damages living units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{BroforceObject},System.Boolean)">
            <summary>
                Damages units with BroforceObject list tracking for mixed object types. Standalone
                implementation that tracks hit objects as BroforceObject instead of Unit, allowing
                for more flexible hit tracking across different game object types.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on living units.</param>
            <param name="corpseDamage">The amount of damage to inflict on dead units (corpses).</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitObjects">List of BroforceObjects to skip and to add newly hit units to.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is false.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Damages all units within a square range regardless of team. Convenience overload
                that delegates to the rectangular version with equal x/y ranges. No avoidID
                parameter means all units can be damaged.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The hit detection range (used for both horizontal and vertical axes)</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Damages all units within a rectangular area regardless of team. Standalone
                implementation without avoidID that hits all units in range. Includes special
                penetration logic that reduces penetration chance based on unit mass.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="xRange">The horizontal range of the damage area</param>
            <param name="yRange">The vertical range of the damage area</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,BloodColor@)">
            <summary>
                Damages all units within a square range and tracks blood color. Convenience overload
                that delegates to the rectangular version with equal x/y ranges. Used when visual
                blood effects are needed.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The range in both X and Y directions</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <param name="bloodColor">Output parameter that returns the blood color of the last unit hit</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,BloodColor@)">
            <summary>
                Damages all units within a rectangular area and tracks blood color. Standalone
                implementation without team filtering that includes blood color tracking for visual
                effects and special penetration reduction based on unit mass.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="xRange">The horizontal range of the damage area</param>
            <param name="yRange">The vertical range of the damage area</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <param name="bloodColor">Output parameter that will contain the blood color of the last hit unit</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnitsWithArrow(UnityEngine.MonoBehaviour,Arrow,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Specialized hit detection for arrow projectiles that destroys the arrow on impact.
                Handles headshot detection and applies appropriate damage based on hit location,
                simulating realistic arrow physics where the projectile stops on impact.
            </summary>
            <param name="damageSender">The object that is causing the damage. (typically the bow or crossbow).</param>
            <param name="arrow">The arrow projectile instance that will be destroyed on hit.</param>
            <param name="playerNum">The player number who shot the arrow, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on hit.</param>
            <param name="damageType">The type of damage being inflicted (typically Bullet for arrows).</param>
            <param name="xRange">The horizontal hit detection range from the arrow's position.</param>
            <param name="yRange">The vertical hit detection range from the arrow's position.</param>
            <param name="x">The X coordinate of the arrow.</param>
            <param name="y">The Y coordinate of the arrow.</param>
            <param name="xI">The horizontal velocity/force of the arrow for knockback.</param>
            <param name="yI">The vertical velocity/force of the arrow for knockback.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <returns>Always returns false after processing hits (arrow is destroyed on impact).</returns>
        </member>
        <member name="M:Map.InseminateUnits(AlienFaceHugger,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attempts to implant alien parasites into eligible units within range. Used by
                AlienFaceHugger enemies to infect heroes with chest-bursting aliens. Only affects
                non-replicant heroes that can be inseminated.
            </summary>
            <param name="inseminator">The AlienFaceHugger performing the insemination.</param>
            <param name="playerNum">The player number of the face hugger, used for team damage rules.</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the insemination attempt center point.</param>
            <param name="y">The Y coordinate of the insemination attempt center point.</param>
            <param name="xI">The horizontal velocity of the face hugger (affects insemination angle).</param>
            <param name="yI">The vertical velocity of the face hugger (affects insemination angle).</param>
            <returns>True if a unit was successfully inseminated, false otherwise.</returns>
        </member>
        <member name="M:Map.KnockAndDamageUnit(UnityEngine.MonoBehaviour,Unit,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
                Applies knockback and damage to a unit. This is a convenience overload that calls
                the more detailed version with default hit position parameters (-100, -100).
            </summary>
            <param name="damageSender">The object causing the damage</param>
            <param name="unit">The unit to knock and damage</param>
            <param name="damage">Amount of damage to apply</param>
            <param name="damageType">Type of damage being applied</param>
            <param name="xI">Horizontal knockback velocity</param>
            <param name="yI">Vertical knockback velocity</param>
            <param name="direction">Direction of the attack (-1 for left, 1 for right, 0 for no specific direction)</param>
            <param name="knock">Whether to apply knockback to the unit</param>
        </member>
        <member name="M:Map.KnockAndDamageUnit(UnityEngine.MonoBehaviour,Unit,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>
                Applies knockback and damage to a unit with full control over hit position. Handles
                damage policy validation to determine if damage should be applied based on the
                relationship between sender and target. Validates knockback velocity values to
                prevent NaN issues.
            </summary>
            <param name="damageSender">The object causing the damage</param>
            <param name="unit">The unit to knock and damage</param>
            <param name="damage">Amount of damage to apply</param>
            <param name="damageType">Type of damage being applied</param>
            <param name="xI">Horizontal knockback velocity (will be set to 0 if NaN)</param>
            <param name="yI">Vertical knockback velocity (will be set to 0 if NaN)</param>
            <param name="direction">Direction of the attack (-1 for left, 1 for right, 0 for no specific direction)</param>
            <param name="knock">Whether to apply knockback to the unit</param>
            <param name="hitX">X position where the hit occurred</param>
            <param name="hitY">Y position where the hit occurred</param>
            <param name="sendPosAndVelocityAcrossNetwork">Whether to synchronize position and velocity (networking functionality excluded for modding)</param>
        </member>
        <member name="M:Map.KnockMooks(UnityEngine.MonoBehaviour,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Applies knockback to enemy units (mooks) without dealing damage. Used for crowd
                control effects that push enemies away without harming them, such as sonic booms or
                force pushes.
            </summary>
            <param name="damageSender">The object that initiated the knockback.</param>
            <param name="damageType">The type of force being applied (affects knockback behavior).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the knockback center point.</param>
            <param name="y">The Y coordinate of the knockback center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="penetrates">If true, knockback continues through units; if false, stops at the first unit hit.</param>
            <param name="livingUnits">If true, only affects living units; if false, affects all units.</param>
            <param name="onlyGroundUnits">If true, only affects units on the ground. Default is true.</param>
            <returns>True if at least one unit was knocked back, false otherwise.</returns>
        </member>
        <member name="M:Map.KnockUnits(UnityEngine.MonoBehaviour,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Applies knockback to all units (not just enemies) without dealing damage. More
                general version of KnockMooks that affects any unit regardless of allegiance, used
                for universal force effects.
            </summary>
            <param name="damageSender">The object that initiated the knockback.</param>
            <param name="damageType">The type of force being applied (affects knockback behavior).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the knockback center point.</param>
            <param name="y">The Y coordinate of the knockback center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="penetrates">If true, knockback continues through units; if false, stops at the first unit hit.</param>
            <param name="livingUnits">If true, only affects living units; if false, affects all units.</param>
            <param name="onlyGroundUnits">If true, only affects units on the ground. Default is true.</param>
            <returns>True if at least one unit was knocked back, false otherwise.</returns>
        </member>
        <member name="M:Map.MakeAllBlocksUltraTough">
            <summary>
                Sets all blocks in the map to have extremely high health, making them virtually
                indestructible.
            </summary>
            <remarks>
                This method iterates through all blocks in the map grid and sets their health to
                1,000,000. It's typically called before the level-ending explosion sequence when
                destruction recording is enabled, ensuring that the terrain remains intact for
                replay or recording purposes despite the visual explosion effects. Only non-null
                blocks are affected.
            </remarks>
        </member>
        <member name="M:Map.MakeLevelEndExplosion(UnityEngine.Vector3)">
            <summary>
                Creates a single explosion at the specified position using a pooled explosive
                object.
            </summary>
            <param name="pos">The world position where the explosion should occur</param>
            <remarks>
                This method pulls an explosive from the LevelEndExplosionBank pool, resets its
                state, positions it, and triggers the explosion. The explosive is moved from the
                bank to the active list for tracking. If the bank is empty,
                PopulateLevelEndExplosionBank() is called to refill it. This pooling system ensures
                smooth performance during the rapid explosion sequence at level end.
            </remarks>
        </member>
        <member name="M:Map.PopulateLevelEndExplosionBank">
            <summary>
                Pre-allocates a pool of hidden explosive objects for use in the level-ending
                explosion sequence.
            </summary>
            <remarks>
                This method creates a bank of 10 HiddenExplosives instances that are reused during
                the level-end explosion sequence. The explosives are instantiated from the
                hiddenExplosivePrefabReference asset, deactivated, and marked with DontDestroyOnLoad
                to persist across scenes. This pooling approach avoids the performance cost of
                instantiating explosives during the intense ending sequence.
            </remarks>
        </member>
        <member name="M:Map.RegisterTargetableObject(TargetableObject)">
            <summary>
                Registers an object that can be targeted by AI units, homing projectiles, or
                auto-aim systems. Targetable objects include enemies, destructible props, or any
                gameplay element that can be selected as a valid target for attacks.
            </summary>
            <param name="target">The TargetableObject to register for targeting systems.</param>
        </member>
        <member name="M:Map.RemoveTargetableObject(TargetableObject)">
            <summary>
                Removes an object from the targetable tracking system, typically when it is
                destroyed or should no longer be considered a valid target. This prevents AI and
                homing projectiles from continuing to target defunct objects.
            </summary>
            <param name="target">The TargetableObject to remove from targeting consideration.</param>
        </member>
        <member name="M:Map.ReviveDeadUnits(System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Boolean,TestVanDammeAnim,System.Boolean)">
            <summary>
                Attempts to revive dead units or remove acid from acid-covered units within a
                circular range. Returns true if any units were successfully revived.
            </summary>
            <param name="x">X position of the revival center</param>
            <param name="y">Y position of the revival center</param>
            <param name="range">Radius within which to revive units</param>
            <param name="playerNum">Player number to assign to revived units</param>
            <param name="maxReviveCount">Maximum number of units to revive</param>
            <param name="isPlayerControlled">Whether revived units should be player-controlled</param>
            <param name="reviveSource">The source object performing the revival</param>
            <param name="reviveBros">Whether hero units (Bros) can be revived (default true)</param>
            <returns>True if at least one unit was successfully revived, false otherwise</returns>
        </member>
        <member name="M:Map.RollOntoUnits(System.Int32,System.Int32,System.Int32)">
            <summary>
                Causes units at the specified grid position to be rolled onto, applying the RollOnto
                effect to all non-heavy units in the area.
            </summary>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
            <param name="direction">Direction of the roll to apply to affected units</param>
        </member>
        <member name="M:Map.StartLevelEndExplosions">
            <summary>
                Begins the local level-ending explosion sequence on this client.
            </summary>
            <remarks>
                This private method is called via RPC from StartLevelEndExplosionsOverNetwork(). It
                sets the explosionsHaveStarted flag and starts the DoLevelEndExplosions coroutine
                which continuously creates explosions across the screen. This method ensures the
                explosion sequence only starts once per level completion.
            </remarks>
        </member>
        <member name="M:Map.StartLevelEndExplosionsOverNetwork">
            <summary>
                Initiates the level-ending explosion sequence across all networked clients.
            </summary>
            <remarks>
                This method checks if explosions have already started to prevent duplicate
                triggering. If the map data is set to record destruction, it first makes all blocks
                ultra-tough to preserve the terrain structure during the ending sequence. The method
                then sends an RPC to all clients to synchronize the explosion start. The actual
                explosion sequence is handled by StartLevelEndExplosions() on each client.
            </remarks>
        </member>
        <member name="M:Map.StunUnits(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Stuns all enemy units within range of a position. Only affects units that are
                enemies of the specified player number.
            </summary>
            <param name="playerNum">Player number performing the stun</param>
            <param name="x">X position of the stun center</param>
            <param name="y">Y position of the stun center</param>
            <param name="range">Radius of the stun effect</param>
            <param name="stunTime">Duration of the stun in seconds</param>
        </member>
        <member name="M:Map.TearGasUnits(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Applies tear gas effect to all enemy units within range. Tear gas causes units to be
                temporarily incapacitated.
            </summary>
            <param name="playerNum">Player number applying the tear gas</param>
            <param name="x">X position of the tear gas center</param>
            <param name="y">Y position of the tear gas center</param>
            <param name="range">Radius of the tear gas effect</param>
            <param name="tearGasTime">Duration of the tear gas effect in seconds (default 9)</param>
        </member>
        <member name="M:Map.WhipUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Single@)">
            <summary>
                Specialized damage method for whip-like attacks that deal variable damage based on
                distance. Creates visual effects and applies damage that scales with the unit's
                position relative to the whip's reach, simulating the physics of a whip strike.
            </summary>
            <param name="damageSender">The object that is causing the damage. (typically the whip weapon).</param>
            <param name="avoidID">Optional unit to exclude from damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The base damage amount, which will be scaled by distance.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal reach of the whip attack.</param>
            <param name="yRange">The vertical reach of the whip attack.</param>
            <param name="whipDirection">The direction of the whip strike (1 for right, -1 for left).</param>
            <param name="x">The X coordinate of the whip's origin point.</param>
            <param name="y">The Y coordinate of the whip's origin point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="maxDamageM">Output parameter that returns the maximum damage multiplier achieved during the whip strike.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:Map.enemyDeathListeners">
            <summary>
                List of triggers that respond to enemy deaths. Listeners are registered via
                RegisterEnemyDeathListener and removed via RemoveEnemyDeathListener. Used for
                mission objectives, wave spawning, and event triggering based on enemy elimination.
                Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.explosionsHaveStarted">
            <summary>
                Tracks whether level end explosions have been initiated. Set to true when
                StartLevelEndExplosions is called to prevent multiple coroutines from running the
                continuous explosion effects. Used to ensure the explosion sequence only starts once
                per level.
            </summary>
        </member>
        <member name="F:Map.nearestDist">
            <summary>
                Temporary storage for the nearest distance found during proximity searches. Used by
                various nearest entity search methods (GetNearestUnit, GetNearestCheckpoint, etc.)
                to track the shortest distance while iterating through candidates. Optimizes
                performance by avoiding repeated distance allocations.
            </summary>
        </member>
        <member name="F:Map.targetableObjects">
            <summary>
                List of objects that can be targeted by AI and auto-aim systems. Objects are
                registered via RegisterTargetableObject and removed via RemoveTargetableObject. Used
                by GetNearestTargetableObject for finding valid targets within range, considering
                player allegiance and boss target priorities. Initialized in Awake() and set to null
                in OnDestroy().
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:Map.AddSlime(SlimeGroundCover,System.Int32,System.Int32,System.Int32,DirectionEnum)">
            <summary>
                Adds slime to a block surface in the specified direction if the block is solid, has
                an open face, and isn't immune to slime. Creates new slime or adds to existing slime
                coverage.
            </summary>
            <param name="slimePrefab">The SlimeGroundCover prefab to instantiate if no slime exists on the surface.</param>
            <param name="slimeAmount">The amount of slime damage/thickness to add to the surface.</param>
            <param name="collumn">The column index of the block to add slime to.</param>
            <param name="row">The row index of the block to add slime to.</param>
            <param name="direction">The direction face of the block where slime should be added (Up, Down, Left, or Right).</param>
            <returns>True if slime was successfully added; false if the block is invalid, immune to slime, or doesn't have an open face.</returns>
            <remarks>
                Slime can only be added to solid blocks with an adjacent empty space. If slime
                already exists on the surface, the amount is added to it. Otherwise, a new
                SlimeGroundCover instance is created.
            </remarks>
        </member>
        <member name="M:Map.AddTaggedObject(UnityEngine.GameObject,System.String)">
            <summary>
                Registers a GameObject with a string tag for later retrieval. Tags are
                case-insensitive and stored in uppercase for consistent lookup.
            </summary>
            <param name="obj">The GameObject to register with the specified tag.</param>
            <param name="tag">The string identifier to associate with the object. Must not be null or empty.</param>
            <remarks>
                Used by the trigger and scripting system to reference specific objects in the map.
                Tagged objects can be retrieved, damaged, or manipulated through other tag-based
                methods.
            </remarks>
        </member>
        <member name="M:Map.CallFakeHelicopter(UnityEngine.Vector2,System.Single)">
            <summary>
                Summons a fake helicopter to the specified position after a delay. The fake
                helicopter is a visual-only helicopter used for cinematic sequences that doesn't
                interact with gameplay.
            </summary>
            <param name="position">The target position for the helicopter</param>
            <param name="delay">The delay in seconds before the helicopter appears</param>
            <remarks>
                Creates a single shared instance of HelicopterFake if one doesn't exist. The fake
                helicopter is typically used for background effects or scripted sequences where a
                full helicopter entity isn't needed.
            </remarks>
        </member>
        <member name="M:Map.CheckCheckPoint(System.Single,System.Single,System.Single,TestVanDammeAnim)">
            <summary>
                Checks and activates checkpoints near a moving character. Considers character
                velocity for predictive checkpoint activation, triggers perks and time bonuses.
            </summary>
            <param name="xI">The character's horizontal velocity</param>
            <param name="x">The character's X coordinate</param>
            <param name="y">The character's Y coordinate</param>
            <param name="activatingCharacter">The character activating the checkpoint</param>
            <returns>True if a visible checkpoint was newly activated, false otherwise</returns>
        </member>
        <member name="M:Map.CheckPersistBlocksPastLevelLoad">
            <summary>
                Checks whether blocks should be persisted after a level load and either maintains or
                destroys them accordingly. This method is called after level transitions to handle
                the persistence state.
            </summary>
            <remarks>
                Only processes persistence if loading time optimizations are active. Sets
                hasPersistedPastLevelLoad to true if persistence is enabled, otherwise calls
                DestroyPersistantBlocks to clear any persisted blocks.
            </remarks>
        </member>
        <member name="M:Map.ClearPersistenBlocksInstant">
            <summary>
                Immediately clears all persisted blocks without waiting for a level transition. This
                provides a way to force-clear persistence state during gameplay.
            </summary>
            <remarks>
                Resets the hasPersistedPastLevelLoad flag and calls DestroyPersistantBlocks to
                remove all persisted blocks immediately.
            </remarks>
        </member>
        <member name="M:Map.ConstrainToBlocks(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Boolean@,System.Boolean@,System.Boolean)">
            <summary>
                Constrains movement to prevent objects from passing through solid blocks,
                calculating collision responses and bounce directions. Handles multi-frame movements
                by breaking them into smaller steps.
            </summary>
            <param name="obj">The MonoBehaviour object being constrained (used for special handling of grenades).</param>
            <param name="x">The current X position of the object.</param>
            <param name="y">The current Y position of the object.</param>
            <param name="size">The collision radius of the object.</param>
            <param name="xIT">Input/Output: The attempted X movement. Modified to valid movement amount on collision.</param>
            <param name="yIT">Input/Output: The attempted Y movement. Modified to valid movement amount on collision.</param>
            <param name="bounceX">Output: Set to true if horizontal movement should be reversed (bounce).</param>
            <param name="bounceY">Output: Set to true if vertical movement should be reversed (bounce).</param>
            <param name="strictlyGround">If true, only collides with ground layer; if false, includes other collision layers.</param>
            <returns>True if a collision occurred and movement was constrained; false if movement is unobstructed.</returns>
            <remarks>
                Handles large movements (&gt;16 units) by recursively breaking them into smaller
                steps. Checks collisions at destination position and adjusts movement to stop at
                block boundaries.
            </remarks>
        </member>
        <member name="M:Map.Create4AmmoAndRevives(UnityEngine.Vector3,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a 2x2 arrangement of ammunition and revival crates at the specified
                position. The arrangement includes two ammo crates (top), one revive crate
                (bottom-left), and one damage crate (bottom-right).
            </summary>
            <param name="pos">The position for the top-left crate</param>
            <param name="collumn">The column index for block array placement</param>
            <param name="row">The row index for block array placement</param>
            <param name="setupBlocks">Whether to run block setup logic (connections to adjacent blocks)</param>
            <remarks>
                Sets the active theme to jungle theme for crate selection. Each crate is properly
                registered in the blocks array, networked, and initialized. If setupBlocks is true,
                establishes connections to adjacent blocks and runs FirstFrame initialization.
            </remarks>
        </member>
        <member name="M:Map.CreateExitPortal(UnityEngine.Vector2)">
            <summary>
                Creates a hero level exit portal at the specified position, typically used for level
                completion.
            </summary>
            <param name="position">The base position where the portal should be created.</param>
            <remarks>
                The portal is instantiated at an offset position (x+16, y+112) from the provided
                coordinates to properly align with the game's grid system. The portal is registered
                with the networking system using a deterministic ID for multiplayer synchronization.
            </remarks>
        </member>
        <member name="M:Map.CreateExitPortal(UnityEngine.Vector2)">
            <summary>
                Creates a hero level exit portal at the specified position. The portal is positioned
                with a vertical offset of 112 units and a horizontal offset of 16 units from the
                provided coordinates.
            </summary>
            <param name="position">The base position where the portal should be created</param>
            <remarks>
                The portal is instantiated from the exitPortalPrefabReference asset and registered
                with the game's networking system using a deterministic network ID. This ensures the
                portal is properly synchronized across all clients in multiplayer sessions.
            </remarks>
        </member>
        <member name="M:Map.CreateRemoteControlCar(System.Single,System.Single)">
            <summary>
                Creates and networks a remote control explosive car at the specified position.
            </summary>
            <param name="x">The x-coordinate for spawning the car</param>
            <param name="y">The y-coordinate for spawning the car</param>
            <returns>The created RemoteControlExplosiveCar instance</returns>
            <remarks>
                This method instantiates a networked remote control car from the
                remoteCarPrefabReference asset. The car is created at the specified coordinates with
                identity rotation. The Networking.Instantiate call ensures the car is properly
                synchronized across all clients. These cars are typically used as player-controlled
                explosive devices in gameplay.
            </remarks>
        </member>
        <member name="M:Map.CrossProduct(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Calculates the 2D cross product (scalar) of vectors formed by three points.
            </summary>
            <param name="pointA">The origin point for both vectors</param>
            <param name="pointB">The end point of the first vector</param>
            <param name="pointC">The end point of the second vector</param>
            <returns>The scalar cross product of vectors AB and AC</returns>
            <remarks>
                This method computes the 2D cross product (z-component) of vectors from point A to
                points B and C. The result's magnitude represents twice the area of the triangle
                formed by the three points, and its sign indicates the winding order (clockwise or
                counterclockwise). This is used in geometric calculations, particularly for
                determining which side of a line a point lies on and in distance calculations. Note
                the unusual array notation (e.g., pointB[0]) instead of pointB.x, which may be a
                decompilation artifact.
            </remarks>
        </member>
        <member name="M:Map.DamageBackground(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Damages background and foreground blocks within a circular radius. This method is
                used for explosive damage that affects the destructible terrain behind the main play
                area.
            </summary>
            <param name="damageSender">The MonoBehaviour that is causing the damage (used for damage attribution)</param>
            <param name="damage">The amount of damage to apply to blocks</param>
            <param name="radius">The radius of the damage effect in world units</param>
            <param name="x">The X coordinate of the damage center</param>
            <param name="y">The Y coordinate of the damage center</param>
            <remarks>
                Calculates which grid cells fall within the damage radius and applies damage to both
                background and foreground blocks. Uses MapController.Damage_Networked to ensure
                damage is synchronized across all clients. The damage type is specifically set to
                DestroyBackground.
            </remarks>
        </member>
        <member name="M:Map.DamageDoodadByTag(System.String,System.Int32)">
            <summary>
                Damages all doodads (environmental objects) with the specified tag. Handles both
                Unit components and generic damage message receivers.
            </summary>
            <param name="tag">The tag identifying which doodads to damage (case-insensitive).</param>
            <param name="damage">The amount of damage to apply to each matching doodad.</param>
            <returns>True if at least one doodad with the tag was found (even if it couldn't be damaged); false if no matching doodads exist.</returns>
            <remarks>
                Iterates through all doodads in MapData.DoodadList with matching tags. For objects
                with Unit components, calls the Damage method directly. For others, sends a "Damage"
                message with a DamageObject parameter.
            </remarks>
        </member>
        <member name="M:Map.DestroyPersistantBlocks">
            <summary>
                Destroys all persisted blocks and clears the persistence system. This removes both
                foreground and background persistent blocks and their container GameObject.
            </summary>
            <remarks>
                Iterates through all persistent block arrays and destroys each block's GameObject
                before clearing the arrays and destroying the persistent container. Also resets the
                hasPersistedPastLevelLoad flag.
            </remarks>
        </member>
        <member name="M:Map.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Calculates the Euclidean distance between two 2D points using manual calculation.
                This method provides a basic distance calculation used internally for geometric
                operations.
            </summary>
            <param name="pointA">The first point in 2D space</param>
            <param name="pointB">The second point in 2D space</param>
            <returns>The Euclidean distance between the two points</returns>
            <remarks>
                This method manually calculates distance using the formula: sqrt((x2-x1)² +
                (y2-y1)²). It's primarily used by the LineToPointDistance2D method for calculating
                perpendicular distances from points to line segments.
            </remarks>
        </member>
        <member name="M:Map.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Calculates the Euclidean distance between two 2D points using the standard distance
                formula.
            </summary>
            <param name="pointA">The first point in 2D space.</param>
            <param name="pointB">The second point in 2D space.</param>
            <returns>The distance between the two points as a float value.</returns>
            <remarks>
                This is a utility method used internally for various geometric calculations in the
                map system, particularly for line-to-point distance calculations. It uses the
                standard formula: sqrt((x2-x1)^2 + (y2-y1)^2).
            </remarks>
        </member>
        <member name="M:Map.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Calculates the Euclidean distance between two 2D points using manual calculation.
                This method provides a basic distance calculation used internally for geometric
                operations.
            </summary>
            <param name="pointA">The first point in 2D space</param>
            <param name="pointB">The second point in 2D space</param>
            <returns>The Euclidean distance between the two points</returns>
            <remarks>
                This method manually calculates distance using the formula: sqrt((x2-x1)² +
                (y2-y1)²). It's primarily used by the LineToPointDistance2D method for calculating
                perpendicular distances from points to line segments.
            </remarks>
        </member>
        <member name="M:Map.DoesForegroundBlockHaveBackground(GroundType)">
            <summary>
                Determines if a foreground block type should have a background layer rendered behind
                it. Most solid blocks have backgrounds, while bridges, ladders, and decorative
                elements do not.
            </summary>
            <param name="foregroundType">The ground type to check.</param>
            <returns>True if this ground type should have a background; false for transparent or pass-through blocks like ladders, bridges, and decorative elements.</returns>
        </member>
        <member name="M:Map.DoesForegroundBlockHaveBackground(TerrainType)">
            <summary>
                Determines if a foreground terrain type should have a background layer rendered
                behind it. Used during map generation to determine background placement.
            </summary>
            <param name="foregroundType">The terrain type to check.</param>
            <returns>True if this terrain type should have a background; false for transparent or pass-through terrain like ladders, bridges, and air.</returns>
        </member>
        <member name="M:Map.DontPersistBlocks">
            <summary>
                Disables block persistence for the next level load. This prevents blocks from being
                maintained between level transitions, ensuring a fresh map state.
            </summary>
            <remarks>
                Sets the persistPastLevelLoad flag to false. This method should be called when you
                want to ensure all blocks are cleared and recreated on the next level load,
                typically when transitioning to a completely different area.
            </remarks>
        </member>
        <member name="M:Map.DotProduct(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Calculates the dot product of vectors formed by three points, used for angle
                calculations.
            </summary>
            <param name="pointA">The first point defining the start of the first vector</param>
            <param name="pointB">The second point, end of first vector and start of second vector</param>
            <param name="pointC">The third point defining the end of the second vector</param>
            <returns>The dot product of vectors AB and BC</returns>
            <remarks>
                This helper method computes the dot product between two vectors formed by three
                sequential points. It creates vector AB (from A to B) and vector BC (from B to C),
                then returns their dot product. This is commonly used in distance calculations and
                determining angles between line segments, particularly in the line-to-point distance
                calculations used elsewhere in the map system.
            </remarks>
        </member>
        <member name="M:Map.FindHoleToJumpThroughAndAppear(System.Single,System.Single,System.Single@,System.Single@,System.Int32@)">
            <summary>
                Searches for a suitable floor opening where a character can jump through and appear
                from below. Used for dramatic entrance animations and spawn mechanics.
            </summary>
            <param name="xPos">The X coordinate around which to search for jump-through points.</param>
            <param name="yPos">The Y coordinate around which to search for jump-through points.</param>
            <param name="characterX">When successful, contains the X coordinate where the character should appear (centered in the empty column).</param>
            <param name="characterY">When successful, contains the Y coordinate where the character should appear (one block below the floor).</param>
            <param name="jumpDirection">When successful, contains the horizontal direction to jump: 1 for right, -1 for left.</param>
            <returns>True if a suitable jump-through location was found; false otherwise.</returns>
            <remarks>
                Searches within 9 columns on each side and up to 3 rows above. A valid location must
                have a solid floor block with at least 4 empty blocks below on one side.
            </remarks>
        </member>
        <member name="M:Map.FindLadderNearPosition(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
                Searches for a ladder block near the specified position and returns the optimal
                climbing position. Uses a default search range of 8 units, prioritizing ladders to
                the right of the position.
            </summary>
            <param name="xPos">The X coordinate of the search origin position.</param>
            <param name="yPos">The Y coordinate of the search origin position.</param>
            <param name="characterX">When successful, contains the X coordinate where the character should be positioned to climb the ladder (centered on the ladder at blockX + 8).</param>
            <param name="characterY">When successful, contains the Y coordinate where the character should be positioned (same as yPos).</param>
            <returns>True if a ladder was found within range; false if no ladder exists or the position is out of bounds.</returns>
            <remarks>
                Searches for all ladder types (normal, desert, city, metal, alien). The search
                prioritizes ladders in front (3/4 of range to the right) before checking behind
                (remaining 1/4 to the left).
            </remarks>
        </member>
        <member name="M:Map.FindLadderNearPosition(System.Single,System.Single,System.Int32,System.Single@,System.Single@)">
            <summary>
                Searches for a ladder block near the specified position within a custom range and
                returns the optimal climbing position. Prioritizes ladders in front of the search
                position.
            </summary>
            <param name="xPos">The X coordinate of the search origin position.</param>
            <param name="yPos">The Y coordinate of the search origin position.</param>
            <param name="range">The horizontal search range in grid units. The method searches from -range/4 to +range columns.</param>
            <param name="characterX">When successful, contains the X coordinate where the character should be positioned to climb the ladder.</param>
            <param name="characterY">When successful, contains the Y coordinate where the character should be positioned (same as yPos).</param>
            <returns>True if a ladder was found within range; false if no ladder exists or the position is out of bounds.</returns>
            <remarks>
                The search is asymmetric: it first checks 3/4 of the range to the right (forward),
                then 1/4 to the left (behind). This prioritization helps AI units find ladders in
                their movement direction.
            </remarks>
        </member>
        <member name="M:Map.FindLargeBlockDimensions(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,TerrainType,TerrainType[,])">
            <summary>
                Analyzes a terrain region to find the dimensions of a contiguous area of the same
                terrain type. Used for optimizing terrain mesh generation by combining adjacent
                blocks.
            </summary>
            <param name="x">The starting column position to analyze.</param>
            <param name="y">The starting row position to analyze.</param>
            <param name="firstCollumn">Output parameter containing the leftmost column of the contiguous area.</param>
            <param name="firstRow">Output parameter containing the bottom row of the contiguous area.</param>
            <param name="collumns">Output parameter containing the width of the contiguous area in columns.</param>
            <param name="rows">Output parameter containing the height of the contiguous area in rows.</param>
            <param name="currentTerrain">The terrain type to match when finding contiguous blocks.</param>
            <param name="terrainTypes">The 2D array of terrain types to analyze.</param>
            <remarks>
                Protected method that expands from the starting position in all four directions
                until it finds different terrain types or map boundaries. Validates that all corners
                match to ensure rectangular regions.
            </remarks>
        </member>
        <member name="M:Map.FindStartLocation">
            <summary>
                Determines the starting location for the level based on game mode and spawn point
                configuration. Handles different spawn strategies for various game modes.
            </summary>
            <returns>A Vector3 representing the world position where gameplay should begin.</returns>
            <remarks>
                For Suicide Horde mode, uses the first spawn point. For other modes, attempts to
                find spawn points or falls back to calculating a position based on map dimensions
                and highest solid block.
            </remarks>
        </member>
        <member name="M:Map.GetAmmoCrateFrequency">
            <summary>
                Calculates the spawn frequency for ammunition crates based on game mode and player
                progression. Higher values mean less frequent spawns.
            </summary>
            <returns>A float representing the spawn frequency multiplier for ammo crates.</returns>
            <remarks>
                Hardcore mode: 23x base frequency. Death match: 15x frequency. World map campaign:
                30 minus (2 per unlocked pickup, max 15). Default: 23x. All values are multiplied by
                MapData.ammoCrateFrequencyMultiplier.
            </remarks>
        </member>
        <member name="M:Map.GetBlockCenter(GridPoint)">
            <summary>
                Converts a grid point to its world position center coordinates.
            </summary>
            <param name="gridPoint">The grid point containing column and row indices</param>
            <returns>The world position at the center of the specified grid cell</returns>
            <remarks>
                This overload provides a convenient way to get world coordinates from a GridPoint
                object. It simply delegates to the GetBlockCenter(int, int) method using the
                gridPoint's column and row values. This is useful when working with grid-based game
                logic that needs to convert grid positions to world positions for spawning or
                positioning objects.
            </remarks>
        </member>
        <member name="M:Map.GetBlocksXY(System.Single@,System.Single@,System.Int32,System.Int32)">
            <summary>
                Converts grid coordinates to world position using reference parameters. More
                efficient version for when you need both x and y coordinates.
            </summary>
            <param name="x">Reference parameter that will contain the world x coordinate</param>
            <param name="y">Reference parameter that will contain the world y coordinate</param>
            <param name="row">The row index in the grid</param>
            <param name="collumn">The column index in the grid</param>
        </member>
        <member name="M:Map.GetBlocksXYPosition(System.Int32,System.Int32)">
            <summary>
                Converts grid coordinates (column, row) to world position. Used for positioning
                objects on the map grid.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector3 representing the world position of the grid cell</returns>
        </member>
        <member name="M:Map.GetCheckPoint(System.Int32)">
            <summary>
                Retrieves a checkpoint by its ID number. Performs bounds checking to ensure the
                requested ID is valid.
            </summary>
            <param name="id">The checkpoint ID to retrieve (0-based index).</param>
            <returns>The CheckPoint object with the specified ID, or null if the ID is out of bounds.</returns>
        </member>
        <member name="M:Map.GetCheckPointAirHeight(System.Int32)">
            <summary>
                Retrieves the extra height offset for airdrop spawning at a specific checkpoint.
                This value is added to the default spawn height for airdrop checkpoints.
            </summary>
            <param name="id">The checkpoint ID to query.</param>
            <returns>The airDropExtraHeight value from the checkpoint if it exists, or 16f as the default height if the ID is invalid.</returns>
        </member>
        <member name="M:Map.GetCollumn(System.Single)">
            <summary>
                Converts a world x coordinate to a grid column index. Each grid cell is 16 units
                wide.
            </summary>
            <param name="x">The world x coordinate</param>
            <returns>The column index in the grid</returns>
        </member>
        <member name="M:Map.GetDoodadByTag(System.String)">
            <summary>
                Retrieves a single GameObject by its tag, searching both the persistent doodad list
                and dynamically tagged objects. Returns the first match found.
            </summary>
            <param name="tag">The tag to search for (case-insensitive).</param>
            <returns>The first GameObject found with the specified tag, or null if no object has that tag.</returns>
            <remarks>
                First searches the MapData.DoodadList for persistent level objects, then checks the
                dynamic taggedObjects dictionary. Used by triggers and scripts to find specific
                objects.
            </remarks>
        </member>
        <member name="M:Map.GetDoodadsByTag(System.String)">
            <summary>
                Retrieves all GameObjects with the specified tag, including both persistent doodads
                and dynamically tagged objects.
            </summary>
            <param name="tag">The tag to search for (case-insensitive).</param>
            <returns>A List containing all GameObjects with the specified tag. Returns an empty list if no matches are found.</returns>
            <remarks>
                Searches both the MapData.DoodadList for level-placed objects and the taggedObjects
                dictionary for dynamically added objects. Unlike GetDoodadByTag, this returns all
                matches rather than just the first.
            </remarks>
        </member>
        <member name="M:Map.GetGroundHeight(System.Single,System.Single)">
            <summary>
                Finds the height of the ground directly below the specified position using
                raycasting. Performs multiple raycasts to ensure accurate ground detection even near
                edges.
            </summary>
            <param name="x">The X coordinate from which to cast rays downward.</param>
            <param name="y">The Y coordinate from which to start the raycast.</param>
            <returns>The Y coordinate of the ground surface if found; 0 if no ground is detected below the position.</returns>
            <remarks>
                Performs three raycasts: at the exact position, 16 units to the right, and 16 units
                to the left. This ensures ground detection even when the character is partially off
                a platform. Uses groundLayerStrict for precise collision.
            </remarks>
        </member>
        <member name="M:Map.GetLeafColor">
            <summary>
                Gets the leaf color defined by the current map theme.
            </summary>
            <returns>The Color value for leaves in the active theme</returns>
            <remarks>
                This method returns the theme-specific leaf color used for vegetation rendering.
                Different themes (jungle, forest, etc.) can define unique leaf colors to match their
                visual style. The color is typically used by particle systems, vegetation sprites,
                or environmental effects to maintain consistent theming throughout the level.
            </remarks>
        </member>
        <member name="M:Map.GetMaxCollumns">
            <summary>
                Gets the maximum number of columns in the current map, representing the map's width
                in grid units.
            </summary>
            <returns>The total number of columns in the map grid (Map.Width).</returns>
            <remarks>
                Provides a consistent interface for accessing map dimensions. The map uses a
                column-based grid system where each column is 16 units wide.
            </remarks>
        </member>
        <member name="M:Map.GetMaxRows">
            <summary>
                Gets the maximum number of rows in the current map, representing the map's height in
                grid units.
            </summary>
            <returns>The total number of rows in the map grid (Map.Height).</returns>
            <remarks>
                Provides a consistent interface for accessing map dimensions. The map uses a
                row-based grid system where each row is 16 units tall.
            </remarks>
        </member>
        <member name="M:Map.GetNearbyCheckPoint(System.Single,System.Single,System.Single)">
            <summary>
                Finds the nearest checkpoint within range that isn't blocked by a unit. Used for
                spawn point determination and checkpoint activation checks.
            </summary>
            <param name="radius">The search radius</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>The nearest unblocked checkpoint within range, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestCheckPoint(System.Int32,System.Single,System.Single)">
            <summary>
                Finds the nearest checkpoint within range of a position using Manhattan distance.
                Searches through all registered checkpoints regardless of activation state.
            </summary>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <returns>The nearest checkpoint, or null if none found within range</returns>
        </member>
        <member name="M:Map.GetNearestCheckPointToRight(System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest checkpoint that is to the right of the specified position. Used
                for checkpoint discovery and progression tracking.
            </summary>
            <param name="x">The x coordinate of the starting position</param>
            <param name="y">The y coordinate of the starting position</param>
            <param name="onlyUnactivatedCheckpoints">Whether to only consider checkpoints that haven't been activated yet</param>
            <returns>The nearest checkpoint to the right, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestRescueBro(System.Single,System.Single)">
            <summary>
                Finds the nearest rescue bro (caged prisoner) to the specified position. Used for
                locating prisoners that can be freed to gain extra lives.
            </summary>
            <param name="x">The x coordinate of the search position</param>
            <param name="y">The y coordinate of the search position</param>
            <returns>The nearest RescueBro object, or null if none found or HeroController is not available</returns>
        </member>
        <member name="M:Map.GetRow(System.Single)">
            <summary>
                Converts a world y coordinate to a grid row index. Each grid cell is 16 units tall.
            </summary>
            <param name="y">The world y coordinate</param>
            <returns>The row index in the grid</returns>
        </member>
        <member name="M:Map.GetRowCollumn(System.Single,System.Single,System.Int32@,System.Int32@)">
            <summary>
                Converts world position to grid coordinates using reference parameters. Used to find
                which grid cell contains a given world position.
            </summary>
            <param name="x">The world x coordinate</param>
            <param name="y">The world y coordinate</param>
            <param name="row">Reference parameter that will contain the row index</param>
            <param name="collumn">Reference parameter that will contain the column index</param>
        </member>
        <member name="M:Map.GetSpawnPoint(System.Int32)">
            <summary>
                Retrieves the SpawnPoint object for the specified player number. Uses modulo
                arithmetic with spawnPointOffset to cycle through available spawn points if there
                are fewer spawn points than players.
            </summary>
            <param name="playerNum">The player number (0-based) requesting a spawn point.</param>
            <returns>The SpawnPoint object for the player, or null if no valid spawn points exist or playerNum is negative.</returns>
        </member>
        <member name="M:Map.GetSpawnPointPosition(System.Int32)">
            <summary>
                Retrieves the world position of a spawn point for the specified player number. Uses
                modulo arithmetic with spawnPointOffset to cycle through available spawn points if
                there are fewer spawn points than players.
            </summary>
            <param name="playerNum">The player number (0-based) requesting a spawn position.</param>
            <returns>The Vector3 position of the spawn point, or (-1000, -1000, -1000) if no valid spawn points exist or playerNum is negative.</returns>
        </member>
        <member name="M:Map.GetUnitXOffset">
            <summary>
                Generates a pseudo-random horizontal offset for unit positioning.
            </summary>
            <returns>A horizontal offset value between -5 and +5 units with complex distribution</returns>
            <remarks>
                This method creates varied unit spawn positions to prevent overlap when multiple
                units spawn at the same location. It uses a deterministic sequence based on
                unitOffsetCount that combines multiple modulo operations to create an irregular but
                repeatable pattern. The formula produces offsets that cluster around certain values
                while still covering the full -5 to +5 range, creating natural-looking unit spread.
                The counter increments with each call, ensuring unique offsets for sequential
                spawns.
            </remarks>
        </member>
        <member name="M:Map.HasSandStormTrigger">
            <summary>
                Checks whether the current map contains any sandstorm or sandworm trigger actions.
                This is used to determine if desert-specific environmental effects should be
                prepared.
            </summary>
            <returns>True if the map contains sandstorm or sandworm triggers, false otherwise</returns>
            <remarks>
                Iterates through all triggers in the MapData and checks their actions for Sandstorm
                or CallSandworm types. These triggers create environmental hazards specific to
                desert-themed levels.
            </remarks>
        </member>
        <member name="M:Map.HasThisMapGotAliens">
            <summary>
                Checks whether the current map contains alien enemies. This is used to determine if
                alien-specific gameplay mechanics should be enabled.
            </summary>
            <returns>True if the map contains aliens, false otherwise</returns>
            <remarks>
                Returns the value of the hasAliens static field, which is set during map loading
                based on the presence of alien spawn points or alien-themed elements.
            </remarks>
        </member>
        <member name="M:Map.InsideWall(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Checks if a position is inside a wall or solid terrain using a reduced radius
                collision check.
            </summary>
            <param name="x">The X coordinate of the position to check.</param>
            <param name="y">The Y coordinate of the position to check.</param>
            <param name="size">The size of the object. The actual check uses size/2 as the radius.</param>
            <param name="strictlyGround">If true, only checks ground layers; if false, includes additional collision layers.</param>
            <returns>True if the position overlaps solid terrain; false if the position is clear.</returns>
            <remarks>
                Uses half the provided size for the collision check, making it more permissive than
                IsOverGround. Useful for checking if objects are embedded in terrain.
            </remarks>
        </member>
        <member name="M:Map.IsBackgroundBlock(System.Int32,System.Int32)">
            <summary>
                Checks if a background block exists at the specified grid position. Background
                blocks are visual elements rendered behind the main terrain.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if a background block exists at this position; false if the position is out of bounds or no background block exists.</returns>
        </member>
        <member name="M:Map.IsBlockCompatible(GroundType,System.Int32,System.Int32)">
            <summary>
                Checks if the terrain at the specified position is compatible with the given ground
                type for blending. Combines boundary checking with terrain compatibility rules.
            </summary>
            <param name="compareGroundType">The ground type to check compatibility with.</param>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is out of bounds or the terrain is compatible; false if incompatible terrain exists.</returns>
        </member>
        <member name="M:Map.IsBlockDestroyed(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position has been destroyed. Destroyed blocks
                no longer provide collision or visual representation.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is out of bounds, empty, or the block is marked as destroyed; false if an intact block exists.</returns>
        </member>
        <member name="M:Map.IsBlockEmpty(System.Int32,System.Int32)">
            <summary>
                Checks if the specified grid position has no block. Empty positions allow free
                movement and projectile passage.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is empty (no block) or out of bounds; false if a block exists.</returns>
        </member>
        <member name="M:Map.IsBlockFacingOpen(System.Int32,System.Int32,DirectionEnum)">
            <summary>
                Checks if a solid block has an open (non-solid) adjacent block in the specified
                direction. Used for determining valid surfaces for slime attachment and other
                directional mechanics.
            </summary>
            <param name="c">The column index of the block to check.</param>
            <param name="r">The row index of the block to check.</param>
            <param name="direction">The direction to check for an open adjacent block (Up, Down, Left, or Right).</param>
            <returns>True if the block at (c,r) is solid and has a non-solid block in the specified direction; false otherwise.</returns>
            <remarks>
                Protected method used internally by slime placement and other surface-attachment
                systems. Ensures the base block is solid before checking the adjacent space.
            </remarks>
        </member>
        <member name="M:Map.IsBlockFloor(System.Int32,System.Int32)">
            <summary>
                Determines if a block position represents a floor tile by checking if it's solid
                with at least two empty blocks above it. Used for pathfinding and spawn placement.
            </summary>
            <param name="c">The column index of the block to check.</param>
            <param name="r">The row index of the block to check.</param>
            <returns>True if the block is solid and has two empty blocks directly above it; false otherwise.</returns>
            <remarks>
                Protected method used by AI pathfinding and spawn systems to identify walkable
                surfaces with sufficient clearance for character movement.
            </remarks>
        </member>
        <member name="M:Map.IsBlockLadder(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position is a ladder that units can climb.
                Checks the original map data for any ladder terrain type.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position contains any type of climbable ladder; false otherwise.</returns>
        </member>
        <member name="M:Map.IsBlockLadder(System.Single,System.Single)">
            <summary>
                Checks if the position contains a ladder that units can climb. Convenience overload
                that converts world coordinates to grid position.
            </summary>
            <param name="x">The world X coordinate to check.</param>
            <param name="y">The world Y coordinate to check.</param>
            <returns>True if the position contains any type of climbable ladder; false otherwise.</returns>
        </member>
        <member name="M:Map.IsBlockQuicksand(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position is quicksand. Quicksand blocks slow
                movement and can trap units that stay too long.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position contains an intact quicksand block; false if out of bounds, empty, or destroyed.</returns>
        </member>
        <member name="M:Map.IsBlockQuicksand(System.Single,System.Single)">
            <summary>
                Checks if the position contains quicksand. Convenience overload that converts world
                coordinates to grid position.
            </summary>
            <param name="x">The world X coordinate to check.</param>
            <param name="y">The world Y coordinate to check.</param>
            <returns>True if the position contains an intact quicksand block; false otherwise.</returns>
        </member>
        <member name="M:Map.IsBlockSandbag(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position is a sandbag. Sandbags provide cover
                and can be destroyed by explosions.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the position contains a sandbag block; false otherwise.</returns>
        </member>
        <member name="M:Map.IsBlockSolid(GridPoint)">
            <summary>
                Checks if the block at a grid point position is solid and blocks movement.
                Convenience overload that accepts a GridPoint structure.
            </summary>
            <param name="gp">The grid point containing column and row coordinates.</param>
            <returns>True if the block is solid and blocks movement; false if empty or passable.</returns>
        </member>
        <member name="M:Map.IsBlockSolid(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified grid position is solid and blocks movement.
                Solid blocks prevent units from passing through, except for ladder types which are
                climbable.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the block is solid and blocks movement (including out-of-bounds positions); false if empty, destroyed, or a climbable ladder type.</returns>
        </member>
        <member name="M:Map.IsBlockSolidTerrain(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position is solid terrain (earth, rock, metal,
                etc). Used to distinguish terrain blocks from other solid objects.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the block is solid terrain or position is out of bounds; false if empty, destroyed, or non-terrain block type.</returns>
        </member>
        <member name="M:Map.IsBlockSolidTerrain(GroundType,System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position is solid according to the ground type
                rules. Overload that accepts a ground type parameter (though it's not used in the
                implementation).
            </summary>
            <param name="groundType">The ground type parameter (unused in current implementation).</param>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is out of bounds or contains a solid ground type; false if empty or non-solid.</returns>
        </member>
        <member name="M:Map.IsBlockSolidToWater(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position blocks water flow. Bridges and ladders
                allow water to pass through, while solid blocks contain it.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the block prevents water flow (including out-of-bounds); false if water can pass through or no block exists.</returns>
        </member>
        <member name="M:Map.IsCheckPointAnAirdrop(System.Int32)">
            <summary>
                Determines whether a checkpoint with the specified ID is configured as an airdrop
                checkpoint. Airdrop checkpoints spawn players from above rather than on the ground.
            </summary>
            <param name="id">The checkpoint ID to check.</param>
            <returns>True if the checkpoint exists and has its airDropCheckPoint flag set, false otherwise.</returns>
        </member>
        <member name="M:Map.IsCitizenNearby(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Checks if any citizen (civilian NPC) is within a rectangular range of the specified
                position. Used for AI decisions and player actions that need to consider nearby
                civilians.
            </summary>
            <param name="x">The X coordinate to check from</param>
            <param name="y">The Y coordinate to check from</param>
            <param name="xRange">The horizontal search range in world units</param>
            <param name="yRange">The vertical search range in world units</param>
            <returns>True if at least one citizen is within the specified range, false otherwise</returns>
            <remarks>
                Iterates through the citizens list backwards and checks each citizen's position
                against the provided range. The rectangular check uses absolute distance comparisons
                for efficiency.
            </remarks>
        </member>
        <member name="M:Map.IsCollumnEmpty(System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks if a vertical column of blocks is completely empty (non-solid) within the
                specified row span. Supports both upward and downward checking based on rowSpan
                sign.
            </summary>
            <param name="c">The column index to check.</param>
            <param name="r">The starting row index.</param>
            <param name="rowSpan">The number of rows to check. Negative values check downward, positive values check upward.</param>
            <returns>True if all blocks in the specified column range are non-solid or out of bounds; false if any solid block exists.</returns>
            <remarks>
                Protected method used by jump-through detection and vertical clearance checks.
                Bounds checking ensures out-of-bounds positions are treated as empty.
            </remarks>
        </member>
        <member name="M:Map.IsForegroundBlock(System.Int32,System.Int32)">
            <summary>
                Checks if a foreground block exists at the specified grid position. Foreground
                blocks are the main terrain elements that units interact with.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if a foreground block exists at this position; false if the position is out of bounds or no foreground block exists.</returns>
        </member>
        <member name="M:Map.IsGround(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Checks if a grid position contains solid ground by testing for colliders at the
                block's center position.
            </summary>
            <param name="collumn">The column index of the grid position to check.</param>
            <param name="row">The row index of the grid position to check.</param>
            <param name="strictlyGround">If true, only checks ground layers; if false, includes additional collision layers.</param>
            <returns>True if ground exists at the specified grid position; false otherwise.</returns>
            <remarks>
                Performs a sphere overlap check with a 6-unit radius at the block's center. Used for
                pathfinding and terrain queries at the grid level.
            </remarks>
        </member>
        <member name="M:Map.IsGroundEmpty(UnityEngine.Texture2D,System.Int32,System.Int32)">
            <summary>
                Checks if a pixel in a terrain texture represents empty space based on its alpha
                channel. Used during map generation from image data.
            </summary>
            <param name="tex">The texture to sample.</param>
            <param name="x">The X coordinate of the pixel to check.</param>
            <param name="y">The Y coordinate of the pixel to check.</param>
            <returns>True if the pixel's alpha value is less than 0.94 (mostly transparent); false if opaque.</returns>
            <remarks>
                Protected method used during map loading to distinguish between solid terrain
                (opaque pixels) and empty space (transparent pixels) in level textures.
            </remarks>
        </member>
        <member name="M:Map.IsGroundTypeSolid(GroundType)">
            <summary>
                Determines if a ground type represents solid terrain that blocks movement. Central
                method for defining which terrain types are considered solid obstacles.
            </summary>
            <param name="groundType">The ground type to check.</param>
            <returns>True if the ground type is solid and blocks movement; false for passable types like ladders, bridges, and decorative elements.</returns>
        </member>
        <member name="M:Map.IsMapOpenAboveCrate(System.Int32,System.Int32)">
            <summary>
                Checks if the map area above a crate position is sufficiently open for gameplay
                purposes.
            </summary>
            <param name="collumn">The column coordinate of the crate.</param>
            <param name="row">The row coordinate of the crate.</param>
            <returns>True if the area above is open enough; false if too many solid blocks are present.</returns>
            <remarks>
                Examines up to 3 tiles above the crate position and counts solid blocks in the upper
                portion of the map. Returns false if more than 4 solid blocks are found, indicating
                a confined space. Ladder and bridge tiles are not counted as solid blocks.
            </remarks>
        </member>
        <member name="M:Map.IsMapOpenAboveCrate(System.Int32,System.Int32)">
            <summary>
                Determines if the map area above a crate position is sufficiently open for spawn
                mechanics. Checks if there are fewer than 5 solid blocks in the upper portion of the
                map above the specified position.
            </summary>
            <param name="collumn">The column index of the crate position</param>
            <param name="row">The row index of the crate position</param>
            <returns>True if the area above is considered open (less than 5 solid blocks), false if it's too enclosed</returns>
            <remarks>
                Used to determine suitable spawn locations for items or enemies from crates. Checks
                from 9 rows below the map height to the top, counting non-empty, non-ladder, and
                non-bridge ground types. Returns true if the position is out of bounds (considered
                open).
            </remarks>
        </member>
        <member name="M:Map.IsNearActivatedCheckPoint(System.Single,System.Single,UnityEngine.Vector2@,System.Boolean@)">
            <summary>
                Checks if a position is near the current active checkpoint. Returns checkpoint
                position and airdrop status for spawn determination.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="checkPointPos">Output parameter for the checkpoint position</param>
            <param name="spawnViaAirdrop">Output parameter indicating if spawn should be via airdrop</param>
            <returns>True if near the current active checkpoint, false otherwise</returns>
        </member>
        <member name="M:Map.IsNearActivatedCheckPoint(System.Single,System.Single)">
            <summary>
                Checks if a position is near the current active checkpoint. Simplified overload that
                doesn't return checkpoint details.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <returns>True if near the current active checkpoint, false otherwise</returns>
        </member>
        <member name="M:Map.IsNearActivatedCheckPoint(System.Single,System.Single,System.Boolean@)">
            <summary>
                Checks if a position is near any activated checkpoint. Returns airdrop status but
                checks all activated checkpoints, not just the current one.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="spawnViaAirdrop">Output parameter indicating if spawn should be via airdrop</param>
            <returns>True if near any activated checkpoint, false otherwise</returns>
        </member>
        <member name="M:Map.IsOverBackground(System.Single,System.Single)">
            <summary>
                Checks if a world position has a background block at its grid location. Note:
                parameters are named incorrectly in implementation.
            </summary>
            <param name="x">The X coordinate in world units (despite being used as Y in GetCollumn).</param>
            <param name="y">The Y coordinate in world units (despite being used as Y in second GetCollumn).</param>
            <returns>True if a background block exists at the calculated grid position; false otherwise.</returns>
            <remarks>
                WARNING: This method has a bug where both parameters are converted using GetCollumn,
                when the second should use GetRow. This may cause incorrect results.
            </remarks>
        </member>
        <member name="M:Map.IsOverGround(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Checks if a position with the specified radius overlaps any ground blocks. Used for
                collision detection and grounding checks.
            </summary>
            <param name="x">The X coordinate of the center position to check.</param>
            <param name="y">The Y coordinate of the center position to check.</param>
            <param name="size">The radius of the sphere to check for ground overlap.</param>
            <param name="strictlyGround">If true, only checks against ground layers; if false, includes additional collision layers.</param>
            <returns>True if the sphere at the specified position overlaps any ground; false otherwise.</returns>
            <remarks>
                Uses Physics.OverlapSphere to detect collisions. The strictlyGround parameter
                determines whether to use groundLayerStrict (Ground and IndestructibleGround only)
                or the broader groundLayer mask.
            </remarks>
        </member>
        <member name="M:Map.IsTerrainCompatible(GroundType,GroundType)">
            <summary>
                Determines if two ground types are compatible for terrain blending or connection.
                Compatible terrains can connect seamlessly without visual breaks.
            </summary>
            <param name="sourceGroundType">The first ground type to compare.</param>
            <param name="otherGroundType">The second ground type to compare.</param>
            <returns>True if the ground types are compatible and can blend together; false if they should remain separate.</returns>
        </member>
        <member name="M:Map.IsTerrainTheSame(GroundType,System.Int32,System.Int32)">
            <summary>
                Checks if the terrain at the specified position matches the given ground type. Used
                for terrain consistency checks during modifications.
            </summary>
            <param name="sourceGroundType">The ground type to compare against.</param>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the terrain at the position matches the source ground type; false if different or out of bounds.</returns>
        </member>
        <member name="M:Map.LineToPointDistance2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
            <summary>
                Calculates the minimum distance from a point to a line or line segment in 2D space.
                This method supports both infinite lines and finite line segments.
            </summary>
            <param name="pointA">The first point defining the line</param>
            <param name="pointB">The second point defining the line</param>
            <param name="pointC">The point to measure distance from</param>
            <param name="isSegment">If true, treats the line as a finite segment; if false, treats it as an infinite line</param>
            <returns>The minimum distance from pointC to the line/segment defined by pointA and pointB</returns>
            <remarks>
                For line segments, the method checks if the closest point on the line falls within
                the segment bounds. If not, it returns the distance to the nearest endpoint. Uses
                CrossProduct and DotProduct helper methods for calculations.
            </remarks>
        </member>
        <member name="M:Map.LineToPointDistance2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
            <summary>
                Calculates the shortest distance from a point to a line or line segment in 2D space.
            </summary>
            <param name="pointA">The starting point of the line or line segment.</param>
            <param name="pointB">The ending point of the line or line segment.</param>
            <param name="pointC">The point to calculate the distance from.</param>
            <param name="isSegment">If true, treats the line as a finite segment; if false, treats it as an infinite line.</param>
            <returns>The shortest distance from pointC to the line or line segment.</returns>
            <remarks>
                When isSegment is true, the method checks if the closest point on the line falls
                outside the segment bounds and returns the distance to the nearest endpoint instead.
                Uses cross product for perpendicular distance calculation and dot product for
                segment boundary checks.
            </remarks>
        </member>
        <member name="M:Map.LineToPointDistance2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
            <summary>
                Calculates the minimum distance from a point to a line or line segment in 2D space.
                This method supports both infinite lines and finite line segments.
            </summary>
            <param name="pointA">The first point defining the line</param>
            <param name="pointB">The second point defining the line</param>
            <param name="pointC">The point to measure distance from</param>
            <param name="isSegment">If true, treats the line as a finite segment; if false, treats it as an infinite line</param>
            <returns>The minimum distance from pointC to the line/segment defined by pointA and pointB</returns>
            <remarks>
                For line segments, the method checks if the closest point on the line falls within
                the segment bounds. If not, it returns the distance to the nearest endpoint. Uses
                CrossProduct and DotProduct helper methods for calculations.
            </remarks>
        </member>
        <member name="M:Map.LoadArea">
            <summary>
                Handles the loading and offset management for map areas during level transitions.
                Updates the load offset values based on whether the map is in editing mode.
            </summary>
            <remarks>
                Protected method that manages map area loading offsets. In normal gameplay, it
                preserves offset progression. In editing mode, all offsets are reset to zero. Part
                of the larger map loading system.
            </remarks>
        </member>
        <member name="M:Map.MakeBlockPersist(Block)">
            <summary>
                Marks a specific block for persistence by transferring it to the persistent blocks
                container. This is a helper method used by PersistBlocks to process individual
                blocks.
            </summary>
            <param name="block">The block to make persistent</param>
            <remarks>
                Simply calls the Persist method to reparent the block's GameObject to the persistent
                container.
            </remarks>
        </member>
        <member name="M:Map.Persist(UnityEngine.GameObject)">
            <summary>
                Transfers a GameObject to the persistent blocks container by changing its parent.
                This ensures the object survives scene transitions when persistence is enabled.
            </summary>
            <param name="go">The GameObject to make persistent</param>
            <remarks>
                Reparents the GameObject to the PersistentBlocks.Instance transform, which is marked
                as DontDestroyOnLoad to survive scene changes.
            </remarks>
        </member>
        <member name="M:Map.PersistBlocks">
            <summary>
                Enables block persistence and transfers all current foreground and background blocks
                to the persistent storage system. This allows blocks to survive level transitions
                when loading time optimizations are active.
            </summary>
            <remarks>
                Creates a persistent GameObject container if needed and iterates through all map
                blocks, marking matching persistent blocks for retention. Respects the
                dontPersistedPastLevelLoadThisLevel flag to handle special cases where persistence
                should be skipped.
            </remarks>
        </member>
        <member name="M:Map.PlaceGround(GroundType,System.Int32,System.Int32,Block[,]@,System.Boolean)">
            <summary>
                Places a ground block of the specified type at the given grid position. Handles
                block instantiation, theme application, and map state updates.
            </summary>
            <param name="placeGroundType">The type of ground block to place (Earth, Metal, Wood, etc.).</param>
            <param name="x">The column index where the block should be placed.</param>
            <param name="y">The row index where the block should be placed.</param>
            <param name="newBlocks">Reference to the 2D array of blocks being built/modified.</param>
            <param name="addToRegistry">Whether to add the block to the global block registry (default true).</param>
            <returns>The newly created Block instance, or null if placing an empty block type.</returns>
            <remarks>
                Updates highest solid block tracking for non-ladder blocks. Applies appropriate
                Z-depth offsets based on block type. Uses the active theme to determine which prefab
                to instantiate.
            </remarks>
        </member>
        <member name="M:Map.PushBlock(System.Int32,System.Int32,System.Single)">
            <summary>
                Attempts to push a block at the specified grid position with the given horizontal
                force. Blocks can only be pushed if editing mode is disabled and the block supports
                push mechanics.
            </summary>
            <param name="collumn">The column index of the block to push.</param>
            <param name="row">The row index of the block to push.</param>
            <param name="xI">The horizontal force to apply. Positive values push right, negative values push left.</param>
            <returns>True if the block was successfully pushed; false if the block can't be pushed, is already broken, or editing mode is active.</returns>
        </member>
        <member name="M:Map.PushBlock(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attempts to push a block by raycasting from a position in the specified direction.
                Uses physics raycasting to find pushable blocks along the ray.
            </summary>
            <param name="x">The X coordinate to start the raycast from.</param>
            <param name="y">The Y coordinate to start the raycast from.</param>
            <param name="xI">The horizontal force to apply. Positive values raycast right, negative values raycast left.</param>
            <param name="distance">The maximum distance to check for pushable blocks.</param>
            <returns>True if a block was found and successfully pushed; false if no pushable block was found or editing mode is active.</returns>
        </member>
        <member name="M:Map.RegisterCheckPoint(CheckPoint)">
            <summary>
                Registers a checkpoint with the map's checkpoint system and assigns it a sequential
                ID based on the current count of checkpoints. Checkpoints serve as respawn locations
                and progress markers throughout a level. Initializes the checkpoints list if it
                doesn't exist.
            </summary>
            <param name="checkPoint">The CheckPoint object to register, which will have its checkPointID set to the current checkpoint count.</param>
        </member>
        <member name="M:Map.RegisterSpawnPoint(SpawnPoint)">
            <summary>
                Registers a spawn point with the map's spawn system. Spawn points determine where
                players respawn after death or at the start of a level. Initializes the spawn points
                list if it doesn't exist.
            </summary>
            <param name="spawnPoint">The SpawnPoint object to register.</param>
        </member>
        <member name="M:Map.RemoveCheckPoint(CheckPoint)">
            <summary>
                Removes a checkpoint from the map's checkpoint tracking system. Note that this may
                invalidate checkpoint IDs for checkpoints registered after the removed one.
            </summary>
            <param name="checkPoint">The CheckPoint object to remove.</param>
        </member>
        <member name="M:Map.ReplaceCageWithAmmoAndRevives(Cage)">
            <summary>
                Replaces a single cage with ammunition and revival crates at the same position. This
                helper method handles the transformation of individual cages.
            </summary>
            <param name="cage">The cage to replace with crates</param>
            <remarks>
                Preserves the cage's position and column information before destroying it, then
                calls Create4AmmoAndRevives to spawn the replacement crates. The cage is properly
                collapsed and destroyed before replacement.
            </remarks>
        </member>
        <member name="M:Map.ReplaceCagesWithAmmoAndRevives">
            <summary>
                Replaces all cages in the current map with ammunition and revival crates. This is
                typically used in specific game modes or when transitioning to different gameplay
                scenarios.
            </summary>
            <remarks>
                Iterates through the cages list backwards and calls ReplaceCageWithAmmoAndRevives
                for each valid cage. This transformation affects all cages in the level
                simultaneously.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromHorizontalSuperCheckPoint(System.Int32)">
            <summary>
                Configures the map to start from a horizontal super checkpoint with a specific
                X-axis offset.
            </summary>
            <param name="xLoadOffset">The horizontal offset in grid units for loading the level.</param>
            <remarks>
                Used for horizontal level transitions where the player needs to spawn at a specific
                X coordinate. If the offset differs from the last load offset, it triggers a reset
                of persistent blocks. The offset is clamped to a minimum of 0 to prevent negative
                values.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromHorizontalSuperCheckPoint(System.Int32)">
            <summary>
                Sets up a horizontal super checkpoint with a specific X-axis load offset. This is
                used for horizontal level transitions where the map needs to load at a specific
                horizontal position.
            </summary>
            <param name="xLoadOffset">The horizontal offset for loading the level, clamped to non-negative values</param>
            <remarks>
                If the offset differs from the last load offset, persistence is disabled for this
                level to ensure a clean transition. The offset determines where in the level the
                player spawns horizontally.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromSuperCheckPoint">
            <summary>
                Configures the map to start from a super checkpoint on the next level load.
            </summary>
            <remarks>
                Super checkpoints are special spawn points that persist across level transitions,
                typically used for major progression points or after boss battles. This method
                simply sets the flag without specifying offset values.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromSuperCheckPoint">
            <summary>
                Marks that the next level load should start from a super checkpoint. This affects
                spawn positioning and level initialization.
            </summary>
            <remarks>
                Sets the startFromSuperCheckPoint flag to true. Super checkpoints are special
                checkpoint types that typically mark major progression points or area transitions.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromVerticalSuperCheckPoint(System.Int32)">
            <summary>
                Configures the map to start from a vertical super checkpoint with a specific Y-axis
                offset.
            </summary>
            <param name="yLoadOffset">The vertical offset in grid units for loading the level.</param>
            <remarks>
                Used for vertical level transitions where the player needs to spawn at a specific Y
                coordinate. Similar to horizontal checkpoints, changing the offset resets persistent
                blocks. The offset is clamped to a minimum of 0.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromVerticalSuperCheckPoint(System.Int32)">
            <summary>
                Sets up a vertical super checkpoint with a specific Y-axis load offset. This is used
                for vertical level transitions where the map needs to load at a specific vertical
                position.
            </summary>
            <param name="yLoadOffset">The vertical offset for loading the level, clamped to non-negative values</param>
            <remarks>
                If the offset differs from the last load offset, persistence is disabled for this
                level to ensure a clean transition. The offset determines where in the level the
                player spawns vertically.
            </remarks>
        </member>
        <member name="M:Map.SetTryReduceLoadingTimes(System.Boolean)">
            <summary>
                Enables or disables the loading time optimization system. When enabled, the map will
                attempt to persist certain blocks between level loads to reduce loading times.
            </summary>
            <param name="actuallyTry">True to enable loading time optimizations, false to disable them</param>
            <remarks>
                This optimization system works in conjunction with the block persistence methods
                (PersistBlocks, DontPersistBlocks) to maintain certain map elements across level
                transitions.
            </remarks>
        </member>
        <member name="M:Map.TryingToReduceLoadingTimes">
            <summary>
                Checks whether the loading time optimization system is currently active. Returns
                true only if optimizations are enabled, the level editor is not active, and the
                asset pool is not disabled.
            </summary>
            <returns>True if loading time optimizations are active and available, false otherwise</returns>
            <remarks>
                This method verifies multiple conditions to ensure optimizations are appropriate for
                the current game state. It's used by various persistence-related methods to
                determine whether to maintain blocks between level loads.
            </remarks>
        </member>
        <member name="M:Map.WasBlockEarth(System.Int32,System.Int32)">
            <summary>
                Checks if the original map data at the specified position contained earth-like
                terrain. Uses map load offsets to check the original terrain type before any
                modifications.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the original terrain was earth-like (including various earth, stone, and background types); false otherwise.</returns>
        </member>
        <member name="M:Map.WasBlockOriginallyAir(System.Int32,System.Int32)">
            <summary>
                Checks if the original map data at the specified position was air or empty. Used to
                determine if a position was originally passable before modifications.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the original terrain was air or empty; true for out-of-bounds positions.</returns>
        </member>
        <member name="M:Map.WasBlockOriginallySolid(System.Int32,System.Int32)">
            <summary>
                Checks if the original map data at the specified position contained solid terrain.
                Comprehensive check for all solid terrain types in the original map data.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the original terrain was any solid type or position is out of bounds; false if originally empty or air.</returns>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:Map.TileSize">
            <summary>
                The size of a single tile in the map grid system, measured in world units. This
                constant defines the fundamental unit of measurement for the Map's grid-based
                coordinate system.
            </summary>
            <remarks>
                Set to 16 units, this value is used throughout the codebase for converting between
                grid coordinates and world positions. Related constants include HalfTileSize (8) for
                half-tile calculations.
            </remarks>
        </member>
        <member name="F:Map.TileSize">
            <summary>
                The standard tile size in pixels used throughout the map grid system.
            </summary>
            <remarks>
                This constant defines the base unit of the map's grid system. All block positions,
                collision checks, and grid calculations use this 16-pixel tile size as the
                fundamental measurement unit.
            </remarks>
        </member>
        <member name="F:Map.TileSize">
            <summary>
                The size of a single tile in the map grid system, measured in world units. This
                constant defines the fundamental unit of measurement for the Map's grid-based
                coordinate system.
            </summary>
            <remarks>
                Set to 16 units, this value is used throughout the codebase for converting between
                grid coordinates and world positions. Related constants include HalfTileSize (8) for
                half-tile calculations.
            </remarks>
        </member>
        <member name="F:Map.barrierLayer">
            <summary>
                LayerMask for the MobileBarriers layer. Used to detect movable barriers and
                obstacles that can block movement or projectiles but may be pushable or
                destructible.
            </summary>
        </member>
        <member name="F:Map.cameraBlockers">
            <summary>
                List of objects that block or influence camera movement. Camera blockers are
                registered via RegisterCameraBlocker and removed via RemoveCameraBlocker. Used by
                the camera system to prevent viewing certain areas or to create cinematic
                boundaries. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.checkPoints">
            <summary>
                Static list tracking all checkpoint objects in the current map. Checkpoints are
                added via RegisterCheckPoint() and removed via DeregisterCheckPoint(). Used for
                respawn mechanics and progress tracking.
            </summary>
        </member>
        <member name="F:Map.defaultLayer">
            <summary>
                LayerMask for Unity's Default layer. Used for general-purpose collision detection
                with objects that haven't been assigned to a specific gameplay layer.
            </summary>
        </member>
        <member name="F:Map.exitPortalPrefabReference">
            <summary>
                Reference to the level exit portal prefab. Used by CreateExitPortal() to instantiate
                exit portals at specified positions. The portal is placed 112 units above the given
                position with a 16-unit horizontal offset.
            </summary>
        </member>
        <member name="F:Map.fragileLayer">
            <summary>
                LayerMask for the DirtyHippie layer. Despite the unusual name, this layer is used
                for fragile or easily breakable objects in the game world that can be destroyed by
                minimal force.
            </summary>
        </member>
        <member name="F:Map.groundAndDamageableObjects">
            <summary>
                LayerMask combining Ground, IndestructibleGround, LargeObjects, and FLUI layers.
                Extended ground collision mask that includes damageable objects, used for
                comprehensive collision detection in combat and damage calculations.
            </summary>
        </member>
        <member name="F:Map.groundLayer">
            <summary>
                LayerMask combining Ground, IndestructibleGround, and LargeObjects layers. Used for
                general ground collision detection including destructible terrain, permanent
                terrain, and large solid objects. This is the primary collision mask for most
                ground-based physics queries.
            </summary>
        </member>
        <member name="F:Map.groundLayerStrict">
            <summary>
                LayerMask combining only Ground and IndestructibleGround layers, excluding
                LargeObjects. Used for strict terrain-only collision detection when large objects
                should be ignored, such as certain movement or placement checks.
            </summary>
        </member>
        <member name="F:Map.hangingLayer">
            <summary>
                LayerMask for the Hanging layer. Used to detect overhead bars, ropes, and other
                objects that units can hang from or traverse hand-over-hand.
            </summary>
        </member>
        <member name="F:Map.highestSolidBlock">
            <summary>
                Tracks the Y coordinate of the highest solid block placed on the map. Updated during
                PlaceGround when placing solid blocks (excluding ladders and empty spaces). Used by
                CollapseTop to determine where to start collapsing terrain from the top. Minimum
                value is clamped to 11 during collapse operations.
            </summary>
        </member>
        <member name="F:Map.highestSolidBlockLadder">
            <summary>
                Tracks the Y coordinate 5 blocks above the highest solid block. Updated alongside
                highestSolidBlock during PlaceGround operations. Set to highestSolidBlock + 5 when a
                new highest solid block is placed.
            </summary>
        </member>
        <member name="F:Map.ladderLayer">
            <summary>
                LayerMask for the Ladders layer. Used to detect climbable ladder objects that allow
                vertical movement when units interact with them.
            </summary>
        </member>
        <member name="F:Map.largeObjectsLayer">
            <summary>
                LayerMask for the LargeObjects layer only. Used to specifically detect collision
                with large environmental objects that are separate from terrain, such as vehicles,
                large props, or destructible structures.
            </summary>
        </member>
        <member name="F:Map.maxCollumnActive">
            <summary>
                The rightmost column index currently active in the block deactivation system.
                Defaults to 256. Updated by RunDeactivationOffscreen() to optimize performance by
                deactivating off-screen blocks.
            </summary>
        </member>
        <member name="F:Map.maxUnitX">
            <summary>
                Maximum X position of active units used for extending the visible area. The
                offscreen deactivation system tracks unit positions to ensure blocks near active
                units remain loaded. Reset to -100001f when recalculating boundaries and updated via
                ExtendDisableToUnitPosition.
            </summary>
        </member>
        <member name="F:Map.maxUnitY">
            <summary>
                Maximum Y position of active units used for extending the visible area. The
                offscreen deactivation system tracks unit positions to ensure blocks near active
                units remain loaded. Reset to -100001f when recalculating boundaries and updated via
                ExtendDisableToUnitPosition.
            </summary>
        </member>
        <member name="F:Map.minCollumnActive">
            <summary>
                The leftmost column index currently active in the block deactivation system. Updated
                by RunDeactivationOffscreen() to track which blocks should be active based on camera
                position.
            </summary>
        </member>
        <member name="F:Map.minRowActive">
            <summary>
                The bottom row index currently active in the block deactivation system. Updated by
                RunDeactivationOffscreen() to track which blocks should be active based on camera
                position.
            </summary>
        </member>
        <member name="F:Map.minUnitX">
            <summary>
                Minimum X position of active units used for extending the visible area. The
                offscreen deactivation system tracks unit positions to ensure blocks near active
                units remain loaded. Reset to 100001f when recalculating boundaries and updated via
                ExtendDisableToUnitPosition.
            </summary>
        </member>
        <member name="F:Map.minUnitY">
            <summary>
                Minimum Y position of active units used for extending the visible area. The
                offscreen deactivation system tracks unit positions to ensure blocks near active
                units remain loaded. Reset to 100001f when recalculating boundaries and updated via
                ExtendDisableToUnitPosition.
            </summary>
        </member>
        <member name="F:Map.nearestCheckPoint">
            <summary>
                Temporary storage for the nearest checkpoint found during proximity searches. Used
                by GetNearestCheckpoint methods to track the closest checkpoint while iterating
                through all checkpoints. This field optimizes performance during frequent checkpoint
                proximity checks.
            </summary>
        </member>
        <member name="F:Map.platformLayer">
            <summary>
                LayerMask for the Platform layer. Used to detect one-way platforms that units can
                jump through from below but stand on from above, common in platformer gameplay
                mechanics.
            </summary>
        </member>
        <member name="F:Map.spawnPointInvisiblePrefabReference">
            <summary>
                Reference to the invisible spawn point prefab. Instantiated for spawn points that
                should function without visual indicators. Used via
                spawnPointInvisiblePrefabReference.Asset during map generation.
            </summary>
        </member>
        <member name="F:Map.spawnPointOffset">
            <summary>
                Random offset applied to spawn point selection to vary player starting positions.
                Initialized to a random value between 0 and 55 during map setup. Used when
                calculating spawn positions by adding this offset to the player number before modulo
                operation with total spawn points.
            </summary>
        </member>
        <member name="F:Map.spawnPointPrefabReference">
            <summary>
                Reference to the standard visible spawn point prefab. Instantiated when placing
                regular spawn points that show a visual indicator. Typically paired with an empty
                cage doodad placed above it.
            </summary>
        </member>
        <member name="F:Map.spawnPoints">
            <summary>
                List of player spawn points in the map. Spawn points are registered via
                RegisterSpawnPoint. Used by GetSpawnPointPos and GetSpawnPoint to determine where
                players spawn, cycling through points based on player number and spawnPointOffset.
                Critical for multiplayer spawn distribution. Initialized in Awake() and set to null
                in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.startFromSuperCheckPoint">
            <summary>
                Indicates whether the player should start from a super checkpoint position instead
                of normal spawn points. When true, uses superCheckpointStartPos for the player's
                starting location. Reset to false during ClearSuperCheckpointStatus.
            </summary>
        </member>
        <member name="F:Map.superCheckpointStartPos">
            <summary>
                The grid position where players spawn when starting from a super checkpoint. Used in
                conjunction with startFromSuperCheckPoint to override normal spawn behavior. Both
                column and row are set to -1 when cleared, indicating no super checkpoint is active.
            </summary>
        </member>
        <member name="F:Map.switchesLayer">
            <summary>
                LayerMask for the Switches layer. Used to detect interactive switch objects that can
                trigger events, open doors, or activate mechanisms when interacted with by units.
            </summary>
        </member>
        <member name="F:Map.unitLayer">
            <summary>
                LayerMask for the Units layer. Used to detect collision with units (enemies,
                players, NPCs) for combat targeting, movement blocking, and interaction checks.
            </summary>
        </member>
        <member name="F:Map.unitOffsetCount">
            <summary>
                Counter used by GetUnitXOffset() to generate pseudo-random X position offsets for
                units. Incremented each time an offset is requested to create variation in unit
                placement.
            </summary>
        </member>
        <member name="F:Map.victoryLayer">
            <summary>
                LayerMask for the Finish layer. Used to detect level completion triggers and victory
                zones that end the level when reached by players.
            </summary>
        </member>
        <member name="F:Map.waterLayer">
            <summary>
                LayerMask for the Water layer. Used to detect water volumes for swimming mechanics,
                drowning checks, and water-specific physics interactions.
            </summary>
        </member>
        <!-- Environmental Objects Methods -->
        <member name="M:Map.BloodyDoodads(System.Single,System.Single,System.Single)">
            <summary>
                Applies blood effects to decal doodads within a circular range of the specified
                position. Iterates through decal doodads up to the count of destroyable doodads and
                calls the Bloody() method on doodads within range, decreasing the iteration index
                when a doodad is bloodied to account for potential list modifications.
            </summary>
            <param name="x">The X coordinate of the blood effect center.</param>
            <param name="y">The Y coordinate of the blood effect center.</param>
            <param name="range">The radius within which doodads will be bloodied.</param>
        </member>
        <member name="M:Map.CallFakeHelicopter(UnityEngine.Vector2,System.Single)">
            <summary>
                Summons a fake helicopter to the specified position after a delay. The fake
                helicopter is a visual-only helicopter used for cinematic sequences that doesn't
                interact with gameplay.
            </summary>
            <param name="position">The target position for the helicopter</param>
            <param name="delay">The delay in seconds before the helicopter appears</param>
            <remarks>
                Creates a single shared instance of HelicopterFake if one doesn't exist. The fake
                helicopter is typically used for background effects or scripted sequences where a
                full helicopter entity isn't needed.
            </remarks>
        </member>
        <member name="M:Map.DamageBackground(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Damages background and foreground blocks within a circular radius. This method is
                used for explosive damage that affects the destructible terrain behind the main play
                area.
            </summary>
            <param name="damageSender">The MonoBehaviour that is causing the damage (used for damage attribution)</param>
            <param name="damage">The amount of damage to apply to blocks</param>
            <param name="radius">The radius of the damage effect in world units</param>
            <param name="x">The X coordinate of the damage center</param>
            <param name="y">The Y coordinate of the damage center</param>
            <remarks>
                Calculates which grid cells fall within the damage radius and applies damage to both
                background and foreground blocks. Uses MapController.Damage_Networked to ensure
                damage is synchronized across all clients. The damage type is specifically set to
                DestroyBackground.
            </remarks>
        </member>
        <member name="M:Map.DamageDoodads(System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean@,UnityEngine.MonoBehaviour)">
            <summary>
                Damages destroyable doodads within a circular range, applying damage based on player
                permissions and doodad properties. Checks if doodads can be damaged by mooks (if
                playerNum is negative) or heroes, respects immunity flags, and tracks whether
                impenetrable doodads were hit.
            </summary>
            <param name="damage">The amount of damage to apply to doodads.</param>
            <param name="damageType">The type of damage being applied.</param>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <param name="xI">The horizontal force component for the damage.</param>
            <param name="yI">The vertical force component for the damage.</param>
            <param name="range">The radius within which doodads will be damaged.</param>
            <param name="playerNum">The player number causing the damage (negative values indicate mook damage).</param>
            <param name="hitImpenetrableDoodad">Output parameter set to true if an impenetrable doodad was hit.</param>
            <param name="sender">The MonoBehaviour that caused the damage (optional).</param>
            <returns>True if at least one doodad was damaged, false otherwise.</returns>
        </member>
        <member name="M:Map.DamageStaticDoodads(System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.MonoBehaviour)">
            <summary>
                Damages static doodads within a circular range by causing them to collapse. Iterates
                through the static doodads list in reverse order and collapses any doodads within
                the specified range.
            </summary>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <param name="xI">The horizontal force component (currently unused in implementation).</param>
            <param name="yI">The vertical force component (currently unused in implementation).</param>
            <param name="range">The radius within which static doodads will be damaged.</param>
            <param name="sender">The MonoBehaviour that caused the damage (optional, currently unused).</param>
            <returns>True if at least one static doodad was damaged, false otherwise.</returns>
        </member>
        <member name="M:Map.DisturbAlienEggs(System.Single,System.Single,System.Int32)">
            <summary>
                Alerts alien eggs within a 64-unit radius of a position. Used to trigger alien egg
                reactions when players get too close.
            </summary>
            <param name="x">The X coordinate to check from</param>
            <param name="y">The Y coordinate to check from</param>
            <param name="playerNum">The player number disturbing the eggs (unused in current implementation)</param>
        </member>
        <member name="M:Map.DisturbWildLife(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Disturbs wildlife and alerts units within hearing range of a sound. Wildlife uses
                hearing range multipliers, units check their hearing capabilities and player
                allegiance.
            </summary>
            <param name="x">The X coordinate of the disturbance</param>
            <param name="y">The Y coordinate of the disturbance</param>
            <param name="range">The base range of the disturbance</param>
            <param name="playerNum">The player number causing the disturbance (-1 skips unit alerts)</param>
        </member>
        <member name="M:Map.GeTargetableObjectsInRange(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Gets all enemy targetable objects within a circular range. Uses Manhattan distance
                (sum of X and Y distances) for range calculation.
            </summary>
            <param name="playerNum">The player number searching for targets</param>
            <param name="range">The maximum Manhattan distance to search within</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>A list of all targetable objects within range that are enemies of the specified player</returns>
        </member>
        <member name="M:Map.GetDoodadVariationAmount(DoodadType)">
            <summary>
                Gets the number of available variations for a specific doodad type. Used to
                determine valid variation indices when spawning doodads.
            </summary>
            <param name="type">The type of doodad to check variations for</param>
            <returns>The number of available variations for the doodad type</returns>
        </member>
        <member name="M:Map.GetNearbyMookSwitch(System.Single,System.Single)">
            <summary>
                Finds any switch that can be activated by mooks (enemies) within range. Filters for
                switches with mook activation permissions.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The nearest mook-activatable switch, checking both registered list and physics overlaps, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearbySwitch(System.Single,System.Single)">
            <summary>
                Finds any switch within interaction range of the specified position. Checks both
                registered switches list and physics overlaps.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The nearest switch within 16 units horizontally and 24 units vertically, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearbyTeleportDoor(System.Single,System.Single)">
            <summary>
                Finds any teleport door within interaction range of the specified position. Used for
                teleporter entrance detection.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The nearest teleport door within 32 units horizontally and 24 units vertically, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestAcid(System.Single,System.Single,System.Single)">
            <summary>
                Finds the nearest acid pool within the specified range that doesn't fully submerge
                units. Iterates through all registered acid pools and returns the first one within
                range that either is null or doesn't submerge units (SubMergesUnit returns false).
            </summary>
            <param name="x">The X coordinate to search from.</param>
            <param name="y">The Y coordinate to search from.</param>
            <param name="range">The maximum distance to search for acid pools.</param>
            <returns>The nearest DoodadAcidPool within range that doesn't fully submerge units, or null if none found.</returns>
        </member>
        <member name="M:Map.GetNextClosestTargetableObject(System.Int32,DirectionEnum,System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.List{TargetableObject})">
            <summary>
                Finds the next closest targetable object (destructible environment pieces) in a
                specified direction. Used for target cycling systems.
            </summary>
            <param name="playerNum">The player number searching for targets</param>
            <param name="direction">The direction to search in (Up, Down, Left, Right, or Any)</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="alreadyFoundTargets">List of targets to exclude from the search</param>
            <returns>The next closest targetable object in the specified direction, or null if none found</returns>
        </member>
        <member name="M:Map.GetNextClosestTargetableObjectOnScreen(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the closest targetable object that is currently visible on screen. Can
                optionally filter for boss-specific targets only.
            </summary>
            <param name="playerNum">The player number searching for targets</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="onlyBossTargets">If true, only returns objects marked as boss targets</param>
            <returns>The closest on-screen targetable object, or null if none found</returns>
        </member>
        <member name="M:Map.GetOtherZiplinePoint(ZiplinePoint)">
            <summary>
                Finds and returns the paired endpoint for a given zipline point.
            </summary>
            <param name="zipLinePoint">The zipline point to find a pair for</param>
            <returns>The other endpoint of the zipline, or null if no valid pair exists</returns>
            <remarks>
                This complex method searches through the map's doodad list to find zipline
                connections. It first locates the input point in the doodad list, then checks its
                TagAsGridPoint for a tagged connection. If found, it searches for another zipline at
                those coordinates. If no tag exists, it searches backwards through previous doodads
                for an unpaired zipline. This system allows both explicit zipline connections (via
                tags) and implicit pairing (sequential in the doodad list). The method ensures
                ziplines are properly connected in pairs for gameplay functionality.
            </remarks>
        </member>
        <member name="M:Map.GetStaticDoodad(System.Int32,System.Int32)">
            <summary>
                Retrieves a static doodad at the specified grid coordinates. Iterates through all
                registered static doodads to find one matching the given column and row position.
            </summary>
            <param name="collumn">The column coordinate in the map grid to search. Note: Parameter name contains a typo ("collumn").</param>
            <param name="row">The row coordinate in the map grid to search.</param>
            <returns>The Doodad at the specified grid position, or null if no static doodad exists at that location.</returns>
        </member>
        <member name="M:Map.HurtWildLife(System.Single,System.Single,System.Single)">
            <summary>
                Damages wildlife within range of a position. Only affects already disturbed
                wildlife, with vertical range 3x the horizontal range.
            </summary>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="range">The horizontal range for damaging wildlife</param>
        </member>
        <member name="M:Map.IsInSubstance(System.Single,System.Single,System.Single)">
            <summary>
                Checks if a position is within a substance (submerging) doodad like water, acid, or
                quicksand. Iterates through all grass/blood doodads and finds those that submerge
                units within range.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="range">The range to check for substance doodads</param>
            <returns>The first substance doodad found at the position, or null if none found</returns>
        </member>
        <member name="M:Map.JiggleDoodads(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Applies jiggle physics to doodads within range of a position. Forces are calculated
                based on distance from center and applied to grass/blood doodads, also triggers
                slime jiggling.
            </summary>
            <param name="x">The X coordinate of the jiggle origin</param>
            <param name="y">The Y coordinate of the jiggle origin</param>
            <param name="xRange">The horizontal range of the jiggle effect</param>
            <param name="yRange">The vertical range of the jiggle effect</param>
            <param name="force">The force multiplier (multiplied by 100 before applying)</param>
        </member>
        <member name="M:Map.JiggleSlime(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Jiggles slime doodads that contain a position within their bounds. Checks if
                position is within slime bounds (accounting for width/height) and applies horizontal
                force.
            </summary>
            <param name="x">The X coordinate to check for slime</param>
            <param name="y">The Y coordinate to check for slime</param>
            <param name="xRange">The horizontal range (unused in current implementation)</param>
            <param name="yRange">The vertical range (unused in current implementation)</param>
        </member>
        <member name="M:Map.PassThroughScenery(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Checks if a position passes through damageable scenery and knocks it. Used to
                interact with destructible environmental objects like crates or barrels.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="xI">The horizontal velocity for knocking</param>
            <param name="yI">The vertical velocity for knocking</param>
            <returns>True if any scenery was knocked, false otherwise</returns>
        </member>
        <member name="M:Map.PlaceDoodad(DoodadInfo)">
            <summary>
                Places a doodad (decorative or interactive object) in the map based on the provided
                doodad information. Handles spawning of all doodad types including enemies, traps,
                checkpoints, cages, vehicles, decorations, and special objects. Applies variation
                selection, position adjustment, and game mode specific modifications.
            </summary>
            <param name="doodad">The doodad information containing type, position, variation, and other spawn data</param>
            <returns>The instantiated GameObject for the doodad, or null if spawning conditions aren't met</returns>
        </member>
        <member name="M:Map.RegisterAlienEggExplosive(AlienEggExplosive)">
            <summary>
                Registers an alien egg explosive with the map's tracking system. Alien eggs are
                environmental hazards that can explode when damaged or triggered, spawning
                facehuggers or dealing area damage to nearby units.
            </summary>
            <param name="egg">The AlienEggExplosive object to register.</param>
        </member>
        <member name="M:Map.RegisterAlienTelepathyTrigger(AlienTelepathyTrigger)">
            <summary>
                Registers an alien telepathy trigger with the map's tracking system. These triggers
                are special environmental objects that activate telepathic alien behaviors when
                players enter their trigger zones, potentially alerting or controlling nearby alien
                units.
            </summary>
            <param name="alien">The AlienTelepathyTrigger object to register.</param>
        </member>
        <member name="M:Map.RegisterCage(Cage)">
            <summary>
                Registers a cage object with the map's tracking system. Cages are interactive
                objects that typically contain prisoners or power-ups that can be freed by
                destroying the cage. Initializes the cages list if it doesn't exist.
            </summary>
            <param name="cage">The Cage object to register for tracking.</param>
        </member>
        <member name="M:Map.RegisterCameraBlocker(CameraBlockers)">
            <summary>
                Registers a camera blocker object that restricts camera movement in specific areas.
                Camera blockers are used to create boundaries that prevent the camera from moving
                beyond certain points, typically used for level boundaries or cinematic sequences.
            </summary>
            <param name="cB">The CameraBlockers object to register.</param>
        </member>
        <member name="M:Map.RegisterDamageableScenerye(DamageableScenery)">
            <summary>
                Registers a DamageableScenery object with the map's scenery tracking system.
                Prevents duplicate registrations and initializes the damageableScenery list if it
                doesn't exist. Note: Method name contains a typo ("Scenerye").
            </summary>
            <param name="tree">The DamageableScenery to register.</param>
        </member>
        <member name="M:Map.RegisterDecalDoodad(Doodad)">
            <summary>
                Registers a decal doodad with the map's tracking system. Decal doodads are visual
                elements like blood splatters or burn marks that can be applied to surfaces and
                affected by environmental effects. Initializes the decal doodads list if it doesn't
                exist.
            </summary>
            <param name="doodad">The Doodad object representing a decal to register.</param>
        </member>
        <member name="M:Map.RegisterDestroyableDoodad(Doodad)">
            <summary>
                Registers a destroyable doodad (decorative object) with the map's tracking system.
                Doodads include environmental props like barrels, crates, signs, and other
                destructible scenery that adds visual detail and can be destroyed for effect.
            </summary>
            <param name="doodad">The Doodad object to register as destroyable.</param>
        </member>
        <member name="M:Map.RegisterGrassAndBlood(Doodad)">
            <summary>
                Registers a grass or blood doodad with the map's substance tracking system. If the
                doodad is an acid pool (DoodadAcidPool), it is also added to the specialized acid
                pools list for additional tracking. Prevents duplicate registrations by checking if
                the doodad already exists in the list.
            </summary>
            <param name="doodad">The Doodad object to register, which can be grass, blood, acid, or other liquid substances.</param>
        </member>
        <member name="M:Map.RegisterHelicopter(Helicopter)">
            <summary>
                Registers a helicopter with the map by setting it as the newest helicopter
                reference. This static reference is used by various systems to interact with the
                most recently spawned helicopter on the map.
            </summary>
            <param name="heli">The Helicopter object to register as the newest helicopter.</param>
        </member>
        <member name="M:Map.RegisterJigglyBit(Doodad)">
            <summary>
                Registers a jiggly slime doodad with the map's tracking system. Jiggly bits are
                special doodads that exhibit physics-based jiggling behavior when affected by
                explosions or other forces.
            </summary>
            <param name="doodad">The Doodad object representing jiggly slime to register.</param>
        </member>
        <member name="M:Map.RegisterMookDoor(MookDoor)">
            <summary>
                Registers a MookDoor with the map's door tracking system. Initializes the mookDoors
                list if it doesn't exist.
            </summary>
            <param name="door">The MookDoor to register.</param>
        </member>
        <member name="M:Map.RegisterStaticDoodad(Doodad)">
            <summary>
                Registers a static doodad with the map's tracking system. Static doodads are
                non-moving environmental objects that can be damaged or collapsed but don't have
                special behaviors like jiggly physics. Initializes the static doodads list if it
                doesn't exist.
            </summary>
            <param name="doodad">The Doodad object to register as a static environmental element.</param>
        </member>
        <member name="M:Map.RegisterSwitch(Switch)">
            <summary>
                Registers a Switch with the map's switch tracking system. Initializes the switches
                list if it doesn't exist.
            </summary>
            <param name="swit">The Switch to register.</param>
        </member>
        <member name="M:Map.RegisterTeleportDoor(TeleportDoor)">
            <summary>
                Registers a TeleportDoor with the map's teleport system. Adds the door to the
                general teleportDoors list and also to either entranceDoors or exitDoors based on
                the door's isEntranceDoor property.
            </summary>
            <param name="teleportDoor">The TeleportDoor to register.</param>
        </member>
        <member name="M:Map.RegisterTreeFoliage(TreeFoliage)">
            <summary>
                Registers a tree foliage object with the map's tracking system for environmental
                effects. Tree foliage includes palm trees and other vegetation that can shake when
                affected by explosions or other forces, creating visual feedback for nearby impacts.
            </summary>
            <param name="tree">The TreeFoliage object to register for tracking.</param>
        </member>
        <member name="M:Map.RemoveAlienEggExplosive(AlienEggExplosive)">
            <summary>
                Removes an alien egg explosive from the map's tracking system, typically after it
                has exploded or been destroyed. This ensures the egg is no longer considered for
                gameplay interactions or AI targeting.
            </summary>
            <param name="egg">The AlienEggExplosive object to remove from tracking.</param>
        </member>
        <member name="M:Map.RemoveAlienTelepathyTrigger(AlienTelepathyTrigger)">
            <summary>
                Removes an alien telepathy trigger from the map's tracking system, typically when
                the trigger is destroyed or no longer needed. This prevents the trigger from
                continuing to affect alien behavior after it should be inactive.
            </summary>
            <param name="alien">The AlienTelepathyTrigger object to remove from tracking.</param>
        </member>
        <member name="M:Map.RemoveCage(Cage)">
            <summary>
                Removes a cage from the map's tracking system, typically after it has been destroyed
                and its contents freed. Checks if the cages list exists before attempting removal.
            </summary>
            <param name="cage">The Cage object to remove from tracking.</param>
        </member>
        <member name="M:Map.RemoveCameraBlocker(CameraBlockers)">
            <summary>
                Removes a camera blocker from the map's tracking system, allowing the camera to move
                freely through the previously blocked area. This is typically called when a blocker
                is destroyed or when transitioning between level sections.
            </summary>
            <param name="cB">The CameraBlockers object to remove from tracking.</param>
        </member>
        <member name="M:Map.RemoveDecalDoodad(Doodad)">
            <summary>
                Removes a decal doodad from the map's tracking system, typically when cleaning up
                visual effects or when the decal is no longer needed.
            </summary>
            <param name="doodad">The Doodad object representing a decal to remove.</param>
        </member>
        <member name="M:Map.RemoveDestroyableDoodad(Doodad)">
            <summary>
                Removes a destroyable doodad from the map's tracking system. This method is
                typically called when a doodad is destroyed or no longer needs to be tracked for
                damage calculations.
            </summary>
            <param name="doodad">The Doodad object to remove from the destroyable doodads list.</param>
        </member>
        <member name="M:Map.RemoveGrassOrBlood(Doodad)">
            <summary>
                Removes a grass or blood doodad from the map's substance tracking system. If the
                doodad is an acid pool, it is also removed from the specialized acid pools list.
                Only removes the doodad if it exists in the tracking list.
            </summary>
            <param name="doodad">The Doodad object to remove from substance tracking.</param>
        </member>
        <member name="M:Map.RemoveJigglyBit(Doodad)">
            <summary>
                Removes a jiggly slime doodad from the map's tracking system, typically when the
                jiggly bit is destroyed or no longer needs physics simulation.
            </summary>
            <param name="doodad">The Doodad object representing jiggly slime to remove.</param>
        </member>
        <member name="M:Map.RemoveMookDoor(MookDoor)">
            <summary>
                Removes a MookDoor from the map's door tracking system.
            </summary>
            <param name="door">The MookDoor to remove.</param>
        </member>
        <member name="M:Map.RemoveStaticDoodad(Doodad)">
            <summary>
                Removes a static doodad from the map's tracking system, typically when it has been
                destroyed or collapsed.
            </summary>
            <param name="doodad">The Doodad object to remove from static doodad tracking.</param>
        </member>
        <member name="M:Map.RemoveSwitch(Switch)">
            <summary>
                Removes a Switch from the map's switch tracking system. This method can be called
                via network RPC.
            </summary>
            <param name="swit">The Switch to remove.</param>
        </member>
        <member name="M:Map.RemoveTeleportDoor(TeleportDoor)">
            <summary>
                Removes a TeleportDoor from all relevant tracking lists (teleportDoors,
                entranceDoors, or exitDoors based on the door's type).
            </summary>
            <param name="teleportDoor">The TeleportDoor to remove.</param>
        </member>
        <member name="M:Map.ResetZiplines">
            <summary>
                Resets all ziplines in the map and re-establishes their connections.
            </summary>
            <remarks>
                This method performs a complete reset of the zipline system in three passes: 1.
                Resets all zipline points to their default state 2. Connects ziplines that have
                explicit tag connections (TagAsGridPoint) 3. Connects remaining untagged ziplines in
                pairs based on their order in the doodad list The method ensures every zipline point
                calls SetupZipline() after finding its pair. The alternating counter in the third
                pass creates implicit pairs from sequential ziplines in the doodad list. This is
                typically called during map initialization or reset.
            </remarks>
        </member>
        <member name="M:Map.SetOilAlight(UnityEngine.Vector2,UnityEngine.Vector3)">
            <summary>
                Sets oil particles on fire by raycasting in a specific direction from an origin
                point. Used internally by explosions to ignite nearby oil.
            </summary>
            <param name="direction">Direction to check for oil particles</param>
            <param name="origin">Starting position for the raycast</param>
        </member>
        <member name="M:Map.ShakeTrees(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Shakes tree foliage within a specified range from a position. Applies force to trees
                based on their distance from the center position, also triggers doodad jiggling.
            </summary>
            <param name="x">The X coordinate of the shake origin</param>
            <param name="y">The Y coordinate of the shake origin</param>
            <param name="xRange">The horizontal range of the shake effect</param>
            <param name="yRange">The vertical range of the shake effect</param>
            <param name="force">The force multiplier for the shake effect</param>
        </member>
        <!-- Environmental Objects Fields -->
        <member name="F:Map.LevelEndExplosionActiveList">
            <summary>
                List of currently active HiddenExplosives objects creating level end explosion
                effects. Objects are moved here from the bank when MakeLevelEndExplosion is called
                and returned to the bank during map cleanup. Initialized with capacity of 10.
            </summary>
        </member>
        <member name="F:Map.LevelEndExplosionBank">
            <summary>
                Pool of inactive HiddenExplosives objects used for level end explosion effects.
                Pre-populated with 10 instances during map initialization to avoid runtime
                instantiation. Objects are moved to the active list when triggered and returned to
                this bank when the map is destroyed.
            </summary>
        </member>
        <member name="F:Map.LevelEndExplosionBankSizeInc">
            <summary>
                The initial size and increment value for the level end explosion object pool. Set to
                10, this determines how many HiddenExplosives objects are pre-instantiated in the
                bank during initialization.
            </summary>
        </member>
        <member name="F:Map.acidPools">
            <summary>
                List of acid pool hazards that damage units on contact. Acid pools are registered
                via RegisterAcidPool and removed via RemoveAcidPool. Used for environmental hazard
                mechanics and damage-over-time effects. Initialized in Awake() and set to null in
                OnDestroy().
            </summary>
        </member>
        <member name="F:Map.alienTelepathyTriggers">
            <summary>
                List of triggers for alien telepathy events. Triggers are registered via
                RegisterAlienTelepathyTrigger and removed via RemoveAlienTelepathyTrigger. Used for
                alien-specific gameplay mechanics and mind control effects. Initialized in Awake()
                and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.cages">
            <summary>
                Static list tracking all cage objects containing prisoners or collectibles. Cages
                are registered via RegisterCage() and removed via RemoveCage(). Used for rescue
                objectives and collectible tracking.
            </summary>
        </member>
        <member name="F:Map.damageableScenery">
            <summary>
                List of scenery objects that can take damage and be destroyed. Scenery is registered
                via RegisterDamageableScenery and removed via RemoveDamageableScenery. Used for
                destructible environment elements larger than doodads. Initialized in Awake() and
                set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.decalDoodads">
            <summary>
                List of decorative doodads that render as decals (e.g., blood splatters, scorch
                marks). Doodads are registered via RegisterDecalDoodad and removed via
                RemoveDecalDoodad. Used for visual environmental effects that don't affect gameplay.
                Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.destroyableDoodads">
            <summary>
                List of doodads that can be destroyed by damage (e.g., crates, barrels, destructible
                props). Doodads are registered via RegisterDestroyableDoodad and removed via
                RemoveDestroyableDoodad. Used for environmental destruction and chain reaction
                mechanics. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.entranceDoors">
            <summary>
                Subset of teleportDoors that serve as entrance portals. Entrance doors are added
                when RegisterTeleportDoor is called with an entrance-type door and removed via
                RemoveTeleportDoor. Used for level transitions and spawn point mechanics.
                Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.exitDoors">
            <summary>
                Subset of teleportDoors that serve as exit portals. Exit doors are added when
                RegisterTeleportDoor is called with an exit-type door and removed via
                RemoveTeleportDoor. Used for level completion and transition mechanics. Initialized
                in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.exitPortalNID">
            <summary>
                Network ID for the level exit portal. Allocated deterministically during map setup
                and used to register the exit portal GameObject when created via CreateExitPortal.
                The portal spawns at the specified position offset by (16, 112) pixels.
            </summary>
        </member>
        <member name="F:Map.grassAndBlood">
            <summary>
                List of grass and blood effect doodads. These are visual elements registered via
                RegisterGrassAndBloodDoodad and removed via RemoveGrassAndBloodDoodad. Used for
                organic environmental decoration and gore effects. Initialized in Awake() and set to
                null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.jigglySlime">
            <summary>
                List of jiggly slime doodads with physics-based movement. Slime doodads are
                registered via RegisterJigglySlime and removed via RemoveJigglySlime. Used for
                organic environmental effects with bouncy physics properties. Initialized in Awake()
                and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.mookDoors">
            <summary>
                Static list of all MookDoor objects in the map. Doors are registered via
                RegisterMookDoor() and removed via DeRegisterMookDoor(). Used for managing
                interactive door mechanics that enemies can open or players can destroy.
            </summary>
        </member>
        <member name="F:Map.remoteCarPrefabReference">
            <summary>
                Reference to the remote control explosive car prefab. This prefab reference allows
                the map to instantiate remote controlled explosive vehicles when required by map
                data or gameplay events.
            </summary>
        </member>
        <member name="F:Map.ropePrefabReference">
            <summary>
                Reference to the Predabro rope prefab used for spawning rope objects in the map.
                This prefab reference allows the map to instantiate rope elements when needed for
                gameplay mechanics.
            </summary>
        </member>
        <member name="F:Map.staticDoodads">
            <summary>
                List of static non-interactive doodads for decoration. Static doodads are registered
                via RegisterStaticDoodad and removed via RemoveStaticDoodad. Used for immutable
                environmental props that provide visual detail. Initialized in Awake() and set to
                null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.switches">
            <summary>
                List of all interactive switches in the map. Switches are registered via
                RegisterSwitch (which includes null-check initialization) and removed via
                RemoveSwitch. Used for puzzle mechanics and triggered events. The RegisterSwitch
                method initializes this list if null. Set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.teleportDoors">
            <summary>
                Master list of all teleport doors regardless of type. Doors are registered via
                RegisterTeleportDoor and removed via RemoveTeleportDoor. This list contains all
                doors, while entranceDoors and exitDoors contain type-specific subsets. Initialized
                in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.treeFoliage">
            <summary>
                List of tree foliage objects for jungle/forest environments. Tree foliage is
                registered via RegisterTreeFoliage and removed via RemoveTreeFoliage. Used for
                environmental decoration with potential physics interactions. Initialized in Awake()
                and set to null in OnDestroy().
            </summary>
        </member>
        <!-- Unit Management Methods -->
        <member name="M:Map.CallFakeHelicopter(UnityEngine.Vector2,System.Single)">
            <summary>
                Summons a fake helicopter to enter the scene at the specified position after a
                delay.
            </summary>
            <param name="position">The target position where the helicopter should appear.</param>
            <param name="delay">The delay in seconds before the helicopter enters.</param>
            <remarks>
                Creates a singleton fake helicopter instance if one doesn't exist. Fake helicopters
                are typically used for scripted sequences or cutscenes where player interaction is
                not required. The helicopter is reused across multiple calls.
            </remarks>
        </member>
        <member name="M:Map.Create4AmmoAndRevives(UnityEngine.Vector3,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a 2x2 arrangement of ammunition and revival crates at the specified
                position. The arrangement includes two ammo crates (top), one revive crate
                (bottom-left), and one damage crate (bottom-right).
            </summary>
            <param name="pos">The position for the top-left crate</param>
            <param name="collumn">The column index for block array placement</param>
            <param name="row">The row index for block array placement</param>
            <param name="setupBlocks">Whether to run block setup logic (connections to adjacent blocks)</param>
            <remarks>
                Sets the active theme to jungle theme for crate selection. Each crate is properly
                registered in the blocks array, networked, and initialized. If setupBlocks is true,
                establishes connections to adjacent blocks and runs FirstFrame initialization.
            </remarks>
        </member>
        <member name="M:Map.Create4AmmoAndRevives(UnityEngine.Vector3,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a 2x2 arrangement of power-up crates at the specified position.
            </summary>
            <param name="pos">The base position for the crate arrangement.</param>
            <param name="collumn">The column coordinate for block registration.</param>
            <param name="row">The row coordinate for block registration.</param>
            <param name="setupBlocks">Whether to perform block setup and initialization.</param>
            <remarks>
                Creates two ammo crates on top, one revival crate and one damage boost crate on
                bottom. Each crate is properly registered in the block grid and with the networking
                system. The jungle theme is temporarily set to ensure consistent crate types.
            </remarks>
        </member>
        <member name="M:Map.GetNearestEnemyUnit(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest enemy unit that can be damaged by the specified player. This is a
                convenience overload that calls the full GetNearestEnemyUnit with equal X and Y
                ranges.
            </summary>
            <param name="playerNum">Player number for damage checking</param>
            <param name="range">Maximum search range (used for both X and Y)</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest enemy unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestEnemyUnit(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Int32,Unit)">
            <summary>
                Finds the nearest enemy unit within specified X and Y ranges that can be damaged by
                the player. Supports directional filtering and unit exclusion.
            </summary>
            <param name="playerNum">Player number for damage checking</param>
            <param name="xRange">Maximum horizontal search range</param>
            <param name="yRange">Maximum vertical search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <param name="xDirection">Direction filter (1 for right only, -1 for left only, 0 for both)</param>
            <param name="ignoreUnit">Optional unit to exclude from the search</param>
            <returns>The nearest enemy unit matching all criteria, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestEvilUnit(System.Int32,System.Single,System.Single)">
            <summary>
                Finds the nearest evil unit (enemy) within range that is still alive. Uses Manhattan
                distance for proximity calculations and checks the IsEvil() flag on units.
            </summary>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <returns>The nearest evil unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestHero(Unit,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest hero (player character) within specified ranges, with optional
                direction filtering. Searches through the BroBase.bros list rather than general
                units.
            </summary>
            <param name="ignore">Unit to exclude from the search</param>
            <param name="direction">Direction filter (1 for right only, -1 for left only, 0 for both)</param>
            <param name="xRange">Maximum horizontal search range</param>
            <param name="yRange">Maximum vertical search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead heroes in the search</param>
            <returns>The nearest hero matching the criteria, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestUnit(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest unit belonging to a specific player within range using Manhattan
                distance. Similar to GetNearestUnitWithXBias but uses a local variable for tracking
                instead of static fields.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest unit matching the criteria, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestUnitWithXBias(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest unit belonging to a specific player within range, using Manhattan
                distance (sum of X and Y distances) for calculations. Biases search horizontally.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest unit matching the criteria, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestVisibleDeadUnit(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Finds the nearest dead unit belonging to a specific player that has line of sight
                from the search position. Uses raycasting to ensure no solid terrain blocks the
                path.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <returns>The nearest visible dead unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestVisibleUnit(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest unit belonging to a specific player that has line of sight from
                the search position. Uses raycasting to ensure visibility.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest visible unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestVisibleUnitDamagebleBy(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest enemy unit that has line of sight from the search position and can
                be damaged by the specified player. Combines visibility checking with damage
                relationship checking.
            </summary>
            <param name="playerNum">Player number for damage checking</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest visible enemy unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetNextClosestUnit(System.Int32,DirectionEnum,System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.List{Unit})">
            <summary>
                Finds the next closest enemy unit in a specified direction, excluding units already
                found. Used for cycling through targets.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="direction">The direction to search in (Up, Down, Left, Right, or Any)</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="alreadyFoundUnits">List of units to exclude from the search</param>
            <returns>The next closest unit in the specified direction, or null if none found</returns>
        </member>
        <member name="M:Map.GetNextClosestUnitOnScreen(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Finds the closest enemy unit that is currently visible on screen. Used for
                auto-targeting systems that should only target visible enemies.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The closest on-screen enemy unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetUnitCountInRange(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Counts the number of units within a rectangular range without creating a list. More
                efficient than GetUnitsInRange when only the count is needed.
            </summary>
            <param name="xRange">Maximum horizontal distance from center</param>
            <param name="yRange">Maximum vertical distance from center</param>
            <param name="x">X position of rectangle center</param>
            <param name="y">Y position of rectangle center</param>
            <param name="includeDead">Whether to include dead units in the count</param>
            <returns>Number of units within the specified range</returns>
        </member>
        <member name="M:Map.GetUnitsInRange(System.Int32,System.Single,System.Single,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
                Populates a list with all units within a circular range of a position. Uses squared
                distance for efficiency and adds a 6 unit vertical offset to unit positions for
                center-of-mass calculations.
            </summary>
            <param name="range">Radius of the search circle</param>
            <param name="x">X position of circle center</param>
            <param name="y">Y position of circle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <param name="unitsInRange">List to populate with found units (not cleared before adding)</param>
        </member>
        <member name="M:Map.GetUnitsInRange(System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Returns a new list containing all units within a circular range of a position.
                Creates and returns a new list rather than populating an existing one.
            </summary>
            <param name="range">Radius of the search circle</param>
            <param name="x">X position of circle center</param>
            <param name="y">Y position of circle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <returns>New list containing all units within range</returns>
        </member>
        <member name="M:Map.GetUnitsInRange(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
                Populates a list with all units within a rectangular range of a position. Uses
                separate X and Y ranges for rectangular area searches.
            </summary>
            <param name="xRange">Maximum horizontal distance from center</param>
            <param name="yRange">Maximum vertical distance from center</param>
            <param name="x">X position of rectangle center</param>
            <param name="y">Y position of rectangle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <param name="unitsInRange">List to populate with found units (not cleared before adding)</param>
        </member>
        <member name="M:Map.GetUnitsInRange(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Returns a new list containing all units within a rectangular range of a position.
                Creates and returns a new list rather than populating an existing one.
            </summary>
            <param name="xRange">Maximum horizontal distance from center</param>
            <param name="yRange">Maximum vertical distance from center</param>
            <param name="x">X position of rectangle center</param>
            <param name="y">Y position of rectangle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <returns>New list containing all units within the rectangular range</returns>
        </member>
        <member name="M:Map.IsCitizenNearby(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Checks if any citizen (civilian NPC) is within a rectangular range of the specified
                position. Used for AI decisions and player actions that need to consider nearby
                civilians.
            </summary>
            <param name="x">The X coordinate to check from</param>
            <param name="y">The Y coordinate to check from</param>
            <param name="xRange">The horizontal search range in world units</param>
            <param name="yRange">The vertical search range in world units</param>
            <returns>True if at least one citizen is within the specified range, false otherwise</returns>
            <remarks>
                Iterates through the citizens list backwards and checks each citizen's position
                against the provided range. The rectangular check uses absolute distance comparisons
                for efficiency.
            </remarks>
        </member>
        <member name="M:Map.IsCitizenNearby(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Checks if any citizen (civilian NPC) is within the specified rectangular range.
            </summary>
            <param name="x">The X coordinate of the search center.</param>
            <param name="y">The Y coordinate of the search center.</param>
            <param name="xRange">The horizontal search range in world units.</param>
            <param name="yRange">The vertical search range in world units.</param>
            <returns>True if at least one citizen is found within range; false otherwise.</returns>
            <remarks>
                Iterates through all registered citizens and checks their distance from the center
                point. Used for gameplay mechanics that need to detect civilian presence, such as
                rescue missions or collateral damage prevention.
            </remarks>
        </member>
        <member name="M:Map.IsEnemyUnitNearby(System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Checks if any enemy unit exists within a directional range with optional line of
                sight checking. Used for AI threat detection.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xDirection">The horizontal direction constraint (-1 for left only, 1 for right only, 0 for both)</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <param name="testForVisible">If true, performs line of sight check to each potential target</param>
            <returns>True if at least one enemy unit is found that meets all criteria, false otherwise</returns>
        </member>
        <member name="M:Map.IsEnemyUnitNearby(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Checks if any enemy unit exists within the specified range in any direction.
                Simplified version without directional constraints.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <returns>True if at least one enemy unit is found within range, false otherwise</returns>
        </member>
        <member name="M:Map.IsMapOpenAboveCrate(System.Int32,System.Int32)">
            <summary>
                Determines if the map area above a crate position is sufficiently open for spawn
                mechanics. Checks if there are fewer than 5 solid blocks in the upper portion of the
                map above the specified position.
            </summary>
            <param name="collumn">The column index of the crate position</param>
            <param name="row">The row index of the crate position</param>
            <returns>True if the area above is considered open (less than 5 solid blocks), false if it's too enclosed</returns>
            <remarks>
                Used to determine suitable spawn locations for items or enemies from crates. Checks
                from 9 rows below the map height to the top, counting non-empty, non-ladder, and
                non-bridge ground types. Returns true if the position is out of bounds (considered
                open).
            </remarks>
        </member>
        <member name="M:Map.IsUnitInRange(Unit,System.Int32,System.Single,System.Single)">
            <summary>
                Checks if a specific unit is within range of a position using Manhattan distance.
                Adds 6 units to the unit's Y position for center-of-mass calculations.
            </summary>
            <param name="unit">The unit to check</param>
            <param name="range">Maximum allowed distance</param>
            <param name="x">X position to measure from</param>
            <param name="y">Y position to measure from</param>
            <returns>True if the unit is within range, false otherwise</returns>
        </member>
        <member name="M:Map.IsUnitNearby(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Checks if any allied unit (same player number) exists within the specified range.
                Used for proximity detection of friendly units.
            </summary>
            <param name="playerNum">The player number to check for (finds units with same player number)</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <returns>True if at least one allied unit is found within range, false otherwise</returns>
        </member>
        <member name="M:Map.IsUnitNearby(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,Unit@)">
            <summary>
                Checks for allied units within range and returns the nearest one found. Extended
                version that provides access to the found unit.
            </summary>
            <param name="playerNum">The player number to check for (finds units with same player number)</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <param name="nearestUnit">Output parameter that will contain the nearest allied unit found</param>
            <returns>True if at least one allied unit is found within range, false otherwise</returns>
        </member>
        <member name="M:Map.RegisterCitizen(Citizen)">
            <summary>
                Registers a citizen NPC with the map's unit tracking system. Citizens are
                non-combatant NPCs that can be rescued by players, react to danger, and contribute
                to level objectives or scoring.
            </summary>
            <param name="citizen">The Citizen object to register for tracking.</param>
        </member>
        <member name="M:Map.RegisterDisturbedWildLife(WildLife)">
            <summary>
                Registers a wildlife creature as disturbed, indicating it has been startled or
                agitated by player actions, explosions, or other disturbances. Disturbed wildlife
                may flee, make noise, or exhibit other panic behaviors.
            </summary>
            <param name="wildLifeObject">The WildLife object to register as disturbed.</param>
        </member>
        <member name="M:Map.RegisterUnit(Unit,System.Boolean)">
            <summary>
                Registers a Unit with the map's unit tracking system. If the unit is a Mook and
                addToStatistics is true, also registers it with the StatisticsController for kill
                tracking.
            </summary>
            <param name="unit">The Unit to register.</param>
            <param name="addToStatistics">If true and the unit is a Mook, registers it with StatisticsController for kill tracking.</param>
        </member>
        <member name="M:Map.RegisterWildLife(WildLife)">
            <summary>
                Registers a wildlife creature with the map's tracking system. Wildlife includes
                passive animals like pigs, chickens, and other creatures that populate levels and
                can react to player actions or explosions.
            </summary>
            <param name="wildLifeObject">The WildLife object to register.</param>
        </member>
        <member name="M:Map.RemoveCitizen(Citizen)">
            <summary>
                Removes a citizen from the map's unit tracking system, typically when they are
                rescued, killed, or otherwise removed from gameplay. This ensures they are no longer
                considered for AI targeting or rescue objectives.
            </summary>
            <param name="citizen">The Citizen object to remove from tracking.</param>
        </member>
        <member name="M:Map.RemoveDisturbedWildLife(WildLife)">
            <summary>
                Removes a wildlife creature from the disturbed wildlife tracking list, typically
                when it has calmed down, been killed, or is no longer in a disturbed state. This
                allows the creature to return to normal behavior patterns.
            </summary>
            <param name="wildLifeObject">The WildLife object to remove from disturbed tracking.</param>
        </member>
        <member name="M:Map.RemoveUnit(Unit)">
            <summary>
                Removes a Unit from the map's unit tracking system.
            </summary>
            <param name="unit">The Unit to remove.</param>
        </member>
        <member name="M:Map.RemoveWildLife(WildLife)">
            <summary>
                Removes a wildlife creature from the map's general tracking system, typically when
                the creature is killed, leaves the level, or is no longer needed for gameplay
                purposes.
            </summary>
            <param name="wildLifeObject">The WildLife object to remove from tracking.</param>
        </member>
        <member name="M:Map.ReplaceCageWithAmmoAndRevives(Cage)">
            <summary>
                Replaces a single cage with ammunition and revival crates at the same position. This
                helper method handles the transformation of individual cages.
            </summary>
            <param name="cage">The cage to replace with crates</param>
            <remarks>
                Preserves the cage's position and column information before destroying it, then
                calls Create4AmmoAndRevives to spawn the replacement crates. The cage is properly
                collapsed and destroyed before replacement.
            </remarks>
        </member>
        <member name="M:Map.ReplaceCageWithAmmoAndRevives(Cage)">
            <summary>
                Replaces a single cage with a 2x2 arrangement of ammunition and revival crates.
            </summary>
            <param name="cage">The cage to replace with power-up crates.</param>
            <remarks>
                Called internally by ReplaceCagesWithAmmoAndRevives. Destroys the cage and creates
                four crates in its place: two ammo crates on top and one revival crate plus one
                damage boost crate on the bottom.
            </remarks>
        </member>
        <member name="M:Map.ReplaceCagesWithAmmoAndRevives">
            <summary>
                Replaces all cages in the current map with ammunition and revival crates. This is
                typically used in specific game modes or when transitioning to different gameplay
                scenarios.
            </summary>
            <remarks>
                Iterates through the cages list backwards and calls ReplaceCageWithAmmoAndRevives
                for each valid cage. This transformation affects all cages in the level
                simultaneously.
            </remarks>
        </member>
        <member name="M:Map.ReplaceCagesWithAmmoAndRevives">
            <summary>
                Replaces all existing cages in the level with ammunition and revival crates.
            </summary>
            <remarks>
                Iterates through all registered cages and replaces each one with a 2x2 arrangement
                of power-up crates. This is typically used for game modes or difficulty settings
                where prisoner rescue is replaced with resource collection.
            </remarks>
        </member>
        <member name="M:Map.SpawnFaceBaneling(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Spawns an alien baneling (face hugger variant) at the specified position with
                initial velocity. These aliens climb on walls and ceilings to ambush players.
            </summary>
            <param name="x">The x coordinate to spawn at</param>
            <param name="y">The y coordinate to spawn at</param>
            <param name="xI">The initial x velocity</param>
            <param name="yI">The initial y velocity</param>
            <returns>The spawned AlienClimber instance</returns>
        </member>
        <member name="M:Map.SpawnFaceHugger(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Spawns an alien face hugger at the specified position with initial velocity. These
                aliens jump at players and attach to their faces.
            </summary>
            <param name="x">The x coordinate to spawn at</param>
            <param name="y">The y coordinate to spawn at</param>
            <param name="xI">The initial x velocity</param>
            <param name="yI">The initial y velocity</param>
            <returns>The spawned AlienClimber instance</returns>
        </member>
        <!-- Unit Management Fields -->
        <member name="F:Map.alienEggs">
            <summary>
                Static list tracking all alien egg explosives in the current map. Used to manage
                alien spawn points that can hatch facehuggers when disturbed or destroyed by player
                actions.
            </summary>
        </member>
        <member name="F:Map.citizens">
            <summary>
                List of civilian NPCs that need rescuing or protection. Citizens are registered via
                RegisterCitizen and removed via RemoveCitizen. Used for rescue missions and civilian
                AI behavior. The registration method prevents duplicate entries. Initialized in
                Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.disturbedWildLife">
            <summary>
                Static list of wildlife that have been disturbed by explosions or player actions.
                Wildlife are added via RegisterDisturbedWildLife() when startled and removed via
                RemoveDisturbedWildLife() when calmed or killed.
            </summary>
        </member>
        <member name="F:Map.heroWatchers">
            <summary>
                List of objects that monitor or react to hero presence. Watchers are registered via
                RegisterHeroWatcher and removed via RemoveHeroWatcher. Used for triggering events,
                cinematics, or AI behaviors based on player proximity. The registration method
                prevents duplicate entries. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.nearestUnit">
            <summary>
                Temporary storage for the nearest unit found during proximity searches. Used by
                GetNearestUnit methods to track the closest unit while iterating through all units.
                This field is used for optimization to avoid allocating new variables during
                frequent proximity checks.
            </summary>
        </member>
        <member name="F:Map.units">
            <summary>
                Static list containing all active Unit objects in the map. This is the primary
                registry for all enemies, NPCs, and other unit types. Units are added during
                spawn/creation and removed when destroyed. Used for AI targeting and game state
                management.
            </summary>
        </member>
        <member name="F:Map.wildLife">
            <summary>
                Static list tracking all wildlife creatures in the map (pigs, chickens, etc).
                Wildlife are registered via RegisterWildLife() and removed via RemoveWildLife().
                Separate from the disturbed wildlife tracking.
            </summary>
        </member>
        <!-- AI & Player Management Methods -->
        <member name="M:Map.ActivateNearbyAlienTelepathyTriggers(System.Int32,System.Int32,System.Int32)">
            <summary>
                Activates alien telepathy triggers within sensing range of the specified grid
                position.
            </summary>
            <param name="collumn">The column index of the activation source</param>
            <param name="row">The row index of the activation source</param>
            <param name="chainCount">The current chain reaction count for limiting propagation</param>
            <remarks>
                This method iterates through all registered alien telepathy triggers and activates
                those within their defined sensing range. Each trigger has its own columnSenseRange
                and rowSenseRange values that determine its activation distance. When activated,
                triggers receive the source position and an incremented chain count, allowing for
                cascading activation effects. The method processes the list in reverse order for
                safe modification during iteration. This system is used for alien enemy coordination
                and environmental reactions.
            </remarks>
        </member>
        <member name="M:Map.AddBroToHeroTransport(TestVanDammeAnim)">
            <summary>
                Adds a bro (player character) to the appropriate hero transport vehicle. Determines
                transport type based on game mode and map settings, then adds the bro to either the
                helicopter, portal, or truck transport.
            </summary>
            <param name="Bro">The bro character to add to the transport</param>
        </member>
        <member name="M:Map.AlertNearbyMooks(System.Single,System.Single,System.Single,System.Single,System.Int32,GridPoint)">
            <summary>
                Fully alerts all enemy units within a rectangular range, making them aware of a
                player at the specified position. The GridPoint parameter appears to be unused in
                the implementation.
            </summary>
            <param name="x">X position of the alert source</param>
            <param name="y">Y position of the alert source</param>
            <param name="xRange">Half-width of the rectangular alert area</param>
            <param name="yRange">Half-height of the rectangular alert area</param>
            <param name="playerNum">Player number that triggered the alert</param>
            <param name="startPoint">Grid point where the alert originated (unused in implementation)</param>
        </member>
        <member name="M:Map.AlertNearbyMooks(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Fully alerts all living enemy units within a rectangular range, making them aware of
                a player at the specified position. Only affects units with negative player numbers
                and positive health.
            </summary>
            <param name="x">X position of the alert source</param>
            <param name="y">Y position of the alert source</param>
            <param name="xRange">Half-width of the rectangular alert area</param>
            <param name="yRange">Half-height of the rectangular alert area</param>
            <param name="playerNum">Player number that triggered the alert</param>
        </member>
        <member name="M:Map.AttractAliens(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attracts all alien units within a rectangular range to move toward the specified
                position. Affects units with playerNum of -2 or units that are instances of the
                Alien class.
            </summary>
            <param name="x">X position to attract aliens toward</param>
            <param name="y">Y position to attract aliens toward</param>
            <param name="xRange">Half-width of the rectangular attraction area</param>
            <param name="yRange">Half-height of the rectangular attraction area</param>
        </member>
        <member name="M:Map.AttractMooks(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attracts all enemy units (mooks) within a rectangular range to move toward the
                specified position. Only affects units with negative player numbers (enemies).
            </summary>
            <param name="x">X position to attract units toward</param>
            <param name="y">Y position to attract units toward</param>
            <param name="xRange">Half-width of the rectangular attraction area</param>
            <param name="yRange">Half-height of the rectangular attraction area</param>
        </member>
        <member name="M:Map.BotherNearbyMooks(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Makes a sound that bothers nearby enemy units, causing them to investigate. Only
                affects living enemy units that have the ability to hear (CanHear property is true).
            </summary>
            <param name="x">X position of the sound source</param>
            <param name="y">Y position of the sound source</param>
            <param name="xRange">Half-width of the rectangular sound area</param>
            <param name="yRange">Half-height of the rectangular sound area</param>
            <param name="playerNum">Player number making the sound (currently unused in implementation)</param>
        </member>
        <member name="M:Map.CallInHeroTransportAnyway">
            <summary>
                Forces the hero transport to be called in regardless of current state. Handles
                different spawn modes (Portal, Truck, Helicopter) and calls the appropriate
                transport if it hasn't already entered the level.
            </summary>
        </member>
        <member name="M:Map.CallInTransport(UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <summary>
                Initiates the hero transport arrival sequence. Sends an RPC to all clients to
                synchronize the transport arrival.
            </summary>
            <param name="startLocation">The position where the transport should arrive</param>
            <param name="ArriveByHelicopter">Whether to use helicopter transport</param>
            <param name="ArriveByPortal">Whether to use portal transport</param>
        </member>
        <member name="M:Map.CallInTransport_RPC(UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <summary>
                RPC handler that executes the transport arrival on all clients. Activates the
                appropriate transport type and initiates its entry sequence.
            </summary>
            <param name="startLocation">The position where the transport should arrive</param>
            <param name="ArriveByHelicopter">Whether to use helicopter transport</param>
            <param name="ArriveByPortal">Whether to use portal transport</param>
        </member>
        <member name="M:Map.CanSeeNPCEnemyUnit(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Single@,System.Single@)">
            <summary>
                Searches for visible enemy units within a directional sight range with no vertical
                direction preference. Wrapper that calls the full overload with yDirection set to 0.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The direction to search in (-1 for left, 1 for right)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit</param>
            <param name="seenEnemyNum">Output parameter for the seen enemy's player number</param>
            <param name="enemyX">Output parameter for the seen enemy's X position</param>
            <param name="enemyY">Output parameter for the seen enemy's Y position</param>
            <returns>True if an enemy unit was found, false otherwise</returns>
        </member>
        <member name="M:Map.CanSeeNPCEnemyUnit(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Single@,System.Single@)">
            <summary>
                Searches for visible enemy units within a directional sight range with optional
                vertical direction filtering. Full implementation that checks line of sight and
                stealth status.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The horizontal direction to search in (-1 for left, 1 for right)</param>
            <param name="yDirection">The vertical direction preference (-1 for down, 1 for up, 0 for no preference)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit</param>
            <param name="seenEnemyNum">Output parameter for the seen enemy's player number</param>
            <param name="enemyX">Output parameter for the seen enemy's X position</param>
            <param name="enemyY">Output parameter for the seen enemy's Y position</param>
            <returns>True if an enemy unit was found that meets all criteria, false otherwise</returns>
        </member>
        <member name="M:Map.CanSeeNPCEnemyUnit(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks if any enemy unit is visible within a directional sight range without
                returning position information. Simplified version for basic visibility checks.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The direction to search in (-1 for left, 1 for right)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit</param>
            <returns>True if any enemy unit is visible within range, false otherwise</returns>
        </member>
        <member name="M:Map.CanSeeNPCEnemyUnitWithPosition(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Single@,System.Single@)">
            <summary>
                Searches for visible enemy units within a directional sight range and returns the
                first found enemy's position. Used by AI to detect player units in their field of
                view.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The direction to search in (-1 for left, 1 for right, 0 for both directions)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit (will find enemies of this player)</param>
            <param name="seenEnemyNum">Output parameter that will contain the player number of the seen enemy</param>
            <param name="seenPositionX">Output parameter that will contain the X position of the seen enemy</param>
            <param name="seenPositionY">Output parameter that will contain the Y position of the seen enemy</param>
            <returns>True if an enemy unit was found within the sight range, false otherwise</returns>
        </member>
        <member name="M:Map.CanSeePosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks if there is a clear line of sight between two grid positions using raycast
                collision detection. Tests visibility between the center points of two grid blocks.
            </summary>
            <param name="fromCollumn">The starting column position in the grid</param>
            <param name="fromRow">The starting row position in the grid</param>
            <param name="seenCollumn">The target column position to check visibility to</param>
            <param name="seenRow">The target row position to check visibility to</param>
            <returns>True if there is a clear line of sight between the positions (no ground or fragile terrain blocking), false otherwise</returns>
        </member>
        <member name="M:Map.CanSeePosition(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Checks if there is a clear line of sight between two world positions using raycast
                collision detection. Tests direct visibility between exact coordinates.
            </summary>
            <param name="fromPositionX">The starting X position in world coordinates</param>
            <param name="fromPositionY">The starting Y position in world coordinates</param>
            <param name="seenPositionX">The target X position to check visibility to</param>
            <param name="seenPositionY">The target Y position to check visibility to</param>
            <returns>True if there is a clear line of sight between the positions (no ground or fragile terrain blocking), false otherwise</returns>
        </member>
        <member name="M:Map.CheckHighFive(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Checks if a player can perform a high five with another player within range. Players
                must be facing each other (opposite directions) and both must be player-controlled
                units.
            </summary>
            <param name="playerNum">Player number attempting the high five</param>
            <param name="x">X position to check from</param>
            <param name="y">Y position to check from</param>
            <param name="xRange">Maximum horizontal distance for high five</param>
            <param name="yRange">Maximum vertical distance for high five</param>
            <param name="direction">Direction the initiating player is facing</param>
            <returns>True if a high five connection was successfully made, false otherwise</returns>
        </member>
        <member name="M:Map.EnemyDeathEvent(Unit)">
            <summary>
                Broadcasts an enemy death event to all registered death listeners. This method is
                called when an enemy unit dies and notifies all triggers that are monitoring for
                enemy eliminations, allowing them to evaluate their conditions.
            </summary>
            <param name="unit">The Unit that has died, passed to listeners for evaluation.</param>
        </member>
        <member name="M:Map.ForgetPlayer(System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Makes all AI units on the map forget about a specific player. Affects all units
                regardless of distance.
            </summary>
            <param name="playerNum">The player number (0-3) to forget.</param>
            <param name="confuseMooks">If true, makes AI units lose sight of the player; if false and amuseMooks is false, makes them forget the player entirely.</param>
            <param name="amuseMooks">If true, makes AI units laugh at the dead player.</param>
        </member>
        <member name="M:Map.ForgetPlayer(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Makes AI units within a circular range forget about a specific player.
            </summary>
            <param name="playerNum">The player number (0-3) to forget.</param>
            <param name="x">The X coordinate of the range center.</param>
            <param name="y">The Y coordinate of the range center.</param>
            <param name="range">The radius of the circular area of effect.</param>
            <param name="confuseMooks">If true, makes AI units lose sight of the player; if false and amuseMooks is false, makes them forget the player entirely.</param>
            <param name="amuseMooks">If true, makes AI units laugh at the dead player.</param>
        </member>
        <member name="M:Map.ForgetPlayer(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Makes AI units within a rectangular range forget about a specific player.
            </summary>
            <param name="playerNum">The player number (0-3) to forget.</param>
            <param name="x">The X coordinate of the range center.</param>
            <param name="y">The Y coordinate of the range center.</param>
            <param name="xRange">The horizontal half-width of the rectangular area of effect.</param>
            <param name="yRange">The vertical half-height of the rectangular area of effect.</param>
            <param name="confuseMooks">If true, makes AI units lose sight of the player; if false and amuseMooks is false, makes them forget the player entirely.</param>
            <param name="amuseMooks">If true, makes AI units laugh at the dead player.</param>
        </member>
        <member name="M:Map.GetNearbyUnalertedMook(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Finds and returns a nearby enemy unit (Mook) that has never been alerted. Used for
                stealth gameplay mechanics to identify unaware enemies.
            </summary>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="xRange">Half-width of the rectangular search area</param>
            <param name="yRange">Half-height of the rectangular search area</param>
            <returns>The first unalerted Mook found in range, or null if none exist</returns>
        </member>
        <member name="M:Map.GetNearestMookDoor(System.Int32,System.Int32)">
            <summary>
                Finds the nearest intact mook door to a given grid position using Manhattan
                distance. This method uses LINQ to order all doors by distance and returns the first
                one that hasn't been destroyed, used by AI for pathfinding through door checkpoints.
            </summary>
            <param name="col">The column coordinate in the map grid to search from.</param>
            <param name="row">The row coordinate in the map grid to search from.</param>
            <returns>The nearest non-destroyed MookDoor to the specified position, or null if no intact doors exist.</returns>
        </member>
        <member name="M:Map.GetNearestMookInterestPoint(System.Int32,System.Int32)">
            <summary>
                Finds the nearest scout mook interest point to a given grid position using Manhattan
                distance calculation. This is used by scout mook AI to determine the closest point
                to investigate during patrol or alert behaviors.
            </summary>
            <param name="col">The column coordinate in the map grid to search from.</param>
            <param name="row">The row coordinate in the map grid to search from.</param>
            <returns>The nearest ScoutMookInterestPoint to the specified position, or null if no points exist.</returns>
        </member>
        <member name="M:Map.HeroTransportHasEntered">
            <summary>
                Checks whether any hero transport has entered the level and released heroes. Checks
                all three transport types (truck, helicopter, portal) to see if any have completed
                their entry sequence.
            </summary>
            <returns>True if any transport has released heroes, false otherwise</returns>
        </member>
        <member name="M:Map.MakeMooksDance(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Makes all enemy units (mooks) within a rectangular range dance for a specified
                duration. Dancing units are temporarily incapacitated.
            </summary>
            <param name="x">X position of the dance effect center</param>
            <param name="y">Y position of the dance effect center</param>
            <param name="xRange">Half-width of the rectangular dance area</param>
            <param name="yRange">Half-height of the rectangular dance area</param>
            <param name="time">Duration of the dance in seconds</param>
        </member>
        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Causes all enemy units within a circular range to panic and flee. Units will run
                away from the panic source for 0.1 seconds.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="range">Radius of the panic effect</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
        </member>
        <member name="M:Map.PanicUnits(System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Causes enemy units within range to panic and flee from a specific player. Only
                affects units that can be damaged by the specified player number. Units panic for 2
                seconds.
            </summary>
            <param name="playernum">Player number causing the panic</param>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="range">Radius of the panic effect</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
        </member>
        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Causes enemy units within range to panic for a specified duration. This overload
                converts circular range to rectangular range internally.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="range">Radius of the panic effect (used for both X and Y range)</param>
            <param name="time">Duration of the panic in seconds</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
            <param name="runRandomDirection">Whether units should run in random directions or away from the source</param>
        </member>
        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Causes enemy units within a rectangular range to panic for a specified duration.
                Units can either flee away from the source or run in random directions.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="xRange">Half-width of the rectangular panic area</param>
            <param name="yRange">Half-height of the rectangular panic area</param>
            <param name="time">Duration of the panic in seconds</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
            <param name="runRandomDirection">If true, units run in random directions; if false, they run away from the source</param>
        </member>
        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
                Causes enemy units within a rectangular range to panic in a specific direction for a
                specified duration. If direction is 0, units will flee away from the source.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="xRange">Half-width of the rectangular panic area</param>
            <param name="yRange">Half-height of the rectangular panic area</param>
            <param name="direction">Forced panic direction (-1 left, 1 right, 0 for away from source)</param>
            <param name="time">Duration of the panic in seconds</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
        </member>
        <member name="M:Map.RegisterEnemyDeathListener(Trigger)">
            <summary>
                Registers a trigger that responds to enemy death events. These listeners are
                notified whenever an enemy unit dies, allowing for gameplay mechanics like kill
                counters, wave completion detection, or triggered events based on eliminations.
            </summary>
            <param name="trig">The Trigger object that will listen for enemy death events.</param>
        </member>
        <member name="M:Map.RegisterFetchObject(System.Single,System.Single,System.Single,System.Single,UnityEngine.Transform)">
            <summary>
                Registers an object for nearby enemy units to fetch. Only affects living enemy units
                that can hear. Unlike other range checks, this method uses exact range comparison
                rather than accounting for unit width/height.
            </summary>
            <param name="x">X position to check from</param>
            <param name="y">Y position to check from</param>
            <param name="xRange">Maximum horizontal distance to fetch object</param>
            <param name="yRange">Maximum vertical distance to fetch object</param>
            <param name="fetchTransform">The transform of the object to fetch</param>
        </member>
        <member name="M:Map.RegisterHeroWatcher(BroforceObject)">
            <summary>
                Registers an object that monitors hero (player) activity and position. Hero watchers
                are typically used by AI systems, traps, or environmental elements that need to
                react to player presence or actions within their awareness range.
            </summary>
            <param name="watcher">The BroforceObject that will watch for hero activity.</param>
        </member>
        <member name="M:Map.RegisterMookInterestPoint(ScoutMookInterestPoint)">
            <summary>
                Registers a point of interest for scout mook AI behavior. These points represent
                locations that scout mooks will investigate, patrol to, or use as waypoints during
                their scouting patterns, often including doors or strategic positions.
            </summary>
            <param name="pointObject">The ScoutMookInterestPoint to register.</param>
        </member>
        <member name="M:Map.RemoveEnemyDeathListener(Trigger)">
            <summary>
                Removes a trigger from the enemy death listener system, typically when the trigger
                is destroyed or its conditions have been met. This prevents the trigger from
                continuing to receive death notifications.
            </summary>
            <param name="trig">The Trigger object to remove from death event listening.</param>
        </member>
        <member name="M:Map.RemoveHeroWatcher(BroforceObject)">
            <summary>
                Removes an object from the hero watcher tracking system, typically when the watcher
                is destroyed or no longer needs to monitor player activity. This prevents
                unnecessary processing of defunct watchers.
            </summary>
            <param name="watcher">The BroforceObject to remove from hero watching.</param>
        </member>
        <member name="M:Map.RemoveMookInterestPoint(ScoutMookInterestPoint)">
            <summary>
                Removes a scout mook interest point from the tracking system, typically when the
                point has been used, destroyed, or is no longer relevant for AI pathing. Some
                interest points are configured to remove themselves after first use.
            </summary>
            <param name="pointObject">The ScoutMookInterestPoint to remove from tracking.</param>
        </member>
        <member name="M:Map.StunMooks(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Stuns all enemy units (mooks) within a rectangular range for a specified duration.
                Only affects units with negative player numbers.
            </summary>
            <param name="x">X position of the stun center</param>
            <param name="y">Y position of the stun center</param>
            <param name="xRange">Half-width of the rectangular stun area</param>
            <param name="yRange">Half-height of the rectangular stun area</param>
            <param name="time">Duration of the stun in seconds</param>
        </member>
        <!-- AI & Player Management Fields -->
        <member name="F:Map.mookInterestPoints">
            <summary>
                List of points of interest for scout mook AI pathfinding. Interest points are
                registered via RegisterMookInterestPoint and removed via RemoveMookInterestPoint.
                Used by GetNearestMookInterestPoint to find the closest point based on grid
                coordinates for AI navigation decisions. Initialized in Awake() and set to null in
                OnDestroy().
            </summary>
        </member>
        <!-- Projectile & Explosive Management Methods -->
        <member name="M:Map.DamageProjectile(Projectile,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Applies damage to a projectile, potentially destroying or redirecting it. Used when
                projectiles collide with attacks or explosions.
            </summary>
            <param name="projectile">The projectile to damage</param>
            <param name="damage">The amount of damage to apply</param>
            <param name="damageType">The type of damage being applied</param>
            <param name="xI">The horizontal force to apply</param>
            <param name="yI">The vertical force to apply</param>
            <param name="delay">Delay before applying the damage</param>
            <param name="newPlayerNum">The new owner player number (for redirected projectiles)</param>
        </member>
        <member name="M:Map.DeflectProjectiles(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Deflects enemy projectiles within range back at enemies. Changes projectile
                ownership, reverses direction, adds scatter, and can trigger achievements.
            </summary>
            <param name="newOwner">The new owner of deflected projectiles</param>
            <param name="playerNum">The player number doing the deflection</param>
            <param name="range">The deflection range</param>
            <param name="x">The X coordinate of the deflection source</param>
            <param name="y">The Y coordinate of the deflection source</param>
            <param name="xI">The horizontal direction indicator for deflection</param>
            <param name="giveDeflectAchievementOnMookKill">Whether to award achievement for mook kills with deflected projectiles</param>
            <returns>True if any projectiles were deflected, false otherwise</returns>
        </member>
        <member name="M:Map.GetGrenadesInRange(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Gets all active grenades within Manhattan distance that can be damaged by the
                player. Checks game mode rules for friendly fire and filters by active state.
            </summary>
            <param name="playerNum">The player number to check damage rules for</param>
            <param name="range">The Manhattan distance range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>List of grenades within range that can be damaged</returns>
        </member>
        <member name="M:Map.GetNearbyGrenade(System.Single,System.Single,System.Single)">
            <summary>
                Finds the nearest active grenade within range using Manhattan distance. Returns the
                single closest grenade regardless of player ownership.
            </summary>
            <param name="range">The maximum search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>The nearest grenade within range, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearbySachelPack(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Finds the nearest active satchel pack within range using Manhattan distance. Used
                for remote detonation and chain explosion mechanics.
            </summary>
            <param name="playerNum">The player number (unused in current implementation)</param>
            <param name="range">The maximum search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>The nearest satchel pack within range, or null if none found</returns>
        </member>
        <member name="M:Map.GetProjectilesInRange(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Gets all projectiles within Manhattan distance that can damage the specified player.
                Respects game mode damage rules for team damage and friendly fire.
            </summary>
            <param name="playerNum">The player number to check damage rules against</param>
            <param name="range">The Manhattan distance range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>List of projectiles within range that can damage the player</returns>
        </member>
        <member name="M:Map.HitGrenades(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
                Checks for grenade hits within range and knocks the first one found. Special
                handling for coconuts with RPC synchronization for knockback.
            </summary>
            <param name="playerNum">The player number performing the hit check</param>
            <param name="range">The hit detection range</param>
            <param name="x">The X coordinate of the hit origin</param>
            <param name="y">The Y coordinate of the hit origin</param>
            <param name="xI">The horizontal force to apply</param>
            <param name="yI">The vertical force to apply</param>
            <param name="grenadeX">Output parameter for the hit grenade's X position</param>
            <param name="grenadeY">Output parameter for the hit grenade's Y position</param>
            <returns>True if a grenade was hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitProjectiles(System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Damages damageable projectiles within a square range. Simple overload that uses same
                range for both X and Y axes.
            </summary>
            <param name="playerNum">The player number dealing damage</param>
            <param name="damage">The damage amount to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="range">The damage range (used for both axes)</param>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="xI">The horizontal impact force</param>
            <param name="yI">The vertical impact force</param>
            <param name="delay">The damage delay</param>
            <returns>True if any projectiles were hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitProjectiles(System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Damages damageable projectiles within a rectangular range. Checks projectile size
                for precise collision and respects damage rules.
            </summary>
            <param name="playerNum">The player number dealing damage</param>
            <param name="damage">The damage amount to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="xRange">The horizontal damage range</param>
            <param name="yRange">The vertical damage range</param>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="xI">The horizontal impact force</param>
            <param name="yI">The vertical impact force</param>
            <param name="delay">The damage delay</param>
            <returns>True if any projectiles were hit, false otherwise</returns>
        </member>
        <member name="M:Map.RegisterDamageableProjectile(Projectile)">
            <summary>
                Registers a Projectile in the damageable projectiles list, marking it as a
                projectile that can take damage.
            </summary>
            <param name="projectile">The Projectile to register as damageable.</param>
        </member>
        <member name="M:Map.RegisterGrenade(Grenade)">
            <summary>
                Registers a Grenade with the map's grenade tracking system.
            </summary>
            <param name="grenade">The Grenade to register.</param>
        </member>
        <member name="M:Map.RegisterProjectile(Projectile)">
            <summary>
                Registers a Projectile with the map's projectile tracking system.
            </summary>
            <param name="projectile">The Projectile to register.</param>
        </member>
        <member name="M:Map.RegisterSachelPack(SachelPack)">
            <summary>
                Registers a SachelPack with the map's satchel pack tracking system.
            </summary>
            <param name="sachelPack">The SachelPack to register.</param>
        </member>
        <member name="M:Map.RegisterShootableGrenade(Grenade)">
            <summary>
                Registers a Grenade in the shootable grenades list, marking it as a grenade that can
                be damaged by gunfire.
            </summary>
            <param name="shootableGrenade">The Grenade to register as shootable.</param>
        </member>
        <member name="M:Map.RemoveGrenade(Grenade)">
            <summary>
                Removes a Grenade from the map's grenade tracking system.
            </summary>
            <param name="grenade">The Grenade to remove.</param>
        </member>
        <member name="M:Map.RemoveProjectile(Projectile)">
            <summary>
                Removes a Projectile from both the regular projectiles list and the damageable
                projectiles list if present.
            </summary>
            <param name="projectile">The Projectile to remove.</param>
        </member>
        <member name="M:Map.RemoveSachelPack(SachelPack)">
            <summary>
                Removes a SachelPack from the map's satchel pack tracking system.
            </summary>
            <param name="sachelPack">The SachelPack to remove.</param>
        </member>
        <member name="M:Map.RemoveShootableGrenade(Grenade)">
            <summary>
                Removes a Grenade from the shootable grenades list.
            </summary>
            <param name="shootableGrenade">The Grenade to remove from shootable tracking.</param>
        </member>
        <!-- Projectile & Explosive Management Fields -->
        <member name="F:Map.damageableProjectiles">
            <summary>
                List of projectiles that can be destroyed by damage (e.g., rockets that can be shot
                down). Projectiles are added via RegisterDamageableProjectile and removed via
                RemoveDamageableProjectile. Used for advanced projectile interaction mechanics.
                Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.grenades">
            <summary>
                Master list of all active grenades in the map. Grenades are registered via
                RegisterGrenade when thrown and removed via RemoveGrenade when they explode or are
                destroyed. Used for grenade-specific collision detection and detonation logic.
                Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.helicopterCallCount">
            <summary>
                Static counter tracking the number of helicopter calls made during gameplay. Reset
                to 0 during map initialization. Used to limit or track helicopter usage in levels.
            </summary>
        </member>
        <member name="F:Map.helicopterFake">
            <summary>
                Static reference to a fake helicopter object used for visual effects or scripted
                sequences where a full helicopter entity isn't needed. Separate from the functional
                newestHelicopter reference.
            </summary>
        </member>
        <member name="F:Map.hiddenExplosivePrefabReference">
            <summary>
                Reference to the hidden explosives prefab used for trap mechanics. Instantiated via
                hiddenExplosivePrefabReference.Asset during map generation to create explosive traps
                that trigger when players get near.
            </summary>
        </member>
        <member name="F:Map.newestHelicopter">
            <summary>
                Static reference to the most recently spawned helicopter in the game. Updated
                whenever a new helicopter is created, allowing other systems to reference the
                current active helicopter for extraction or attack sequences.
            </summary>
        </member>
        <member name="F:Map.projectiles">
            <summary>
                Master list of all active projectiles in the map. Projectiles are registered via
                RegisterProjectile when spawned and removed via RemoveProjectile when destroyed.
                Used by various systems to iterate through all projectiles for collision detection,
                updates, and cleanup. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.sachelPacks">
            <summary>
                List of all placed satchel pack explosives. Satchel packs are registered via
                RegisterSachelPack when placed and removed via RemoveSachelPack when detonated. Used
                for remote detonation functionality and chain explosion mechanics. Initialized in
                Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.shootableGrenades">
            <summary>
                Subset of grenades that can be detonated by shooting them. Grenades are added via
                RegisterShootableGrenade and removed via RemoveShootableGrenade. Used by projectile
                collision systems to check if a grenade should explode when hit. Initialized in
                Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <!-- Core & Instance Management Methods -->
        <member name="M:Map.Awake">
            <summary>
                Initializes the Map singleton when it awakens. Sets up layer masks for collision
                detection, initializes all tracking lists for game objects, allocates network IDs
                for deterministic spawning, and prepares the level loading system.
            </summary>
        </member>
        <member name="M:Map.ClearSuperCheckpointStatus">
            <summary>
                Clears all super checkpoint related data. Resets the super checkpoint position and
                load offsets to their default values.
            </summary>
        </member>
        <member name="M:Map.ContinueLevel">
            <summary>
                Resets level continuation state after loading from a super checkpoint. Clears super
                checkpoint status to allow normal gameplay to resume.
            </summary>
        </member>
        <member name="M:Map.ExitLevel">
            <summary>
                Cleans up level data when exiting a level. Nullifies the blocks array to free up
                memory and prepare for the next level.
            </summary>
        </member>
        <member name="M:Map.IsFinished">
            <summary>
                Checks whether the current level has been completed. Used to determine when to
                trigger level end sequences and transitions.
            </summary>
            <returns>True if the level is marked as finished, false otherwise</returns>
        </member>
        <member name="M:Map.OnDestroy">
            <summary>
                Cleans up all map resources when the Map object is destroyed. Returns all pooled
                effects to their pools, clears all tracking lists to prevent memory leaks, and
                properly nullifies all references to allow garbage collection.
            </summary>
        </member>
        <member name="M:Map.SetupBlocksCoroutine">
            <summary>
                Sets up the level blocks and initializes the game world. Handles random seed
                synchronization for deterministic gameplay, loads the appropriate map data based on
                game mode, spawns parallax backgrounds and clouds, initializes wind and quicksand
                controllers, and creates hero transport vehicles based on spawn mode settings.
            </summary>
        </member>
        <member name="M:Map.ShouldTheBrosArriveByHeli(UnityEngine.Vector3)">
            <summary>
                Determines whether heroes should arrive by helicopter based on the level's starting
                area. Checks if there are solid blocks or gaps near the start location that would
                require aerial insertion.
            </summary>
            <param name="startLocation">The starting position to check from</param>
            <returns>True if helicopter arrival is needed, false if ground-based arrival is possible</returns>
        </member>
        <member name="M:Map.Start">
            <summary>
                Completes map initialization after all objects are awake. Instantiates the
                helicopter for the host, triggers FirstFrame on all blocks to initialize their
                state, and sets up any additional level-specific components.
            </summary>
        </member>
        <!-- Core & Instance Management Properties -->
        <member name="P:Map.Instance">
            <summary>
                Gets the singleton instance of the Map class using lazy initialization. If no
                instance exists, searches for a Map object in the scene using Unity's
                FindObjectOfType.
            </summary>
        </member>
        <!-- Core & Instance Management Fields -->
        <member name="F:Map.alreadyLoadedForceStartLevel">
            <summary>
                Tracks whether the editor force start level functionality has already been applied.
                Used in the editor to ensure that the startLevel field is only applied once when
                starting the game outside of the main menu. Set to true after the first application
                to prevent repeated level changes.
            </summary>
        </member>
        <member name="F:Map.hasBeenSetup">
            <summary>
                Indicates whether the map has completed its setup process. Set to true at the end of
                SetupBlocksCoroutine after all map initialization is complete, including terrain
                loading, spawn point setup, and random seed generation.
            </summary>
        </member>
        <member name="F:Map.inst">
            <summary>
                Static backing field for the singleton Map instance. Used by the Instance property
                to implement lazy initialization of the Map singleton pattern.
            </summary>
        </member>
        <member name="F:Map.startLevel">
            <summary>
                The level number to force start at when running in the editor. When set to a value
                &gt;= 0 and the game is started outside the main menu in the editor, this overrides
                the default starting level. Also supports random level selection when randomLevel is
                enabled, adding a random offset based on randomRange.
            </summary>
        </member>
        <member name="F:Map.waitingForSeed">
            <summary>
                Indicates whether the map is waiting for network seed synchronization. Set to false
                after random seeds are generated for spawn point offset, wood block count, and
                barrel block count during map setup.
            </summary>
        </member>
        <member name="F:Map.waitingForSync">
            <summary>
                Indicates whether the map is waiting for network synchronization. Used to coordinate
                map state across networked games before proceeding with initialization.
            </summary>
        </member>
        <!-- Map Data & State Methods -->
        <member name="M:Map.AssignBlock(Block,System.Int32,System.Int32)">
            <summary>
                Assigns a block to the specified grid coordinates. Will only assign if the position
                is within bounds and either empty, destroyed, or contains a ladder-type block.
            </summary>
            <param name="block">The block to assign to the grid position</param>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block was successfully assigned, false if the position is invalid or already contains a solid block</returns>
        </member>
        <member name="M:Map.CheckPersistBlocksPastLevelLoad">
            <summary>
                Checks whether blocks should be persisted after a level load and either maintains or
                destroys them accordingly. This method is called after level transitions to handle
                the persistence state.
            </summary>
            <remarks>
                Only processes persistence if loading time optimizations are active. Sets
                hasPersistedPastLevelLoad to true if persistence is enabled, otherwise calls
                DestroyPersistantBlocks to clear any persisted blocks.
            </remarks>
        </member>
        <member name="M:Map.CheckPersistBlocksPastLevelLoad">
            <summary>
                Checks and applies block persistence settings after a level load.
            </summary>
            <remarks>
                Called after level loading to determine if persistent blocks should be maintained or
                destroyed. Only applies when loading time reduction is active. Sets the
                hasPersistedPastLevelLoad flag if persistence is enabled.
            </remarks>
        </member>
        <member name="M:Map.ClearBackgroundBlock(System.Int32,System.Int32)">
            <summary>
                Destroys and removes the background block at the specified grid coordinates if it
                exists.
            </summary>
            <param name="c">The column index in the grid</param>
            <param name="r">The row index in the grid</param>
        </member>
        <member name="M:Map.ClearForegroundBlock(System.Int32,System.Int32)">
            <summary>
                Destroys and removes the foreground block at the specified grid coordinates. Also
                handles clearing the upper part of 2-unit tall blocks.
            </summary>
            <param name="c">The column index in the grid</param>
            <param name="r">The row index in the grid</param>
        </member>
        <member name="M:Map.ClearPersistenBlocksInstant">
            <summary>
                Immediately clears all persisted blocks without waiting for a level transition. This
                provides a way to force-clear persistence state during gameplay.
            </summary>
            <remarks>
                Resets the hasPersistedPastLevelLoad flag and calls DestroyPersistantBlocks to
                remove all persisted blocks immediately.
            </remarks>
        </member>
        <member name="M:Map.ClearPersistenBlocksInstant">
            <summary>
                Immediately clears all persistent blocks without waiting for level transition.
            </summary>
            <remarks>
                Resets the persistence flag and destroys all persistent blocks instantly. Used when
                an immediate cleanup is required rather than waiting for the normal level transition
                process. Note the typo in the method name.
            </remarks>
        </member>
        <member name="M:Map.CollapseTop">
            <summary>
                Collapses the top row of the map by destroying blocks and lowering the ceiling.
            </summary>
            <returns>The new highest solid block row index after collapse</returns>
            <remarks>
                This method implements a ceiling collapse mechanic by decrementing highestSolidBlock
                (minimum 11) and destroying blocks in the rows above it. For each column, it checks
                a sphere area around blocks in the collapse zone. Most block types are instantly
                destroyed with InstaGib damage, but certain types like barrels, rockets, ladders,
                and cages are preserved. Non-block objects in the area receive 15 damage. This
                creates a crushing ceiling effect often used in escape sequences.
            </remarks>
        </member>
        <member name="M:Map.CollapseTopLadders">
            <summary>
                Specifically collapses ladder blocks from the top of the map.
            </summary>
            <returns>The highest solid block value (not the ladder-specific value)</returns>
            <remarks>
                This method decrements highestSolidBlockLadder (minimum 16) and destroys only ladder
                blocks in the affected rows. Unlike CollapseTop(), this targets ladders
                specifically, useful for preventing vertical escape routes during collapse
                sequences. The method checks block types directly from the blocks array and sends
                InstaGib damage to ladder blocks. Note that it returns highestSolidBlock, not
                highestSolidBlockLadder.
            </remarks>
        </member>
        <member name="M:Map.CreateExitPortal(UnityEngine.Vector2)">
            <summary>
                Creates a hero level exit portal at the specified position. The portal is positioned
                with a vertical offset of 112 units and a horizontal offset of 16 units from the
                provided coordinates.
            </summary>
            <param name="position">The base position where the portal should be created</param>
            <remarks>
                The portal is instantiated from the exitPortalPrefabReference asset and registered
                with the game's networking system using a deterministic network ID. This ensures the
                portal is properly synchronized across all clients in multiplayer sessions.
            </remarks>
        </member>
        <member name="M:Map.DeactivateHalfTheMap">
            <summary>
                Deactivates the right half of the map by disabling all blocks beyond the midpoint.
            </summary>
            <remarks>
                This method provides a simple way to hide half the map, typically used for debugging
                or special game modes. It deactivates all blocks from the horizontal midpoint to the
                right edge of the map. Only the block GameObjects are deactivated; the block data
                remains intact. This is separate from the dynamic offscreen deactivation system and
                provides a static way to reduce the active map size.
            </remarks>
        </member>
        <member name="M:Map.DestroyPersistantBlocks">
            <summary>
                Destroys all persisted blocks and clears the persistence system. This removes both
                foreground and background persistent blocks and their container GameObject.
            </summary>
            <remarks>
                Iterates through all persistent block arrays and destroys each block's GameObject
                before clearing the arrays and destroying the persistent container. Also resets the
                hasPersistedPastLevelLoad flag.
            </remarks>
        </member>
        <member name="M:Map.DestroyPersistantBlocks">
            <summary>
                Destroys all persistent blocks and cleans up persistence-related data structures.
            </summary>
            <remarks>
                Iterates through all persistent block arrays and destroys the game objects, then
                nullifies the arrays and destroys the persistent container object. This ensures a
                complete cleanup of the persistence system. Note the typo in the method name
                (Persistant vs Persistent) is from the original code.
            </remarks>
        </member>
        <member name="M:Map.DontPersistBlocks">
            <summary>
                Disables block persistence for the next level load. This prevents blocks from being
                maintained between level transitions, ensuring a fresh map state.
            </summary>
            <remarks>
                Sets the persistPastLevelLoad flag to false. This method should be called when you
                want to ensure all blocks are cleared and recreated on the next level load,
                typically when transitioning to a completely different area.
            </remarks>
        </member>
        <member name="M:Map.DontPersistBlocks">
            <summary>
                Disables block persistence for the current level transition.
            </summary>
            <remarks>
                Prevents blocks from being carried over to the next level load. This is typically
                used when transitioning between completely different level sections or when a clean
                slate is required.
            </remarks>
        </member>
        <member name="M:Map.ExtendDisableToUnitPosition(System.Single,System.Single,System.Single)">
            <summary>
                Extends the active area bounds to include the specified unit position with a buffer.
            </summary>
            <param name="x">The x-coordinate of the unit</param>
            <param name="y">The y-coordinate of the unit</param>
            <param name="buffer">The buffer distance around the unit (default: 48 units)</param>
            <remarks>
                This method ensures important units remain in the active area even if they're
                outside the normal camera bounds. It updates the min/max unit position trackers
                which are consumed by RunDeactivationOffscreen() to extend the active area. This
                prevents important gameplay elements like bosses or objective units from being
                deactivated when slightly offscreen. The buffer parameter adds extra space around
                the unit to ensure smooth activation transitions.
            </remarks>
        </member>
        <member name="M:Map.GetBackgroundBlock(System.Int32,System.Int32)">
            <summary>
                Retrieves the background block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>The background block at the specified position, or null if the position is out of bounds or empty</returns>
        </member>
        <member name="M:Map.GetBackgroundGroundType(System.Int32,System.Int32,GroundType)">
            <summary>
                Retrieves the ground type of the background block at the specified grid coordinates,
                falling back to the foreground block if no background block exists.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <param name="currentGroundType">The default ground type to return if the position is out of bounds or both background and foreground are empty</param>
            <returns>The ground type of the background block if it exists, otherwise the foreground block's ground type, or currentGroundType if both are empty</returns>
        </member>
        <member name="M:Map.GetBlock(System.Int32,System.Int32)">
            <summary>
                Retrieves the foreground block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>The block at the specified position, or null if the position is out of bounds or empty</returns>
        </member>
        <member name="M:Map.GetBlock(UnityEngine.Vector2)">
            <summary>
                Retrieves the foreground block at the specified world coordinates. Note: This method
                incorrectly uses the y component of the Vector2 for row calculation instead of
                column.
            </summary>
            <param name="worldXY">The world coordinates to check</param>
            <returns>The block at the specified world position, or null if the position is out of bounds or empty</returns>
        </member>
        <member name="M:Map.GetBlockCenter(System.Int32,System.Int32)">
            <summary>
                Gets the 2D world position of the center of a block at the specified grid
                coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector2 representing the center position of the block</returns>
        </member>
        <member name="M:Map.GetBlockCenterX(System.Int32)">
            <summary>
                Gets the world x coordinate of the center of a block at the specified column. Each
                column is 16 units wide.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <returns>The world x coordinate of the center of the block</returns>
        </member>
        <member name="M:Map.GetBlockCenterY(System.Int32)">
            <summary>
                Gets the world y coordinate of the center of a block at the specified row. Each row
                is 16 units tall.
            </summary>
            <param name="row">The row index in the grid</param>
            <returns>The world y coordinate of the center of the block</returns>
        </member>
        <member name="M:Map.GetBlockExcludingDestroyed(UnityEngine.Vector2)">
            <summary>
                Retrieves the foreground block at the specified world coordinates, excluding blocks
                that are marked as destroyed. Note: This method incorrectly uses the y component of
                the Vector2 for row calculation instead of column.
            </summary>
            <param name="worldXY">The world coordinates to check</param>
            <returns>The block at the specified world position if it exists and is not destroyed, or null if the position is out of bounds, empty, or contains a destroyed block</returns>
        </member>
        <member name="M:Map.GetBlocksX(System.Int32)">
            <summary>
                Converts a column index to its left world x coordinate. Each column is 16 units
                wide, with an offset of -8 units.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <returns>The world x coordinate of the left edge of the block at the specified column</returns>
        </member>
        <member name="M:Map.GetBlocksY(System.Int32)">
            <summary>
                Converts a row index to its bottom world y coordinate. Each row is 16 units tall,
                with an offset of -8 units.
            </summary>
            <param name="row">The row index in the grid</param>
            <returns>The world y coordinate of the bottom edge of the block at the specified row</returns>
        </member>
        <member name="M:Map.GetCenterPosition(System.Int32,System.Int32)">
            <summary>
                Gets the world position of the center of a block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector3 representing the center position of the block (z is always 0)</returns>
        </member>
        <member name="M:Map.GetDescentOffset(System.Boolean,System.Int32)">
            <summary>
                Returns the current descent offset value without modification.
            </summary>
            <param name="forceCollapse">Whether to force a collapse (parameter is not used)</param>
            <param name="current">The current offset value to return</param>
            <returns>The current offset value unchanged</returns>
            <remarks>
                This method appears to be a placeholder or simplified version of a descent
                calculation system. Despite having parameters suggesting collapse functionality, it
                simply returns the current value without any processing. This may be used in systems
                where descent offset calculation was removed or simplified.
            </remarks>
        </member>
        <member name="M:Map.GetGridPoint(UnityEngine.Vector3)">
            <summary>
                Converts a world position to a grid coordinate point.
            </summary>
            <param name="pos">The world position to convert</param>
            <returns>A GridPoint containing the column and row indices for the given world position</returns>
        </member>
        <member name="M:Map.GetGridPoint(System.Single,System.Single)">
            <summary>
                Converts world x and y coordinates to a grid coordinate point.
            </summary>
            <param name="x">The world x coordinate</param>
            <param name="y">The world y coordinate</param>
            <returns>A GridPoint containing the column and row indices for the given coordinates</returns>
        </member>
        <member name="M:Map.GetGroundType(System.Int32,System.Int32,GroundType)">
            <summary>
                Retrieves the ground type of the foreground block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <param name="currentGroundType">The default ground type to return if the position is out of bounds or empty</param>
            <returns>The ground type of the block at the specified position, or currentGroundType if no block exists</returns>
        </member>
        <member name="M:Map.GetHighestSolidBlock">
            <summary>
                Gets the row index of the highest solid block in the map.
            </summary>
            <returns>The row index of the highest solid block</returns>
            <remarks>
                This method returns the cached highestSolidBlock value which tracks the topmost row
                containing solid terrain. This value is updated when blocks are placed or destroyed
                and is used for various gameplay systems including camera bounds, enemy spawning
                limits, and collapse mechanics. The value represents a row index in the map's grid
                system.
            </remarks>
        </member>
        <member name="M:Map.GetPosition(System.Int32,System.Int32)">
            <summary>
                Gets the world position of the bottom-left corner of a block at the specified grid
                coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector3 representing the bottom-left corner position of the block (z is always 0)</returns>
        </member>
        <member name="M:Map.HasSandStormTrigger">
            <summary>
                Checks whether the current map contains any sandstorm or sandworm trigger actions.
                This is used to determine if desert-specific environmental effects should be
                prepared.
            </summary>
            <returns>True if the map contains sandstorm or sandworm triggers, false otherwise</returns>
            <remarks>
                Iterates through all triggers in the MapData and checks their actions for Sandstorm
                or CallSandworm types. These triggers create environmental hazards specific to
                desert-themed levels.
            </remarks>
        </member>
        <member name="M:Map.HasSandStormTrigger">
            <summary>
                Checks if the current map contains any sandstorm or sandworm trigger actions.
            </summary>
            <returns>True if sandstorm or sandworm triggers exist; false otherwise.</returns>
            <remarks>
                Iterates through all trigger actions in the map data looking for Sandstorm or
                CallSandworm action types. Used to determine if desert-specific weather effects or
                enemies will appear in the level.
            </remarks>
        </member>
        <member name="M:Map.HasThisMapGotAliens">
            <summary>
                Checks whether the current map contains alien enemies. This is used to determine if
                alien-specific gameplay mechanics should be enabled.
            </summary>
            <returns>True if the map contains aliens, false otherwise</returns>
            <remarks>
                Returns the value of the hasAliens static field, which is set during map loading
                based on the presence of alien spawn points or alien-themed elements.
            </remarks>
        </member>
        <member name="M:Map.HasThisMapGotAliens">
            <summary>
                Checks if the current map contains alien enemies.
            </summary>
            <returns>True if aliens are present in the map; false otherwise.</returns>
            <remarks>
                Returns the value of the hasAliens flag, which is set during map loading based on
                the enemy types placed in the level. Used for gameplay logic that differs when
                aliens are present.
            </remarks>
        </member>
        <member name="M:Map.InitializeDeactivationOffscreen">
            <summary>
                Initializes the offscreen deactivation system to its default state covering the
                entire map.
            </summary>
            <remarks>
                This method sets up the offscreen culling system by initializing the active area to
                encompass the full map bounds (0 to width-1, 0 to height-1). It also resets the unit
                position tracking variables to zero and sets the runDeactivationOffscreenIsSetup
                flag. This system is used to optimize performance by deactivating blocks and objects
                that are far from the camera view. Must be called before RunDeactivationOffscreen()
                can function properly.
            </remarks>
        </member>
        <member name="M:Map.IsBlockInvulnerable(System.Int32,System.Int32)">
            <summary>
                Checks if a block at the specified grid coordinates is invulnerable (made of steel).
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block exists and has a ground type of Steel, false otherwise</returns>
        </member>
        <member name="M:Map.IsBlockSolid(System.Single,System.Single)">
            <summary>
                Checks if a block at the specified world coordinates is solid. This method converts
                world coordinates to grid coordinates and checks if a solid block exists at that
                location.
            </summary>
            <param name="x">The world x coordinate to check</param>
            <param name="y">The world y coordinate to check</param>
            <returns>True if a solid block exists at the specified coordinates, false otherwise</returns>
        </member>
        <member name="M:Map.IsInvulnerableAbove(System.Single,System.Single)">
            <summary>
                Checks if there are any invulnerable blocks in the column above the specified
                position.
            </summary>
            <param name="x">The x-coordinate to check</param>
            <param name="y">The y-coordinate to start checking from</param>
            <returns>True if any invulnerable block exists above this position; false otherwise</returns>
            <remarks>
                This method scans vertically upward from the given position to the top of the map,
                checking each block in the column for invulnerability. It's useful for determining
                if attacks or effects can reach the sky, or if there's protective terrain overhead.
                The check uses IsBlockInvulnerable() for each grid position.
            </remarks>
        </member>
        <member name="M:Map.IsWithinBounds(UnityEngine.Vector3)">
            <summary>
                Checks if the specified world position is within the map boundaries.
            </summary>
            <param name="pos">The world position to check</param>
            <returns>True if the position is within the map's width and height bounds, false otherwise</returns>
        </member>
        <member name="M:Map.IsWithinBounds(System.Int32,System.Int32)">
            <summary>
                Checks if the specified grid coordinates are within the map boundaries.
            </summary>
            <param name="c">The column index to check</param>
            <param name="r">The row index to check</param>
            <returns>True if the coordinates are within the map's width and height bounds, false otherwise</returns>
        </member>
        <member name="M:Map.MakeBlockPersist(Block)">
            <summary>
                Marks a specific block for persistence by transferring it to the persistent blocks
                container. This is a helper method used by PersistBlocks to process individual
                blocks.
            </summary>
            <param name="block">The block to make persistent</param>
            <remarks>
                Simply calls the Persist method to reparent the block's GameObject to the persistent
                container.
            </remarks>
        </member>
        <member name="M:Map.MakeBlockPersist(Block)">
            <summary>
                Marks a single block to persist across level transitions.
            </summary>
            <param name="block">The block to make persistent.</param>
            <remarks>
                Simple wrapper that calls the Persist method with the block's game object. Part of
                the internal persistence system workflow.
            </remarks>
        </member>
        <member name="M:Map.Persist(UnityEngine.GameObject)">
            <summary>
                Transfers a GameObject to the persistent blocks container by changing its parent.
                This ensures the object survives scene transitions when persistence is enabled.
            </summary>
            <param name="go">The GameObject to make persistent</param>
            <remarks>
                Reparents the GameObject to the PersistentBlocks.Instance transform, which is marked
                as DontDestroyOnLoad to survive scene changes.
            </remarks>
        </member>
        <member name="M:Map.Persist(UnityEngine.GameObject)">
            <summary>
                Moves a game object to the persistent blocks container to survive level transitions.
            </summary>
            <param name="go">The game object to make persistent.</param>
            <remarks>
                Reparents the object to the PersistentBlocks singleton instance, which is configured
                to not be destroyed on level load. This is the core mechanism for block persistence.
            </remarks>
        </member>
        <member name="M:Map.PersistBlocks">
            <summary>
                Enables block persistence and transfers all current foreground and background blocks
                to the persistent storage system. This allows blocks to survive level transitions
                when loading time optimizations are active.
            </summary>
            <remarks>
                Creates a persistent GameObject container if needed and iterates through all map
                blocks, marking matching persistent blocks for retention. Respects the
                dontPersistedPastLevelLoadThisLevel flag to handle special cases where persistence
                should be skipped.
            </remarks>
        </member>
        <member name="M:Map.PersistBlocks">
            <summary>
                Enables block persistence and prepares blocks to survive the next level transition.
            </summary>
            <remarks>
                Creates a persistent game object container if needed and marks matching blocks in
                both foreground and background layers for persistence. Blocks are only persisted if
                they exist in both the current map and the persistent block arrays. Respects the
                dontPersistedPastLevelLoadThisLevel flag to allow temporary overrides.
            </remarks>
        </member>
        <member name="M:Map.RotateBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
                Rotates the foreground block at the specified grid coordinates if it exists.
            </summary>
            <param name="c">The column index in the grid</param>
            <param name="r">The row index in the grid</param>
            <param name="direction">The rotation direction to apply to the block</param>
        </member>
        <member name="M:Map.RunDeactivationOffscreen">
            <summary>
                Updates the active area of the map based on camera position and unit locations,
                deactivating distant blocks.
            </summary>
            <remarks>
                This comprehensive optimization method manages which blocks are active based on
                proximity to the camera and important units. It calculates an active area using
                screen bounds plus a 256x160 unit buffer, then extends this area to include any
                tracked unit positions. The method efficiently updates block activation states only
                for blocks entering or leaving the active area, rather than processing all blocks
                every frame. The method tracks the previously active area and only processes blocks
                in the difference between old and new bounds, significantly reducing processing
                overhead. Both foreground and background blocks are managed. This system is crucial
                for maintaining performance in large maps by keeping only nearby blocks active.
            </remarks>
        </member>
        <member name="M:Map.SetBackgroundBlockEmpty(Block,System.Int32,System.Int32)">
            <summary>
                Removes a specific block from the background grid if it matches the provided block
                reference.
            </summary>
            <param name="block">The block instance to remove (must match the block at the position)</param>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block matched and was removed, false if a different block exists at that position</returns>
        </member>
        <member name="M:Map.SetBlockEmpty(Block,System.Int32,System.Int32)">
            <summary>
                Removes a specific block from the foreground grid if it matches the provided block
                reference or if the position is already empty.
            </summary>
            <param name="block">The block instance to remove (must match the block at the position)</param>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block was removed or position was already empty, false if a different block exists at that position</returns>
        </member>
        <member name="M:Map.SetStartFromHorizontalSuperCheckPoint(System.Int32)">
            <summary>
                Sets up a horizontal super checkpoint with a specific X-axis load offset. This is
                used for horizontal level transitions where the map needs to load at a specific
                horizontal position.
            </summary>
            <param name="xLoadOffset">The horizontal offset for loading the level, clamped to non-negative values</param>
            <remarks>
                If the offset differs from the last load offset, persistence is disabled for this
                level to ensure a clean transition. The offset determines where in the level the
                player spawns horizontally.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromSuperCheckPoint">
            <summary>
                Marks that the next level load should start from a super checkpoint. This affects
                spawn positioning and level initialization.
            </summary>
            <remarks>
                Sets the startFromSuperCheckPoint flag to true. Super checkpoints are special
                checkpoint types that typically mark major progression points or area transitions.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromVerticalSuperCheckPoint(System.Int32)">
            <summary>
                Sets up a vertical super checkpoint with a specific Y-axis load offset. This is used
                for vertical level transitions where the map needs to load at a specific vertical
                position.
            </summary>
            <param name="yLoadOffset">The vertical offset for loading the level, clamped to non-negative values</param>
            <remarks>
                If the offset differs from the last load offset, persistence is disabled for this
                level to ensure a clean transition. The offset determines where in the level the
                player spawns vertically.
            </remarks>
        </member>
        <member name="M:Map.SetTryReduceLoadingTimes(System.Boolean)">
            <summary>
                Enables or disables the loading time optimization system. When enabled, the map will
                attempt to persist certain blocks between level loads to reduce loading times.
            </summary>
            <param name="actuallyTry">True to enable loading time optimizations, false to disable them</param>
            <remarks>
                This optimization system works in conjunction with the block persistence methods
                (PersistBlocks, DontPersistBlocks) to maintain certain map elements across level
                transitions.
            </remarks>
        </member>
        <member name="M:Map.SetTryReduceLoadingTimes(System.Boolean)">
            <summary>
                Enables or disables the loading time reduction optimization system.
            </summary>
            <param name="actuallyTry">True to enable optimization; false to disable.</param>
            <remarks>
                This optimization system affects block persistence and asset pooling to reduce level
                loading times. The setting is checked in conjunction with level editor status and
                debug configuration.
            </remarks>
        </member>
        <member name="M:Map.TryingToReduceLoadingTimes">
            <summary>
                Checks whether the loading time optimization system is currently active. Returns
                true only if optimizations are enabled, the level editor is not active, and the
                asset pool is not disabled.
            </summary>
            <returns>True if loading time optimizations are active and available, false otherwise</returns>
            <remarks>
                This method verifies multiple conditions to ensure optimizations are appropriate for
                the current game state. It's used by various persistence-related methods to
                determine whether to maintain blocks between level loads.
            </remarks>
        </member>
        <member name="M:Map.TryingToReduceLoadingTimes">
            <summary>
                Checks if the loading time reduction optimization is currently active.
            </summary>
            <returns>True if optimization is enabled and conditions are met; false otherwise.</returns>
            <remarks>
                Returns true only if optimization is enabled, level editor is not active, and asset
                pooling is not disabled in debug config. This ensures optimizations don't interfere
                with editing or debugging workflows.
            </remarks>
        </member>
        <!-- Map Data & State Properties -->
        <member name="P:Map.HasBeenSetup">
            <summary>
                Gets a value indicating whether the map has completed its initialization process.
            </summary>
        </member>
        <member name="P:Map.HasSpawnedFlexPower">
            <summary>
                Gets or sets a value indicating whether flex power items have been spawned on the
                map. Used to ensure flex power items are only spawned once per map.
            </summary>
        </member>
        <member name="P:Map.MapData">
            <summary>
                Gets or sets the current map's data structure. When setting, automatically updates
                the static Map.Width and Map.Height fields based on the MapData dimensions (or sets
                them to 0 if MapData is null).
            </summary>
        </member>
        <member name="P:Map.activeTheme">
            <summary>
                Gets or sets the currently active theme holder that defines all block prefabs,
                environmental objects, and visual assets for the current level. This property is set
                based on the map's theme data during map generation and controls which set of
                prefabs are used for blocks, backgrounds, crates, vehicles, and other theme-specific
                elements. The theme determines visual appearance and available prefab types for
                elements like earth blocks, bridges, cages, and special objects. Common themes
                include jungle, city, desert, forest, hell, america, and burning jungle variations.
            </summary>
        </member>
        <!-- Map Data & State Fields -->
        <member name="F:Map.HalfTileSize">
            <summary>
                Defines half the size of a standard tile in pixels. Used for center-point
                calculations and sub-tile positioning operations. Equal to 8 pixels (half of
                TileSize).
            </summary>
        </member>
        <member name="F:Map.LevelFileName">
            <summary>
                The filename of the currently loaded level. Used by the level loading system and
                editor to track which level file is active. Referenced by various game systems
                including the level editor and selection controller.
            </summary>
        </member>
        <member name="F:Map._hasSpawnedFlexPower">
            <summary>
                Private backing field for the HasSpawnedFlexPower property. Tracks whether flex
                power items have been spawned on the current map to prevent duplicate spawning.
            </summary>
        </member>
        <member name="F:Map._mapData">
            <summary>
                Static backing field for the current map's data structure. Stores the MapData object
                that contains level layout, dimensions, and configuration. Used by the MapData
                property.
            </summary>
        </member>
        <member name="F:Map.americaThemeReference">
            <summary>
                Reference to the America/patriotic theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.America. Features American-themed decorations and
                environments.
            </summary>
        </member>
        <member name="F:Map.barrelBlockCount">
            <summary>
                A randomized counter used to determine barrel variant spawning. Initialized to a
                random value between 0 and 100 during map setup. Used in calculations to determine
                whether to spawn propane tanks, oil barrels, or acid barrels based on the map's
                configured spawn probabilities.
            </summary>
        </member>
        <member name="F:Map.burningJungleThemeReference">
            <summary>
                Reference to the burning jungle theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.BurningJungle. Features fire effects, burned vegetation,
                and destruction-themed assets.
            </summary>
        </member>
        <member name="F:Map.cagesSinceLastHardcoreCage">
            <summary>
                Counts the number of potential cage spawn locations passed since the last hardcore
                cage was placed. Defaults to 3. When this exceeds 5, forces a cage placement
                regardless of random chance.
            </summary>
        </member>
        <member name="F:Map.cityThemeReference">
            <summary>
                Reference to the city theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.City. Contains urban environment prefabs including
                buildings, streets, and city-specific enemies.
            </summary>
        </member>
        <member name="F:Map.currentBackgroundBlock">
            <summary>
                Temporary reference to the current background block being instantiated during map
                generation. Used for blocks that have both foreground and background components.
            </summary>
        </member>
        <member name="F:Map.currentBlock">
            <summary>
                Temporary reference to the current foreground block being instantiated during map
                generation. Used throughout the PlaceBlock method to hold the newly created block
                before placement.
            </summary>
        </member>
        <member name="F:Map.deathMatchHelicopterCount">
            <summary>
                Tracks the number of helicopters spawned in death match mode. Every even-numbered
                helicopter spawns at a different X position (minX + 48f).
            </summary>
        </member>
        <member name="F:Map.desertThemeReference">
            <summary>
                Reference to the desert theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.Desert. Contains sand terrain, desert structures, and
                arid environment assets.
            </summary>
        </member>
        <member name="F:Map.dontPersistedPastLevelLoadThisLevel">
            <summary>
                Prevents block persistence for the current level when set to true. Used to disable
                persistence for specific levels or game modes.
            </summary>
        </member>
        <member name="F:Map.finished">
            <summary>
                Indicates whether the current level has been completed. Set to false during map
                initialization and checked by IsFinished().
            </summary>
        </member>
        <member name="F:Map.followCameraTransform">
            <summary>
                Transform reference used by parallax background elements to follow camera movement.
                Passed to ParallaxFollow components via SetFollow() to create depth-based scrolling
                effects for clouds, fog, and background decorations.
            </summary>
        </member>
        <member name="F:Map.forceMode">
            <summary>
                Forces a specific game mode when running in the Unity editor. When set to a value
                other than GameMode.NotSet, overrides the normal game mode selection process.
                Supports modes like ExplosionRun, DeathMatch, Race, and SuicideHorde for testing.
            </summary>
        </member>
        <member name="F:Map.forceTestLevel">
            <summary>
                When true, forces the map to load the test level specified in testLevelFileName
                instead of the normal level. Instance field used for editor testing workflows.
            </summary>
        </member>
        <member name="F:Map.forceThisToBeTheDefaultCampaignScene">
            <summary>
                When true in the Unity editor, sets this scene as the default campaign scene in
                LevelSelectionController. Instance field used for development workflow to override
                the normal campaign scene selection.
            </summary>
        </member>
        <member name="F:Map.forceTryingToReduceLoadingTimes">
            <summary>
                Instance-specific override to enable loading time optimizations. When true, forces
                SetTryReduceLoadingTimes(true) during map initialization.
            </summary>
        </member>
        <member name="F:Map.forestThemeReference">
            <summary>
                Reference to the forest theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.Forest. Includes forest-specific terrain, vegetation,
                and wildlife assets.
            </summary>
        </member>
        <member name="F:Map.hasAliens">
            <summary>
                Indicates whether the current map contains alien enemies. Set to true during map
                loading when any DoodadInfo with DoodadType.Alien is found in MapData.DoodadList.
                Used by HasThisMapGotAliens() for gameplay logic.
            </summary>
        </member>
        <member name="F:Map.hasPersistedPastLevelLoad">
            <summary>
                Tracks whether blocks were actually persisted from the previous level. Used to
                determine if persistent blocks need to be handled during map generation.
            </summary>
        </member>
        <member name="F:Map.havePlacedCageForHardcore">
            <summary>
                Tracks whether a cage has been placed in the current hardcore game session. Used to
                control cage spawning frequency in hardcore mode.
            </summary>
        </member>
        <member name="F:Map.hellThemeReference">
            <summary>
                Reference to the hell theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.Hell. Contains demonic enemies, lava effects, and
                underworld environment assets.
            </summary>
        </member>
        <member name="F:Map.isEditing">
            <summary>
                Indicates whether the map is currently in editor mode. When true, enables special
                editor-only functionality and bypasses certain gameplay restrictions (such as hard
                mode requirements for specific doodads). Also affects terrain interaction behavior
                and visual feedback.
            </summary>
        </member>
        <member name="F:Map.jungleThemeReference">
            <summary>
                Reference to the jungle theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.Jungle. Contains prefabs for blocks, enemies, doodads,
                and environmental elements specific to jungle levels.
            </summary>
        </member>
        <member name="F:Map.lastXLoadOffset">
            <summary>
                The X coordinate offset of the currently loaded map section. Updated from
                nextXLoadOffset when loading new map sections. Used to translate between absolute
                map coordinates and local loaded section coordinates when spawning doodads and other
                map elements.
            </summary>
        </member>
        <member name="F:Map.lastYLoadOffset">
            <summary>
                The Y coordinate offset of the currently loaded map section. Updated from
                nextYLoadOffset when loading new map sections. Used to translate between absolute
                map coordinates and local loaded section coordinates when spawning doodads and other
                map elements.
            </summary>
        </member>
        <member name="F:Map.levelNum">
            <summary>
                The current level number in a sequence. Protected field used internally for level
                progression tracking, though its specific usage appears limited in the decompiled
                code.
            </summary>
        </member>
        <member name="F:Map.levelsCount">
            <summary>
                The total number of levels in the current sequence. Protected field used internally
                for level progression management, though its specific usage appears limited in the
                decompiled code.
            </summary>
        </member>
        <member name="F:Map.levelsLength">
            <summary>
                Stores the total number of levels available in the game. Currently unused in the
                decompiled code.
            </summary>
        </member>
        <member name="F:Map.maxRowActive">
            <summary>
                Maximum active row index for block visibility optimization. Used by the offscreen
                deactivation system to track the highest row that should remain active. Blocks
                beyond this row are deactivated to improve performance. Initialized to 256 and
                updated dynamically as the camera moves through the level.
            </summary>
        </member>
        <member name="F:Map.nextXLoadOffset">
            <summary>
                The X coordinate offset for the next map section to be loaded. Used in conjunction
                with streaming map loading to determine which horizontal section of the map should
                be loaded next. Reset to 0 during map initialization.
            </summary>
        </member>
        <member name="F:Map.nextYLoadOffset">
            <summary>
                The Y coordinate offset for the next map section to be loaded. Used in conjunction
                with streaming map loading to determine which vertical section of the map should be
                loaded next. Always initialized to 0.
            </summary>
        </member>
        <member name="F:Map.persistPastLevelLoad">
            <summary>
                Controls whether certain map elements should persist when loading the next level.
                Used by the block persistence system to maintain state between levels.
            </summary>
        </member>
        <member name="F:Map.persistentGameObject">
            <summary>
                The GameObject that holds persistent map elements between level loads. Created as
                "Persistent Map" when block persistence is first enabled.
            </summary>
        </member>
        <member name="F:Map.placeGroundType">
            <summary>
                Stores the ground type to be placed during map generation operations. Used as a
                temporary variable during block placement.
            </summary>
        </member>
        <member name="F:Map.randomLevel">
            <summary>
                Determines whether the map should add a random offset to the starting level number.
                When true, adds a random value between 0 and randomRange to startLevel during
                initialization.
            </summary>
        </member>
        <member name="F:Map.randomLevelSet">
            <summary>
                Tracks whether the random level offset has been applied during map initialization.
                Used to ensure the random level adjustment only happens once per session.
            </summary>
        </member>
        <member name="F:Map.randomOffset">
            <summary>
                Instance-specific random offset value used during map generation. Purpose unclear
                from available code.
            </summary>
        </member>
        <member name="F:Map.randomRange">
            <summary>
                The maximum random offset that can be added to the starting level when randomLevel
                is enabled. Defaults to 3, meaning the start level can be increased by 0-2.
            </summary>
        </member>
        <member name="F:Map.runDeactivationOffscreenIsSetup">
            <summary>
                Indicates whether the offscreen deactivation system has been initialized. Set to
                true after InitializeDeactivationOffscreen completes setup of active area
                boundaries. When false, RunDeactivationOffscreen will not execute its optimization
                logic.
            </summary>
        </member>
        <member name="F:Map.sharedObjectsReference">
            <summary>
                Reference to shared level objects that are used across multiple themes. Accessed via
                sharedObjectsReference.Asset to instantiate common objects like treasure mooks,
                special vehicles, alien bosses, and theme-agnostic gameplay elements.
            </summary>
        </member>
        <member name="F:Map.tempColor">
            <summary>
                Temporary color storage used during map texture processing. Currently unused in the
                decompiled code.
            </summary>
        </member>
        <member name="F:Map.tempEmptyColor">
            <summary>
                Temporary color value used by IsGroundEmpty to check pixel transparency. Cached to
                avoid repeated color allocations during texture parsing.
            </summary>
        </member>
        <member name="F:Map.tempGroundType">
            <summary>
                Temporary ground type storage used during map generation. Currently unused in the
                decompiled code.
            </summary>
        </member>
        <member name="F:Map.testLevelFileName">
            <summary>
                Filename for a test level that can be loaded in editor mode. Instance field used in
                conjunction with forceTestLevel to override normal level loading for testing
                purposes.
            </summary>
        </member>
        <member name="F:Map.tryingToReduceLoadingTimes">
            <summary>
                Global flag controlling whether the game should use optimizations to reduce loading
                times. Defaults to true, but disabled in level editor or when asset pooling is
                disabled.
            </summary>
        </member>
        <member name="F:Map.woodBlockCount">
            <summary>
                Counter used for procedural variation in crate spawning. Initialized to a random
                value (0-144) on map setup and incremented when placing wood blocks. Used with
                modulo operations to determine when to spawn special crates (ammo, time, airstrike)
                based on spawn chance calculations.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:MapController.explosionPrefab">
            <summary>
                The prefab used for creating hidden explosive effects. Referenced by various game
                systems for spawning explosion effects.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:MapController.BurnGround_Local(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Burns ground in a circular pattern using raycasts from a central point. Creates 24
                rays in a circular pattern to detect and burn ground objects within range. The
                position is snapped to a 16-unit grid for consistent burning patterns.
            </summary>
            <param name="range">The maximum distance for the burn rays.</param>
            <param name="x">The X coordinate of the burn center (snapped to 16-unit grid).</param>
            <param name="y">The Y coordinate of the burn center (snapped to 16-unit grid).</param>
            <param name="groundLayer">The layer mask for ground detection (currently unused in the implementation).</param>
        </member>
        <member name="M:MapController.BurnUnitsAround_NotNetworked(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Burns units in an area without network synchronization by delegating to
                Map.BurnUnitsAround_Local. Used for fire damage effects that don't need to be
                replicated.
            </summary>
            <param name="firedBy">The entity that started the fire.</param>
            <param name="playerNum">The player number who caused the burning.</param>
            <param name="damage">The amount of damage to deal.</param>
            <param name="range">The radius of the burn effect.</param>
            <param name="x">The X coordinate of the burn center.</param>
            <param name="y">The Y coordinate of the burn center.</param>
            <param name="penetrates">Whether the fire penetrates through objects.</param>
            <param name="setGroundAlight">Whether to set the ground on fire.</param>
        </member>
        <member name="M:MapController.DamageBlock(UnityEngine.MonoBehaviour,Block,System.Int32,DamageType,System.Single,System.Single)">
            <summary>
                Damages a specific block with network synchronization. This is a convenience method
                that wraps Damage_Networked for block-specific damage.
            </summary>
            <param name="damageSender">The entity causing the damage.</param>
            <param name="b">The block to damage.</param>
            <param name="damage">The amount of damage to deal.</param>
            <param name="damageType">The type of damage being dealt.</param>
            <param name="forceX">The horizontal force to apply.</param>
            <param name="forceY">The vertical force to apply.</param>
        </member>
        <member name="M:MapController.DamageGround(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,UnityEngine.Collider[],System.Boolean)">
            <summary>
                Damages ground and damageable objects within a spherical area with network
                synchronization. This is the standard method for dealing environmental damage that
                should be replicated to all players.
            </summary>
            <param name="damageSender">The entity causing the damage.</param>
            <param name="damage">The amount of damage to deal.</param>
            <param name="damageType">The type of damage being dealt.</param>
            <param name="range">The diameter of the damage area (internally halved for radius calculation).</param>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <param name="ignoreTheseColliders">Optional array of colliders to exclude from damage.</param>
            <param name="groundLayerStrict">If true, only damages ground layer objects; if false, damages both ground and damageable objects.</param>
            <returns>True if any objects were damaged, false otherwise.</returns>
        </member>
        <member name="M:MapController.DamageGround(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Boolean,UnityEngine.Collider[])">
            <summary>
                Damages ground and damageable objects within a rectangular area with network
                synchronization. Uses a larger sphere check for initial object detection, then
                filters by rectangular bounds for precise area damage.
            </summary>
            <param name="damageSender">The entity causing the damage.</param>
            <param name="damage">The amount of damage to deal.</param>
            <param name="damageType">The type of damage being dealt.</param>
            <param name="width">The width of the damage rectangle (automatically increased by 8 units internally).</param>
            <param name="height">The height of the damage rectangle (automatically increased by 8 units internally).</param>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <param name="debugDraw">If true, enables debug drawing (currently no implementation).</param>
            <param name="ignoreTheseColliders">Optional array of colliders to exclude from damage.</param>
            <returns>True if any objects were damaged, false otherwise.</returns>
        </member>
        <member name="M:MapController.DamageGroundLocal(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,UnityEngine.Collider[],System.Boolean)">
            <summary>
                Damages ground and damageable objects within a spherical area locally without
                network synchronization. Primarily used for client-side damage effects that don't
                need to be replicated across the network.
            </summary>
            <param name="damageSender">The entity causing the damage.</param>
            <param name="damage">The amount of damage to deal.</param>
            <param name="damageType">The type of damage being dealt.</param>
            <param name="range">The diameter of the damage area (internally halved for radius calculation).</param>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <param name="ignoreTheseColliders">Optional array of colliders to exclude from damage.</param>
            <param name="strictlyGround">If true, only damages ground layer objects; if false, damages both ground and damageable objects.</param>
            <returns>True if any objects were damaged, false otherwise.</returns>
        </member>
        <member name="M:MapController.Damage_Local(UnityEngine.MonoBehaviour,UnityEngine.GameObject,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Applies damage to an object locally without network synchronization. Similar to
                Damage_Networked but only affects the local client. Includes additional special case
                handling for Tank damage sources.
            </summary>
            <param name="damageSender">The entity causing the damage.</param>
            <param name="damageReciever">The object receiving the damage.</param>
            <param name="damage">The amount of damage to deal.</param>
            <param name="type">The type of damage being dealt.</param>
            <param name="forceX">The horizontal force to apply.</param>
            <param name="forceY">The vertical force to apply.</param>
            <param name="x">The X coordinate where damage occurs.</param>
            <param name="y">The Y coordinate where damage occurs.</param>
        </member>
        <member name="M:MapController.Damage_Networked(UnityEngine.MonoBehaviour,UnityEngine.GameObject,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Applies damage to an object with network synchronization based on damage policies.
                This method enforces damage rules between different entity types and handles special
                cases for certain damage sources.
            </summary>
            <param name="damageSender">The entity causing the damage.</param>
            <param name="damageReciever">The object receiving the damage.</param>
            <param name="damage">The amount of damage to deal.</param>
            <param name="type">The type of damage being dealt.</param>
            <param name="forceX">The horizontal force to apply.</param>
            <param name="forceY">The vertical force to apply.</param>
            <param name="x">The X coordinate where damage occurs.</param>
            <param name="y">The Y coordinate where damage occurs.</param>
        </member>
        <member name="M:MapController.IsIndestructibleGround(System.Single,System.Single,System.Single,UnityEngine.Collider[],System.Boolean)">
            <summary>
                Checks if there is any indestructible ground (blocks with health greater than 200)
                within the specified spherical area. Used to determine if an area contains terrain
                that cannot be destroyed.
            </summary>
            <param name="range">The diameter of the check area (internally halved for radius calculation).</param>
            <param name="x">The X coordinate of the check center.</param>
            <param name="y">The Y coordinate of the check center.</param>
            <param name="ignoreTheseColliders">Optional array of colliders to exclude from the check.</param>
            <param name="groundLayerStrict">If true, only checks ground layer objects; if false, checks both ground and damageable objects.</param>
            <returns>True if any indestructible ground is found, false otherwise.</returns>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:MapController.SendRollBlockRPC(FallingBlock,System.Int32)">
            <summary>
                Sends network RPCs to synchronize a falling block being rolled by a player. First
                sets the player pushing the block, then sends the roll direction to all clients.
            </summary>
            <param name="block">The falling block being rolled.</param>
            <param name="direction">The direction of the roll (typically -1 or 1).</param>
        </member>
        <member name="M:MapController.SetBlockBeingPushedByPlayer(Block,PID,System.Single)">
            <summary>
                Sets which player is currently pushing a falling block, used for network ownership
                tracking. Only updates if the provided timestamp is earlier than the existing
                timestamp.
            </summary>
            <param name="block">The block being pushed (must be a FallingBlock).</param>
            <param name="player">The player ID pushing the block.</param>
            <param name="timeStamp">The timestamp of when the push started.</param>
        </member>
        <member name="M:MapController.SettleBlockRPC(Block,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
                Handles the network RPC for settling a falling block after it has been rolled. Only
                processes the settlement if the RPC sender matches the player who pushed the block
                or if no player is assigned.
            </summary>
            <param name="block">The block to settle (must be a FallingBlock).</param>
            <param name="X">The final X position for the block.</param>
            <param name="Y">The final Y position for the block.</param>
            <param name="colOffset">The column offset for settlement.</param>
            <param name="final_zAngle">The final Z-axis rotation angle.</param>
        </member>
        <!-- Entity Spawning Methods -->
        <member name="M:MapController.SpawnDrone_Networked(Drone,BroBase,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Spawns a drone with network synchronization that follows a specific hero character.
                The drone is linked to a BroBase instance for following behavior.
            </summary>
            <param name="dronePrefab">The drone prefab to instantiate.</param>
            <param name="followBro">The hero character the drone should follow.</param>
            <param name="x">The X coordinate to spawn at.</param>
            <param name="y">The Y coordinate to spawn at.</param>
            <param name="xI">The initial horizontal velocity.</param>
            <param name="yI">The initial vertical velocity.</param>
            <returns>The spawned drone instance.</returns>
        </member>
        <member name="M:MapController.SpawnMookJumping_Networked(Mook,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Spawns a mook in a jumping state with network synchronization. Includes additional
                parameters for forced jumping and sound effects on spawn.
            </summary>
            <param name="mookPrefab">The mook prefab to instantiate.</param>
            <param name="x">The X coordinate to spawn at.</param>
            <param name="y">The Y coordinate to spawn at.</param>
            <param name="xI">The initial horizontal velocity.</param>
            <param name="yI">The initial vertical velocity.</param>
            <param name="forceJump">Whether to force the mook to jump on spawn.</param>
            <param name="tumble">Whether the mook should tumble.</param>
            <param name="onFire">Whether the mook spawns on fire.</param>
            <param name="isAlert">Whether the mook spawns in an alert state.</param>
            <param name="panicSound">Whether to play panic sound on spawn.</param>
            <param name="laughSound">Whether to play laugh sound on spawn.</param>
            <returns>The spawned mook instance.</returns>
        </member>
        <member name="M:MapController.SpawnMook_Local(Mook,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Spawns a mook locally without network synchronization. Used for client-side mook
                spawning that doesn't need to be replicated.
            </summary>
            <param name="mookPrefab">The mook prefab to instantiate.</param>
            <param name="x">The X coordinate to spawn at.</param>
            <param name="y">The Y coordinate to spawn at.</param>
            <param name="xI">The initial horizontal velocity.</param>
            <param name="yI">The initial vertical velocity.</param>
            <param name="tumble">Whether the mook should tumble on spawn.</param>
            <param name="useParachuteDelay">Whether to delay parachute deployment.</param>
            <param name="useParachute">Whether the mook should use a parachute.</param>
            <param name="onFire">Whether the mook spawns on fire.</param>
            <param name="isAlert">Whether the mook spawns in an alert state.</param>
            <returns>The spawned mook instance.</returns>
        </member>
        <member name="M:MapController.SpawnMook_Networked(Mook,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Spawns a mook with network synchronization. Creates the mook on all connected
                clients and synchronizes its spawn state including alert status.
            </summary>
            <param name="mookPrefab">The mook prefab to instantiate.</param>
            <param name="x">The X coordinate to spawn at.</param>
            <param name="y">The Y coordinate to spawn at.</param>
            <param name="xI">The initial horizontal velocity.</param>
            <param name="yI">The initial vertical velocity.</param>
            <param name="tumble">Whether the mook should tumble on spawn.</param>
            <param name="useParachuteDelay">Whether to delay parachute deployment.</param>
            <param name="useParachute">Whether the mook should use a parachute.</param>
            <param name="onFire">Whether the mook spawns on fire.</param>
            <param name="isAlert">Whether the mook spawns in an alert state.</param>
            <returns>The spawned mook instance.</returns>
        </member>
        <member name="M:MapController.SpawnResource_Networked(System.String,System.Single,System.Single,System.String)">
            <summary>
                Spawns a resource by name with network synchronization. Uses the
                InstantiationController to resolve legacy resource names to prefabs.
            </summary>
            <param name="resourceName">The legacy resource name to spawn.</param>
            <param name="x">The X coordinate to spawn at.</param>
            <param name="y">The Y coordinate to spawn at.</param>
            <param name="tag">Optional tag to assign to the spawned object for later reference (converted to uppercase).</param>
        </member>
        <member name="M:MapController.SpawnResource_Networked_Block(UnityEngine.GameObject,System.Single,System.Single,System.String)">
            <summary>
                Spawns a block-based resource with network synchronization. Handles block
                initialization, immediate step-on notifications, and optional tagging for later
                reference.
            </summary>
            <param name="prefab">The block prefab to instantiate.</param>
            <param name="x">The X coordinate to spawn at.</param>
            <param name="y">The Y coordinate to spawn at.</param>
            <param name="tag">Optional tag to assign to the spawned object for later reference (converted to uppercase).</param>
        </member>
        <member name="M:MapController.SpawnTestVanDamme_Networked(TestVanDammeAnim,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Spawns a TestVanDammeAnim (hero character) with network synchronization. Creates the
                character on all connected clients and synchronizes its spawn state.
            </summary>
            <param name="vanDamPrefab">The TestVanDammeAnim prefab to instantiate.</param>
            <param name="x">The X coordinate to spawn at.</param>
            <param name="y">The Y coordinate to spawn at.</param>
            <param name="xI">The initial horizontal velocity.</param>
            <param name="yI">The initial vertical velocity.</param>
            <param name="tumble">Whether the character should tumble on spawn.</param>
            <param name="useParachuteDelay">Whether to delay parachute deployment.</param>
            <param name="useParachute">Whether the character should use a parachute.</param>
            <param name="onFire">Whether the character spawns on fire.</param>
            <returns>The spawned TestVanDammeAnim instance.</returns>
        </member>
        <member name="M:MapController.SpawnVehicle_Networked(Tank,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Spawns a vehicle (tank) with network synchronization. Creates the vehicle on all
                connected clients with synchronized movement and alert state.
            </summary>
            <param name="vehiclePrefab">The tank prefab to instantiate.</param>
            <param name="x">The X coordinate to spawn at.</param>
            <param name="y">The Y coordinate to spawn at.</param>
            <param name="xI">The initial horizontal velocity.</param>
            <param name="yI">The initial vertical velocity.</param>
            <param name="isAlert">Whether the vehicle spawns in an alert state.</param>
            <returns>The spawned tank instance.</returns>
        </member>
        <member name="M:MapController.SpawnVillager_Networked(Villager,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Spawns a villager with network synchronization. Includes support for armed villagers
                that can be associated with a specific player.
            </summary>
            <param name="villagerPrefab">The villager prefab to instantiate.</param>
            <param name="x">The X coordinate to spawn at.</param>
            <param name="y">The Y coordinate to spawn at.</param>
            <param name="xI">The initial horizontal velocity.</param>
            <param name="yI">The initial vertical velocity.</param>
            <param name="tumble">Whether the villager should tumble on spawn.</param>
            <param name="useParachuteDelay">Whether to delay parachute deployment.</param>
            <param name="useParachute">Whether the villager should use a parachute.</param>
            <param name="onFire">Whether the villager spawns on fire.</param>
            <param name="isAlert">Whether the villager spawns in an alert state.</param>
            <param name="armedPlayerNum">The player number if this is an armed villager, or -1 for unarmed.</param>
            <returns>The spawned villager instance.</returns>
        </member>
        <!-- Entity Spawning Fields -->
        <member name="F:MapController.currentActiveDeadMooksInScene">
            <summary>
                Tracks the current number of active dead mooks (animated corpses or death animations
                still playing). Used to manage visual corpse limits and performance.
            </summary>
        </member>
        <member name="F:MapController.currentActiveMooksInScene">
            <summary>
                Tracks the current number of active (alive) mooks in the scene. Used by spawn
                systems to manage enemy population and by the alarm system for threat assessment.
            </summary>
        </member>
        <member name="F:MapController.currentDeadMooksInScene">
            <summary>
                Tracks the current number of dead mooks in the scene. Used for cleanup and
                performance management of corpses.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:Mook.AnimateFallen">
            <summary>
                Handles fallen/knocked-down animation states. Sets slow frame rate (0.045),
                deactivates gun, and displays appropriate fallen sprites based on fallenTime. Shows
                frames 20-25 while falling (max 5 frames), then frames 25-31 for getting up (max 6
                frames). Transitions to running state after frame 6 with gun reactivation and
                friendly-fire flags reset.
            </summary>
        </member>
        <member name="M:Mook.Awake">
            <summary>
                Unity lifecycle method that initializes the Mook enemy. Adds a DisableWhenOffCamera
                component if not present, sets up random z-offset for visual depth, records spawn
                time, manages initial off-camera disabling, hides the stand-on platform, caches
                damage effect component, and initializes firing player tracking.
            </summary>
        </member>
        <member name="M:Mook.Disable">
            <summary>
                Disables the mook and its AI. Stops AI behavior and optionally disables the
                DisableWhenOffCamera component unless it has forceExtendDisableRangeToThisObject
                set.
            </summary>
        </member>
        <member name="M:Mook.OnDestroy">
            <summary>
                Unity lifecycle cleanup that updates global mook death counters. Decrements the
                active dead mooks counter if this mook had died, and increments the total dead mooks
                in scene counter.
            </summary>
        </member>
        <member name="M:Mook.Reenable">
            <summary>
                Re-enables the mook and its AI after being disabled. Restores AI functionality and
                enables the DisableWhenOffCamera component if present.
            </summary>
        </member>
        <member name="M:Mook.RunFallen">
            <summary>
                Manages fallen state physics and recovery. Decrements fallen timer and resets
                animation frame when timer expires. Stops horizontal movement if grounded (within
                0.5 units of ground height) to prevent sliding while down.
            </summary>
        </member>
        <member name="M:Mook.Start">
            <summary>
                Unity lifecycle method that handles Mook initialization after scene load. For
                non-door-spawning mooks, it attempts ground placement via raycast or ceiling hanging
                if possible. Sets initial invulnerability states based on spawn conditions and
                handles parachute positioning for off-screen spawns.
            </summary>
        </member>
        <member name="M:Mook.Update">
            <summary>
                Main update loop handling plasma/shock damage timers, catch-friendly-bullets
                management, burning effects and fire spreading, blind/scared status effects with
                vocal sounds, falling scream delays, corpse explosion checks, somersault collision
                detection with units, string-up panic spreading, gravity disable timer, and
                discharged scream delays.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:Mook.BurnInternal(System.Int32,System.Int32)">
            <summary>
                Handles internal fire damage processing by accumulating burn damage. If not already
                burning and able to panic, initiates panic state with 0.4-2 second burn time based
                on panic success.
            </summary>
            <param name="damage">Amount of burn damage to add</param>
            <param name="direction">Direction for panic behavior</param>
        </member>
        <member name="M:Mook.BurnOthers">
            <summary>
                Spreads fire to nearby units and blocks when enemies spread fire is enabled.
                Raycasts horizontally to find flammable targets within range. Part of fire
                propagation system for chain reaction effects.
            </summary>
            <remarks>
                Only active when Demonstration.enemiesSpreadFire is true. Checks 14 units left and
                right for targets at Y+5 height. Burns units within 16 unit radius using area
                effect.
            </remarks>
        </member>
        <member name="M:Mook.CatchFriendlyBullets">
            <summary>
                Determines whether this mook can catch friendly bullets (typically when controlled
                by a player).
            </summary>
            <returns>True if the mook can catch friendly bullets, false otherwise</returns>
        </member>
        <member name="M:Mook.Damage(System.Int32,DamageType,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour,System.Single,System.Single)">
            <summary>
                Processes damage to the mook with special handling for various damage types. Handles
                chainsaw impaling with disembowel conversion, propane block achievement tracking,
                plasma/shock damage accumulation with stun effects, fire damage with panic
                triggering, assassination mechanics for silent kills, tumbling/somersault triggers
                from high knockback, and depleted uranium explosion effects. Notifies AI of damage
                source and manages special death states.
            </summary>
            <param name="damage">The amount of damage to apply</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="direction">The direction of the damage source (-1 or 1)</param>
            <param name="damageSender">The entity that caused the damage</param>
            <param name="hitX">The X coordinate where the damage hit</param>
            <param name="hitY">The Y coordinate where the damage hit</param>
        </member>
        <member name="M:Mook.DamageSelfOnMookCollision">
            <summary>
                Applies self-damage when colliding with other mooks at high velocity. Deals 4 knock
                damage with velocity-based knockback forces (3.33x horizontal velocity). Used during
                tumbling/somersaulting collisions.
            </summary>
        </member>
        <member name="M:Mook.Death">
            <summary>
                Triggers immediate death with randomized minimal knockback and default damage. Plays
                death sound and applies standard death processing.
            </summary>
        </member>
        <member name="M:Mook.Death(System.Single,System.Single,DamageObject)">
            <summary>
                Processes mook death with knockback and damage information. Handles door
                unregistration, statistics notification, enemy death events, dead mook counter
                updates, platform adjustments, hero kill attribution, state cleanup for
                tumbling/somersaulting, and damage effect death processing. Manages demonstration
                mode invulnerability.
            </summary>
            <param name="xI">The horizontal knockback force applied on death</param>
            <param name="yI">The vertical knockback force applied on death</param>
            <param name="damage">The damage object containing information about what killed the mook</param>
        </member>
        <member name="M:Mook.DischargePilotingUnit(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Ejects the mook from a vehicle or mech, killing the mook in the process. Initiates a
                back somersault animation and sets up a delayed scream effect.
            </summary>
            <param name="x">The X position to discharge the unit at</param>
            <param name="y">The Y position to discharge the unit at</param>
            <param name="xI">The horizontal velocity to apply</param>
            <param name="yI">The vertical velocity to apply</param>
            <param name="stunUnit">Whether to stun the unit (not used in Mook implementation)</param>
        </member>
        <member name="M:Mook.ExplodeCorpse">
            <summary>
                Causes the mook's corpse to explode violently, dealing area damage. Creates a medium
                explosion effect, damages nearby units and terrain, and applies burn effects in the
                area.
            </summary>
        </member>
        <member name="M:Mook.FallDamage(System.Single)">
            <summary>
                Applies fall damage when vertical impact exceeds threshold. Deals 5 base damage
                (plus max health if extra fall damage enabled), triggers face-fall animation for
                survivors, and credits kills to the last throwing character. Updates fall death
                threshold after first impact.
            </summary>
            <param name="yI">The vertical impact velocity (negative values indicate falling)</param>
        </member>
        <member name="M:Mook.FireWeapon(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Fires the mook's weapon projectile with muzzle flash effect. Sets gun animation
                frame, updates gun sprite, creates muzzle flash at specified position, spawns
                projectile, and plays attack sound.
            </summary>
            <param name="x">The X position to spawn the projectile</param>
            <param name="y">The Y position to spawn the projectile</param>
            <param name="xSpeed">The horizontal velocity of the projectile</param>
            <param name="ySpeed">The vertical velocity of the projectile</param>
        </member>
        <member name="M:Mook.Gib(DamageType,System.Single,System.Single)">
            <summary>
                Destroys the mook with gibbing effects and handles death notifications. Manages kill
                attribution, statistics, and door cleanup on gibbing. Ensures proper credit for
                kills and special kill types.
            </summary>
            <param name="damageType">Type of damage that caused gibbing.</param>
            <param name="xI">Horizontal force for gib physics.</param>
            <param name="yI">Vertical force for gib physics.</param>
            <remarks>
                Tracks thrown kills via lastThrewMe. Credits recent killer if within 0.33s. Notifies
                statistics, removes from door spawner, triggers damage effects. Only processes death
                notifications once via hasDied flag.
            </remarks>
        </member>
        <member name="M:Mook.Gib">
            <summary>
                Gibs the mook with default parameters and no specific force. Convenience method for
                simple gib calls without physics. Uses normal damage type with zero velocity.
            </summary>
        </member>
        <member name="M:Mook.NotifyDeathType">
            <summary>
                Reports the death type to statistics system for tracking. Ensures death type is only
                reported once per mook. Part of the game's death tracking and achievement system.
            </summary>
            <remarks>
                Uses hasNotifiedDeathType flag to prevent duplicate reports. Sends both mook
                reference and death type enum to statistics.
            </remarks>
        </member>
        <member name="M:Mook.Revive(System.Int32,System.Boolean,TestVanDammeAnim)">
            <summary>
                Revives the mook as a zombie under player control. Resets status effects, disables
                AI, and slightly randomizes movement speed.
            </summary>
            <param name="playerNum">The player number taking control of the revived mook</param>
            <param name="isUnderPlayerControl">Whether the mook is under direct player control</param>
            <param name="reviveSource">The unit that revived this mook</param>
            <returns>True if the mook was successfully revived (requires canBeRevived to be true), false otherwise</returns>
        </member>
        <member name="M:Mook.Unrevive">
            <summary>
                Reverses revival effects and resets the mook to uncontrolled state. Clears player
                ownership when revival is cancelled or expires. Returns the mook to standard enemy
                configuration.
            </summary>
            <remarks>
                Sets playerNum to -1 to remove player control. Maintains base class unrevive
                behavior for state cleanup.
            </remarks>
        </member>
        <member name="M:Mook.UseFire">
            <summary>
                Handles the mook's attack action when visible and not incapacitated. Fires weapon
                with speed modifiers for demonstration mode, adds slight vertical spread, and
                disturbs nearby wildlife. Calculates firing position based on facing direction.
            </summary>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:Mook._mookDamageEffect">
            <summary>
                Component handling visual damage effects for this mook. Retrieved via GetComponent
                during initialization and used to propagate damage, death, and gib events for visual
                feedback.
            </summary>
        </member>
        <member name="F:Mook.assasinated">
            <summary>
                Protected flag indicating mook is playing assassination death animation. Set to true
                when killed by assassination attack. Triggers special AnimateAssasinated() behavior.
                Cleared if mook gains velocity (knocked away) during assassination animation.
            </summary>
        </member>
        <member name="F:Mook.assasinatedFrame">
            <summary>
                Specifies which sprite frame to display during assassination death animation. Used
                when mook is killed by assassination (assasinated = true) to show special death
                pose. Different mook types can have unique assassination death frames.
            </summary>
        </member>
        <member name="F:Mook.canBeAssasinated">
            <summary>
                Determines if this mook type can be killed by assassination attacks. When true,
                allows special assassination death animations using assasinatedFrame. Affects how
                stealth kills and backstab attacks are processed.
            </summary>
        </member>
        <member name="F:Mook.catchFriendlyBullets">
            <summary>
                Base flag indicating whether this mook can catch friendly bullets. Unlike
                temporarilyCatchFriendBullets, this represents a permanent ability rather than a
                temporary state.
            </summary>
        </member>
        <member name="F:Mook.decapitated">
            <summary>
                Indicates whether this mook has been decapitated. Affects death animations,
                assassination eligibility, and prevents certain visual effects like face huggers
                from appearing.
            </summary>
        </member>
        <member name="F:Mook.decapitationCounter">
            <summary>
                Timer tracking time since decapitation. Used to trigger delayed effects like death
                gargles after 0.3 seconds have passed since decapitation occurred.
            </summary>
        </member>
        <member name="F:Mook.disableCatchFriendBulletsCounter">
            <summary>
                Cooldown timer that prevents catching friendly bullets. When greater than 0, the
                mook cannot catch bullets even if other flags allow it. Decremented each frame.
            </summary>
        </member>
        <member name="F:Mook.disemboweled">
            <summary>
                Protected flag indicating mook is playing disemboweled death animation. Set to true
                for violent deaths. Triggers special animation state showing disemboweledFrame.
                Cleared if mook gains velocity during animation, transitioning to normal death
                physics.
            </summary>
        </member>
        <member name="F:Mook.disemboweledFrame">
            <summary>
                Specifies which sprite frame to display when mook is disemboweled. Used for gruesome
                death animations when mook is killed by particularly violent attacks. Works with
                disemboweled flag to show special death state.
            </summary>
        </member>
        <member name="F:Mook.fallDeathThreshold">
            <summary>
                Velocity threshold for instant death from falling. When vertical velocity (yI) falls
                below this value (-350f default), the mook takes fatal damage. Temporarily lowered
                to -430f when hiding.
            </summary>
        </member>
        <member name="F:Mook.firingPlayerNum">
            <summary>
                Player number used when this mook fires projectiles. Set to the mook's playerNum
                during setup and special attacks. Default is -1, typically set to 5 for enemy
                projectiles.
            </summary>
        </member>
        <member name="F:Mook.hasCheckPostDeathEvent">
            <summary>
                Flag tracking whether the post-death event check has been performed. Used to trigger
                corpse explosions 1.33 seconds after death based on random chance.
            </summary>
        </member>
        <member name="F:Mook.hasDied">
            <summary>
                Protected flag preventing multiple death processing. Set to true in Die() and
                DieAtEndOfFrame() to ensure death logic only runs once. Checked at start of death
                methods to prevent duplicate death effects, gibbing, or score updates.
            </summary>
        </member>
        <member name="F:Mook.isBeingThrown">
            <summary>
                Flag indicating the mook is currently being thrown by a player. Set to true when
                thrown, enables temporary bullet catching and tracks the throwing player.
            </summary>
        </member>
        <member name="F:Mook.lastThrewMe">
            <summary>
                Tracks the character (TestVanDammeAnim) that last threw this mook. Used for
                attributing kills when the mook dies from falling damage after being thrown.
            </summary>
        </member>
        <member name="F:Mook.showElectrifiedFrames">
            <summary>
                Determines if this mook type displays special electrocution animations. When true
                and mook has plasmaDamage or shockCounter &gt; 0, shows electricity visual effects.
                Used to differentiate mooks that visually react to electrical damage from those that
                don't.
            </summary>
        </member>
        <member name="F:Mook.takeExtraFallDamage">
            <summary>
                When true, this mook takes additional fall damage equal to their max health. Used
                for certain enemy types that are particularly vulnerable to falling damage.
            </summary>
        </member>
        <member name="F:Mook.temporarilyCatchFriendBullets">
            <summary>
                When true, this mook will catch friendly bullets temporarily during special states.
                Used during somersaults and specific animations to prevent friendly fire damage.
                Automatically disabled after use.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:Mook.AddParentedDiff(System.Single,System.Single)">
            <summary>
                Adds positional differences from parent movement with special handling for falling
                blocks. When alive and parented to a falling block with downward parent movement,
                triggers a mid-air shake effect, adds upward velocity, stops horizontal movement,
                and initiates tumbling to simulate being knocked off the falling platform.
            </summary>
            <param name="xDiff">The horizontal position difference to apply.</param>
            <param name="yDiff">The vertical position difference to apply (modified for falling blocks).</param>
        </member>
        <member name="M:Mook.AddSpeedLeft">
            <summary>
                Adds leftward movement speed with reduced control during parachute/quicksand states.
                Movement is disabled while tumbling or back-somersaulting. Parachute and quicksand
                cap horizontal speed at 40% of maximum.
            </summary>
        </member>
        <member name="M:Mook.AddSpeedRight">
            <summary>
                Adds rightward movement speed with reduced control during parachute/quicksand
                states. Movement is disabled while tumbling or back-somersaulting. Parachute and
                quicksand cap horizontal speed at 40% of maximum.
            </summary>
        </member>
        <member name="M:Mook.ApplyFallingGravity">
            <summary>
                Applies gravity with special conditions for quicksand and disabled gravity. Handles
                mid-air shake time that temporarily prevents gravity when units are knocked off
                falling platforms.
            </summary>
        </member>
        <member name="M:Mook.BackSomersault(System.Boolean)">
            <summary>
                Initiates back-somersault state if capable. Cancels front-somersault and tumbling,
                enables back tumbling for forced tumbles or high vertical velocity, and resets
                animation frames.
            </summary>
            <param name="forceTumble">Forces the mook into tumbling state during somersault</param>
        </member>
        <member name="M:Mook.CanBeAffectedByWind">
            <summary>
                Determines if the mook can be affected by wind forces. Prevents wind effects when
                hiding in grass for stealth. Maintains concealment by ignoring environmental forces.
            </summary>
            <returns>True if wind can affect the mook, false when hiding.</returns>
            <remarks>
                Hiding mooks remain stationary to maintain cover in grass. Falls back to base class
                wind vulnerability when not hiding.
            </remarks>
        </member>
        <member name="M:Mook.CanPassThroughBarriers">
            <summary>
                Determines if the mook can pass through fragile barriers based on specific
                conditions. Returns true when dead, blast jumping with sufficient horizontal
                velocity, blinded, scared, or when the AI is alerted. Used by movement constraint
                methods to allow panic-driven units to break through barriers.
            </summary>
            <returns>True if the mook should be allowed to pass through barriers, false otherwise.</returns>
        </member>
        <member name="M:Mook.CheckForQuicksand">
            <summary>
                Checks if the mook is in quicksand and handles state transitions. When entering
                quicksand or while blind/not panicking in quicksand, stops special movements,
                triggers panic, and activates standing platform if available.
            </summary>
        </member>
        <member name="M:Mook.CheckForQuicksandDeath">
            <summary>
                Checks if the mook should die from being in quicksand. Mooks die after 0.5 seconds
                in quicksand (compared to 2 seconds for bros).
            </summary>
        </member>
        <member name="M:Mook.ConstrainToFragileBarriers(System.Single@,System.Single)">
            <summary>
                Constrains movement against fragile barriers unless the mook can pass through them.
                When constrained, performs raycasts at waist height to detect barriers and stops
                horizontal movement upon collision. Allows passage when panicking, blind, scared, or
                alert.
            </summary>
            <param name="xIT">Reference to horizontal movement delta that will be constrained.</param>
            <param name="radius">Collision radius for barrier detection.</param>
        </member>
        <member name="M:Mook.ConstrainToMookBarriers(System.Single@,System.Single)">
            <summary>
                Constrains movement against mook-specific barriers only when burning or blind. Under
                normal conditions, mooks can pass through their own barriers, but status effects
                cause them to collide with these obstacles.
            </summary>
            <param name="xIT">Reference to horizontal movement delta that will be constrained.</param>
            <param name="radius">Collision radius for barrier detection.</param>
        </member>
        <member name="M:Mook.DisableGravity(System.Single)">
            <summary>
                Temporarily disables gravity for the mook for a specified duration. Used by special
                abilities or environmental effects that need to suspend normal physics.
            </summary>
            <param name="time">Duration in seconds to disable gravity.</param>
        </member>
        <member name="M:Mook.EnableGravity">
            <summary>
                Immediately re-enables gravity by resetting the disable timer to zero. Restores
                normal physics behavior after temporary suspension.
            </summary>
        </member>
        <member name="M:Mook.FallOnFace">
            <summary>
                Makes the mook fall face-first and become temporarily incapacitated. Sets fallen
                state with recovery time and appropriate animations. Used for comedic or stunning
                face-plant landings.
            </summary>
            <remarks>
                Sets action state to Fallen with 1 second recovery time. Clears AI actions and
                forces wait period of 0.5 seconds. Reverses sprite facing for backwards falls. Stops
                horizontal movement.
            </remarks>
        </member>
        <member name="M:Mook.FlyDownwards(System.Single)">
            <summary>
                Virtual method for downward flying behavior. Base implementation is empty, meant to
                be overridden by flying enemy types.
            </summary>
            <param name="time">The duration of the flying behavior</param>
        </member>
        <member name="M:Mook.FlyInDirection(System.Single,UnityEngine.Vector3)">
            <summary>
                Virtual method for directional flying behavior. Base implementation is empty, meant
                to be overridden by flying enemy types.
            </summary>
            <param name="time">The duration of the flying behavior</param>
            <param name="forceFlyingVelocity">The velocity vector for the flying direction</param>
        </member>
        <member name="M:Mook.FlyInstant(System.Single)">
            <summary>
                Virtual method for instant flying behavior. Base implementation is empty, meant to
                be overridden by flying enemy types.
            </summary>
            <param name="time">The duration of the flying behavior</param>
        </member>
        <member name="M:Mook.FlyLeft(System.Single)">
            <summary>
                Virtual method for leftward flying behavior. Base implementation is empty, meant to
                be overridden by flying enemy types.
            </summary>
            <param name="time">The duration of the flying behavior</param>
        </member>
        <member name="M:Mook.FlyRight(System.Single)">
            <summary>
                Virtual method for rightward flying behavior. Base implementation is empty, meant to
                be overridden by flying enemy types.
            </summary>
            <param name="time">The duration of the flying behavior</param>
        </member>
        <member name="M:Mook.ForceClimbing(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Virtual method to force the mook into a climbing state. Base implementation is
                empty, meant to be overridden by climbing-capable enemy types.
            </summary>
            <param name="leftClimb">Whether the mook should climb on the left side</param>
            <param name="rightClimb">Whether the mook should climb on the right side</param>
            <param name="topClimb">Whether the mook should climb on top</param>
        </member>
        <member name="M:Mook.ForceJumpOutOfBike">
            <summary>
                Forces the mook to jump out of a vehicle with increased force. Clears AI actions and
                adds a wait period after ejection. Used when mooks are ejected from destroyed
                vehicles.
            </summary>
            <remarks>
                Increases jump force by 60% for dramatic ejection. Sets fall death threshold lower
                to -430 units. Updates hiding time to affect landing animations.
            </remarks>
        </member>
        <member name="M:Mook.GetEnemyMovement">
            <summary>
                Overrides enemy movement behavior to handle special movement states. Bypasses normal
                movement when exiting doors, back somersaulting, back tumbling, or fallen. During
                door exits, moves the mook toward the exit position until reached.
            </summary>
        </member>
        <member name="M:Mook.GetGroundHeightGround">
            <summary>
                Calculates ground height using multiple raycasts for mook movement. Uses special
                ground checking when panicking, burning, blind, scared, or exiting doors with offset
                raycasts based on movement direction. Falls back to normal ground check for standard
                states.
            </summary>
            <returns>The Y coordinate of the ground below the mook</returns>
        </member>
        <member name="M:Mook.IsOnGround">
            <summary>
                Checks if the mook is standing on ground, excluding back somersaulting state.
                Prevents ground-based behaviors during acrobatic maneuvers by returning false when
                performing a back somersault regardless of actual ground contact.
            </summary>
            <returns>True if on ground and not back somersaulting, false otherwise.</returns>
        </member>
        <member name="M:Mook.Jump(System.Boolean)">
            <summary>
                Initiates a jump action with special handling for animation states. Extends base
                jump functionality to reset reveal animations. Ensures proper state transitions when
                leaving ground.
            </summary>
            <param name="wallJump">Whether this is a wall jump.</param>
            <remarks>
                Cancels any active reveal position animations. Maintains all base class jump physics
                and state changes.
            </remarks>
        </member>
        <member name="M:Mook.Knock(DamageType,System.Single,System.Single,System.Boolean)">
            <summary>
                Applies knockback force with potential tumbling based on impact strength. Extends
                base knockback to add tumbling for strong upward forces. Determines if the mook
                should enter tumbling state from the impact.
            </summary>
            <param name="damageType">The type of damage causing knockback.</param>
            <param name="xI">Horizontal knockback force.</param>
            <param name="yI">Vertical knockback force.</param>
            <param name="forceTumble">Whether to force tumbling regardless of force.</param>
            <remarks>
                Tumbling triggers when forceTumble is true or vertical force exceeds 200. Only
                applies tumbling if the mook has canTumble capability.
            </remarks>
        </member>
        <member name="M:Mook.Land">
            <summary>
                Handles landing mechanics including damage, bouncing, and state transitions. Complex
                landing logic for different movement states and impact forces. Manages sound
                effects, particle effects, and AI state updates.
            </summary>
            <remarks>
                Updates hiding time based on AI mental state. Stops falling sounds. Handles bouncy
                mooks, somersaulting recovery, and face-planting. Can trigger tumbling or continued
                somersaulting based on impact. Disturbs wildlife on hard landings when dead.
            </remarks>
        </member>
        <member name="M:Mook.Launch(System.Single,System.Single)">
            <summary>
                Launches the mook with specified velocities, setting it into a tumbling state.
                Clears AI action queue and makes the AI wait before resuming normal behavior.
            </summary>
            <param name="xI">The horizontal launch velocity</param>
            <param name="yI">The vertical launch velocity</param>
        </member>
        <member name="M:Mook.OpenParachute">
            <summary>
                Activates the parachute if not already deployed. Simply sets the IsParachuteActive
                flag which triggers parachute physics and animation.
            </summary>
        </member>
        <member name="M:Mook.RollOnto(System.Int32)">
            <summary>
                Handles being rolled onto by boulders or heavy objects. Knocks the mook away if
                space available, otherwise crushes them. Determines survival based on adjacent
                terrain.
            </summary>
            <param name="direction">Direction of the rolling object (-1 left, 1 right).</param>
            <remarks>
                Checks if adjacent block is solid to determine crush vs knock. Applies directional
                knockback force of 200 units if space available. Instantly gibs the mook with crush
                damage if trapped.
            </remarks>
        </member>
        <member name="M:Mook.RunMovement">
            <summary>
                Executes physics-based movement with high-velocity wall impact detection. If moving
                faster than 300 units/second and hits a wall, triggers wall damage (15 crush damage
                in 20 unit radius), self-damage (4 knock damage), damage sound, and initiates back
                somersault. Calls base movement implementation.
            </summary>
        </member>
        <member name="M:Mook.SetPosition(UnityEngine.Vector3)">
            <summary>
                Sets the mook's position with special handling for door-exiting state. Door-exiting
                mooks use rounded coordinates and fixed Z position of 14, while normal mooks use
                standard positioning.
            </summary>
            <param name="pos">The new position vector to set</param>
        </member>
        <member name="M:Mook.SetPosition">
            <summary>
                Updates the mook's transform position based on current X/Y coordinates. Door-exiting
                mooks use rounded positions with fixed Z of 14 plus z-offset, while normal mooks use
                standard transform updates.
            </summary>
        </member>
        <member name="M:Mook.ThrowMook(System.Boolean,System.Int32)">
            <summary>
                Handles the mook being thrown by a player character. Clears string-up and dancing
                states, initiates back-somersault, enables friendly fire catching temporarily,
                tracks the throwing player, and reduces plasma counter for faster detonation.
            </summary>
            <param name="thrownByBrommando">Whether the mook was thrown by Brommando (unused)</param>
            <param name="throwingPlayerNum">The player number who threw this mook</param>
        </member>
        <member name="M:Mook.Tumble">
            <summary>
                Initiates tumbling state if the mook can tumble and isn't already
                back-somersaulting. Sets tumbling flags for animation and movement handling.
            </summary>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:Mook.alwaysStandOnPlatformLayer">
            <summary>
                Forces this mook to always stand on platform layer blocks. Set to true during setup
                when the mook is positioned on a platform layer block, ensuring they maintain proper
                collision with platforms.
            </summary>
        </member>
        <member name="F:Mook.backSomersaultFrames">
            <summary>
                Protected counter tracking the animation frames during backward tumbling. Reset to 0
                when initiating backward tumbling in BackSomersault() or when bouncing with
                canBackwardTumble. Used internally for animation timing.
            </summary>
        </member>
        <member name="F:Mook.backSomersaulting">
            <summary>
                Indicates whether the mook is currently performing a backward somersault. Set to
                true by BackSomersault() when canBackSomersault is true. Affects movement physics,
                animation state, and AI behavior. Prevents other actions while active and is cleared
                when landing or dying.
            </summary>
        </member>
        <member name="F:Mook.backTumbling">
            <summary>
                Protected flag indicating the mook is performing a continuous backward tumbling
                motion. Set to true when backSomersaulting with sufficient force (forceTumble or yI
                &gt; 200f) and canBackwardTumble is true. Affects AI state and prevents actions
                while tumbling. Reset when landing or transitioning states.
            </summary>
        </member>
        <member name="F:Mook.canBackSomersault">
            <summary>
                Determines if this mook type can perform backward somersaults. When true, enables
                BackSomersault() behavior including flipping animations and altered physics. Used to
                differentiate mook capabilities between types.
            </summary>
        </member>
        <member name="F:Mook.canBackwardTumble">
            <summary>
                Determines if this mook can perform continuous backward tumbling when knocked back
                with force. When true and mook is knocked back hard enough (forceTumble or yI &gt;
                200f), sets backTumbling flag for extended tumbling animation. Also affects bouncing
                behavior when isBouncy is true.
            </summary>
        </member>
        <member name="F:Mook.canForwardSomersault">
            <summary>
                Determines if this mook type can perform forward somersaults. Currently not actively
                used in code but mirrors canBackSomersault for potential forward flipping animations
                and movement behaviors.
            </summary>
        </member>
        <member name="F:Mook.canHideInGrass">
            <summary>
                Determines if this mook type can hide in grass terrain. Currently unused in code but
                likely intended for stealth mechanics where certain mook types could conceal
                themselves in grass tiles.
            </summary>
        </member>
        <member name="F:Mook.canLandOnFace">
            <summary>
                Determines if this mook type can land face-down when falling. When true and mook
                hits ground while falling, calls FallOnFace() instead of normal landing recovery.
                When false, mook bounces up slightly (yI = 80f) and continues normally.
            </summary>
        </member>
        <member name="F:Mook.canTumble">
            <summary>
                Determines if this mook type can perform forward tumbling movements. When true,
                enables tumbling behavior when knocked with sufficient vertical force (yI &gt; 200f)
                or when Tumble() is called. Used to differentiate mook types that can tumble from
                those that cannot.
            </summary>
        </member>
        <member name="F:Mook.disableGravityTime">
            <summary>
                Time remaining to disable gravity for this mook. While greater than 0, gravity is
                not applied, allowing for suspension effects. Decremented each frame during movement
                calculations.
            </summary>
        </member>
        <member name="F:Mook.fallenTime">
            <summary>
                Protected timer for how long the mook remains in fallen state. Set to 1f when
                FallDamage() is called. Decrements each frame and when reaching 0, likely triggers
                recovery animations or state changes. Prevents actions while greater than 0.
            </summary>
        </member>
        <member name="F:Mook.frontSomersaulting">
            <summary>
                Indicates whether the mook is currently performing a forward somersault. Cleared
                when BackSomersault() is called. Used by animation system to play appropriate
                somersault animations and affects movement physics during the somersault motion.
            </summary>
        </member>
        <member name="F:Mook.hasTumbled">
            <summary>
                Protected flag set to true when Tumble() successfully initiates a tumbling state.
                Tracks whether the mook has entered tumbling at least once, potentially for
                achievement tracking or special behavior triggers.
            </summary>
        </member>
        <member name="F:Mook.isBouncy">
            <summary>
                Makes the mook bounce when hitting ground with sufficient downward velocity (yI &lt;
                -210f). When true, reverses and dampens vertical velocity (yI = 50f - yI * 0.3f) and
                reduces horizontal velocity by 10%. Can trigger backward tumbling if
                canBackwardTumble is true and horizontal speed exceeds 90f.
            </summary>
        </member>
        <member name="F:Mook.midAirShakeTime">
            <summary>
                Timer for mid-air screen shake effects. When greater than 0, causes screen shake
                while the mook is airborne. Decremented each frame and typically set to 0.02f during
                forceful launches.
            </summary>
        </member>
        <member name="F:Mook.standOnMookPlatform">
            <summary>
                Collider component that creates a platform other units can stand on when this mook
                enters certain states. Disabled during initialization, enabled when mook is in
                quicksand, and lowered by 4 units when mook dies.
            </summary>
        </member>
        <member name="F:Mook.tumbling">
            <summary>
                Indicates whether the mook is currently in a forward tumbling state. Set to true
                when Tumble() is called and canTumble is true. Used by animation system to play
                tumbling animations. Cleared when landing, dying, or transitioning to other movement
                states like backSomersaulting.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:Mook.AnimateActualIdleDuckingFrames">
            <summary>
                Handles ducking idle animations including reveal and hiding states. Shows special
                animations when emerging from or hiding in grass. Manages the transition between
                hidden and revealed states.
            </summary>
            <remarks>
                Reveal animation uses sprite row 7 frames 5-19 with variable timing. Hiding in grass
                uses minimal animation on row 7 frame 5. Updates lastHidingTime to track concealment
                state duration.
            </remarks>
        </member>
        <member name="M:Mook.AnimateActualIdleFrames">
            <summary>
                Animates specific idle frames including special states like choking. Handles tear
                gas choking animation when stunned by gas effects. Provides visual feedback for
                status ailments during idle.
            </summary>
            <remarks>
                Tear gas choking uses sprite row 11 with 9 frames (15-23). Includes variable frame
                delays and choking sound effects. Falls back to base idle animation when no special
                states active.
            </remarks>
        </member>
        <member name="M:Mook.AnimateActualJumpingFrames">
            <summary>
                Handles frame animation selection during jumping states. Determines which animation
                to play based on current movement state. Prioritizes special states like tumbling
                and somersaulting over normal jumps.
            </summary>
            <remarks>
                Checks for tumbling, front/back somersaulting states first. Falls back to base
                jumping animation or special hiding jump animation. Units recently hiding use
                special concealed jumping frames.
            </remarks>
        </member>
        <member name="M:Mook.AnimateAssasinated">
            <summary>
                Animates the assassination death sequence when killed by stealth attacks. Shows a
                special death animation with blood effects at specific frames. Continues until all
                15 frames are displayed or movement disrupts the animation.
            </summary>
            <remarks>
                Uses sprite row 9 with frames 15-29. Frame 4 changes animation speed. Frame 5
                creates blood artery effects and may repeat for dramatic effect. Animation is
                interrupted if the unit gains significant velocity.
            </remarks>
        </member>
        <member name="M:Mook.AnimateBackSomersault">
            <summary>
                Manages back somersault death animation with tumbling variant. Deactivates weapon,
                increments somersault frame counter, and either shows directional back flying frames
                with rotation based on velocity (0.0225 frame rate) or delegates to tumbling
                animation when back tumbling flag is set.
            </summary>
        </member>
        <member name="M:Mook.AnimateBackSomersaultTumble">
            <summary>
                Displays rapid tumbling animation during back somersault. Shows frames 9-18 from
                sprite row 6 with fast frame rate (0.0225) to create spinning effect during
                uncontrolled backward tumbling motion.
            </summary>
        </member>
        <member name="M:Mook.AnimateDeath">
            <summary>
                Complex death animation dispatcher handling multiple death types with velocity
                thresholds. Priority order: disemboweled (requires low velocity), assassinated
                (requires low velocity), tumbling, back somersault, front somersault, electrified
                (plasma/shock damage), then standard death. High velocity cancels special death
                animations in favor of physics-based animations.
            </summary>
        </member>
        <member name="M:Mook.AnimateDecapitated">
            <summary>
                Handles decapitation animation showing blood spurting from neck. Deactivates weapon,
                sets frame rate to 0.044455, displays frames 21-28 on row 32. Triggers death gargle
                sound after 0.3 seconds (with impossible random check) or bleed sounds, and creates
                blood particles every 4 frames.
            </summary>
        </member>
        <member name="M:Mook.AnimateDisemboweled">
            <summary>
                Animates the disembowelment death sequence with gore effects. Similar to
                assassination but with different timing and 16 total frames. Creates dramatic blood
                effects during the animation sequence.
            </summary>
            <remarks>
                Uses sprite row 10 with frames 15-30. Includes hold frame functionality. Blood
                effects trigger at frame 5 with randomized repetition for gore. Can be extended by
                setting disembowelHoldFrames for dramatic pauses.
            </remarks>
        </member>
        <member name="M:Mook.AnimateFrontSomersault">
            <summary>
                Handles front somersault death animation. Deactivates weapon and displays forward
                flying frames with rotation based on velocity vector using 0.0225 frame rate. Part
                of the physics-based death animation system.
            </summary>
        </member>
        <member name="M:Mook.AnimateFrozen">
            <summary>
                Shows frozen statue animation when affected by freeze effects. Deactivates weapon,
                sets frame rate to 0.16, and displays one of three frozen poses (determined at
                freeze start) with 0-2 frame animation from the frozen sprite sheet position. Uses
                serialized frozenSpriteSheetFrame coordinates (default 15,13) for sprite location.
            </summary>
        </member>
        <member name="M:Mook.AnimateIdle">
            <summary>
                Manages idle animation states including special effect overlays. Checks for
                electrified states before falling back to normal idle. Handles visual feedback for
                status effects during idle stance.
            </summary>
            <remarks>
                Shows electrified frames when plasma or shock effects are active. Uses sprite row 4
                frames 6-7 for electrified idle animation. Falls back to base idle animation when no
                special states apply.
            </remarks>
        </member>
        <member name="M:Mook.AnimateJumping">
            <summary>
                Handles jumping animation with special cases for decapitation, parachutes, and
                quicksand. Decapitated units use decapitation animation, while units with active
                parachutes or in quicksand show running animation if affected by status effects
                (burning/blind/scared) or idle animation otherwise. Falls back to base jumping
                animation for normal jumps.
            </summary>
        </member>
        <member name="M:Mook.AnimateRunning">
            <summary>
                Manages running animation with priority for decapitation and panic states.
                Decapitated units always show decapitation animation. Units that are burning, blind,
                or scared display panic running animation using frames 21-28 with faster frame rate
                (0.044455) and deactivated weapons. Normal running uses base animation.
            </summary>
        </member>
        <member name="M:Mook.AnimateTumbling">
            <summary>
                Animates the tumbling motion when knocked with significant force. Shows rotating
                frames to simulate uncontrolled tumbling through the air. Used during knockback when
                tumbling state is active.
            </summary>
            <remarks>
                Uses sprite row 2 with 10 tumbling frames (21-30). Cycles through frames rapidly to
                create rotation effect. Deactivates weapon visuals during tumbling animation.
            </remarks>
        </member>
        <member name="M:Mook.FadeInMysteriously">
            <summary>
                Virtual method for mysterious fade-in effects. Base implementation is empty, meant
                to be overridden for special enemy entrance effects.
            </summary>
        </member>
        <member name="M:Mook.SetBackFlyingFrame(System.Single,System.Single)">
            <summary>
                Sets the sprite frame for backwards flying animations based on velocity direction.
                Calculates the appropriate frame based on the angle of movement and adjusts sprite
                facing. Used during knockback and thrown animations to display directional flying
                sprites.
            </summary>
            <param name="xF">The horizontal force/velocity affecting the unit.</param>
            <param name="yF">The vertical force/velocity affecting the unit.</param>
            <remarks>
                Does nothing if the unit is frozen. Deactivates gun visuals during flying
                animations. Uses sprite row 9 for backwards flying frames with 13 directional frames
                (0-12). Frame selection is based on the angle calculated from velocity components.
            </remarks>
        </member>
        <member name="M:Mook.SetForwardFlyingFrame(System.Single,System.Single)">
            <summary>
                Sets the sprite frame for forward flying animations based on velocity direction.
                Similar to SetBackFlyingFrame but uses forward-facing sprites on row 12. Used for
                forward knockback and thrown animations.
            </summary>
            <param name="xF">The horizontal force/velocity affecting the unit.</param>
            <param name="yF">The vertical force/velocity affecting the unit.</param>
            <remarks>
                Deactivates gun visuals during animation. Uses sprite row 12 for forward flying
                frames. Automatically adjusts sprite facing based on horizontal velocity direction.
            </remarks>
        </member>
        <member name="M:Mook.ShowDeadElectrifiedFrame">
            <summary>
                Displays electrocution death animation frames. Increments plasma frame counter,
                deactivates weapon, sets fast frame rate (0.033). Shows airborne electrocution
                sprite (frames 15-16) when above ground or grounded electrocution sprite (frames
                17-18) when on ground, both from sprite row 4.
            </summary>
        </member>
        <member name="M:Mook.SquirtDecapitatedBlood">
            <summary>
                Creates blood particle effects from decapitated neck area. Spawns 3 red blood
                particles at neck height (Y + 12) with upward velocity bias (130 units/s) and
                inherits 20% of horizontal and 50% of vertical mook velocity for realistic blood
                physics.
            </summary>
        </member>
        <member name="M:Mook.StartFallingScream">
            <summary>
                Initiates a delayed scream when the mook starts falling. Sets a 0.03 second delay
                before the falling scream sound plays.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:Mook.animatingRevealPosition">
            <summary>
                Indicates the mook is playing a reveal animation when emerging from hiding. During
                this animation, special frame sequences play and the gun is deactivated. Animation
                completes at frame 15.
            </summary>
        </member>
        <member name="F:Mook.flames">
            <summary>
                Array of flame visual effects that can be spawned when this mook is on fire.
                Randomly selected from this array when creating burning effects at the mook's
                position.
            </summary>
        </member>
        <member name="F:Mook.frozenPose">
            <summary>
                Randomly selected pose (0-2) used when displaying frozen animation. Combined with
                frozenSpriteSheetFrame to determine the specific sprite to display while frozen.
            </summary>
        </member>
        <member name="F:Mook.frozenSpriteSheetFrame">
            <summary>
                Base sprite sheet coordinates (15, 13) for frozen animation frames. Combined with
                frozenPose to calculate the final sprite position: x + frozenPose * 3 + frame for
                horizontal offset.
            </summary>
        </member>
        <member name="F:Mook.lastHidingTime">
            <summary>
                Timestamp of when this mook was last hiding in grass or cover. Used to determine
                eligibility for forward somersaults (disabled if hidden within last 2 seconds) and
                updated during hide animations.
            </summary>
        </member>
        <member name="F:Mook.strungUpCounter">
            <summary>
                Animation counter for when the mook is strung up or hanging. Incremented by
                deltaTime and triggers periodic effects every 0.2 seconds (resets by subtracting 0.5
                when threshold reached).
            </summary>
        </member>
        <!-- Character State & Effects Methods -->
        <member name="M:Mook.CanAddToStatistics">
            <summary>
                Determines if this mook should be counted in game statistics. Always returns true
                for standard mooks, allowing kill tracking and scoring.
            </summary>
            <returns>True indicating this mook counts for statistics</returns>
        </member>
        <member name="M:Mook.CanSpeak">
            <summary>
                Checks if the mook can currently produce vocal sounds. Returns false during
                back-somersault or fallen states, otherwise allows speech and sound effects.
            </summary>
            <returns>True if the mook can speak/vocalize</returns>
        </member>
        <member name="M:Mook.Freeze(System.Single)">
            <summary>
                Applies freeze status effect with random pose selection. Initializes a random frozen
                pose (0-2), resets animation frame and counter, sets frame rate to 0.16, then
                delegates to base freeze implementation for material effects and immobilization.
            </summary>
            <param name="time">Duration in seconds to remain frozen.</param>
        </member>
        <member name="M:Mook.GetMookType">
            <summary>
                Returns the specific type of this mook for identification. Used by game systems to
                determine mook-specific behaviors. Part of the enemy type identification system.
            </summary>
            <returns>The MookType enum value for this mook variant.</returns>
        </member>
        <member name="M:Mook.GrowFromChestBurster">
            <summary>
                Virtual method for growing from a chest burster alien. Base implementation is empty,
                meant to be overridden by appropriate enemy types.
            </summary>
        </member>
        <member name="M:Mook.IsDecapitated">
            <summary>
                Checks if the mook has been decapitated. Used by animation and behavior systems to
                handle special decapitation states and prevent certain actions.
            </summary>
            <returns>True if the mook is decapitated, false otherwise.</returns>
        </member>
        <member name="M:Mook.IsHidingInGrass">
            <summary>
                Checks if the mook is currently hiding in grass terrain. Queries AI state to
                determine concealment status. Used for stealth mechanics and animation selection.
            </summary>
            <returns>True if AI mental state is Hiding, false otherwise.</returns>
        </member>
        <member name="M:Mook.StartEatingCorpse">
            <summary>
                Initiates corpse eating behavior for applicable mook types. Virtual method for
                zombie-type mooks to override with eating logic. Base implementation does nothing as
                most mooks don't eat corpses.
            </summary>
        </member>
        <member name="M:Mook.UseNormalGroundCheck">
            <summary>
                Determines whether to use standard ground detection. Returns false when panicking,
                burning, blind, scared, or exiting doors - these states use special offset ground
                checking for erratic movement.
            </summary>
            <returns>True if normal ground checking should be used</returns>
        </member>
        <!-- Character State & Effects Properties -->
        <member name="P:Mook.IsParachuteActive">
            <summary>
                Gets or sets the parachute active state. When activated, cancels tumbling and
                somersaulting states and reduces horizontal velocity by 40% to simulate air
                resistance.
            </summary>
        </member>
        <member name="P:Mook.IsStunned">
            <summary>
                Gets whether the mook is currently stunned. A mook is considered stunned when the
                stun timer is greater than zero, preventing normal actions and movement.
            </summary>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:Mook.canBeRevived">
            <summary>
                Indicates whether this mook can be revived after death. Checked during revival
                attempts to determine if resurrection mechanics should apply to this enemy type.
            </summary>
        </member>
        <member name="F:Mook.canWilhelm">
            <summary>
                Determines if this mook can perform a Wilhelm scream. Set to false when taking
                certain damage types to prevent the iconic scream sound effect from playing.
            </summary>
        </member>
        <member name="F:Mook.mookType">
            <summary>
                The type classification of this mook, used to identify different enemy variants and
                their behaviors.
            </summary>
        </member>
        <!-- Status Effects Methods -->
        <member name="M:Mook.Blind(System.Single)">
            <summary>
                Blinds the mook for specified duration, disorienting movement and combat. Updates
                blind timer to maximum of current and new duration, triggers AI blindness, sets
                firing player to 5 (invalid), and calculates stun vocal delay.
            </summary>
            <param name="time">Blind duration in seconds</param>
        </member>
        <member name="M:Mook.Blind">
            <summary>
                Applies permanent 9-second blindness effect. Triggers AI blind state, invalidates
                firing target (sets to player 5), and applies the effect only if alive.
            </summary>
        </member>
        <member name="M:Mook.Inseminate(AlienFaceHugger,System.Single,System.Single)">
            <summary>
                Handles alien face hugger insemination. Triggers panic in the direction the mook is
                facing for 5 seconds.
            </summary>
            <param name="unit">The alien face hugger performing the insemination</param>
            <param name="xForce">The horizontal force applied</param>
            <param name="yForce">The vertical force applied</param>
            <returns>The result from the base insemination handling</returns>
        </member>
        <member name="M:Mook.IsBlind">
            <summary>
                Checks if the mook is currently affected by blindness status effect.
            </summary>
            <returns>True if blind time is greater than 0</returns>
        </member>
        <member name="M:Mook.Panic(System.Boolean)">
            <summary>
                Initiates panic state if not restrained or tumbling and not frozen. Attempts to
                trigger AI panic behavior and sets minimum 0.1 second blind time to ensure visual
                feedback even if panic fails.
            </summary>
            <param name="forgetPlayer">Whether to forget current player target during panic</param>
        </member>
        <member name="M:Mook.Panic(System.Single,System.Boolean)">
            <summary>
                Initiates timed panic state if not restrained or tumbling and not frozen. Attempts
                AI panic and sets blind time to maximum of current blind time or specified duration
                for extended disorientation.
            </summary>
            <param name="time">Duration of panic/blind effect in seconds</param>
            <param name="forgetPlayer">Whether to forget current player target</param>
        </member>
        <member name="M:Mook.Panic(System.Int32,System.Single,System.Boolean)">
            <summary>
                Initiates directional timed panic if not restrained or tumbling and not frozen. Only
                triggers AI panic if alive and not already blind, with direction controlling flee
                direction. Always applies blind duration.
            </summary>
            <param name="direction">Panic flee direction (-1 left, 0 random, 1 right)</param>
            <param name="time">Duration of panic/blind effect in seconds</param>
            <param name="forgetPlayer">Whether to forget current player target</param>
        </member>
        <member name="M:Mook.PanicAI(System.Boolean)">
            <summary>
                Attempts to trigger AI panic state using current walk direction if alive, not
                tumbling/somersaulting, has AI controller, and not frozen. Returns true if panic was
                successfully initiated.
            </summary>
            <param name="forgetPlayer">Whether AI should forget player target</param>
            <returns>True if panic state was successfully triggered</returns>
        </member>
        <member name="M:Mook.PanicAI(System.Int32,System.Boolean)">
            <summary>
                Attempts to trigger AI panic in specific direction if alive, not
                tumbling/somersaulting, has AI controller, and not frozen. Returns success state of
                panic initiation.
            </summary>
            <param name="direction">Direction to panic (-1 left, 1 right)</param>
            <param name="forgetPlayer">Whether AI should forget player target</param>
            <returns>True if panic was successfully triggered</returns>
        </member>
        <member name="M:Mook.RunBurning">
            <summary>
                Updates the burning status effect timer, applying double time reduction when alive.
                Automatically calls StopBurning when the burn duration expires. Part of the fire
                damage over time system.
            </summary>
        </member>
        <member name="M:Mook.StopBeingBlind">
            <summary>
                Ends the blind status effect and restores normal AI behavior. Notifies the enemy AI
                to stop blind movement patterns, updates animation frame, stops movement, and sets
                the firing player number to own player number for targeting purposes.
            </summary>
        </member>
        <member name="M:Mook.StopBeingStunned">
            <summary>
                Ends the stunned state for the mook. Clears tear gas choking effect and notifies the
                AI to stop being blind.
            </summary>
        </member>
        <member name="M:Mook.StopBurning">
            <summary>
                Terminates the burning status effect and applies final burn damage. Notifies AI to
                stop panicking, resets to idle state, updates animation, and deals either full burn
                damage or reduced damage (1) if impaled. Uses fizzle damage type for the final
                damage application.
            </summary>
        </member>
        <member name="M:Mook.Stun(System.Single)">
            <summary>
                Stuns the mook for specified duration, preventing all actions. Stops movement
                immediately and calculates vocal delay (0.2-0.7 seconds) for stun sound effects
                based on stun duration.
            </summary>
            <param name="time">Stun duration in seconds</param>
        </member>
        <member name="M:Mook.TearGas(System.Single)">
            <summary>
                Applies tear gas effect if mook can be affected by gas. Stops movement, applies stun
                for specified time with choking flag, and blinds AI for additional 0.5 seconds
                beyond stun duration.
            </summary>
            <param name="time">Duration of tear gas effect in seconds</param>
        </member>
        <member name="M:Mook.Terrify">
            <summary>
                Applies a 1-second fear effect that makes the mook cower in place. Sets scaredTime
                which affects movement and combat behavior.
            </summary>
        </member>
        <!-- Status Effects Fields -->
        <member name="F:Mook.blindTime">
            <summary>
                The remaining time in seconds that the mook is blinded. Affects AI behavior and
                movement capabilities.
            </summary>
        </member>
        <member name="F:Mook.canBeSetOnFire">
            <summary>
                Determines if this mook can be ignited by fire damage. When true and mook takes fire
                damage while alive, applies burn damage over time up to 5x the mook's health.
            </summary>
        </member>
        <member name="F:Mook.canBeTearGased">
            <summary>
                Determines if this mook type is affected by tear gas attacks. When true, TearGas()
                method will apply stun effect, set tearGasChoking flag, and blind the mook. When
                false, mook is immune to tear gas effects.
            </summary>
        </member>
        <member name="F:Mook.fireSpreadCounter">
            <summary>
                Protected counter that accumulates time while mook is burning. Increments by
                deltaTime each frame while on fire. When exceeds fireSpreadRate, triggers
                BurnOthers() to spread fire to nearby units and resets by subtracting
                fireSpreadRate. Controls fire propagation timing.
            </summary>
        </member>
        <member name="F:Mook.fireSpreadRate">
            <summary>
                Protected rate at which burning mook spreads fire to others. Default value 0.067f
                means BurnOthers() is called approximately 15 times per second (1/0.067). Lower
                values spread fire faster, higher values slower. Works with fireSpreadCounter to
                control fire propagation timing.
            </summary>
        </member>
        <member name="F:Mook.immuneToPlasmaShock">
            <summary>
                Makes this mook immune to plasma shock stun effects. When true, plasma damage still
                applies but the mook won't be stunned or stopped by electric/plasma attacks.
            </summary>
        </member>
        <member name="F:Mook.plasmaFrame">
            <summary>
                Animation frame counter for plasma damage effects. Incremented during plasma damage
                animations and used to alternate between shock animation frames (frame % 2).
            </summary>
        </member>
        <member name="F:Mook.scaredTime">
            <summary>
                The remaining time in seconds that the mook is scared. Affects AI decision-making
                and combat behavior.
            </summary>
        </member>
        <member name="F:Mook.tearGasChoking">
            <summary>
                Protected flag indicating mook is currently choking from tear gas. Set to true by
                TearGas() when canBeTearGased is true. Affects animation states when combined with
                stunTime &gt; 0. Cleared by Die() method when mook is killed.
            </summary>
        </member>
        <member name="F:Mook.willPanicWhenOnFire">
            <summary>
                Controls whether the mook enters panic state when taking fire damage. When true,
                triggers PanicAI behavior causing the mook to run away from the damage source.
            </summary>
        </member>
        <!-- Audio System Methods -->
        <member name="M:Mook.PlayDeathGargleSound">
            <summary>
                Plays death gargling sound effect at 35% volume. Uses sound holder's death gargle
                sounds at the mook's position with standard pitch. Sets flag to prevent repeated
                playback of the death gargle sound.
            </summary>
        </member>
        <member name="M:Mook.PlayPanicSound">
            <summary>
                Plays panic vocalization unless the mook is decapitated or has a face hugger
                attached. Decapitated units and face hugger victims cannot vocalize panic sounds.
                Delegates to base implementation for actual sound playback when conditions are met.
            </summary>
        </member>
        <!-- Audio System Fields -->
        <member name="F:Mook.dischargedScreamDelay">
            <summary>
                Timer controlling when falling sound plays after being discharged from a vehicle.
                Set to 0.2f on discharge, counts down each frame, and triggers fallingSoundSource
                when reaching zero.
            </summary>
        </member>
        <member name="F:Mook.fallingSoundSource">
            <summary>
                Audio source playing falling/screaming sounds during somersaults and when discharged
                from vehicles. Pooled for reuse and cleaned up when landing or dying.
            </summary>
        </member>
        <member name="F:Mook.hasPlayedDeathGargle">
            <summary>
                Flag preventing multiple death gargle sounds from playing. Set to true after
                PlayDeathGargleSound is called to ensure the sound only plays once during death
                animation.
            </summary>
        </member>
        <member name="F:Mook.somersaultScreamDelay">
            <summary>
                Timer controlling delayed falling scream during somersaults. Set to 0.03 seconds
                when starting a somersault or falling. Counts down while airborne with sufficient
                downward velocity. When reaching zero, triggers fallingSoundSource to play a falling
                scream sound effect.
            </summary>
        </member>
        <!-- Unit Management Methods -->
        <member name="M:Mook.IsExitingDoor">
            <summary>
                Checks if the mook is currently in the process of exiting a door. Used to prevent
                interruption of spawn animations and movement. Part of the door spawn system for
                smooth enemy entrances.
            </summary>
            <returns>True if currently exiting a door, false otherwise.</returns>
        </member>
        <member name="M:Mook.ReachDoor">
            <summary>
                Notifies the mook's damage effect component that it has reached a door, typically
                for visual effects when entering/exiting doors.
            </summary>
        </member>
        <member name="M:Mook.RegisterFakeDoorExit(System.Single)">
            <summary>
                Registers a fake door exit position for the mook to walk toward. Sets exit door
                coordinates, enables door-exiting state, calculates movement direction, and updates
                position.
            </summary>
            <param name="exitDoorX">The X coordinate of the door to exit toward</param>
        </member>
        <member name="M:Mook.RegisterOriginDoor(MookDoor)">
            <summary>
                Registers the door that spawned this mook and sets up exit behavior. Handles door
                positioning offsets, random direction selection for non-sliding doors, ground
                alignment via raycast, and automatic exit movement setup.
            </summary>
            <param name="mookDoor">The door object that spawned this mook</param>
        </member>
        <member name="M:Mook.SetSpawnState(System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Configures mook spawn state with various initial conditions. Can apply fire damage
                (3 damage), tumbling state, parachute settings (delayed or immediate), alert state
                (faces random player), and physics parameters. Enables off-camera components and
                handles platform layer collision for special spawns.
            </summary>
            <param name="_xI">Initial horizontal velocity</param>
            <param name="_yI">Initial vertical velocity</param>
            <param name="tumble">Whether to start tumbling</param>
            <param name="useParachuteDelay">Whether to enable delayed parachute deployment</param>
            <param name="useParachute">Whether to immediately open parachute</param>
            <param name="onFire">Whether to spawn on fire (takes damage)</param>
            <param name="isAlert">Whether to spawn in alert state tracking a player</param>
        </member>
        <member name="M:Mook.SetSpawnStateJumping(System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Sets spawn state for jumping/ejected mooks with initial velocity and effects. Forces
                jump from vehicles if jumping, applies brief invulnerability (0.05s), can set on
                fire (3 damage), tumbling, alert state (tracks random player), and plays panic or
                laughter sounds. Always disables ground spawning and enables off-camera rendering.
            </summary>
            <param name="_xI">Initial horizontal velocity</param>
            <param name="_yI">Initial vertical velocity</param>
            <param name="jumping">Whether mook is jumping from vehicle</param>
            <param name="tumble">Whether to start tumbling</param>
            <param name="onFire">Whether to spawn burning</param>
            <param name="isAlert">Whether to spawn alerted to players</param>
            <param name="panicSound">Whether to play panic vocalization</param>
            <param name="laughSound">Whether to play laughter sound</param>
        </member>
        <!-- Unit Management Fields -->
        <member name="F:Mook.exitDoorDirection">
            <summary>
                Direction the mook should move when exiting a door (-1 for left, 1 for right).
                Calculated as the sign of (exitDoorX - mook's X position) when door exit is
                initiated.
            </summary>
        </member>
        <member name="F:Mook.exitDoorX">
            <summary>
                X-coordinate of the door this mook is exiting through. The mook will move toward
                this position when exitingDoor is true, and stops exiting once reaching it.
            </summary>
        </member>
        <member name="F:Mook.exitingDoor">
            <summary>
                Indicates this mook is currently exiting through a door. While true, overrides
                normal movement to guide the mook toward the exit position, affects rendering layer,
                and disables certain behaviors.
            </summary>
        </member>
        <member name="F:Mook.originDoor">
            <summary>
                Reference to the MookDoor that spawned this mook. Used to notify the door when the
                mook dies or is destroyed, allowing proper spawn management and cleanup.
            </summary>
        </member>
        <member name="F:Mook.spawnTime">
            <summary>
                Timestamp when this mook was spawned, set to Time.time during initialization. Can be
                used to track mook age or implement time-based spawn behaviors.
            </summary>
        </member>
        <member name="F:Mook.startOnGround">
            <summary>
                Indicates whether this mook should start on the ground when spawned. Default is
                true, but set to false for airborne spawns or special entry animations. Affects
                initial positioning logic.
            </summary>
        </member>
        <member name="F:Mook.summonToDirection">
            <summary>
                Direction indicator used by spawning systems (like WarlockPortal) to specify which
                direction a summoned mook should face or move when spawned.
            </summary>
        </member>
        <!-- AI Awareness Methods -->
        <member name="M:Mook.Alert(System.Single,System.Single)">
            <summary>
                Alerts this mook to a sound at the specified position if it has an AI controller, is
                alive, and not incapacitated. Passes the alert to the enemy AI's HearSound method
                for investigation behavior.
            </summary>
            <param name="alertX">X coordinate of the sound source</param>
            <param name="alertY">Y coordinate of the sound source</param>
        </member>
        <member name="M:Mook.Attract(System.Single,System.Single)">
            <summary>
                Attracts this mook to a specific position if it has AI, is alive, and not
                incapacitated. Used for lures and distractions to draw enemies to locations.
            </summary>
            <param name="xTarget">X coordinate of attraction point</param>
            <param name="yTarget">Y coordinate of attraction point</param>
        </member>
        <member name="M:Mook.ForgetPlayer(System.Int32)">
            <summary>
                Attempts to make the mook forget about a specific player, typically called when that
                player dies. Delegates to the enemy AI system if available to remove the player from
                tracking and targeting lists.
            </summary>
            <param name="deadPlayerNum">The player number to forget.</param>
        </member>
        <member name="M:Mook.FullyAlert(System.Single,System.Single,System.Int32)">
            <summary>
                Fully alerts this mook to a confirmed enemy presence if it has AI, is alive, and not
                incapacitated. Sets the AI to maximum alert state with specific player tracking.
            </summary>
            <param name="x">X coordinate of the enemy</param>
            <param name="y">Y coordinate of the enemy</param>
            <param name="playerNum">Player number to track (0-3)</param>
        </member>
        <member name="M:Mook.HearSound(System.Single,System.Single)">
            <summary>
                Makes this mook hear and investigate a sound if it has AI, is alive, and not
                incapacitated. For unrevealed enemies, automatically faces toward the sound source.
                Calls the AI's HearSound method for movement behavior.
            </summary>
            <param name="alertX">X coordinate of the sound</param>
            <param name="alertY">Y coordinate of the sound</param>
        </member>
        <member name="M:Mook.PerformHearSoundAnimation">
            <summary>
                Plays an animation when the mook hears a sound while hiding. Resets the frame
                counter and sets the animatingRevealPosition flag to trigger the reveal animation
                sequence.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:MookDog.Start">
            <summary>
                Initializes the MookDog when spawned, handling mega dog transformation if isMegaDog
                flag is set. Ensures the transformation process starts correctly by resetting flags
                and calling TransformIntoMegaDog.
            </summary>
        </member>
        <member name="M:MookDog.Update">
            <summary>
                Updates the MookDog's state each frame, managing the damagedDisableAttackTime
                counter that prevents attacks after taking melee damage. Decrements the timer and
                calls base Update for standard unit behavior.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:MookDog.CreateGibEffects(DamageType,System.Single,System.Single)">
            <summary>
                Creates death gibbing effects, using special megaDogGibs if the dog is in mega form.
                Ensures appropriate visual effects match the current dog variant when destroyed.
            </summary>
            <param name="damageType">Type of damage that caused the gibbing</param>
            <param name="xI">Horizontal force for gib physics</param>
            <param name="yI">Vertical force for gib physics</param>
        </member>
        <member name="M:MookDog.Damage(System.Int32,DamageType,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour,System.Single,System.Single)">
            <summary>
                Processes damage taken by the MookDog, setting a 0.3 second attack disable timer
                when hit by melee, knife, knock, or blade damage types. This prevents the dog from
                immediately counter-attacking after being struck in close combat.
            </summary>
            <param name="damage">Amount of damage to inflict</param>
            <param name="damageType">Type of damage being applied</param>
            <param name="xI">Horizontal knockback force</param>
            <param name="yI">Vertical knockback force</param>
            <param name="direction">Direction of the damage source</param>
            <param name="damageSender">The MonoBehaviour that caused the damage</param>
            <param name="hitX">X coordinate of the hit location</param>
            <param name="hitY">Y coordinate of the hit location</param>
        </member>
        <member name="M:MookDog.FallDamage(System.Single)">
            <summary>
                Applies fall damage to the MookDog with damage reduction in hard mode. This override
                implements a special damage mitigation system where every other fall damage instance
                is ignored in hard mode, effectively halving fall damage frequency. Uses a fallCount
                counter to track the number of fall damage events and only applies damage on
                even-numbered occurrences when playing in hard mode.
            </summary>
            <param name="yI">The vertical impact velocity used to calculate fall damage severity</param>
        </member>
        <member name="M:MookDog.Jump(System.Boolean)">
            <summary>
                Executes the jump action for the MookDog. This override calls the base jump
                implementation without any modifications. The method maintains the standard jumping
                behavior from the parent Mook class while allowing for potential future
                MookDog-specific jump customizations.
            </summary>
            <param name="wallJump">True if performing a wall jump, false for a regular ground jump</param>
        </member>
        <member name="M:MookDog.Knock(DamageType,System.Single,System.Single,System.Boolean)">
            <summary>
                Applies knockback to the MookDog by calling the base Knock implementation. Maintains
                standard knockback behavior without any special modifications.
            </summary>
            <param name="damageType">Type of damage causing the knockback</param>
            <param name="xI">Horizontal knockback force</param>
            <param name="yI">Vertical knockback force</param>
            <param name="forceTumble">Whether to force the unit into a tumbling state</param>
        </member>
        <member name="M:MookDog.RunFiring">
            <summary>
                Executes the MookDog's melee bite attack when firing. Temporarily sets invulnerable
                during the attack, hits living units within 6 units horizontally at Y+4 offset for 3
                melee damage, and plays attack sound on successful hit.
            </summary>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:MookDog.damagedDisableAttackTime">
            <summary>
                Time remaining during which the MookDog cannot perform attack actions after being
                damaged by melee attacks. Set to 0.3 seconds when hit by melee, knife, knock, or
                blade damage types. This timer prevents the dog from immediately counter-attacking
                when struck by close-range weapons, creating a brief vulnerability window.
                Decrements each frame and is checked during input processing to disable fire
                actions.
            </summary>
        </member>
        <member name="F:MookDog.fallCount">
            <summary>
                Counter tracking the number of times this MookDog has taken fall damage. Used in
                conjunction with hard mode difficulty to reduce fall damage frequency. When in hard
                mode, only even-numbered fall counts (fallCount % 2 == 0) result in actual damage
                being applied, effectively halving the fall damage rate.
            </summary>
        </member>
        <!-- Special Abilities Methods -->
        <member name="M:MookDog.PressSpecial">
            <summary>
                Handles special ability button press, stopping any howling animation before calling
                base special press behavior. Ensures howling doesn't interfere with other special
                actions.
            </summary>
        </member>
        <member name="M:MookDog.StartEatingCorpse">
            <summary>
                Begins the corpse eating behavior by resetting the corpseEatingCount to 0. Called
                when the dog starts consuming a fallen unit to potentially transform into mega form.
            </summary>
        </member>
        <member name="M:MookDog.TransformIntoMegaDog">
            <summary>
                Transforms the regular MookDog into a powerful MegaDog variant. Increases sprite
                size to 48x48, health to 15, movement speed by 30%, jump force by 15%, and adjusts
                collision bounds. Triggers a howling animation and disturbs nearby wildlife within
                200 units.
            </summary>
        </member>
        <member name="M:MookDog.UseSpecial">
            <summary>
                Empty implementation that prevents any special ability usage. MookDogs don't have
                active special abilities beyond their passive corpse-eating transformation.
            </summary>
        </member>
        <!-- Special Abilities Fields -->
        <member name="F:MookDog.corpseEatingCount">
            <summary>
                Counter tracking the number of bite actions performed while eating corpses.
                Increments with each successful bite animation frame during the corpse-eating
                special ability. When this count reaches corpseEatingSatisfactionCount (default 16),
                the MookDog transforms into a MegaDog. Resets to 0 when starting to eat a new
                corpse.
            </summary>
        </member>
        <member name="F:MookDog.corpseEatingSatisfactionCount">
            <summary>
                The number of successful corpse bites required to transform into a MegaDog. Defaults
                to 16 bites. When corpseEatingCount reaches this value during the eating animation,
                the transformation is triggered. This value can be adjusted to make transformation
                easier or harder to achieve.
            </summary>
        </member>
        <member name="F:MookDog.isHowling">
            <summary>
                Flag indicating whether the MookDog is currently performing its howling animation.
                Set to true when transforming into a MegaDog to play the transformation howl
                sequence. During howling, the dog plays a special animation sequence and power-up
                sound. The howl completes after frame 14 of the animation sequence.
            </summary>
        </member>
        <member name="F:MookDog.isMegaDog">
            <summary>
                Flag indicating whether this MookDog has transformed into its more powerful MegaDog
                variant. When true, the dog has increased health (15), larger size (48x48 sprites),
                faster movement speed (1.3x multiplier), and uses different death effects.
                Transformation occurs after eating enough corpses or can be set during
                initialization.
            </summary>
        </member>
        <member name="F:MookDog.megaDogGibs">
            <summary>
                The gib holder containing death particle effects specific to the MegaDog variant.
                When a MegaDog is destroyed, this gib set is used instead of the standard dog gibs
                to create appropriately scaled death effects. The system swaps to these gibs in
                CreateGibEffects when isMegaDog is true.
            </summary>
        </member>
        <member name="F:MookDog.upgradedMaterial">
            <summary>
                The material applied to the MookDog's renderer when it transforms into a MegaDog.
                This material replaces the standard appearance to visually indicate the upgraded
                state. Applied during the TransformIntoMegaDog process along with other visual
                changes like increased sprite size.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:MookDog.AnimateActualIdleDuckingFrames">
            <summary>
                Animates the MookDog's idle ducking frames with special handling for hiding and
                reveal animations. When animatingRevealPosition is true, plays a 15-frame reveal
                sequence with variable frame rates. When the AI is in hiding state, plays a 12-frame
                hiding animation loop. Otherwise delegates to the base implementation for standard
                idle ducking animations. The reveal animation includes pauses at frames 4, 6, and 9
                for dramatic effect.
            </summary>
        </member>
        <member name="M:MookDog.AnimateActualIdleFrames">
            <summary>
                Animates idle stance, with special electrified animation frames when shocked or
                under plasma effects. Uses frames 6-7 on row 5 for electrified state, otherwise
                delegates to base idle animation.
            </summary>
        </member>
        <member name="M:MookDog.AnimateActualNewRunningFrames">
            <summary>
                Animates the MegaDog's running frames using an 8-frame cycle on sprite row 4. Used
                when the dog is in mega form and actively running.
            </summary>
        </member>
        <member name="M:MookDog.AnimateActualUnawareRunningFrames">
            <summary>
                Animates the unaware running state using an 8-frame cycle on sprite row 2. Used for
                calm movement when the dog hasn't detected enemies.
            </summary>
        </member>
        <member name="M:MookDog.AnimateImpaled">
            <summary>
                Sets the sprite position for the impaled death animation based on whether this is a
                regular MookDog or MegaDog. MegaDogs use sprite position (960, 48) while regular
                dogs use position (638, 32). This provides size-appropriate impalement sprites for
                both variants.
            </summary>
        </member>
        <member name="M:MookDog.AnimateRunning">
            <summary>
                Manages running animations based on the dog's current state. Adjusts speed and frame
                rate for: burning/blind/scared (70% speed), alerted (full speed with aware
                animations), or unaware (slower casual movement). Handles both regular and mega dog
                sprite variations.
            </summary>
        </member>
        <member name="M:MookDog.AnimateSpecial">
            <summary>
                Animates special actions including howling (mega transformation) and corpse eating.
                Howling uses a 14-frame intro then loops 2 frames. Corpse eating alternates between
                2 frames, dealing bite damage and creating blood effects every other frame.
                Transforms to mega dog after eating enough (determined by
                corpseEatingSatisfactionCount).
            </summary>
        </member>
        <member name="M:MookDog.ChangeFrame">
            <summary>
                Updates the current animation frame, switching to death animation if health drops to
                0 or below. Otherwise delegates to base frame change logic for standard animations.
            </summary>
        </member>
        <!-- Character State & Effects Methods -->
        <member name="M:MookDog.Dance(System.Single)">
            <summary>
                Initiates celebration dance animation, canceling any ongoing howling or corpse
                eating. Clears AI action queue and resets special ability states before calling base
                dance behavior.
            </summary>
            <param name="time">Duration of the dance animation</param>
        </member>
        <!-- Input & Control Methods -->
        <member name="M:MookDog.CalculateZombieInput">
            <summary>
                Calculates AI-controlled zombie movement, making the dog jump forward when
                attempting to attack. Sets movement direction based on facing and maintains forward
                momentum during attack sequences with a 0.5 second delay.
            </summary>
        </member>
        <member name="M:MookDog.CheckInput">
            <summary>
                Processes input controls, disabling fire/attack input if damagedDisableAttackTime is
                active. Prevents the dog from attacking immediately after taking melee damage.
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:MookDog.CanPassThroughBarriers">
            <summary>
                Determines if the dog can pass through barrier blocks. Returns true when dead,
                knocked back with sufficient force (&gt;1 horizontal blast), blinded, or scared,
                allowing passage through normally solid barriers.
            </summary>
            <returns>True if the dog can pass through barriers in its current state</returns>
        </member>
        <!-- Audio System Methods -->
        <member name="M:MookDog.PlayGreetingSound">
            <summary>
                Plays greeting/alert sound and bothers nearby mooks within 80 horizontal and 32
                vertical units. Alerts 5 nearby enemies to the player's presence when the dog spots
                them.
            </summary>
        </member>
        <member name="M:MookDog.PlayJumpSound">
            <summary>
                Plays the special2 sound effect when jumping, with randomized pitch between 0.94 and
                1.06 for variation. Creates more natural jump sound variety.
            </summary>
        </member>
        <!-- Unit Management Methods -->
        <member name="M:MookDog.RegisterUnit">
            <summary>
                Registers this MookDog with the game's unit tracking system. Uses simplified
                registration without networking features for reliable modding compatibility.
            </summary>
        </member>
        <!-- AI Awareness Methods -->
        <member name="M:MookDog.FetchObject(UnityEngine.Transform)">
            <summary>
                Directs the dog's AI to fetch or pursue a specific object. Delegates the fetch
                behavior to the enemyAI component if available.
            </summary>
            <param name="fetchObject">The transform of the object to fetch</param>
        </member>
        <member name="M:MookDog.GetEnemyMovement">
            <summary>
                Calculates AI-driven movement patterns, disabling attack behavior if
                damagedDisableAttackTime is active. Ensures the dog retreats briefly after taking
                melee damage before resuming pursuit.
            </summary>
        </member>
        <!-- AI Awareness Fields -->
        <member name="F:MookDog.awareMegaRunSpeed">
            <summary>
                Movement speed for MegaDogs when alerted to player presence. Set to 135 units per
                second. Applied when the enemy AI is alerted and useNewFrames is true (indicating
                MegaDog status). Slightly faster than regular aware speed to reflect the MegaDog's
                enhanced capabilities.
            </summary>
        </member>
        <member name="F:MookDog.awareRunSpeed">
            <summary>
                Movement speed for regular MookDogs when alerted to player presence. Set to 130
                units per second. Used when the enemy AI is in an alerted state and useNewFrames is
                false. This increased speed helps the dog close distance on detected players more
                effectively than its unaware patrol speed.
            </summary>
        </member>
        <member name="F:MookDog.unawareMegaRunSpeed">
            <summary>
                Default patrol movement speed for MegaDogs when not alerted. Set to 125 units per
                second. Applied during patrol when useNewFrames is true but the AI isn't alerted.
                Even while unaware, MegaDogs move slightly faster than regular dogs due to their
                enhanced physical capabilities.
            </summary>
        </member>
        <member name="F:MookDog.unawareRunSpeed">
            <summary>
                Default patrol movement speed for regular MookDogs when not alerted. Set to 120
                units per second. Used during normal patrol behavior when the AI hasn't detected
                players and useNewFrames is false. This slower speed represents casual movement
                while searching for threats.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:NetworkedUnit.Awake">
            <summary>
                Initializes the unit by setting maxHealth to the current health value. Called once
                when the unit is first instantiated.
            </summary>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:NetworkedUnit.Direction">
            <summary>
                Gets the facing direction of the unit as an integer. Returns -1 if facing left
                (negative X scale), 1 if facing right (positive X scale).
            </summary>
        </member>
        <member name="P:NetworkedUnit.DirectionSynced">
            <summary>
                Gets or sets the synchronized direction as a byte value for network transmission.
                Uses byte value 2 for left direction (-1), 1 for right direction (1). When set,
                updates the unit's transform scale and internal syncedDirection field. This property
                does not use interpolation during synchronization.
            </summary>
        </member>
        <member name="P:NetworkedUnit.DirectionVec">
            <summary>
                Gets the full local scale vector of the unit's transform. Can be used to get both
                direction and scale information.
            </summary>
        </member>
        <member name="P:NetworkedUnit.XY">
            <summary>
                Gets or sets the 2D position of the unit as a Vector2. This property is synchronized
                across the network. Getting returns the current X and Y position from BroforceObject
                base class. Setting updates the position via SetXY method.
            </summary>
        </member>
        <!-- Character State & Effects Properties -->
        <member name="P:NetworkedUnit.IsEnemy">
            <summary>
                Gets whether this unit is an enemy. Calculated based on whether the unit is a hero
                or RescueBro. If not a hero and not a RescueBro, the unit is considered an enemy.
                This value is cached after first access for performance.
            </summary>
        </member>
        <member name="P:NetworkedUnit.IsHero">
            <summary>
                Gets whether this unit is a hero (player character). Based on the internal isHero
                field set by derived classes.
            </summary>
        </member>
        <member name="P:NetworkedUnit.IsMook">
            <summary>
                Gets whether this unit is specifically a Mook enemy type. Returns true if the unit's
                type inherits from Mook class.
            </summary>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:NetworkedUnit.isHero">
            <summary>
                Protected field that determines if this unit is a hero (player character). Set to
                true by hero classes during initialization.
            </summary>
        </member>
        <!-- Unit Management Properties -->
        <member name="P:NetworkedUnit.playerNum">
            <summary>
                Gets or sets the player number that owns this unit. Default value is -1, indicating
                no player ownership. Used to associate units with specific players in multiplayer.
            </summary>
        </member>
        <!-- Unit Management Fields -->
        <member name="F:NetworkedUnit._playerNum">
            <summary>
                Backing field for the playerNum property. Stores the player number that owns this
                unit. Default value is -1, indicating no player ownership.
            </summary>
        </member>
        <!-- AI Awareness Properties -->
        <member name="P:NetworkedUnit.IsLocalMook">
            <summary>
                Gets whether this unit is a mook (enemy) that should be controlled locally. Returns
                true if the unit has an enemyAI or enemyAIOnChildOrParent component and is owned by
                the local player. Used to determine which client should control the AI behavior in
                multiplayer.
            </summary>
        </member>
        <!-- AI Awareness Fields -->
        <member name="F:NetworkedUnit.enemyAI">
            <summary>
                Reference to the PolymorphicAI component that controls this unit's AI behavior. Used
                for enemy units that have their AI component on the same GameObject.
            </summary>
        </member>
        <member name="F:NetworkedUnit.enemyAIOnChildOrParent">
            <summary>
                Reference to a PolymorphicAI component that might be on a child or parent
                GameObject. Used for units where the AI component is not directly on this
                GameObject.
            </summary>
        </member>
        <!-- Networking & RPC Methods -->
        <member name="M:NetworkedUnit.ReadyTobeSynced">
            <summary>
                Determines if the unit is ready to be synchronized across the network. Returns true
                only if both X and Y position values are non-negative. This prevents synchronization
                of units that haven't been properly positioned yet.
            </summary>
            <returns>True if the unit's position is valid (both X and Y &gt;= 0), false otherwise</returns>
        </member>
        <!-- Networking & RPC Fields -->
        <member name="F:NetworkedUnit.syncedDirection">
            <summary>
                Stores the synchronized direction value (-1 for left, 1 for right). Updated when
                DirectionSynced property is set from network synchronization.
            </summary>
        </member>
        <!-- Player Management Methods -->
        <member name="M:Player.AddPerksToHUD">
            <summary>
                Adds the player's current perks to their HUD display. Retrieves perks from
                PlayerInventory and displays them on the HUD interface for the player to see their
                active bonuses.
            </summary>
        </member>
        <member name="M:Player.Awake">
            <summary>
                Initializes the player instance with network instantiation data. Sets up player
                number, network PID, controller ID, and creates the HUD if needed. Also initializes
                lives to 0 if the player dropped out this round (except for solo host who gets 1
                life).
            </summary>
        </member>
        <member name="M:Player.DisableBotBrain">
            <summary>
                Disables AI control for this player by setting the UsingBotBrain flag to false. The
                player will return to normal input control after this is called. Note that this
                doesn't remove the BotBrain component, only disables its use.
            </summary>
        </member>
        <member name="M:Player.EnableBotBrain">
            <summary>
                Enables AI control for this player by adding and configuring a BotBrain component.
                Creates a new BotBrain component if one doesn't exist, assigns the current character
                to it, and sets the UsingBotBrain flag to true. This allows the player to be
                controlled by AI instead of player input.
            </summary>
        </member>
        <member name="M:Player.OnDestroy">
            <summary>
                Cleanup method called when the player object is destroyed. Properly disposes of the
                player's HUD by unparenting it and destroying the game object, then destroys any
                active character unit. This ensures proper cleanup of player-owned resources.
            </summary>
        </member>
        <member name="M:Player.ResetPerkValuesOnLevelStart">
            <summary>
                Resets per-level perk values at the start of each level. Calls into PlayerInventory
                to reset any perk effects that don't persist between levels.
            </summary>
        </member>
        <member name="M:Player.SetBotbrainLeader(System.Int32)">
            <summary>
                Sets which player the bot should follow when using AI control. The bot brain will
                attempt to follow and support the character of the specified player number. This is
                used to coordinate AI teammates with human players.
            </summary>
            <param name="playerNum">The player number that this bot should follow. Use -1 for no specific leader.</param>
        </member>
        <member name="M:Player.SetupHud">
            <summary>
                Creates and initializes the player's HUD interface. Instantiates the PlayerHUD
                prefab, sets it up with current lives and player number, then hides it initially
                until needed.
            </summary>
        </member>
        <member name="M:Player.Start">
            <summary>
                Performs initial player setup after instantiation. Verifies network connection, sets
                initial lives based on game mode, requests player data from server if not host, and
                sets up perks. Handles special cases for hardcore mode, deathmatch, and procedural
                generation modes.
            </summary>
        </member>
        <!-- Player Management Properties -->
        <member name="P:Player.BotBrainLeader">
            <summary>
                Gets or sets the player number that this bot should follow when using AI control.
                The bot brain will attempt to follow the character of the specified player number.
                -1 indicates no specific leader.
            </summary>
        </member>
        <member name="P:Player.UsingBotBrain">
            <summary>
                Gets or sets whether this player is being controlled by AI. When true, the BotBrain
                component controls the player's character instead of player input. Used for
                AI-controlled teammates or testing.
            </summary>
        </member>
        <member name="P:Player.controllerNum">
            <summary>
                Gets the controller ID assigned to this player. Returns the controller ID from
                HeroController.playerControllerIDs based on this player's playerNum. Returns -1 if
                playerNum is invalid (less than 0).
            </summary>
        </member>
        <!-- Player Management Fields -->
        <member name="F:Player.playerNum">
            <summary>
                The player's unique identifier number in the game session. Ranges from 0-3 for the
                four possible players. Used as an index into various player arrays like
                HeroController.players, PlayerInventory arrays, and for network identification.
                Initialized to -1 until properly set during Awake.
            </summary>
        </member>
        <!-- Lives & Respawn System Methods -->
        <member name="M:Player.AddLife">
            <summary>
                Adds one life to the player's life count. Only executes for the local player,
                incrementing Lives and triggering a free life animation on the HUD.
            </summary>
        </member>
        <member name="M:Player.RemoveLife">
            <summary>
                Removes a life from the player based on the current game mode rules. In hardcore
                mode, moves the hero from available to dead list and may force level restart. In
                ProcGen mode, decrements global lives and may trigger level failure. In campaign
                mode, also clears any active flex powers. Updates lives differently for each game
                mode.
            </summary>
        </member>
        <member name="M:Player.SetLivesRPC(System.Int32)">
            <summary>
                RPC method that sets the player's lives count and updates the HUD. Called by the
                Lives property setter to synchronize life count across all clients in multiplayer.
            </summary>
            <param name="_lives">The new lives count to set.</param>
        </member>
        <!-- Lives & Respawn System Properties -->
        <member name="P:Player.Lives">
            <summary>
                Gets or sets the player's remaining lives count. Handles different game modes:
                returns/sets hardcore lives for hardcore mode, procedural generation lives for
                procgen mode, or standard lives otherwise. When setting as the local player, also
                syncs the value via RPC to other players.
            </summary>
        </member>
        <!-- Lives & Respawn System Fields -->
        <member name="F:Player.lives">
            <summary>
                Private backing field for the Lives property storing the player's current life
                count. Initialized to 1 and modified through the Lives property setter which handles
                RPC synchronization. In standard gameplay this tracks the player's remaining lives,
                but the Lives property getter may return different values based on game mode
                (hardcore or procedural generation).
            </summary>
        </member>
        <!-- Input & Control Methods -->
        <member name="M:Player.AddPlayerTarget(UnityEngine.Transform)">
            <summary>
                Sets a temporary target transform for this player to focus on. This target overrides
                normal camera behavior and can be used to direct player attention to specific
                objects or locations in the game world, such as during scripted sequences or
                tutorials.
            </summary>
            <param name="target">The transform to set as the temporary target.</param>
        </member>
        <member name="M:Player.GetInput(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Retrieves input state for all control actions from the appropriate source. If using
                bot brain, gets AI-generated input. If chat or pause menu is active (based on
                controller number), returns all false inputs. Otherwise reads input from the
                physical controller via InputReader. This centralizes all input handling for the
                player.
            </summary>
            <param name="up">Output parameter set to true if up direction is pressed.</param>
            <param name="down">Output parameter set to true if down direction is pressed.</param>
            <param name="left">Output parameter set to true if left direction is pressed.</param>
            <param name="right">Output parameter set to true if right direction is pressed.</param>
            <param name="fire">Output parameter set to true if fire button is pressed.</param>
            <param name="buttonJump">Output parameter set to true if jump button is pressed.</param>
            <param name="special">Output parameter set to true if special/grenade button is pressed.</param>
            <param name="highFive">Output parameter set to true if high five button is pressed.</param>
            <param name="buttonGesture">Output parameter set to true if gesture button is pressed.</param>
            <param name="sprint">Output parameter set to true if sprint button is pressed.</param>
        </member>
        <member name="M:Player.HasTemporaryTarget">
            <summary>
                Checks whether this player currently has a temporary target set. Returns true if a
                temporary target transform is assigned, false otherwise. Used to determine if the
                camera should follow a special target instead of the player character.
            </summary>
            <returns>True if the player has a temporary target set, false otherwise.</returns>
        </member>
        <member name="M:Player.IsRescuingBro">
            <summary>
                Checks if the player is currently rescuing a specific bro. Returns true if
                rescuingThisBro field is not null, indicating an active rescue operation in
                progress.
            </summary>
            <returns>True if actively rescuing a bro, false otherwise.</returns>
        </member>
        <member name="M:Player.RemovePlayerTarget">
            <summary>
                Clears the temporary target transform for this player. Returns camera focus to
                normal behavior, typically following the player's character. This is called when a
                scripted sequence ends or the target object is no longer relevant.
            </summary>
        </member>
        <member name="M:Player.SetRumble(System.Single)">
            <summary>
                Sets the controller rumble intensity for force feedback. Updates the rumbleIntensity
                to the maximum of the current value and the provided amount, ensuring the strongest
                rumble effect is preserved. The rumble will fade out over time based on the update
                loop logic.
            </summary>
            <param name="amount">The rumble intensity to apply (0 to 1 range).</param>
        </member>
        <!-- Input & Control Properties -->
        <member name="P:Player.RescueInProgress">
            <summary>
                Gets or sets whether this player is currently in the process of rescuing a bro. When
                set to true, starts a 15-second timeout. Used to track rescue operation state and
                prevent multiple simultaneous rescues.
            </summary>
        </member>
        <member name="P:Player.awaitingHeroTypeFromServer">
            <summary>
                Gets or sets whether the player is waiting for the server to assign a hero type.
                When set to true, starts a 15-second timeout. Used during respawn/rescue operations
                to track server response state.
            </summary>
        </member>
        <!-- Input & Control Fields -->
        <member name="F:Player._awaitingHeroTypeFromServer">
            <summary>
                Private flag indicating the player is waiting for the server to assign a hero type
                during respawn. Set via the awaitingHeroTypeFromServer property which also manages
                the server timeout. Prevents multiple hero requests and tracks respawn state.
            </summary>
        </member>
        <member name="F:Player.changingBroFromTrigger">
            <summary>
                Flag indicating the player is swapping bros via a trigger (like swap bro crates).
                Checked in WorkOutSpawnScenario to return TriggerSwapBro spawn type, then
                immediately cleared. Used to maintain position when swapping heroes through game
                triggers rather than death.
            </summary>
        </member>
        <member name="F:Player.rescueInProgress">
            <summary>
                Private flag indicating whether this player is currently rescuing a bro. Set via the
                RescueInProgress property which also manages the server timeout. Prevents multiple
                simultaneous rescue attempts and tracks rescue state for spawn positioning.
            </summary>
        </member>
        <member name="F:Player.rescuingThisBro">
            <summary>
                Reference to the RescueBro object currently being rescued by this player. Set when
                the player initiates a rescue operation via HeroController.RescueBro or
                HeroController.SpawnOnPlayer. Used to determine spawn position (RespawnAtRescueBro)
                and properly destroy the rescue cage when the hero spawns. Null when no rescue is in
                progress.
            </summary>
        </member>
        <member name="F:Player.rumbleIntensity">
            <summary>
                Current controller vibration intensity (0 to 1 range) for force feedback effects.
                Set via SetRumble which takes the maximum of current and new values. Automatically
                decreases by 2 per second in Update loop until reaching 0. Passed to
                InputReader.SetRumble each frame to apply controller vibration if the player has
                rumble enabled in options.
            </summary>
        </member>
        <member name="F:Player.serverResponseTimeout">
            <summary>
                Timeout counter for server operations in seconds. Set to 15 seconds when starting a
                rescue operation or requesting hero type from server. Counts down each frame and
                clears rescue/hero request flags if it reaches 0, preventing indefinite waiting for
                server responses.
            </summary>
        </member>
        <!-- UI & HUD Management Methods -->
        <member name="M:Player.ActivateHUD">
            <summary>
                Activates and shows the player's HUD if standard HUDs are enabled in the current
                game mode. Creates the HUD if needed and makes it visible on screen.
            </summary>
        </member>
        <member name="M:Player.DisableHud">
            <summary>
                Hides and deactivates the player's HUD elements. Calls Hide on the HUD, deactivates
                the HUD game object, and also deactivates the lives text display if it exists.
            </summary>
        </member>
        <member name="M:Player.EnableHud">
            <summary>
                Shows and activates the player's HUD elements if standard HUDs are enabled. Checks
                GameModeController.ShowStandardHUDS before making the HUD visible, activating the
                game object and lives text display.
            </summary>
        </member>
        <member name="M:Player.FlashSpecialAmmo">
            <summary>
                Triggers a flash effect on the special ammo/grenade icons in the HUD. Creates the
                HUD if it doesn't exist, then calls FlashSpecialIcons to provide visual feedback for
                special ammo changes.
            </summary>
        </member>
        <member name="M:Player.SetAvatarDead(System.Boolean)">
            <summary>
                Updates the HUD to show the player's avatar as dead. Calls the HUD's SetAvatarDead
                method to update the visual representation of the player's death state.
            </summary>
            <param name="primaryAvatar">Whether this is the primary avatar that died.</param>
        </member>
        <member name="M:Player.SetAvatarSpecialFrame(System.Single)">
            <summary>
                Sets a special animation frame on the player's HUD avatar for a specified duration.
                Used for special visual effects or states on the HUD avatar display.
            </summary>
            <param name="time">The duration to display the special frame.</param>
        </member>
        <member name="M:Player.SetUpDeathMatchHUD(TestVanDammeAnim)">
            <summary>
                Creates and configures a death match HUD that follows the hero character. Hides the
                standard HUD, instantiates the death match HUD prefab, sets it up with player lives
                and number, and parents it to the hero transform at zero offset.
            </summary>
            <param name="newUnit">The hero unit to attach the death match HUD to.</param>
        </member>
        <member name="M:Player.ShowMinusPlum">
            <summary>
                Displays a negative score indicator (plum) on the player's deathmatch HUD. Shows a
                visual feedback element indicating point loss, typically when the player dies or
                loses points in deathmatch game modes.
            </summary>
        </member>
        <member name="M:Player.ShowPlusPlum">
            <summary>
                Displays a positive score indicator (plum) on the player's deathmatch HUD. Shows a
                visual feedback element indicating point gain, typically when the player scores a
                kill or earns points in deathmatch game modes.
            </summary>
        </member>
        <member name="M:Player.StopAvatarSpecialFrame">
            <summary>
                Stops any active special animation frame on the player's HUD avatar. Returns the
                avatar display to its normal state by calling StopUsingSpecialFrame on the HUD.
            </summary>
        </member>
        <member name="M:Player.UnlockProcGenCamera">
            <summary>
                Unlocks the procedural generation camera after a delay. Called via Invoke after
                spawning a hero in ProcGen mode when the player died inside a room. Note:
                ProcGenGameMode is an unfinished feature.
            </summary>
        </member>
        <!-- UI & HUD Management Fields -->
        <member name="F:Player.characterUI">
            <summary>
                Reference to the CharacterUI component on this player game object. Retrieved during
                Awake and used for character-specific UI functionality. The specific usage of this
                component is not shown in the available code.
            </summary>
        </member>
        <member name="F:Player.deathMatchHUD">
            <summary>
                The instantiated HUDHeadGear instance for deathmatch modes. Follows the player's
                character transform and displays game mode specific information. Created from
                deathMatchHUDPrefab when playing deathmatch and parented to the hero transform.
            </summary>
        </member>
        <member name="F:Player.deathMatchHUDPrefab">
            <summary>
                Prefab reference for the deathmatch-specific HUD that appears above the player's
                character. Used in deathmatch game modes to show player-specific information like
                lives and grenades directly on the character rather than in screen corners.
            </summary>
        </member>
        <member name="F:Player.hud">
            <summary>
                The instantiated PlayerHUD instance for this player. Displays lives count,
                grenade/special ammo count, avatar icon, and perk information. Created from
                playerHUDPrefab and managed throughout the player's lifetime. Can be null before
                setup or in certain game modes.
            </summary>
        </member>
        <member name="F:Player.playerHUDPrefab">
            <summary>
                Prefab reference for the standard player HUD interface. Used as a template to
                instantiate the player's HUD display showing lives, grenades, and other UI elements.
                Instantiated in SetupHud method when needed.
            </summary>
        </member>
        <!-- Score & Statistics Methods -->
        <member name="M:Player.ReportGib(KillData,DamageObject)">
            <summary>
                Reports when this player gibs (completely destroys) an enemy for perk triggering. If
                the character is alive, triggers the OnEnemyGibbed perk event with player inventory
                items and gib data. Gibbing enemies often provides bonus effects or satisfies
                specific perk conditions.
            </summary>
            <param name="killData">Struct containing information about the gibbed unit including damage type.</param>
            <param name="damageObject">The damage source object that caused the gib.</param>
        </member>
        <member name="M:Player.ReportGib(Unit)">
            <summary>
                Simplified gib reporting method that takes only the gibbed unit. Currently has an
                empty implementation after checking if the character exists and is alive. This
                appears to be an incomplete overload for simpler gib tracking scenarios.
            </summary>
            <param name="gibbedUnit">The unit that was gibbed.</param>
        </member>
        <member name="M:Player.ReportKill(KillData,DamageObject)">
            <summary>
                Reports a kill made by this player's character for statistics and perk triggering.
                If the character is alive, triggers the OnMookKilled perk event with player
                inventory items and kill data, then notifies the character of the kill. This tracks
                combat performance and activates kill-based perks.
            </summary>
            <param name="killData">Struct containing information about the killed unit including damage type and whether it was gibbed.</param>
            <param name="damageObject">The damage source object that caused the kill.</param>
        </member>
        <member name="M:Player.TriggerPerkEvent(PerkTriggerController.PerkEvent,TestVanDammeAnim)">
            <summary>
                Triggers a perk event for this player with just the hero as context. Passes the
                event type, player's inventory items, and hero reference to the perk trigger
                controller. Used for hero-specific events like spawning, death, or ability usage.
            </summary>
            <param name="eventType">The type of perk event to trigger.</param>
            <param name="bro">The hero character associated with this event.</param>
        </member>
        <member name="M:Player.TriggerPerkEvent(PerkTriggerController.PerkEvent,TestVanDammeAnim,Mook)">
            <summary>
                Triggers a perk event for this player with hero and mook context. Passes the event
                type, player's inventory items, hero, and mook references to the perk trigger
                controller. Used for combat events involving specific enemy interactions.
            </summary>
            <param name="eventType">The type of perk event to trigger.</param>
            <param name="bro">The hero character associated with this event.</param>
            <param name="mook">The mook (enemy) involved in this event.</param>
        </member>
        <member name="M:Player.TriggerPerkEvent(PerkTriggerController.PerkEvent,TestVanDammeAnim,CheckPoint)">
            <summary>
                Triggers a perk event for this player with hero and checkpoint context. Passes the
                event type, player's inventory items, hero, and checkpoint references to the perk
                trigger controller. Used for checkpoint-related events like reaching or activating
                checkpoints.
            </summary>
            <param name="eventType">The type of perk event to trigger.</param>
            <param name="bro">The hero character associated with this event.</param>
            <param name="checkPoint">The checkpoint involved in this event.</param>
        </member>
        <!-- Score & Statistics Properties -->
        <member name="P:Player.PlayerColor">
            <summary>
                Gets the color assigned to this player based on their player number. Retrieves the
                color from HeroController.GetHeroColor for consistent player identification across
                UI elements.
            </summary>
        </member>
        <member name="P:Player.ValueOrchestrator">
            <summary>
                Gets the ValueOrchestrator instance for this player from the global PlayerInventory.
                The ValueOrchestrator manages dynamic value modifications from perks, power-ups, and
                other sources, calculating final multipliers for various gameplay values like
                damage, speed, or health.
            </summary>
        </member>
        <!-- Game State & Flow Methods -->
        <member name="M:Player.ClearTimeSinceDeath">
            <summary>
                Resets the death timer to allow continued camera following. Sets timeSinceDeath to
                timeSinceDeathToFollow value, effectively extending the camera follow duration after
                death.
            </summary>
        </member>
        <member name="M:Player.Exists">
            <summary>
                Checks if the player has an active character in the game world. Returns true only if
                the character reference is not null and the character's game object is active in the
                hierarchy.
            </summary>
            <returns>True if the player has an active character, false otherwise.</returns>
        </member>
        <member name="M:Player.GetCharacterPosition">
            <summary>
                Gets the current position of the player's character. Returns the character's
                transform position if alive, otherwise returns the last known player follow
                position.
            </summary>
            <returns>The character's current position or last known position if dead.</returns>
        </member>
        <member name="M:Player.GetFollowPosition">
            <summary>
                Gets the position the camera should follow for this player. Returns temporary target
                position if set, otherwise returns the smoothed character position. Updates death
                timer and follow position for living characters. Falls back to last known position
                after death.
            </summary>
            <returns>The world position the camera should follow.</returns>
        </member>
        <member name="M:Player.HasFollowPosition">
            <summary>
                Determines if this player should be followed by the camera. For local players,
                returns true if alive or within the death follow time window. For remote players,
                returns true if alive and instantiated. Tracks time since death to allow brief
                following after death.
            </summary>
            <returns>True if the camera should follow this player, false otherwise.</returns>
        </member>
        <member name="M:Player.IsAlive">
            <summary>
                Determines if the player is considered alive in the game. Returns true if the
                character exists and is alive, OR if the player is pending respawn/rescue (waiting
                states count as alive for game logic).
            </summary>
            <returns>True if the player is alive or pending respawn, false otherwise.</returns>
        </member>
        <member name="M:Player.IsAliveAndSpawnedHero">
            <summary>
                Checks if the player has a fully spawned and alive hero. More strict than IsAlive -
                requires the character to exist, be alive, AND have completed spawn position setup.
            </summary>
            <returns>True if the hero is alive and fully spawned, false otherwise.</returns>
        </member>
        <member name="M:Player.IsInvulnerable">
            <summary>
                Checks if the player's character is currently invulnerable. Returns the invulnerable
                state of the character if it exists, false otherwise.
            </summary>
            <returns>True if the character is invulnerable, false otherwise.</returns>
        </member>
        <member name="M:Player.IsNearbyActivatedCheckPoint(UnityEngine.Vector2@,System.Boolean@)">
            <summary>
                Checks if the player's character is near an activated checkpoint and gets the
                checkpoint position. Delegates to Map.IsNearActivatedCheckPoint using the
                character's current position. Modifies the ref parameters with checkpoint data if
                found.
            </summary>
            <param name="pos">Output parameter that receives the checkpoint position if one is found nearby.</param>
            <param name="spawnViaAirdrop">Output parameter that indicates if the checkpoint requires air drop spawning.</param>
            <returns>True if near an activated checkpoint, false otherwise.</returns>
        </member>
        <member name="M:Player.IsNearbyActivatedCheckPoint(System.Boolean@)">
            <summary>
                Checks if the player's character is near an activated checkpoint without retrieving
                position. Overload that only returns whether an air drop spawn is required, without
                the checkpoint position.
            </summary>
            <param name="spawnViaAirdrop">Output parameter that indicates if the checkpoint requires air drop spawning.</param>
            <returns>True if near an activated checkpoint, false otherwise.</returns>
        </member>
        <member name="M:Player.IsPendingRespawnOrResuingInProgress">
            <summary>
                Checks if the player is in a pending state waiting for respawn or rescue. Returns
                true if either RescueInProgress or awaitingHeroTypeFromServer flags are set.
            </summary>
            <returns>True if waiting for respawn or in rescue process, false otherwise.</returns>
        </member>
        <member name="M:Player.IsThisWay(System.Single,System.Single,System.Int32)">
            <summary>
                Checks if the player's character is in the specified direction from a given
                position. Special handling for Snake Broskin's grenade hologram position. Returns
                true if the character (or hologram) is in the direction indicated by xDirection from
                the given coordinates.
            </summary>
            <param name="x">The X coordinate to check from.</param>
            <param name="y">The Y coordinate to check from.</param>
            <param name="xDirection">The direction to check (-1 for left, 1 for right).</param>
            <returns>True if the character is in the specified direction, false otherwise.</returns>
        </member>
        <member name="M:Player.LateUpdate">
            <summary>
                Late update processing that occurs after all Update calls. Calls base class
                LateUpdate and then updates the smoothed follow position for camera tracking.
            </summary>
        </member>
        <member name="M:Player.PackState(UnityStream)">
            <summary>
                Serializes the player's state for network synchronization. Packs the current lives
                count, character reference, and firstDeployment flag into the stream, then calls the
                base class PackState. This method is used to sync player state across the network in
                multiplayer games. Note: Network functionality may not work reliably in mods.
            </summary>
            <param name="stream">The Unity network stream to write the state data to.</param>
            <returns>The stream with the serialized player state.</returns>
        </member>
        <member name="M:Player.UnpackState(UnityStream)">
            <summary>
                Deserializes the player's state from network data. Reads lives count, character
                reference, and firstDeployment flag from the stream, enables the HUD with updated
                data, then calls the base class UnpackState. This method receives player state
                updates in multiplayer games. Note: Network functionality may not work reliably in
                mods.
            </summary>
            <param name="stream">The Unity network stream to read the state data from.</param>
            <returns>The stream after reading the player state.</returns>
        </member>
        <member name="M:Player.Update">
            <summary>
                Main update loop for the player. Handles idle timeout detection (35 seconds),
                controller rumble, server response timeouts, fuel/grenade HUD updates, and bot brain
                management. Monitors player input to detect AFK players in multiplayer and manages
                various time-based states.
            </summary>
        </member>
        <member name="M:Player.UpdateSmoothFollowPos">
            <summary>
                Updates the smoothed follow position used for camera tracking. For local players,
                directly uses character position. For remote players, smoothly interpolates position
                unless the character has moved too far (200 units squared), in which case it snaps
                to the new position.
            </summary>
        </member>
        <!-- Game State & Flow Fields -->
        <member name="F:Player.AFKTimeLimit">
            <summary>
                Constant defining the idle time limit before a player is considered AFK (Away From
                Keyboard). Set to 35 seconds. When idleTimer reaches this value in multiplayer
                games, the player is automatically dropped out and an AFK message is displayed. This
                prevents inactive players from blocking game progress.
            </summary>
        </member>
        <member name="F:Player.SmoothedFollowPosition">
            <summary>
                The interpolated position used for smooth camera following. For local players,
                directly matches character position. For remote players, smoothly interpolates
                toward the character position unless they teleport (move more than 200 units).
                Initialized to -Vector3.one and updated in UpdateSmoothFollowPos.
            </summary>
        </member>
        <member name="F:Player.charHasBeenInstantiated">
            <summary>
                Flag indicating whether the player's character has completed at least one update
                cycle. Set to true in Update when character exists and UpdateHasRunAtleastOnce is
                true. Used by remote players in HasFollowPosition to determine if the character is
                ready for camera following. Ensures character is fully initialized before certain
                operations.
            </summary>
        </member>
        <member name="F:Player.firstDeployment">
            <summary>
                Tracks whether this is the player's first spawn in the current level. Initialized to
                true and set to false after first spawn. Used to determine spawn behavior (transport
                vs checkpoint), suppress spawn sounds, and handle special first-spawn logic. Reset
                between levels.
            </summary>
        </member>
        <member name="F:Player.idleTimer">
            <summary>
                Tracks how long the player has been idle (no input) in seconds. Incremented by
                unscaled delta time when the player has no input in multiplayer games with other
                alive players. Reset to 0 when any input is detected. When this reaches AFKTimeLimit
                (35 seconds), triggers automatic dropout and shows AFK message.
            </summary>
        </member>
        <member name="F:Player.playerDelay">
            <summary>
                Timer field that counts down in the Update loop. Decremented by deltaTime each frame
                when greater than 0. The specific purpose is not clear from the available code, but
                appears to be a general-purpose delay timer for player actions.
            </summary>
        </member>
        <member name="F:Player.playerTemporaryTarget">
            <summary>
                Optional transform that overrides normal camera following behavior. When set, the
                camera will follow this target instead of the player's character. Used for scripted
                sequences, cutscenes, or directing player attention to specific objects. Cleared
                with RemovePlayerTarget.
            </summary>
        </member>
        <member name="F:Player.timeSinceDeath">
            <summary>
                Tracks elapsed time in seconds since the player's character died. Incremented in
                HasFollowPosition for local players after death. Reset to 0 when character is alive
                and updating. Used with timeSinceDeathToFollow to allow brief camera following after
                death before switching to other players. Can be reset via ClearTimeSinceDeath.
            </summary>
        </member>
        <member name="F:Player.timeSinceDeathToFollow">
            <summary>
                The duration in seconds to continue following a dead player's last position. Set to
                1.5 seconds by default. After a player dies, the camera continues following their
                position for this duration before switching to other players. This provides visual
                continuity and lets players see the immediate aftermath of their death.
            </summary>
        </member>
        <!-- Character & Hero Control Methods -->
        <member name="M:Player.AddFlexPower(PickupType,System.Boolean)">
            <summary>
                Adds a flex power pickup to the player's inventory. Flex powers are temporary
                power-ups that grant special abilities like invulnerability, air jump, teleport, or
                golden light. If forced is true, overwrites any existing flex power. If forced is
                false, only adds if the player has no current flex power. This is an RPC method for
                network synchronization.
            </summary>
            <param name="pickup">The type of flex power pickup to add (e.g., FlexInvulnerability, FlexAirJump, FlexTeleport, FlexGoldenLight).</param>
            <param name="forced">If true, replaces any existing flex power. If false, only adds if no flex power is currently active.</param>
        </member>
        <member name="M:Player.AssignCharacter(TestVanDammeAnim)">
            <summary>
                Assigns a hero character to this player and clears pending state flags. Sets the
                character reference and resets awaitingHeroTypeFromServer and RescueInProgress flags
                to false.
            </summary>
            <param name="character">The hero character to assign to this player.</param>
        </member>
        <member name="M:Player.BoostHero(System.Single)">
            <summary>
                Applies a speed boost to the player's hero character for the specified duration. If
                the player has an active character, calls the character's Boost method which
                increases movement speed temporarily. This is typically used for power-ups or
                special abilities that enhance hero mobility.
            </summary>
            <param name="time">The duration in seconds for which the speed boost should last.</param>
        </member>
        <member name="M:Player.ClearFlexPower">
            <summary>
                Removes the player's current flex power. Calls PlayerInventory.HeroHasDied which
                clears the flex power from the global inventory. This is typically called when the
                player dies to ensure flex powers don't persist between lives in campaign mode.
            </summary>
        </member>
        <member name="M:Player.DeRegisterMinion(Unit)">
            <summary>
                Removes a unit from this player's minion list. If the unit is currently registered
                as a minion, removes it from the tracking list. This is typically called when a
                minion dies or is no longer under the player's control.
            </summary>
            <param name="minion">The unit to remove from this player's minion list.</param>
        </member>
        <member name="M:Player.ForceRespawnWithFlexPower(PickupType,System.Boolean)">
            <summary>
                Sets a flex power to be automatically applied when the player respawns. Stores the
                specified pickup type in _forceFlexPowerupSpawn field, which is checked during hero
                instantiation to grant the power immediately upon spawning. The respawnWithFlexPower
                parameter is not used in the current implementation.
            </summary>
            <param name="pickup">The flex power pickup type to grant on respawn.</param>
            <param name="respawnWithFlexPower">Unused parameter in current implementation.</param>
        </member>
        <member name="M:Player.GetFlexPower">
            <summary>
                Gets the player's currently active flex power type. Retrieves the flex power from
                PlayerInventory for this player number.
            </summary>
            <returns>The PickupType of the current flex power, or PickupType.None if no power is active.</returns>
        </member>
        <member name="M:Player.HasFlexPower(PickupType)">
            <summary>
                Checks if the player currently has a specific type of flex power. Compares the
                player's current flex power in PlayerInventory against the specified type.
            </summary>
            <param name="flexType">The flex power type to check for.</param>
            <returns>True if the player has the specified flex power type, false otherwise.</returns>
        </member>
        <member name="M:Player.HasFlexPower">
            <summary>
                Checks if the player currently has any flex power active. Returns true if the
                player's flex power in PlayerInventory is not None.
            </summary>
            <returns>True if the player has any flex power, false otherwise.</returns>
        </member>
        <member name="M:Player.InstantiateHero(HeroType,System.Int32,System.Int32)">
            <summary>
                Creates and initializes a new hero instance for the local player only. Instantiates
                the hero prefab via networking, sets up the hero with player data, calculates spawn
                position, configures death match HUD if needed, and applies any flex powers. Returns
                null for non-local players. Note: ProcGenGameMode references are for an unfinished
                feature.
            </summary>
            <param name="heroTypeEnum">The type of hero to instantiate.</param>
            <param name="PlayerNum">The player number who owns this hero.</param>
            <param name="ControllerNum">The controller number assigned to this player.</param>
            <returns>The instantiated hero character, or null if not the local player.</returns>
        </member>
        <member name="M:Player.RegisterMinion(Unit)">
            <summary>
                Registers a unit as a minion controlled by this player. Adds the unit to the
                player's minions list if not already present. Minions are AI-controlled units that
                fight alongside the player, such as rescued animals or summoned allies.
            </summary>
            <param name="minion">The unit to register as a minion of this player.</param>
        </member>
        <member name="M:Player.ReRequestHeroTypeFromMasterOnServerMigration">
            <summary>
                Re-requests hero type information from the new master after server migration.
                Currently empty implementation - appears to be a stub for handling host migration
                scenarios.
            </summary>
        </member>
        <member name="M:Player.RespawnBro(System.Boolean)">
            <summary>
                Initiates the respawn process for the player's hero. Sets awaitingHeroTypeFromServer
                flag and requests a hero type from the master/host. The swappingBro parameter
                indicates if this is a hero swap rather than a death respawn. This is an RPC method
                that only executes for the local player.
            </summary>
            <param name="swappingBro">If true, indicates this is a hero swap rather than a death respawn.</param>
        </member>
        <member name="M:Player.SetHeroType(HeroType)">
            <summary>
                Sets the current hero type and updates the HUD avatar display. Changes the HUD
                avatar and grenade material to match the specified hero type and sets the avatar to
                calm state.
            </summary>
            <param name="heroTypeEnum">The hero type to set as current.</param>
        </member>
        <member name="M:Player.SetInvulnerable(System.Single)">
            <summary>
                Sets the hero character to be invulnerable for the specified duration. Calls the
                character's SetInvulnerable method with the fadeIn parameter set to true and the
                showSmoke parameter set to false. This provides temporary protection from damage,
                typically used after spawning or during special events.
            </summary>
            <param name="time">The duration in seconds for which the character should be invulnerable.</param>
        </member>
        <member name="M:Player.SetSpawnPositon(TestVanDammeAnim,Player.SpawnType,System.Boolean,UnityEngine.Vector3)">
            <summary>
                RPC method that sets the spawn position and state for a hero character. Applies the
                calculated position, enables parachute if spawning via air drop, plays spawn sounds
                for non-first deployments, and grants temporary invulnerability. Updates rescue and
                hero request flags to false.
            </summary>
            <param name="bro">The hero character being spawned.</param>
            <param name="spawnType">The type of spawn scenario being used.</param>
            <param name="spawnViaAirDrop">Whether the hero should spawn with a parachute.</param>
            <param name="pos">The world position where the hero should spawn.</param>
        </member>
        <member name="M:Player.SpawnHero(HeroType)">
            <summary>
                Spawns a new hero of the specified type for this player. Recalls any existing living
                hero, handles cutscene loading for newly played heroes, unlocks heroes in campaign
                mode, and calls InstantiateHero to create the actual character. Updates player
                progress for unlocked heroes.
            </summary>
            <param name="nextHeroType">The type of hero to spawn.</param>
        </member>
        <member name="M:Player.TimeBroBoostHero(System.Single)">
            <summary>
                Applies a TimeBro-specific boost effect to the player's hero character. If the
                player has an active character, calls the character's TimeBroBoost method which
                provides special time-manipulation abilities. This boost is specific to TimeBro's
                unique gameplay mechanics.
            </summary>
            <param name="time">The duration in seconds for which the TimeBro boost should last.</param>
        </member>
        <member name="M:Player.WorkOutSpawnPosition(TestVanDammeAnim)">
            <summary>
                Calculates and sets the spawn position for a hero based on the determined spawn
                scenario. Evaluates the spawn type, retrieves the appropriate position (checkpoint,
                cage, transport, etc.), and calls SetSpawnPositon via RPC to synchronize the
                position across all clients. Handles special cases like air drops and level editor
                reloads.
            </summary>
            <param name="bro">The hero character to position for spawning.</param>
        </member>
        <member name="M:Player.WorkOutSpawnScenario">
            <summary>
                Determines the appropriate spawn scenario based on current game state and player
                conditions. Evaluates various factors including rescue status, game mode, checkpoint
                activation, and initial deployment to select the correct SpawnType. Returns Unknown
                type for explosion run mode without first deployment.
            </summary>
            <returns>The SpawnType enum value indicating how the player should spawn.</returns>
        </member>
        <!-- Character & Hero Control Properties -->
        <member name="P:Player.character">
            <summary>
                Gets or sets the current hero character (TestVanDammeAnim) controlled by this
                player. This is the actual bro/character unit in the game world that the player
                controls. Setting this property also updates internal state tracking.
            </summary>
        </member>
        <!-- Character & Hero Control Fields -->
        <member name="F:Player._character">
            <summary>
                The current hero character (TestVanDammeAnim) instance controlled by this player.
                This is the actual bro unit in the game world. Can be null when the player is dead
                or waiting to spawn. Accessed through the character property which provides
                additional logic when setting.
            </summary>
        </member>
        <member name="F:Player._forceFlexPowerupSpawn">
            <summary>
                Private field storing a flex power type to be automatically granted when the player
                spawns a new hero. Set by ForceRespawnWithFlexPower and checked during
                InstantiateHero to apply the power immediately after spawning. Reset to
                PickupType.None after use.
            </summary>
        </member>
        <member name="F:Player.heroType">
            <summary>
                The HeroType enum value of the player's current hero. Used for HUD avatar display
                and tracking which bro the player is currently playing as. Set to HeroType.None when
                no hero is active. Updated when spawning a new hero via SetHeroType method.
            </summary>
        </member>
        <member name="F:Player.minions">
            <summary>
                List of AI-controlled units that fight alongside this player. Includes rescued
                animals, summoned allies, or other units under the player's control. Units are added
                via RegisterMinion and removed via DeRegisterMinion. Used to track and manage AI
                companions.
            </summary>
        </member>
        <member name="F:Player.recentlyUnlockedHeros">
            <summary>
                List of hero types that were recently unlocked but not yet used by the player. This
                field appears to be defined but not actively used in the current implementation.
                Likely intended for tracking newly unlocked bros for UI notifications or
                achievements.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:PlayerHUD.Awake">
            <summary>
                Initializes core HUD components before Start. Stores original avatar sprite
                properties for later restoration after special animations, initializes fuel gauge
                dimensions if present, and hides the face hugger indicator. Called once when the
                GameObject is created.
            </summary>
        </member>
        <member name="M:PlayerHUD.Hide">
            <summary>
                Hides the entire HUD by deactivating its GameObject. Sets the hidden flag to true to
                track visibility state. Used when HUD should be completely invisible, such as during
                cutscenes or when the player is not active.
            </summary>
        </member>
        <member name="M:PlayerHUD.LateUpdate">
            <summary>
                Updates HUD state and positioning every frame after all Update calls. Monitors
                screen resolution changes and camera orthographic size to reposition HUD elements,
                handles F12 key press to hide HUD, manages HUD visibility based on game state and
                map editing mode, updates avatar state when player character dies, sets player name
                if not already set, manages special frame animations and timing, updates damage
                multiplier display for procedural generation mode, refreshes controller information,
                and updates flex power icon display based on current power-up type.
            </summary>
        </member>
        <member name="M:PlayerHUD.Setup(System.Int32,System.Int32)">
            <summary>
                Configures the complete HUD for a specific player. Positions HUD in the appropriate
                screen corner based on player number (0-3), sets up avatar facing direction,
                initializes grenade/special icons, configures player-specific text displays
                (lives/wins), sets player color frame, handles flex power icon visibility, manages
                online/offline name display differences, and establishes proper UI hierarchy under
                the UI camera.
            </summary>
            <param name="lives">Initial number of lives to display (used in Campaign mode)</param>
            <param name="playerNum">Player index (0-3) determining HUD position: 0=bottom-left, 1=bottom-right, 2=top-left, 3=top-right</param>
        </member>
        <member name="M:PlayerHUD.SetupFuelGuage">
            <summary>
                Configures the fuel gauge sprite anchor and size based on HUD direction. Left-facing
                HUDs (-1) anchor the fuel gauge to the middle-right so it grows leftward.
                Right-facing HUDs (1) anchor to middle-left so it grows rightward. Sets the gauge to
                its defined width and height, then hides it initially since most bros use grenades
                instead of fuel.
            </summary>
        </member>
        <member name="M:PlayerHUD.SetupIcons(SpriteSM[],System.Int32,System.Boolean)">
            <summary>
                Positions an array of icons (typically grenade icons) in a horizontal row. Icons are
                spaced 10 units apart with an 18-unit offset from the avatar. For double avatar
                mode, adds an additional 6-unit offset in the direction. All icons are positioned at
                z=2 with y=-0.1. Direction determines whether icons extend left (-1) or right (1)
                from the avatar.
            </summary>
            <param name="icons">Array of sprite icons to position</param>
            <param name="direction">-1 for left-facing HUD, 1 for right-facing HUD</param>
            <param name="doubleAvatar">True if showing two avatars, adds extra spacing</param>
        </member>
        <member name="M:PlayerHUD.Show">
            <summary>
                Shows the HUD by activating its GameObject. Clears the hidden flag to indicate the
                HUD is visible. Used to restore HUD visibility after it has been hidden.
            </summary>
        </member>
        <member name="M:PlayerHUD.Start">
            <summary>
                Completes HUD initialization after Awake. Sets up the fuel gauge display, clears
                name text field, configures seed display for procedural generation test builds, and
                deactivates unused UI elements. Called after all Awake methods have been called.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:PlayerHUD.currentCameraOrthographicSize">
            <summary>
                Cached orthographic size of the UI camera. Defaults to 128 which is the standard UI
                camera size. Updated by SetPosition() when HUD is repositioned. Compared against
                current UI camera orthographic size in LateUpdate() to detect camera zoom changes
                that require HUD repositioning. Ensures HUD scales properly with camera adjustments.
            </summary>
        </member>
        <member name="F:PlayerHUD.currentScreenHeight">
            <summary>
                Cached screen height in pixels used to detect resolution changes. Updated by
                SetPosition() method when HUD repositioning occurs. Compared against Screen.height
                in LateUpdate() to determine when screen resolution has changed and HUD elements
                need to be repositioned. Works with currentScreenWidth to ensure HUD remains
                properly positioned across different display resolutions.
            </summary>
        </member>
        <member name="F:PlayerHUD.currentScreenWidth">
            <summary>
                Cached screen width in pixels used to detect resolution changes. Updated by
                SetPosition() method when HUD repositioning occurs. Compared against Screen.width in
                LateUpdate() to determine when screen resolution has changed and HUD elements need
                to be repositioned. Part of the resolution change detection system along with
                currentScreenHeight and currentCameraOrthographicSize.
            </summary>
        </member>
        <member name="F:PlayerHUD.hidden">
            <summary>
                Indicates whether the HUD is currently hidden. Set to true when F12 is pressed or
                when in map editing mode. When true, prevents grenade count updates and other HUD
                operations. Restored to false when HUD display conditions are met again.
            </summary>
        </member>
        <member name="F:PlayerHUD.player">
            <summary>
                Reference to the Player object that owns this HUD. Set during Setup() by accessing
                HeroController.players array at playerNum index. Used to check player-specific
                states like flex powers and online ownership. May be null if player disconnects or
                before Setup() is called. Primary link between HUD display and actual player game
                state for real-time updates.
            </summary>
        </member>
        <member name="F:PlayerHUD.playerBorderPadding">
            <summary>
                Padding in pixels added to the player frame border when displayed. Applied to both
                width and height when sizing the player frame around name/no-name backgrounds.
                Default value: 10 pixels.
            </summary>
        </member>
        <member name="F:PlayerHUD.playerNum">
            <summary>
                Index identifying which player (0-3) this HUD belongs to. Initialized to -1
                indicating unassigned. Set during Setup() method and determines HUD positioning:
                0=bottom-left, 1=bottom-right, 2=top-left, 3=top-right. Used throughout the class to
                access player-specific data from HeroController arrays and determine UI layout
                direction (even numbers face right, odd numbers face left).
            </summary>
        </member>
        <member name="F:PlayerHUD.wasMoving">
            <summary>
                Tracks whether the HUD was repositioning in the previous frame due to screen size
                changes or camera orthographic size changes. Used to optimize SetPosition() calls by
                only updating when transitioning from moving to stationary state.
            </summary>
        </member>
        <!-- Player State Display Methods -->
        <member name="M:PlayerHUD.GoToDoubleAvatarMode(UnityEngine.Material,UnityEngine.Material)">
            <summary>
                Switches the HUD to display two avatars side by side for two-player bros like
                BoondockBros. Returns immediately if avatar sprites are null. Sets materials for
                both avatars, activates and positions the second avatar 12 units to the side and 2
                units down from the first, configures second avatar size and facing direction, and
                updates UI spacing to accommodate both avatars.
            </summary>
            <param name="avatar1">Material for the first/primary avatar</param>
            <param name="avatar2">Material for the second avatar</param>
        </member>
        <member name="M:PlayerHUD.HideFaceHugger">
            <summary>
                Hides the face hugger overlay from the avatar display. Sets the showFaceHugger flag
                to false, resets the avatar sprite to show the normal face position (y=64), and
                deactivates the face hugger sprite GameObject.
            </summary>
        </member>
        <member name="M:PlayerHUD.SetAvatar(UnityEngine.Material)">
            <summary>
                Changes the avatar display to show a different character. Hides any face hugger
                overlay, updates the renderer's material, recalculates texture coordinates for the
                new sprite sheet, resets sprite properties to original values, maintains proper
                facing direction, and triggers a 1-second flash effect. Also ensures the secondary
                avatar is hidden for single-character bros.
            </summary>
            <param name="avatarMaterial">The material containing the character's avatar sprite sheet</param>
        </member>
        <member name="M:PlayerHUD.SetAvatarAngry(bool)">
            <summary>
                Sets the avatar sprite to display the angry/shouting expression frame (x=32). Only
                updates if not currently showing a special animation frame. Preserves the current Y
                coordinate of the sprite's lower left pixel.
            </summary>
            <param name="useFirstAvatar">True to update the primary avatar, false for secondary avatar</param>
        </member>
        <member name="M:PlayerHUD.SetAvatarBounceDown(bool)">
            <summary>
                Sets the avatar sprite to display one pixel lower than normal (y=63) to create a
                bounce down effect. Preserves the current X coordinate of the sprite. If face hugger
                is shown, also moves the face hugger sprite down by the same amount to maintain
                alignment.
            </summary>
            <param name="useFirstAvatar">True to update the primary avatar, false for secondary avatar</param>
        </member>
        <member name="M:PlayerHUD.SetAvatarBounceUp(bool)">
            <summary>
                Restores the avatar sprite to normal height position (y=64) after a bounce.
                Preserves the current X coordinate of the sprite. If face hugger is shown, also
                restores the face hugger sprite position to maintain alignment with the avatar.
            </summary>
            <param name="useFirstAvatar">True to update the primary avatar, false for secondary avatar</param>
        </member>
        <member name="M:PlayerHUD.SetAvatarCalm(bool)">
            <summary>
                Sets the avatar sprite to display the calm/neutral expression frame (x=0). Only
                updates if not currently showing a special animation frame. Also clears the
                SetToDead flag when called. Preserves the current Y coordinate of the sprite's lower
                left pixel.
            </summary>
            <param name="useFirstAvatar">True to update the primary avatar, false for secondary avatar</param>
        </member>
        <member name="M:PlayerHUD.SetAvatarDead(bool)">
            <summary>
                Sets the avatar sprite to display the dead/unconscious expression frame (x=96). If
                currently showing a special animation, stops it first. Sets the SetToDead flag to
                true and updates the specified avatar's sprite position. Preserves the current Y
                coordinate.
            </summary>
            <param name="useFirstAvatar">True to update the primary avatar, false for secondary avatar</param>
        </member>
        <member name="M:PlayerHUD.SetAvatarFire(bool)">
            <summary>
                Sets the avatar sprite to display the firing/action expression frame (x=64). Only
                updates if not currently showing a special animation frame. Preserves the current Y
                coordinate of the sprite's lower left pixel.
            </summary>
            <param name="useFirstAvatar">True to update the primary avatar, false for secondary avatar</param>
        </member>
        <member name="M:PlayerHUD.SetAvatarFireFrame(System.Int32)">
            <summary>
                Sets the avatar to display a specific animation frame, typically used for firing
                animations. Only updates the primary avatar and only if not currently showing a
                special animation frame. Frame position is calculated as frame number * 32 pixels
                horizontally.
            </summary>
            <param name="frame">The frame index to display (0-based)</param>
        </member>
        <member name="M:PlayerHUD.SetAvatarFrame(System.Int32)">
            <summary>
                Sets the avatar to display a specific frame by index. Handles both normal frames
                (32-pixel wide) and special animation frames (64-pixel wide). For normal frames, x
                position is avatarFrame * 32; for special frames, x position is 128 + avatarFrame *
                64. Always sets y position to 64. Only affects the primary avatar sprite.
            </summary>
            <param name="avatarFrame">The frame index to display</param>
        </member>
        <member name="M:PlayerHUD.SetAvatarSpecialFrame(System.Single)">
            <summary>
                Starts a special avatar animation sequence using a 64-pixel wide sprite frame.
                Triggers grenade icon disappearance flash, schedules icon restoration after the
                animation time plus 0.33 seconds, switches avatar to use special frame at x=128 with
                double width (64 pixels), adjusts sprite offset by 16 pixels in facing direction,
                sets special animation flags and resets frame counter.
            </summary>
            <param name="time">Duration in seconds for the special animation</param>
        </member>
        <member name="M:PlayerHUD.SetChevBroliosHeartGrenadeMaterials">
            <summary>
                Sets all grenade icons to display ChevBrolios' special heart-shaped grenade icon.
                Used when ChevBrolios performs specific actions that transform his standard grenades
                into heart grenades.
            </summary>
        </member>
        <member name="M:PlayerHUD.SetFuel(System.Single,System.Boolean)">
            <summary>
                Updates the fuel gauge display to show current fuel level. Hides all grenade icons
                when showing fuel, sets the fuel sprite width based on fuel percentage and avatar
                facing direction, handles fuel warning by flashing red color for 0.25 seconds when
                red parameter is true, and activates the fuel gauge sprite. Only updates sprite size
                if fuel value has changed from previous state.
            </summary>
            <param name="fuelM">Fuel level as a multiplier (0.0 to 1.0 representing empty to full)</param>
            <param name="red">True to trigger red warning flash, typically when fuel is critically low</param>
        </member>
        <member name="M:PlayerHUD.SetGrenadeMaterials(PockettedSpecialAmmoType)">
            <summary>
                Updates grenade icons to display special ammo type icons instead of standard
                grenades. Resets grenade offset to 0 and sets appropriate icon material based on the
                special ammo type: Airstrike uses brodellWalkerIcon, Timeslow uses timebroIcon,
                RemoteControlCar uses bronnarIcon, MechDrop uses mechDropIcon, AlienPheromones uses
                alienPheromones icon, and Steroids uses steroids icon.
            </summary>
            <param name="type">The special ammo type to display icons for</param>
        </member>
        <member name="M:PlayerHUD.SetGrenadeMaterials(HeroType)">
            <summary>
                Updates all grenade icon materials to match the specified hero type. Each bro has
                unique grenade/special icons that match their theme. Handles special cases like
                AshBrolliams requiring a 4-pixel offset, DoubleBroSeven using unique icons for each
                grenade slot, editor override for testing specific bros, and defaults to rambroIcon
                for unspecified hero types. Also handles TankBroTank as a special case.
            </summary>
            <param name="type">The hero type whose grenade icons should be displayed</param>
        </member>
        <member name="M:PlayerHUD.SetGrenades(System.Int32)">
            <summary>
                Updates the grenade count display by showing/hiding grenade icons. Only updates if
                the count has changed and the HUD is not hidden. Hides the fuel gauge when showing
                grenades and triggers the normal icon display refresh. Resets fuel gauge value to -1
                to indicate grenades are active.
            </summary>
            <param name="grenades">Current number of grenades to display (0-6 typically)</param>
        </member>
        <member name="M:PlayerHUD.SetGrenadesOriginalCount(System.Int32)">
            <summary>
                Stores the original grenade count for the current character. This value is used when
                flashing grenade icons to show the maximum capacity versus current count.
            </summary>
            <param name="grenades">The character's maximum grenade capacity</param>
        </member>
        <member name="M:PlayerHUD.SetLives(System.Int32)">
            <summary>
                Updates the lives text display with localized formatting. Uses the localization
                manager to get the appropriate "LIVES" text in the current language, then formats it
                with the lives count. Falls back to hardcoded "LIVES" text if localization manager
                is not available.
            </summary>
            <param name="lives">Number of lives to display</param>
        </member>
        <member name="M:PlayerHUD.SetTags(System.Int32)">
            <summary>
                Updates the kill count text display showing player tags/kills. Only updates if the
                killCountText component exists. Displays in format "TAGS [number]" without
                localization support.
            </summary>
            <param name="tags">Number of tags/kills to display</param>
        </member>
        <member name="M:PlayerHUD.SetWins(System.Int32)">
            <summary>
                Updates the wins text display with localized formatting. Uses the same text field as
                lives but shows "WINS" instead for competitive game modes. Retrieves localized
                "WINS" text if available, otherwise uses hardcoded English text.
            </summary>
            <param name="wins">Number of round wins to display</param>
        </member>
        <member name="M:PlayerHUD.ShowFaceHugger">
            <summary>
                Shows the face hugger indicator on the player's avatar. Currently empty
                implementation - the actual face hugger display logic appears to be handled
                elsewhere in the codebase.
            </summary>
        </member>
        <member name="M:PlayerHUD.ShowFreeLife">
            <summary>
                Displays the free life notification bubble and flashes the primary avatar for 1
                second. Called when the player receives an extra life pickup. The bubble animation
                is restarted if already showing.
            </summary>
        </member>
        <member name="M:PlayerHUD.StopUsingSpecialFrame">
            <summary>
                Stops the special avatar animation and returns to normal 32-pixel wide frames. Only
                executes if currently in special frame mode and avatar exists. Resets sprite
                position to x=0, restores standard 32-pixel width, removes the 16-pixel offset,
                restores original avatar size with proper facing direction, and clears the special
                frame flag.
            </summary>
        </member>
        <member name="M:PlayerHUD.SwitchAvatarAndGrenadeMaterial(HeroType)">
            <summary>
                Updates both the avatar and grenade icons when switching to a different bro. Hides
                secondary avatar for single-character bros, updates avatar material using
                HeroController's material database, recalculates texture coordinates and sprite
                dimensions, maintains proper facing direction, updates spacing for double-avatar
                bros if needed, and updates grenade icons to match the new character type.
            </summary>
            <param name="type">The hero type to switch the display to</param>
        </member>
        <!-- Player State Display Fields -->
        <member name="F:PlayerHUD.AvatarOffsetAngry">
            <summary>
                Sprite sheet Y-offset for angry avatar state. Value: 32 pixels (second row).
            </summary>
        </member>
        <member name="F:PlayerHUD.AvatarOffsetCalm">
            <summary>
                Sprite sheet Y-offset for calm avatar state. Value: 0 pixels (first row).
            </summary>
        </member>
        <member name="F:PlayerHUD.AvatarOffsetDead">
            <summary>
                Sprite sheet Y-offset for dead avatar state. Value: 96 pixels (fourth row).
            </summary>
        </member>
        <member name="F:PlayerHUD.AvatarOffsetFire">
            <summary>
                Sprite sheet Y-offset for firing avatar state. Value: 64 pixels (third row).
            </summary>
        </member>
        <member name="F:PlayerHUD.AvatarOffsetSpecial">
            <summary>
                Sprite sheet Y-offset for special ability avatar frames. Value: 128 pixels (fifth
                row). These frames use larger sprite dimensions (64x64 instead of 32x32).
            </summary>
        </member>
        <member name="F:PlayerHUD.AvatarSize">
            <summary>
                Standard width and height in pixels for regular avatar sprites. Value: 32 pixels.
            </summary>
        </member>
        <member name="F:PlayerHUD.AvatarSpecialSize">
            <summary>
                Width and height in pixels for special avatar frames (such as special abilities).
                Value: 64 pixels.
            </summary>
        </member>
        <member name="F:PlayerHUD.SetToDead">
            <summary>
                Tracks whether the avatar is currently displaying the dead state. When true, the
                avatar shows the death sprite. Set by SetAvatarDead() and cleared by SetAvatar()
                methods.
            </summary>
        </member>
        <member name="F:PlayerHUD.alienPheromones">
            <summary>
                Material containing the special ammo icon for Alien Pheromones. Applied when special
                ammo type is AlienPheromones via SetGrenadeMaterials() in SetPockettedSpecialAmmo().
                Displays an alien attraction-themed icon for this special ammunition type that
                affects alien behavior.
            </summary>
        </member>
        <member name="F:PlayerHUD.ashIcon">
            <summary>
                Material for Ash Brolliams' special ability icon. Used to display the boomstick
                special icon in the HUD when playing as Ash Brolliams. Assigned to grenade icon
                slots when SetGrenadeMaterials is called with HeroType.AshBrolliams. Uses a 4-pixel
                offset for proper display.
            </summary>
        </member>
        <member name="F:PlayerHUD.avatar">
            <summary>
                Primary sprite component displaying the current bro's face/avatar. Supports multiple
                expression frames: calm (x=0), angry (x=32), firing (x=64), dead (x=96), and special
                animations (x=128+). Material is swapped when changing characters. Size and facing
                direction adjusted based on HUD position. Can display bounce animations and color
                flashing effects.
            </summary>
        </member>
        <member name="F:PlayerHUD.avatarFacingDirection">
            <summary>
                Direction multiplier for avatar sprite facing and UI element growth direction. Value
                of 1 faces right (players 0 and 2), value of -1 faces left (players 1 and 3). Set
                during Setup() to match the direction field. Applied to avatar width, fuel gauge
                width, and special animation offsets to ensure all visual elements face the correct
                direction based on HUD corner position.
            </summary>
        </member>
        <member name="F:PlayerHUD.avatarWidth">
            <summary>
                Base width of the avatar sprite in pixels. Defaults to 32.1 pixels which is slightly
                larger than the standard 32-pixel sprite to avoid edge artifacts. Captured from
                avatar.width during Setup() and used as the base width for avatar display.
                Multiplied by avatarFacingDirection to flip the sprite horizontally. Doubled to 64
                pixels during special frame animations.
            </summary>
        </member>
        <member name="F:PlayerHUD.babroracusIcon">
            <summary>
                Material containing the grenade icon sprite for B.A. Broracus. Applied when hero
                type is BaBroracus via SetGrenadeMaterials(). Features grenade artwork matching the
                A-Team inspired character's style.
            </summary>
        </member>
        <member name="F:PlayerHUD.bladeIcon">
            <summary>
                Material containing the grenade icon sprite for Broblade. Applied when hero type is
                Blade via SetGrenadeMaterials(). Features unique grenade artwork matching the
                vampire hunter character's arsenal, likely styled as stakes or special
                vampire-hunting grenades.
            </summary>
        </member>
        <member name="F:PlayerHUD.boondockIcon">
            <summary>
                Material for The Boondock Bros' special ability icon. Used to display the dual
                pistols special icon in the HUD when playing as The Boondock Bros. Assigned to
                grenade icon slots when SetGrenadeMaterials is called with HeroType.BoondockBros.
            </summary>
        </member>
        <member name="F:PlayerHUD.broDreddIcon">
            <summary>
                Material for Bro Dredd's special ability icon. Used to display the lawgiver special
                icon in the HUD when playing as Bro Dredd. Assigned to grenade icon slots when
                SetGrenadeMaterials is called with HeroType.BroDredd.
            </summary>
        </member>
        <member name="F:PlayerHUD.broGummerIcon">
            <summary>
                Material containing the grenade icon sprite for Bro Gummer. Applied when hero type
                is BroGummer via SetGrenadeMaterials(). Shows survivalist or underground
                creature-themed explosive icon matching the Tremors-inspired character's monster
                hunting background.
            </summary>
        </member>
        <member name="F:PlayerHUD.broHardIcon">
            <summary>
                Material for Bro Hard's special ability icon. Used to display the zipline special
                icon in the HUD when playing as Bro Hard. Assigned to grenade icon slots when
                SetGrenadeMaterials is called with HeroType.BroHard.
            </summary>
        </member>
        <member name="F:PlayerHUD.broHeartIcon">
            <summary>
                Material containing the grenade icon sprite for Brove Heart. Applied when hero type
                is BroveHeart via SetGrenadeMaterials(). Features medieval-themed explosive icon
                matching the Braveheart-inspired character's historical Scottish warrior aesthetic.
            </summary>
        </member>
        <member name="F:PlayerHUD.broInBlackIcon">
            <summary>
                Material for Brononymous (Bro In Black)'s special ability icon. Used to display the
                neuralyzer special icon in the HUD when playing as Brononymous. Assigned to grenade
                icon slots when SetGrenadeMaterials is called with HeroType.Brononymous.
            </summary>
        </member>
        <member name="F:PlayerHUD.broLeeIcon">
            <summary>
                Material containing the grenade icon sprite for Bro Lee. Applied when hero type is
                BroLee via SetGrenadeMaterials(). Shows martial arts-themed explosive icon matching
                the Bruce Lee-inspired character's kung fu fighting style.
            </summary>
        </member>
        <member name="F:PlayerHUD.broMaxIcon">
            <summary>
                Material containing the grenade icon sprite for Bro Max. While defined in the class,
                this icon is not currently mapped to any hero type in the switch statement. Intended
                for the Mad Max-inspired character's grenade display when implemented.
            </summary>
        </member>
        <member name="F:PlayerHUD.brobocopIcon">
            <summary>
                Material for Brobocop's special ability icon. Used to display the targeting system
                special icon in the HUD when playing as Brobocop. Assigned to grenade icon slots
                when SetGrenadeMaterials is called with HeroType.Brobocop.
            </summary>
        </member>
        <member name="F:PlayerHUD.brocIcon">
            <summary>
                Material for Broc's special ability icon. Used to display the steroid rage special
                icon in the HUD when playing as Broc. Assigned to grenade icon slots when
                SetGrenadeMaterials is called with HeroType.Broc.
            </summary>
        </member>
        <member name="F:PlayerHUD.brocheteIcon">
            <summary>
                Material for Brochete's special ability icon. Used to display the machete special
                icon in the HUD when playing as Brochete. Assigned to grenade icon slots when
                SetGrenadeMaterials is called with HeroType.Brochete.
            </summary>
        </member>
        <member name="F:PlayerHUD.brocketeerIcon">
            <summary>
                Material containing the grenade icon sprite for The Brocketeer. Applied when hero
                type is TheBrocketeer via SetGrenadeMaterials(). Shows rocket or jetpack-themed
                explosive icon matching the Rocketeer-inspired character's aerial capabilities.
            </summary>
        </member>
        <member name="F:PlayerHUD.brodellWalkerIcon">
            <summary>
                Material containing the grenade icon sprite for Brodell Walker. Applied for both the
                BrodellWalker hero type and the Airstrike special ammo type. Contains airstrike
                beacon or flare-themed icon matching the Chuck Norris-inspired character's special
                ability.
            </summary>
        </member>
        <member name="F:PlayerHUD.brodenIcon">
            <summary>
                Material containing the grenade icon sprite for Broden. Applied when hero type is
                Broden via SetGrenadeMaterials(). Features explosive icon themed around the
                Odin-inspired character's Norse mythology and godly powers.
            </summary>
        </member>
        <member name="F:PlayerHUD.broffyIcon">
            <summary>
                Material containing the grenade icon sprite for Broffy. Applied when hero type is
                Broffy via SetGrenadeMaterials(). Shows vampire-themed explosive icon matching the
                Buffy the Vampire Slayer-inspired character's supernatural hunting theme.
            </summary>
        </member>
        <member name="F:PlayerHUD.brominatorIcon">
            <summary>
                Material for The Brominator's special ability icon. Used to display the time travel
                special icon in the HUD when playing as The Brominator. Assigned to grenade icon
                slots when SetGrenadeMaterials is called with HeroType.Brominator.
            </summary>
        </member>
        <member name="F:PlayerHUD.brommandoIcon">
            <summary>
                Material containing the grenade icon sprite for Brommando. Applied when hero type is
                Brommando via SetGrenadeMaterials(). Contains unique grenade artwork matching the
                Commando-inspired character's military theme.
            </summary>
        </member>
        <member name="F:PlayerHUD.bronanIcon">
            <summary>
                Material for Bronan the Brobarian's special ability icon. Used to display the sword
                throw special icon in the HUD when playing as Bronan. Assigned to grenade icon slots
                when SetGrenadeMaterials is called with HeroType.BronanTheBrobarian.
            </summary>
        </member>
        <member name="F:PlayerHUD.brondleFlyIcon">
            <summary>
                Material containing the grenade icon sprite for Brondle Fly. Applied when hero type
                is BrondleFly via SetGrenadeMaterials(). Shows insect or mutation-themed explosive
                icon matching The Fly-inspired character's grotesque transformation abilities.
            </summary>
        </member>
        <member name="F:PlayerHUD.broneyRossIcon">
            <summary>
                Material for Broney Ross' special ability icon. Used to display the cluster grenade
                special icon in the HUD when playing as Broney Ross. Assigned to grenade icon slots
                when SetGrenadeMaterials is called with HeroType.BroneyRoss.
            </summary>
        </member>
        <member name="F:PlayerHUD.broniversalIcon">
            <summary>
                Material for Broniversal Soldier's special ability icon. Used to display the
                resurrection special icon in the HUD when playing as Broniversal Soldier. Assigned
                to grenade icon slots when SetGrenadeMaterials is called with
                HeroType.BroniversalSoldier.
            </summary>
        </member>
        <member name="F:PlayerHUD.bronnarIcon">
            <summary>
                Material for Bronnar Jensen's special ability icon. Used to display the minigun
                special icon in the HUD when playing as Bronnar Jensen. Assigned to grenade icon
                slots when SetGrenadeMaterials is called with HeroType.BronnarJensen.
            </summary>
        </member>
        <member name="F:PlayerHUD.caseyBrobackIcon">
            <summary>
                Material containing the grenade icon sprite for Casey Broback. Applied when hero
                type is CaseyBroback via SetGrenadeMaterials(). Features chef or kitchen-themed
                explosive icon matching the Under Siege-inspired character's cook background.
            </summary>
        </member>
        <member name="F:PlayerHUD.cherryIcon">
            <summary>
                Material for Cherry Broling's special ability icon. Used to display the homing
                projectile special icon in the HUD when playing as Cherry Broling. Assigned to
                grenade icon slots when SetGrenadeMaterials is called with HeroType.CherryBroling.
            </summary>
        </member>
        <member name="F:PlayerHUD.chevBroliosHeartIcon">
            <summary>
                Material containing the special heart-themed grenade icon for Chev Brolios. Applied
                via SetChevBroliosHeartGrenadeMaterials() method, typically when the character is in
                a special powered-up state. Shows a heart-shaped explosive representing his unique
                cardiac condition.
            </summary>
        </member>
        <member name="F:PlayerHUD.chevBroliosIcon">
            <summary>
                Material containing the standard grenade icon sprite for Chev Brolios. Applied when
                hero type is ChevBrolios via SetGrenadeMaterials(). Features high-voltage or
                adrenaline-themed explosive icon matching the Crank-inspired character's
                electrically charged nature.
            </summary>
        </member>
        <member name="F:PlayerHUD.colJamesIcon">
            <summary>
                Material for Colonel James Broddock's special ability icon. Used to display the
                airstrike special icon in the HUD when playing as Col. James Broddock. Assigned to
                grenade icon slots when SetGrenadeMaterials is called with
                HeroType.ColJamesBroddock.
            </summary>
        </member>
        <member name="F:PlayerHUD.controllerContainer">
            <summary>
                Container GameObject for controller visual indicators. Positioned based on HUD side
                with offsets relative to center position. Even-numbered players (0,2) position at
                positive X offset (90 + avatar offset), odd-numbered players (1,3) at negative X
                offset (-90 - avatar offset). Y position fixed at -9.5. Made inactive during Setup()
                and may be activated to show controller connection status or input indicators.
            </summary>
        </member>
        <member name="F:PlayerHUD.controllerSecondColorSprites">
            <summary>
                Secondary array of sprites for controller indicators, used for two-color or layered
                controller visualizations. Provides additional visual elements that can be overlaid
                or alternated with controllerSprites for more complex controller state displays.
                Currently unused but maintained for future controller indicator implementations.
            </summary>
        </member>
        <member name="F:PlayerHUD.controllerSprites">
            <summary>
                Array of sprites for displaying controller input or connection indicators. Primary
                sprite set that can show various controller states or button prompts. Each sprite in
                the array can represent different controller elements or states. Currently unused in
                implementation but preserved for potential controller visualization features. Works
                in conjunction with controllerSecondColorSprites for two-tone displays.
            </summary>
        </member>
        <member name="F:PlayerHUD.damageMultiplierText">
            <summary>
                Text mesh showing the current damage multiplier percentage in procedural generation
                mode. Displays the modified BroDamage value from player 0's ValueOrchestrator as a
                percentage (e.g., "150%"). Updated every frame in LateUpdate when
                ProcGenGameMode.UseProcGenRules is true. Empty in standard game modes.
            </summary>
        </member>
        <member name="F:PlayerHUD.demolitionBroIcon">
            <summary>
                Material containing the grenade icon sprite for Demolition Bro. Applied when hero
                type is DemolitionBro via SetGrenadeMaterials(). Features construction or
                demolition-themed explosive icon matching the character's expertise in controlled
                explosions.
            </summary>
        </member>
        <member name="F:PlayerHUD.desperabroIcon">
            <summary>
                Material containing the grenade icon sprite for Desperabro. Applied when hero type
                is Desperabro via SetGrenadeMaterials(). Features mariachi or Mexican-themed
                explosive icon matching the Desperado-inspired character's style.
            </summary>
        </member>
        <member name="F:PlayerHUD.direction">
            <summary>
                Determines the HUD layout direction and element facing. Value of 1 positions HUD
                elements extending rightward (players 0 and 2), value of -1 positions elements
                extending leftward (players 1 and 3). Affects avatar facing, text alignment, icon
                positioning, fuel gauge growth direction, and overall HUD layout.
            </summary>
        </member>
        <member name="F:PlayerHUD.dirtyHarryIcon">
            <summary>
                Material containing the grenade icon sprite for Dirty Harriette. Applied when hero
                type is DirtyHarry via SetGrenadeMaterials(). Features .44 Magnum or police-themed
                explosive icon matching the Dirty Harry-inspired character's law enforcement
                background.
            </summary>
        </member>
        <member name="F:PlayerHUD.doubleBroGrenades">
            <summary>
                Array of material textures for displaying multiple grenade types when playing as
                DoubleBro Seven. Each material represents a different grenade icon that can be shown
                in the HUD. Used in conjunction with SetupDoubleBroGrenades() to display the
                appropriate grenade type icons. Materials are applied to grenadeIcons array elements
                based on the current grenade selection.
            </summary>
        </member>
        <member name="F:PlayerHUD.ellenIcon">
            <summary>
                Material for Ellen Ripbro's special ability icon. Used to display the mech loader
                special icon in the HUD when playing as Ellen Ripbro. Assigned to grenade icon slots
                when SetGrenadeMaterials is called with HeroType.EllenRipbro.
            </summary>
        </member>
        <member name="F:PlayerHUD.faceHugger1">
            <summary>
                Sprite overlay showing alien face hugger attached to the player's avatar. Currently
                has incomplete implementation - ShowFaceHugger() is empty while HideFaceHugger()
                exists. Moves vertically with avatar during bounce animations. Lower left pixel
                position used to control visibility state. Hidden by default in Awake().
            </summary>
        </member>
        <member name="F:PlayerHUD.faceHugger2">
            <summary>
                Secondary face hugger sprite, likely intended for two-player bros or additional face
                hugger effects. Currently unused in the codebase - no methods reference this sprite.
                Exists as infrastructure for potential face hugger mechanics on secondary avatars.
            </summary>
        </member>
        <member name="F:PlayerHUD.flexPowerIcon">
            <summary>
                Sprite icon indicating active flex power (special ability from flexercise pickups).
                Shows different icon frames based on power type: Air Jump (x=64), Invulnerability
                (x=32), Golden Light (x=0), Teleport (x=96). Visibility toggled based on
                player.HasFlexPower(). Position flipped based on HUD direction. Updated every frame
                in LateUpdate.
            </summary>
        </member>
        <member name="F:PlayerHUD.freeLifeText">
            <summary>
                ReactionBubble component that displays "FREE LIFE!" notification when collecting
                extra lives. Position is configured during Setup() based on player number with
                different X offsets and vertical directions. Triggered by ShowFreeLife() method
                which also flashes the avatar. Setup positions: P0(36,1), P1(-36,1), P2(36,-1),
                P3(-36,-1).
            </summary>
        </member>
        <member name="F:PlayerHUD.fuelM">
            <summary>
                Normalized fuel amount (0.0 to 1.0) for fuel-based weapons like flamethrowers. Value
                of -1 indicates fuel display is not active. Updated by SetFuel() method and used to
                scale the fuel gauge sprite width. When fuel is displayed, grenade icons are hidden
                and this value determines the visual fill level of the fuel bar. Multiplied by
                fuelSpriteWidth and avatarFacingDirection to calculate actual display width.
            </summary>
        </member>
        <member name="F:PlayerHUD.fuelSprite">
            <summary>
                Sprite component for the fuel gauge bar displayed for fuel-based weapons. Initially
                configured in SetupFuelGuage() with anchor point based on HUD direction. Width is
                dynamically adjusted based on fuelM value to show remaining fuel. Color changes to
                red during fuel warning state. Hidden when player uses grenades instead of
                fuel-based weapons.
            </summary>
        </member>
        <member name="F:PlayerHUD.fuelSpriteHeight">
            <summary>
                Height of the fuel gauge sprite in pixels. Defaults to 10 pixels and can be
                overridden by the actual sprite height during Awake() if fuelSprite is assigned.
                Remains constant during gameplay while width varies with fuel level. Used in
                SetupFuelGuage() and SetFuel() to maintain consistent gauge dimensions.
            </summary>
        </member>
        <member name="F:PlayerHUD.fuelSpriteWidth">
            <summary>
                Base width of the fuel gauge sprite in pixels. Captured from fuelSprite.width during
                Awake() initialization. Used as the maximum width when calculating fuel gauge
                display size. Multiplied by fuelM (0-1) to show current fuel level, creating a
                visual bar that shrinks as fuel depletes.
            </summary>
        </member>
        <member name="F:PlayerHUD.fuelWarningTime">
            <summary>
                Timestamp when the fuel warning state was triggered, indicating low fuel. Used to
                control the duration of the red fuel gauge warning effect. When fuel runs low and
                the red parameter is true in SetFuel(), this is set to current time. The gauge
                flashes red for 0.25 seconds after this timestamp before returning to normal white
                color.
            </summary>
        </member>
        <member name="F:PlayerHUD.grenadeCount">
            <summary>
                Current number of grenades the player has remaining. Initialized to -1 to indicate
                unset state. Updated by SetGrenades() method and used by FlashSpecialIconsNormal()
                to determine which grenade icons to display. When set to 0, typically indicates the
                player is using fuel-based weapons instead of grenades. Controls visibility of
                grenade icon sprites in the HUD.
            </summary>
        </member>
        <member name="F:PlayerHUD.grenadeIcons">
            <summary>
                Array of sprites displaying available grenades or special ammo. Icons are
                shown/hidden based on current grenade count. Materials are swapped to match current
                bro's grenade type. Supports flashing effects for warnings. Hidden when fuel gauge
                is active. Positioned in a horizontal row with 10-unit spacing, starting 18 units
                from avatar (24 for double avatar mode).
            </summary>
        </member>
        <member name="F:PlayerHUD.grenadeOriginalCount">
            <summary>
                The initial number of grenades when starting a level or respawning. Defaults to 3,
                which is the standard grenade count for most bros. This value is used as a reference
                for resetting grenade counts and may be modified for specific characters or game
                modes that start with different grenade amounts.
            </summary>
        </member>
        <member name="F:PlayerHUD.haleIcon">
            <summary>
                Material for Hale The Bro's special ability icon. Used to display the shield special
                icon in the HUD when playing as Hale Caesar. Assigned to grenade icon slots when
                SetGrenadeMaterials is called with HeroType.HaleTheBro.
            </summary>
        </member>
        <member name="F:PlayerHUD.heroType">
            <summary>
                Stores the current hero type being displayed in the HUD. Updated by
                SwitchAvatarAndGrenadeMaterial() when changing characters. Used to track which bro's
                avatar and grenade icons are currently shown. Important for maintaining HUD state
                when switching between different playable characters.
            </summary>
        </member>
        <member name="F:PlayerHUD.indianaBronesIcon">
            <summary>
                Material for Indiana Brones' special ability icon. Used to display the whip special
                icon in the HUD when playing as Indiana Brones. Assigned to grenade icon slots when
                SetGrenadeMaterials is called with HeroType.IndianaBrones.
            </summary>
        </member>
        <member name="F:PlayerHUD.killCountText">
            <summary>
                Text mesh component for displaying player kill count or tags in certain game modes.
                Updated by the SetTags() method to show "TAGS [number]" format. May be null if the
                HUD variant doesn't include kill tracking. Positioned relative to the main HUD based
                on direction.
            </summary>
        </member>
        <member name="F:PlayerHUD.leeBroxIcon">
            <summary>
                Material for Lee Broxmas' special ability icon. Used to display the kick special
                icon in the HUD when playing as Lee Broxmas. Assigned to grenade icon slots when
                SetGrenadeMaterials is called with HeroType.LeeBroxmas.
            </summary>
        </member>
        <member name="F:PlayerHUD.livesText">
            <summary>
                Text mesh component displaying the player's remaining lives in campaign mode or
                round wins in competitive modes. Updated by SetLives() and SetWins() methods with
                localized text. Position and alignment are adjusted based on HUD direction and
                avatar mode.
            </summary>
        </member>
        <member name="F:PlayerHUD.mcBroverIcon">
            <summary>
                Material for McBrover's special ability icon. Used to display the turkey special
                icon in the HUD when playing as McBrover. Assigned to grenade icon slots when
                SetGrenadeMaterials is called with HeroType.McBrover.
            </summary>
        </member>
        <member name="F:PlayerHUD.mechDropIcon">
            <summary>
                Material containing a mech drop beacon icon. While defined in the class, this icon
                is not currently used in any hero or special ammo type switch statements. Likely
                intended for a mech-summoning special ability or power-up that was not fully
                implemented.
            </summary>
        </member>
        <member name="F:PlayerHUD.nameBackground">
            <summary>
                Sprite background for the player name display in online multiplayer modes. Wider
                than noNameBackground to accommodate player names. Only visible when not in offline
                mode. Position is flipped for odd-numbered players to maintain consistent corner
                layouts. Used to calculate spacing offsets for other UI elements.
            </summary>
        </member>
        <member name="F:PlayerHUD.nameText">
            <summary>
                Text mesh displaying the player's name in uppercase for online multiplayer. Hidden
                in offline mode. Text alignment and anchor point depend on HUD direction:
                left-aligned for right-side players, right-aligned for left-side players. Updated in
                LateUpdate if empty. Position adjusted for double avatar mode with extra spacing.
            </summary>
        </member>
        <member name="F:PlayerHUD.nebroIcon">
            <summary>
                Material for Nebro's special ability icon. Used to display the sword special icon in
                the HUD when playing as Nebro (The Matrix). Assigned to grenade icon slots when
                SetGrenadeMaterials is called with HeroType.Nebro.
            </summary>
        </member>
        <member name="F:PlayerHUD.noNameBackground">
            <summary>
                Sprite background used when player names are not displayed (offline mode). Smaller
                than nameBackground since it doesn't need to accommodate text. Position is flipped
                for odd-numbered players. Used as the reference size for the player color frame
                overlay. Always visible in offline modes.
            </summary>
        </member>
        <member name="F:PlayerHUD.originalLowerLeftPixel">
            <summary>
                Stores the original lower left pixel coordinates of the avatar sprite. Used to
                restore the avatar to its default sprite sheet position after temporary
                modifications (such as face hugger overlay or special frames).
            </summary>
        </member>
        <member name="F:PlayerHUD.originalPixelDimensions">
            <summary>
                Stores the original pixel dimensions of the avatar sprite. Used to restore the
                avatar to its default size after temporary modifications (such as special frames
                that use different sprite sizes).
            </summary>
        </member>
        <member name="F:PlayerHUD.pipContainer">
            <summary>
                Container GameObject for "pip" indicators, likely used for showing player input
                device or connection status dots. Positioned with slight offset from controller
                container: X at ±99.5 (based on HUD side), Y at -8.5, Z at -2. Deactivated during
                Setup() and intended for showing small indicator elements. The term "pip" typically
                refers to small dots or markers in UI design.
            </summary>
        </member>
        <member name="F:PlayerHUD.pipSprites">
            <summary>
                Array of small indicator sprites (pips) for displaying connection or device status.
                Each sprite can represent different states through visibility or color changes.
                Contained within pipContainer and positioned as a group. Currently unused in
                implementation but structure suggests use for showing multiple state indicators in a
                row, such as controller connection lights.
            </summary>
        </member>
        <member name="F:PlayerHUD.playerFrame">
            <summary>
                Colored frame overlay that surrounds the player's HUD background. Tinted with the
                player's assigned color (set via SetColor) to visually distinguish between players.
                Sized to be slightly larger than the background sprite with playerBorderPadding
                added. Positioned to match either nameBackground or noNameBackground depending on
                online/offline mode.
            </summary>
        </member>
        <member name="F:PlayerHUD.plusText">
            <summary>
                Plus1Text component for displaying pickup notifications and score bonuses. Setup
                called during HUD initialization. Position varies based on HUD direction: x=36 for
                right-facing HUDs, x=-13 for left-facing HUDs. Always positioned at y=12.7, z=-4 to
                appear above other HUD elements.
            </summary>
        </member>
        <member name="F:PlayerHUD.predabroIcon">
            <summary>
                Material containing the grenade icon sprite for Predabro. Applied when hero type is
                Predabro via SetGrenadeMaterials(). Features alien technology-themed explosive icon
                matching the Predator-inspired character's advanced weaponry aesthetic.
            </summary>
        </member>
        <member name="F:PlayerHUD.rambroIcon">
            <summary>
                Material containing the grenade icon sprite for Rambro. Used as the default grenade
                icon material when hero type is not specifically handled. Applied to all grenade
                icon sprites via SetGrenadeMaterials(). Contains the standard grenade sprite used by
                the original Rambo-inspired character.
            </summary>
        </member>
        <member name="F:PlayerHUD.scorpionBroIcon">
            <summary>
                Material containing the grenade icon sprite for Scorpion Bro. Applied when hero type
                is ScorpionBro via SetGrenadeMaterials(). Features ninja or hellfire-themed
                explosive icon matching the Mortal Kombat-inspired character's supernatural
                abilities.
            </summary>
        </member>
        <member name="F:PlayerHUD.secondAvatar">
            <summary>
                Secondary avatar sprite used for two-player bros like the Boondock Bros. Hidden by
                default and only activated via GoToDoubleAvatarMode(). Positioned 12 units
                horizontally and 2 units below the primary avatar. Supports same expression states
                as primary avatar. Deactivated when switching to single-character bros.
            </summary>
        </member>
        <member name="F:PlayerHUD.seedText">
            <summary>
                Text mesh displaying the procedural generation seed in test builds. Shows "Seed:
                [number]" format when ProcGenGameMode.ProcGenTestBuild is true. Hidden and
                deactivated in non-test builds. Used for debugging and reproducing specific
                procedurally generated levels during development.
            </summary>
        </member>
        <member name="F:PlayerHUD.showFaceHugger">
            <summary>
                Controls whether the face hugger overlay sprite is displayed on the avatar. When
                true, an additional sprite is rendered over the avatar. Set to false by
                HideFaceHugger() and SetAvatar() methods.
            </summary>
        </member>
        <member name="F:PlayerHUD.snakeIcon">
            <summary>
                Material for Snake Broskin's special ability icon. Used to display the cardboard box
                special icon in the HUD when playing as Snake Broskin. Assigned to grenade icon
                slots when SetGrenadeMaterials is called with HeroType.SnakeBroSkin.
            </summary>
        </member>
        <member name="F:PlayerHUD.steroids">
            <summary>
                Material containing the special ammo icon for Steroids. Applied when special ammo
                type is Steroids via SetGrenadeMaterials() in SetPockettedSpecialAmmo(). Shows a
                strength-enhancing themed icon for this power-up ammunition that boosts character
                abilities.
            </summary>
        </member>
        <member name="F:PlayerHUD.tankBroIcon">
            <summary>
                Material containing the grenade icon sprite for Tank Bro. Applied when hero type is
                TankBro via SetGrenadeMaterials(). Features military tank-themed explosive icon for
                the vehicle-based character's standard grenade form.
            </summary>
        </member>
        <member name="F:PlayerHUD.tankBroTankIcon">
            <summary>
                Material containing the grenade icon sprite for Tank Bro's tank form. Applied when
                hero type is TankBroTank via SetGrenadeMaterials(). Shows heavy ordnance or tank
                shell icon representing the transformed state's more powerful explosive capability.
            </summary>
        </member>
        <member name="F:PlayerHUD.textBackground">
            <summary>
                Background sprite for the lives/wins text display area. Width is flipped negative
                for left-facing HUDs to mirror the sprite. Positioned at x=32 (right-facing) or
                x=-32 (left-facing) from avatar. Provides contrast background for lives and name
                text. Size remains constant but orientation changes based on HUD direction.
            </summary>
        </member>
        <member name="F:PlayerHUD.theBrodeIcon">
            <summary>
                Material containing the grenade icon sprite for The Brode. Applied when hero type is
                TheBrode via SetGrenadeMaterials(). Features unique grenade artwork themed to match
                The Dude character from The Big Lebowski, typically showing bowling-themed explosive
                imagery.
            </summary>
        </member>
        <member name="F:PlayerHUD.theBrofessionalIcon">
            <summary>
                Material containing the grenade icon sprite for The Brofessional. Applied when hero
                type is TheBrofessional via SetGrenadeMaterials(). Contains precise,
                professional-looking explosive icon matching the Leon/The Professional-inspired
                character's methodical style.
            </summary>
        </member>
        <member name="F:PlayerHUD.theBrolanderIcon">
            <summary>
                Material containing the grenade icon sprite for The Brolander. Applied when hero
                type is TheBrolander via SetGrenadeMaterials(). Contains immortal-themed explosive
                icon matching the Highlander-inspired character's eternal warrior nature.
            </summary>
        </member>
        <member name="F:PlayerHUD.timebroIcon">
            <summary>
                Material for Time Bro's special ability icon. Used to display the time slow special
                icon in the HUD when playing as Time Bro Van Damme. Assigned to grenade icon slots
                when SetGrenadeMaterials is called with HeroType.TimeBroVanDamme.
            </summary>
        </member>
        <member name="F:PlayerHUD.tollBroadIcon">
            <summary>
                Material for Toll Broad's special ability icon. Used to display the explosive
                special icon in the HUD when playing as Toll Broad. Assigned to grenade icon slots
                when SetGrenadeMaterials is called with HeroType.TollBroad.
            </summary>
        </member>
        <member name="F:PlayerHUD.trentIcon">
            <summary>
                Material for Trent Broser's special ability icon. Used to display the knife throw
                special icon in the HUD when playing as Trent Broser. Assigned to grenade icon slots
                when SetGrenadeMaterials is called with HeroType.TrentBroser.
            </summary>
        </member>
        <member name="F:PlayerHUD.xebroIcon">
            <summary>
                Material containing the grenade icon sprite for Xebro. Applied when hero type is
                Xebro via SetGrenadeMaterials(). Shows alien-themed explosive icon matching the
                xenomorph-inspired character's extraterrestrial nature.
            </summary>
        </member>
        <!-- Perk System Methods -->
        <member name="M:PlayerHUD.AddPerkToHUD(Assets.Scripts.Rogueforce.PerkSystem.BasePerk)">
            <summary>
                Adds a perk icon to the HUD display or increments the counter if the perk already
                exists. For duplicate perks, shows multiplier text (x2, x3, etc.). For active perks,
                displays kill progress (e.g., "2/5"). Creates new perk UI element from prefab, sets
                the appropriate icon material, adds to perk list, and refreshes the display ordering
                to ensure active perks appear first.
            </summary>
            <param name="perkData">The perk data containing name, icon material, and type information</param>
            <returns>The GameObject representing the perk in the HUD (either newly created or existing)</returns>
        </member>
        <member name="M:PlayerHUD.DoesPerkAlreadyExistOnHUD(System.String)">
            <summary>
                Searches the current perk UI items list to find if a perk with the specified name
                already exists in the HUD. Used to prevent duplicate perk icons and instead
                increment counters on existing ones.
            </summary>
            <param name="name">The name of the perk to search for</param>
            <returns>The GameObject of the existing perk if found, null if not present in HUD</returns>
        </member>
        <member name="M:PlayerHUD.RefreshPerkOrdering">
            <summary>
                Reorganizes perk icons in the HUD to maintain consistent ordering. Active perks
                (those showing kill progress with "/" in their text) are moved to the front of the
                display. Updates local positions of all perk icons with appropriate spacing, with
                active perks getting additional negative X offset (-12) to visually distinguish them
                from passive perks.
            </summary>
        </member>
        <member name="M:PlayerHUD.RemovePerkFromHUD(Assets.Scripts.Rogueforce.PerkSystem.BasePerk)">
            <summary>
                Removes a perk from the HUD display or decrements its counter if multiple instances
                exist. For single instances or active perks, completely removes the icon and
                destroys the GameObject. For stacked perks showing multipliers, decrements the
                counter (x3 becomes x2, x2 becomes empty text). Refreshes perk ordering after
                removal to maintain proper layout.
            </summary>
            <param name="perk">The perk to remove, must have its iconObject field set to the HUD GameObject</param>
        </member>
        <!-- Perk System Fields -->
        <member name="F:PlayerHUD.distBetweenPerks">
            <summary>
                Horizontal spacing distance between perk icons in the HUD display. Used by
                RefreshPerkOrdering() to position perks in a row. Active perks (showing kill
                progress) get an additional -12 unit offset. Multiplied by the child index to create
                evenly spaced perk icon layout.
            </summary>
        </member>
        <member name="F:PlayerHUD.perkHUDParent">
            <summary>
                Transform serving as the parent container for all perk icon GameObjects in the HUD.
                Child perk objects are instantiated under this transform by AddPerkToHUD(). Used for
                organizing the perk display hierarchy and managing perk icon positioning through
                RefreshPerkOrdering().
            </summary>
        </member>
        <member name="F:PlayerHUD.perkHUDPrefab">
            <summary>
                Prefab template for creating perk icon displays in the HUD. Instantiated by
                AddPerkToHUD() for each unique perk. Contains MeshRenderer for the perk icon
                material and TextMesh for showing stack counts (x2, x3) or kill progress (2/5).
                Cloned instances are named after their perk type.
            </summary>
        </member>
        <member name="F:PlayerHUD.perkUIItems">
            <summary>
                Dynamic list of GameObjects representing active perk icons displayed in the HUD.
                Each GameObject contains the perk icon sprite and optional counter text for
                kill-based perks. Items are added by AddPerkToHUD() when perks are acquired and
                removed by RemoveKillBasedPerkFromHUD() when perks expire or are used. List is
                reordered by RefreshPerkOrdering() to prioritize active perks with counters.
                Initialized as empty list to avoid null reference issues.
            </summary>
        </member>
        <!-- Special Effects & Feedback Methods -->
        <member name="M:PlayerHUD.FlashAvatar(System.Single,System.Boolean)">
            <summary>
                Starts a coroutine to flash the avatar sprite with alternating tint colors. Only
                executes if the HUD GameObject is active in the hierarchy. Typically used for visual
                feedback when gaining extra lives or taking damage.
            </summary>
            <param name="flashTime">Duration in seconds for the flashing effect</param>
            <param name="primaryAvatar">True to flash the main avatar, false to flash the secondary avatar (for two-player bros)</param>
        </member>
        <member name="M:PlayerHUD.FlashAvatarCoroutine(System.Single,System.Boolean)">
            <summary>
                Coroutine that performs the avatar flashing effect by cycling through different tint
                colors on the avatar's material. Alternates between dark grey (0.33), medium grey
                (default), light grey (0.7), and back to medium grey in 0.033-second intervals
                (roughly 30 FPS). Continues cycling until the specified flash time expires.
            </summary>
            <param name="flashTime">Total duration to flash the avatar in seconds</param>
            <param name="primaryAvatar">True to flash the main avatar renderer, false for secondary avatar</param>
            <returns>IEnumerator for coroutine execution</returns>
        </member>
        <member name="M:PlayerHUD.FlashSpecialIcons">
            <summary>
                Initiates a timed sequence to flash the grenade/special icons as a visual warning or
                feedback effect. Uses Invoke to schedule a pattern of red and normal color states
                over 1.1 seconds: red at 0.001s, normal at 0.2s, red at 0.4s, normal at 0.6s, red at
                0.8s, and finally normal at 1.0s and 1.1s. Commonly used when special ammo is
                depleted or unavailable.
            </summary>
        </member>
        <member name="M:PlayerHUD.FlashSpecialIconsDisappear">
            <summary>
                Immediately hides all grenade icons by deactivating their GameObjects. Used as part
                of special move animations or when transitioning between different special ammo
                types.
            </summary>
        </member>
        <member name="M:PlayerHUD.FlashSpecialIconsNormal">
            <summary>
                Restores grenade icons to their normal display state based on current grenade count.
                Shows icons for available grenades in white color and hides icons for used grenades.
                Ensures all icons are properly colored white whether visible or hidden.
            </summary>
        </member>
        <member name="M:PlayerHUD.FlashSpecialIconsRed">
            <summary>
                Sets all grenade icons to red color as part of the flashing sequence. In procedural
                generation mode, shows up to 6 icons; otherwise shows icons up to the original
                grenade count. Hides any icons beyond the limit and ensures hidden icons are reset
                to white color for future use.
            </summary>
        </member>
        <!-- Special Effects & Feedback Fields -->
        <member name="F:PlayerHUD.isUsingSpecialFrame">
            <summary>
                Flag indicating whether a special avatar animation is currently playing. Set to true
                by UseSpecialAvatarFrame() when starting victory animations or other special
                sequences. When true, LateUpdate() handles animation frame progression and timing.
                Set to false by StopUsingSpecialFrame() when animation completes or is interrupted.
                Controls which sprite sheet region is used for avatar display.
            </summary>
        </member>
        <member name="F:PlayerHUD.specialCounter">
            <summary>
                Frame timing accumulator for special avatar animations. Incremented by deltaTime
                each frame while special animation plays. When it exceeds 0.033 seconds
                (approximately 30 FPS), advances to the next animation frame and resets the counter.
                Ensures special animations play at consistent speed regardless of actual game
                framerate. Only used when isUsingSpecialFrame is true and specialFrame is less than
                5.
            </summary>
        </member>
        <member name="F:PlayerHUD.specialFrame">
            <summary>
                Current frame index (0-5) in the special avatar animation sequence. Reset to 0 when
                starting a new special animation via UseSpecialAvatarFrame(). Incremented in
                LateUpdate() based on specialCounter timing. Passed to SetAvatarFrame() to update
                the sprite's texture coordinates. Animation stops advancing after reaching frame 5,
                holding on the final frame until specialFrameTime expires.
            </summary>
        </member>
        <member name="F:PlayerHUD.specialFrameTime">
            <summary>
                Duration in seconds for special avatar animations like victory poses. Set when
                UseSpecialAvatarFrame() is called to trigger a special animation sequence.
                Decremented each frame in LateUpdate() while animation plays. When it reaches zero
                or below, StopUsingSpecialFrame() is called to restore the normal avatar display.
                Public to allow external systems to trigger timed avatar animations.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:PlayerHUD.SetGrenadeMaterials(UnityEngine.Material)">
            <summary>
                Sets all grenade icon sprites to use the same material. Applies the material to the
                renderer component of each grenade icon in the array. Used internally by the public
                SetGrenadeMaterials methods to apply the chosen icon material to all grenade slots.
            </summary>
            <param name="mat">The material to apply to all grenade icons</param>
        </member>
        <member name="M:PlayerHUD.SetGrenadeOffset(System.Single)">
            <summary>
                Applies a horizontal offset to all grenade icons, used for certain characters whose
                grenade icons need special positioning. Even-numbered players apply positive offset,
                odd-numbered players apply negative offset to maintain visual consistency with their
                HUD side. The offset is applied to all grenade icons in the doubleBroGrenades array
                length.
            </summary>
            <param name="offset">Pixel offset to apply (positive moves right, negative moves left)</param>
        </member>
        <member name="M:PlayerHUD.SetPosition">
            <summary>
                Calculates and sets the HUD position based on current screen dimensions and camera
                settings. Positions are determined by player number: player 0 at bottom-left, player
                1 at bottom-right, player 2 at top-left, player 3 at top-right. Takes into account
                camera rect height, screen aspect ratio, level title offset for bottom HUDs, and
                updates the direction field to control sprite facing (-1 for right side players).
                Caches current screen and camera values to detect when repositioning is needed.
            </summary>
        </member>
        <member name="M:PlayerHUD.SetSpacing(System.Boolean)">
            <summary>
                Adjusts UI element spacing and alignment based on avatar mode and HUD direction. In
                online mode, accounts for wider name background. For right-facing HUDs: positions
                elements to the right with left alignment. For left-facing HUDs: positions elements
                to the left with right alignment and flips background sprite. Double avatar mode
                adds extra spacing to text elements. Updates positions for text background, lives
                text, name text, controller indicator, pip container, plus text, and grenade icons.
            </summary>
            <param name="doubleAvatar">True when displaying two avatars, increases spacing between elements</param>
        </member>
        <member name="M:PlayerHUD.UpdateControllerInfo">
            <summary>
                Updates controller-related information for the HUD. Currently only checks if the
                player ID belongs to the local player before performing any updates. Implementation
                appears incomplete as the method returns immediately after the ownership check.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:PolymorphicAI.Awake">
            <summary>
                Unity Awake initialization. Caches references to the Unit, Mook, and PathAgent
                components. Calculates the block offset for grid-to-world position conversions using
                Map.GetUnitXOffset().
            </summary>
        </member>
        <member name="M:PolymorphicAI.InitialSetup">
            <summary>
                Performs initial AI setup including grid point calculation and special state
                initialization.
            </summary>
            <remarks>
                Converts the unit's world position to grid coordinates, sets up available patrol
                grid points, and checks if mooks should hide in grass at their spawn position. This
                method is typically called once when the AI is first activated.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.LateUpdate">
            <summary>
                Unity's LateUpdate handling action queue execution and network synchronization.
            </summary>
            <remarks>
                Shows debug info if enabled, runs the action queue processing, and handles network
                synchronization of AI state. Only syncs when the action queue has changed and the
                unit owns the AI. Sends the entire action queue, mental state, position, seen enemy
                number, and action state to other players.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.SetDeltaTime">
            <summary>
                Calculates and sets the delta time multiplier for AI updates. In normal mode,
                multiplies Time.deltaTime by 2.5 for faster AI processing. In hard mode, uses
                unmodified Time.deltaTime for standard speed AI.
            </summary>
        </member>
        <member name="M:PolymorphicAI.UnitCanSetup">
            <summary>
                Determines if the unit is in a valid state to perform initial setup. By default,
                requires the unit to be on ground.
            </summary>
            <returns>True if the unit is on ground and can be set up, false otherwise</returns>
            <remarks>
                This method is typically checked before InitialSetup is called to ensure the unit is
                in a stable state.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.Update">
            <summary>
                Unity Update loop that drives AI behavior. Skips processing if editing, dead, or
                idle units are off-screen. On first frame, calls InitialSetup. Adjusts time delta
                for hard mode (2.5x speed). Calls Think_Networked when ready to think and not being
                controlled by triggers.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:PolymorphicAI.firstFrame">
            <summary>
                Flag indicating if this is the first frame of execution. Set to false after the
                first Update cycle to handle one-time initialization logic.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:PolymorphicAI.ForceFacingDirection(System.Int32)">
            <summary>
                Forces the controlled unit to face a specific direction by calling the unit's
                ForceFaceDirection method. This immediately changes the unit's orientation.
            </summary>
            <param name="direction">The direction to face (1 for right, -1 for left)</param>
        </member>
        <member name="M:PolymorphicAI.GetTargetPosition">
            <summary>
                Gets the target position for this AI to move towards. Virtual method that derived
                classes must implement to provide specific targeting behavior.
            </summary>
            <returns>The world position coordinates of the current target. Base implementation throws NotImplementedException.</returns>
        </member>
        <member name="M:PolymorphicAI.GetTargetX(GridPoint)">
            <summary>
                Converts a grid column coordinate to world X position by multiplying the column by
                16 and adding the block offset. Used for pathfinding and movement calculations.
            </summary>
            <param name="target">The grid point containing the column coordinate</param>
            <returns>The world X position corresponding to the grid column</returns>
        </member>
        <member name="M:PolymorphicAI.GetTargetY(GridPoint)">
            <summary>
                Converts a grid row coordinate to world Y position by multiplying the row by 16 and
                adding 12 units. This positions units slightly above the ground level of the grid
                cell.
            </summary>
            <param name="target">The grid point containing the row coordinate</param>
            <returns>The world Y position corresponding to the grid row</returns>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:PolymorphicAI.FacingDirection">
            <summary>
                Gets the current facing direction of the unit this AI controls. For tank units,
                returns the tank's facingDirection field. For all other units, returns the sign of
                the transform's local scale X component (1 for right, -1 for left).
            </summary>
            <returns>The facing direction as an integer (1 for right, -1 for left)</returns>
        </member>
        <member name="P:PolymorphicAI.UnitHalfWidth">
            <summary>
                Gets half the width of the controlled unit, used for movement calculations and
                collision checks. Returns the mook's HalfWidth property if available, otherwise
                defaults to 4.0 units.
            </summary>
            <returns>Half the width of the unit in world units</returns>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:PolymorphicAI.blockOffset">
            <summary>
                X-axis offset used when converting grid positions to world coordinates. Initialized
                from Map.GetUnitXOffset() to ensure proper alignment with the game's grid system.
            </summary>
        </member>
        <member name="F:PolymorphicAI.lastCollumn">
            <summary>
                The column position of the AI from the previous frame. Used with lastRow to detect
                if the AI is stuck in the same position, triggering timeout behavior after 2
                seconds.
            </summary>
        </member>
        <member name="F:PolymorphicAI.lastRow">
            <summary>
                The row position of the AI from the previous frame. Used with lastCollumn to detect
                if the AI is stuck in the same position, triggering timeout behavior after 2
                seconds.
            </summary>
        </member>
        <member name="F:PolymorphicAI.walkDirection">
            <summary>
                The current horizontal movement direction of the AI. -1 for left, 1 for right. Used
                for movement, facing direction, and sight checks. Updated when the AI changes
                direction or sees enemies. Default is -1.
            </summary>
        </member>
        <!-- Character State & Effects Methods -->
        <member name="M:PolymorphicAI.AddLaughAction">
            <summary>
                Adds a sequence of actions to make the AI laugh at a dead player. Includes staggered
                timing based on laugh index, laugh animation, waiting, and looking around to ensure
                other threats aren't present.
            </summary>
        </member>
        <member name="M:PolymorphicAI.GetActionGridPoint">
            <summary>
                Returns the target grid point of the current action, or (-1, -1) if no action is
                active.
            </summary>
            <returns>The GridPoint associated with the current action, or a GridPoint with coordinates (-1, -1) if CurrentAction is null</returns>
        </member>
        <member name="M:PolymorphicAI.GetActionType">
            <summary>
                Returns the type of the current action being executed by the AI, or Wait if no
                action is active.
            </summary>
            <returns>The EnemyActionType of the current action, or EnemyActionType.Wait if CurrentAction is null</returns>
        </member>
        <member name="M:PolymorphicAI.HideInGrass">
            <summary>
                Makes the AI hide in grass or foliage. Clears the action queue, adds a wait action
                with random duration (1-2 seconds), and sets mental state to Hiding.
            </summary>
        </member>
        <member name="M:PolymorphicAI.JumpOutOfHiding">
            <summary>
                Makes the AI jump out of hiding dramatically when alerted. Adds a short jump action
                followed by a 1-1.1 second wait to create a surprise emergence effect.
            </summary>
        </member>
        <member name="M:PolymorphicAI.Panic(System.Int32,System.Boolean)">
            <summary>
                Makes the AI panic and flee in a specified direction. Clears actions if changing
                direction, plays panic sound, sets Panicking state, and optionally forgets the
                player. Returns true if panic was initiated.
            </summary>
            <param name="direction">The direction to panic in (-1 for left, 1 for right)</param>
            <param name="forgetPlayer">Whether to forget the currently tracked player</param>
            <returns>True if the AI started panicking, false if already panicking</returns>
        </member>
        <member name="M:PolymorphicAI.StopBeingBlind">
            <summary>
                Stops the AI from being blinded and returns to normal behavior. If alerted, adds
                BecomeIdle action; if panicking, calls StopPanicking to return to normal state.
            </summary>
        </member>
        <member name="M:PolymorphicAI.StopPanicking">
            <summary>
                Stops the AI from panicking and returns to appropriate state. Calls Reassess, clears
                actions, and switches to Idle if no player is tracked or Alerted if still tracking a
                player.
            </summary>
        </member>
        <!-- Character State & Effects Properties -->
        <member name="P:PolymorphicAI.CurrentAction">
            <summary>
                Gets the action currently being executed from the action queue. Returns the first
                action in the queue if any exist, otherwise returns null. This represents what the
                AI is actively doing.
            </summary>
            <returns>The current ActionObject being executed, or null if the queue is empty</returns>
        </member>
        <member name="P:PolymorphicAI.ReadyToThink">
            <summary>
                Gets whether the AI is ready to make new decisions. By default, returns true when
                the action queue is empty, indicating no actions are pending execution. Can be
                overridden for custom thinking conditions.
            </summary>
            <returns>True if ready to think and plan new actions, false otherwise</returns>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:PolymorphicAI.attackTime">
            <summary>
                Duration in seconds for the Fire action when attacking. Default value is 0.06
                seconds.
            </summary>
        </member>
        <member name="F:PolymorphicAI.delayBetweenFiring">
            <summary>
                Wait time in seconds between consecutive firing actions. Default value is 0.55
                seconds. Added as a Wait action after movement during alerted state.
            </summary>
        </member>
        <member name="F:PolymorphicAI.sightDelay">
            <summary>
                Delay in seconds before reacting to seeing an enemy. Default value is 0.55 seconds.
                Currently not actively used in the base implementation.
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:PolymorphicAI.CheckJumpOverStep">
            <summary>
                Virtual method stub for checking if the AI should jump over an obstacle. The base
                implementation is empty, allowing derived classes to implement specific
                jump-over-step logic.
            </summary>
        </member>
        <member name="M:PolymorphicAI.FetchObject(UnityEngine.Transform)">
            <summary>
                Virtual method stub for object fetching behavior. The base implementation is empty,
                allowing derived classes to implement specific object fetching logic.
            </summary>
            <param name="obj">The transform of the object to fetch (unused in base implementation)</param>
        </member>
        <member name="M:PolymorphicAI.GetNewGridPoint">
            <summary>
                Selects a new grid point from available patrol points, avoiding the current position
                when possible.
            </summary>
            <returns>A randomly selected GridPoint from availableGridPoints that differs from the current position, or the current position if no alternatives exist</returns>
            <remarks>
                Attempts up to 3 times the number of available points to find a position different
                from the current one. Falls back to iterating through all points if random selection
                fails. Returns current position if only one point is available.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.IsBlockedForward">
            <summary>
                Checks if the AI's forward movement is blocked by terrain using raycasting. Casts a
                ray from slightly behind the unit's position in the walk direction to detect ground
                or fragile layer obstacles within the unit's width plus a small buffer.
            </summary>
            <returns>True if forward movement is blocked by terrain, false if the path is clear or if the unit is not a mook</returns>
        </member>
        <member name="M:PolymorphicAI.IsGridPointAvailable(System.Int32,System.Int32)">
            <summary>
                Checks if a grid position is available for the AI to move to. Always returns true
                when panicking (ignoring patrol boundaries). Otherwise checks if the coordinates
                exist in the availableGridPoints list established during setup.
            </summary>
            <param name="c">The column coordinate to check</param>
            <param name="r">The row coordinate to check</param>
            <returns>True if the position is available for movement, false otherwise</returns>
        </member>
        <member name="M:PolymorphicAI.RandomFurthestGridPoint(GridPoint)">
            <summary>
                Selects a random grid point that is far from the specified position, preferring
                points at least 2 columns away.
            </summary>
            <param name="currentGridPoint">The grid point to move away from</param>
            <returns>A GridPoint that is preferably far from currentGridPoint, or a random point if no distant points exist</returns>
            <remarks>
                Tries up to 2 times the number of available points to find a point at least 2
                columns away. If that fails but there are 3+ points, it looks for any point in a
                different column. Falls back to random selection if no better option is found.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.SetupAvailableGridPoints">
            <summary>
                Populates the available grid points list based on patrol radius and terrain
                walkability.
            </summary>
            <remarks>
                Scans left and right from the unit's current position up to patrolBlocksRadius
                blocks away. Only includes points that have solid ground below and open space above
                (unless willClimbThroughVents is true). Points to the left are inserted at the
                beginning of the list while points to the right are appended.
            </remarks>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:PolymorphicAI.availableGridPoints">
            <summary>
                List of grid points that are available for movement. Used when calculating patrol
                routes or finding valid movement destinations.
            </summary>
        </member>
        <member name="F:PolymorphicAI.patrolBlocksRadius">
            <summary>
                Controls how far the AI can patrol from its current position in blocks. Used in
                CheckPatrolBlocks to determine available grid points. Values range from 1-5, with
                larger values allowing the AI to patrol further. Default is 2.
            </summary>
        </member>
        <member name="F:PolymorphicAI.willClimbThroughVents">
            <summary>
                Determines whether the AI can climb through vents when calculating available patrol
                points. When true, the AI can move through positions that have blocks above them
                (vents), otherwise it avoids such positions.
            </summary>
        </member>
        <!-- AI Awareness Methods -->
        <member name="M:PolymorphicAI.Alert(System.Single,System.Single,System.Boolean)">
            <summary>
                Method stub that throws NotImplementedException. Appears to be an unimplemented
                alert system that would have taken position coordinates and an instant bubble
                display flag.
            </summary>
            <param name="alertX">X coordinate of the alert position (unused)</param>
            <param name="alertY">Y coordinate of the alert position (unused)</param>
            <param name="showBubbleInstantly">Whether to show the alert bubble immediately (unused)</param>
        </member>
        <member name="M:PolymorphicAI.Attract(System.Single,System.Single)">
            <summary>
                Attracts the AI to a specific world position, typically used for distractions. Sets
                the attraction point, clears current actions, forgets any tracked player, adds a
                random wait, and switches to Attracted mental state.
            </summary>
            <param name="xTarget">The X world coordinate to be attracted to</param>
            <param name="yTarget">The Y world coordinate to be attracted to</param>
        </member>
        <member name="M:PolymorphicAI.Blind">
            <summary>
                Blinds the AI for a random duration between 1-1.85 seconds. Clears the action queue,
                forgets any seen enemy, adds a wait action, and sets mental state to Alerted.
            </summary>
        </member>
        <member name="M:PolymorphicAI.Blind(System.Single)">
            <summary>
                Blinds the AI for a specific duration. Clears the action queue, forgets any seen
                enemy, adds a wait action for the specified time, and sets mental state to Alerted.
            </summary>
            <param name="time">The duration in seconds to remain blinded</param>
        </member>
        <member name="M:PolymorphicAI.CanSeeEnemyThisWay(System.Int32)">
            <summary>
                Checks if the AI can see an enemy in the specified direction. First attempts to
                detect players using HeroController visibility checks, then checks for NPC enemy
                units using Map visibility checks. Updates the seenEnemyNum field when an enemy is
                detected.
            </summary>
            <param name="direction">The direction to check for enemies (-1 for left, 1 for right)</param>
            <returns>True if an enemy is visible in the specified direction, false otherwise</returns>
        </member>
        <member name="M:PolymorphicAI.FaceDirectionWhileAlerted(System.Single,System.Single)">
            <summary>
                Makes the AI face toward a specific position while in an alerted state. Sets walk
                direction toward the target and adds actions to face the point and wait briefly
                before continuing.
            </summary>
            <param name="alertX">The X world coordinate to face toward</param>
            <param name="alertY">The Y world coordinate to face toward</param>
        </member>
        <member name="M:PolymorphicAI.ForceFullyAlert">
            <summary>
                Forces the AI to become fully alerted to the nearest player within range. Searches
                for players within 256 units and calls FullyAlert with the nearest player's position
                if found.
            </summary>
        </member>
        <member name="M:PolymorphicAI.ForgetPlayer">
            <summary>
                Makes the AI forget the currently tracked player. Sets seenEnemyNum to -10 (no
                player) and adds a BecomeIdle action if currently in Alerted state.
            </summary>
        </member>
        <member name="M:PolymorphicAI.FullyAlert(System.Single,System.Single,System.Int32)">
            <summary>
                Fully alerts the AI to a player's presence at a specific position. If hiding, jumps
                out dramatically; otherwise shows greeting reaction, faces the player, and enters
                Alerted state with appropriate reaction time delay.
            </summary>
            <param name="x">The X world coordinate of the detected player</param>
            <param name="y">The Y world coordinate of the detected player</param>
            <param name="playerNum">The player number that was detected</param>
        </member>
        <member name="M:PolymorphicAI.GetPlayerRange(System.Single@,System.Single@)">
            <summary>
                Calculates the distance to the currently tracked enemy player if one exists. Sets
                the horizontal distance (absolute value) and vertical distance (can be negative)
                from the mook to the tracked player.
            </summary>
            <param name="xRange">Output parameter for horizontal distance to the player</param>
            <param name="yRange">Output parameter for vertical distance to the player (positive if player is above)</param>
            <returns>True if a player is being tracked and range was calculated, false otherwise</returns>
        </member>
        <member name="M:PolymorphicAI.GetSeenPlayerNum">
            <summary>
                Gets the player number of the enemy unit currently being tracked by this AI. Returns
                -10 if no enemy is currently seen or tracked. Used for targeting and alert state
                management.
            </summary>
            <returns>The player number of the seen enemy, or -10 if no enemy is tracked</returns>
        </member>
        <member name="M:PolymorphicAI.GreetPlayer">
            <summary>
                Makes the AI unit greet the player when first spotting them. If the mook can speak,
                plays a greeting sound and displays an exclamation bubble. Part of the alert
                behavior when transitioning from unaware to alerted state.
            </summary>
        </member>
        <member name="M:PolymorphicAI.HearSilencedSound">
            <summary>
                Responds to hearing a silenced weapon sound. If not already alerted and no question
                mark is queued, clears actions and adds a question mark reaction with wait times to
                simulate investigation behavior.
            </summary>
        </member>
        <member name="M:PolymorphicAI.HearSound(System.Single,System.Single)">
            <summary>
                Responds to hearing a loud sound at a specific position. Behavior varies by mental
                state: when hiding, shows a question mark; when idle, becomes suspicious and faces
                the sound source; when already suspicious/alerted, may turn to face if sound is
                behind them.
            </summary>
            <param name="alertX">The X world coordinate of the sound source</param>
            <param name="alertY">The Y world coordinate of the sound source</param>
        </member>
        <member name="M:PolymorphicAI.HideSpeachBubbles">
            <summary>
                Hides both the exclamation mark and question mark speech bubbles by deactivating
                their game objects. Used to clear visual indicators when they are no longer needed.
            </summary>
        </member>
        <member name="M:PolymorphicAI.IncrementLastAlertedTime">
            <summary>
                Ensures the last alerted time is set to at least 1 second. Used to maintain a
                minimum alert duration when the AI becomes aware of threats.
            </summary>
        </member>
        <member name="M:PolymorphicAI.LaughAtPlayer">
            <summary>
                Makes the AI unit laugh at the player, typically when the player dies. Only executes
                if the mook can both speak and laugh. Plays a laughter sound and displays an
                exclamation bubble.
            </summary>
        </member>
        <member name="M:PolymorphicAI.LookForEnemy">
            <summary>
                Actively searches for enemies based on the AI's current mental state. When not
                hiding, checks for players and NPC enemies in the facing direction within sight
                range and calls FullyAlert if found. When hiding, searches for nearby players within
                a limited range and alerts if found. Updates seenEnemyNum when enemies are detected.
            </summary>
        </member>
        <member name="M:PolymorphicAI.RestartExclamationBubble_Networked">
            <summary>
                Restarts the exclamation mark bubble animation and synchronizes it across the
                network. If this is the local instance, sends an RPC to other clients to restart
                their bubbles as well.
            </summary>
        </member>
        <member name="M:PolymorphicAI.RestartQuestionBubble_Networked">
            <summary>
                Restarts the question mark bubble animation and synchronizes it across the network.
                If this is the local instance, sends an RPC to other clients to restart their
                bubbles as well.
            </summary>
        </member>
        <member name="M:PolymorphicAI.ShowQuestionBubble">
            <summary>
                Displays a question mark bubble above the AI unit and plays appropriate sound
                effects based on the current mental state. For Attracted state, has a 70% chance to
                play attracted sound, otherwise plays confused sound. For Hiding state, performs a
                hear sound animation. Only executes if the unit is alive and not incapacitated.
            </summary>
        </member>
        <member name="M:PolymorphicAI.TryForgetPlayer(System.Int32)">
            <summary>
                Attempts to make the AI forget a specific player if they were tracking them. If the
                specified player was being tracked, adds a BecomeIdle action to the queue.
            </summary>
            <param name="deadPayerNum">The player number to potentially forget</param>
        </member>
        <member name="M:PolymorphicAI.TryLaughAtDeadPlayer(System.Int32)">
            <summary>
                Attempts to make the AI laugh at a dead player if it was tracking them. If the dead
                player was the one being tracked and the AI is visible on screen, adds laugh
                actions; otherwise becomes idle.
            </summary>
            <param name="deadPayerNum">The player number that died</param>
        </member>
        <member name="M:PolymorphicAI.TryLooseSightOfPlayer(System.Int32)">
            <summary>
                Handles losing sight of a tracked player. If tracking the specified player while
                alerted, switches to idle state with question mark and extensive look-around
                behavior to search for the lost target.
            </summary>
            <param name="hiddenPayerNum">The player number that is now hidden</param>
        </member>
        <!-- AI Awareness Properties -->
        <member name="P:PolymorphicAI.HasEverBeenAlerted">
            <summary>
                Gets whether this AI has ever entered the Alerted mental state during its lifetime.
                Checks if LastAlertedTime is greater than 0, indicating at least one alert has
                occurred.
            </summary>
            <returns>True if the unit has been alerted at least once, false otherwise</returns>
        </member>
        <member name="P:PolymorphicAI.LastAlertedTime">
            <summary>
                Gets the game time when this AI was last put into the Alerted mental state. Used to
                track how long the unit has been alerted and for AI behavior decisions. Set when
                transitioning to Alerted state.
            </summary>
            <returns>The Time.time value when last alerted, or 0 if never alerted</returns>
        </member>
        <!-- AI Awareness Fields -->
        <member name="F:PolymorphicAI.exclamationMark">
            <summary>
                Reference to the exclamation mark reaction bubble shown when the AI becomes alerted
                to enemy presence.
            </summary>
        </member>
        <member name="F:PolymorphicAI.hidingLookXRange">
            <summary>
                The horizontal sight range in units when the AI is in Hiding mental state.
                Significantly shorter than normal sight range to represent limited awareness while
                hiding. Default is 64 units.
            </summary>
        </member>
        <member name="F:PolymorphicAI.lastAlertedTime">
            <summary>
                Tracks the time when the AI last entered the Alerted mental state. Used to determine
                if the AI has recently been alerted and for managing alert state transitions. A
                value greater than 0 indicates the AI has been alerted before.
            </summary>
        </member>
        <member name="F:PolymorphicAI.prevSeenPlayerNum">
            <summary>
                Player number of the previously seen enemy. Initialized to -10 and used for tracking
                when the AI loses sight of a target.
            </summary>
        </member>
        <member name="F:PolymorphicAI.questionMark">
            <summary>
                Reference to the question mark reaction bubble shown when the AI is suspicious or
                confused about something.
            </summary>
        </member>
        <member name="F:PolymorphicAI.seenEnemyNum">
            <summary>
                Player number of the currently tracked enemy, or -10 if no enemy is being tracked.
                Updated when the AI spots a player through sight checks.
            </summary>
        </member>
        <member name="F:PolymorphicAI.sightRangeX">
            <summary>
                Horizontal sight range in pixels for detecting enemies. Default value is 300 pixels.
            </summary>
        </member>
        <member name="F:PolymorphicAI.sightRangeY">
            <summary>
                Vertical sight range in pixels for detecting enemies. Default value is 20 pixels,
                creating a narrow horizontal detection cone.
            </summary>
        </member>
        <member name="F:PolymorphicAI.suspciousThinkCount">
            <summary>
                Counter that tracks how many times the AI has performed suspicious thinking. Used in
                DoSuspiciousThink to determine when to change facing direction (typically after 10
                think cycles). Reset when hearing sounds or changing mental states.
            </summary>
        </member>
        <member name="F:PolymorphicAI.thoughtsSincePlayerSeen">
            <summary>
                Counter that tracks how many think cycles have passed since the AI last saw an
                enemy. Increments each think cycle without enemy visibility. Used to determine when
                to change behavior (e.g., change direction after 2 cycles, become idle after 6
                cycles).
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:PolymorphicAI.ActionQueueDoesntContainQuestionMark">
            <summary>
                Checks whether the action queue contains any QuestionMark actions. Returns true if
                no QuestionMark actions are found, false if at least one exists. Used to prevent
                duplicate question mark reactions.
            </summary>
            <returns>True if the queue doesn't contain any QuestionMark actions, false otherwise</returns>
        </member>
        <member name="M:PolymorphicAI.ActionsContains(EnemyActionType)">
            <summary>
                Checks if the action queue contains any action of the specified type. Searches
                through all queued actions to find a matching type.
            </summary>
            <param name="enemyActionType">The type of action to search for in the queue</param>
            <returns>True if at least one action of the specified type exists in the queue; false if the queue is empty or no matching actions are found</returns>
        </member>
        <member name="M:PolymorphicAI.AddAction(ActionObject,QueueMode)">
            <summary>
                Adds an action to the action queue with specified queue mode behavior.
            </summary>
            <param name="action">The action object to add to the queue</param>
            <param name="queueMode">Determines how the action is added: Clear (replaces queue), First (insert at beginning), Last (append), or AfterCurrent (insert after first action)</param>
            <remarks>
                Sets hasActionQueueChanged to true for network synchronization. Returns immediately
                if gameObject is null. AfterCurrent mode inserts at position 1 if queue has items,
                otherwise appends.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.AddAction(ActionObject)">
            <summary>
                Adds an action to the end of the action queue.
            </summary>
            <param name="action">The action object to append to the queue</param>
            <remarks>
                Convenience method that calls AddAction with QueueMode.Last.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.AddAction(EnemyActionType)">
            <summary>
                Creates and adds an action of the specified type with default duration (0.0334f).
            </summary>
            <param name="type">The type of action to create and add</param>
            <remarks>
                Creates a new ActionObject with the specified type and a duration of 0.0334f
                (approximately 1 frame at 30fps).
            </remarks>
        </member>
        <member name="M:PolymorphicAI.AddAction(EnemyActionType,QueueMode)">
            <summary>
                Creates and adds an action of the specified type with the specified queue mode.
            </summary>
            <param name="type">The type of action to create</param>
            <param name="Qmode">The queue mode determining how the action is added to the queue</param>
        </member>
        <member name="M:PolymorphicAI.AddAction(EnemyActionType,System.Single)">
            <summary>
                Creates and adds an action of the specified type with custom duration.
            </summary>
            <param name="type">The type of action to create</param>
            <param name="duration">The duration in seconds for the action</param>
            <remarks>
                Public method allowing external code to queue AI actions with specific durations.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.AddAction(EnemyActionType,System.Single,QueueMode)">
            <summary>
                Creates and adds an action with specified type, duration, and queue mode.
            </summary>
            <param name="type">The type of action to create</param>
            <param name="duration">The duration in seconds for the action</param>
            <param name="Qmode">The queue mode determining how the action is added</param>
        </member>
        <member name="M:PolymorphicAI.AddAction(EnemyActionType,GridPoint)">
            <summary>
                Creates and adds an action with a target grid point location.
            </summary>
            <param name="type">The type of action to create</param>
            <param name="point">The target grid point for actions like Move or FacePoint</param>
            <remarks>
                Virtual method that can be overridden. Used for actions that require a spatial
                target.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.AddAction(EnemyActionType,GridPoint,QueueMode)">
            <summary>
                Creates and adds an action with target location and specified queue mode.
            </summary>
            <param name="type">The type of action to create</param>
            <param name="point">The target grid point for the action</param>
            <param name="Qmode">The queue mode determining how the action is added</param>
        </member>
        <member name="M:PolymorphicAI.AddAction(EnemyActionType,GridPoint,System.Single)">
            <summary>
                Adds a new action to the action queue with a specific duration. This creates an
                ActionObject with the specified action type, target grid point, and duration, then
                adds it to the queue.
            </summary>
            <param name="type">The type of action to perform (Wait, Move, Fire, etc.)</param>
            <param name="point">The target grid position for the action</param>
            <param name="duration">The duration in seconds for the action to last</param>
        </member>
        <member name="M:PolymorphicAI.BecomeAlert(ActionObject)">
            <summary>
                Transitions the AI to the Alerted mental state and removes the triggering action
                from the queue. Called when processing a BecomeAlert action type.
            </summary>
            <param name="currentAction">The action object that triggered the alert transition</param>
        </member>
        <member name="M:PolymorphicAI.CheckActionQueue">
            <summary>
                Virtual method for checking the action queue state. The base implementation is
                empty, allowing derived classes to implement specific queue checking logic.
            </summary>
        </member>
        <member name="M:PolymorphicAI.ClearActionQueue(System.Boolean)">
            <summary>
                Clears all actions from the AI's action queue. Optionally marks the queue as changed
                for network synchronization.
            </summary>
            <param name="syncAfterwards">If true, sets hasActionQueueChanged flag to trigger network synchronization in the next update</param>
        </member>
        <member name="M:PolymorphicAI.DebugShowActionQueue">
            <summary>
                Displays debug information about the current action queue and mental state. Shows
                the mental state, action state, and all queued actions with their types, durations,
                and grid points when debug mode is enabled for this enemy.
            </summary>
        </member>
        <member name="M:PolymorphicAI.DebugShowInput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Displays debug information about the current input state and pathfinding. Shows
                which movement directions are active and current pathfinding node information when
                debug mode is enabled.
            </summary>
            <param name="left">Whether left movement is active</param>
            <param name="right">Whether right movement is active</param>
            <param name="up">Whether up movement is active</param>
            <param name="down">Whether down movement is active</param>
            <param name="jump">Whether jump is active</param>
            <param name="climb">Whether climb is active</param>
        </member>
        <member name="M:PolymorphicAI.DelayedDeath(System.Single)">
            <summary>
                Virtual method to trigger a delayed death for the AI unit. The base implementation
                is empty, allowing derived classes to implement specific delayed death behavior.
            </summary>
            <param name="time">The delay in seconds before death occurs</param>
        </member>
        <member name="M:PolymorphicAI.Deserialize(System.Byte[])">
            <summary>
                Deserializes AI state from a byte array. Base implementation does nothing.
            </summary>
            <param name="byteStream">The byte array containing serialized AI state</param>
            <remarks>
                Virtual method intended to be overridden by derived classes that need custom
                deserialization.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.FinishResurrecting">
            <summary>
                Called when the AI finishes a resurrection sequence. Virtual method that derived
                classes can override to implement post-resurrection behavior.
            </summary>
        </member>
        <member name="M:PolymorphicAI.FollowPath(NavPath)">
            <summary>
                Assigns a navigation path to the AI's path agent and queues a FollowPath action.
                This clears the current action queue and adds a new action to follow the specified
                path to its target point.
            </summary>
            <param name="path">The navigation path for the AI to follow</param>
        </member>
        <member name="M:PolymorphicAI.ForceClimbing(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Virtual method to force the AI into a climbing state. The base implementation is
                empty, allowing derived classes to implement specific climbing behavior based on the
                climb direction flags.
            </summary>
            <param name="leftClimb">Whether the unit should climb on the left side</param>
            <param name="rightClimb">Whether the unit should climb on the right side</param>
            <param name="topClimb">Whether the unit should climb on top</param>
        </member>
        <member name="M:PolymorphicAI.GetSatanPattern">
            <summary>
                Gets the Satan boss movement pattern. Virtual method intended for Satan boss AI
                implementation to override.
            </summary>
            <returns>The current Satan boss pattern. Base implementation throws NotImplementedException.</returns>
        </member>
        <member name="M:PolymorphicAI.HasPathAgent">
            <summary>
                Checks if this AI has an active pathfinding agent attached for navigation.
            </summary>
            <returns>True if the pathAgent field is not null; false otherwise</returns>
        </member>
        <member name="M:PolymorphicAI.IsAtActionGridpoint(ActionObject)">
            <summary>
                Checks if the unit has reached the target grid position for a movement action.
                Compares the unit's world position to the target position, accounting for unit
                half-width tolerance on the X axis and exact row matching.
            </summary>
            <param name="currentAction">The movement action containing the target grid point</param>
            <returns>True if the unit has reached the target position, false otherwise</returns>
        </member>
        <member name="M:PolymorphicAI.IsRevealed">
            <summary>
                Checks if the AI unit is currently revealed (not hiding). A unit is considered
                revealed if its mental state is anything other than Hiding.
            </summary>
            <returns>True if the unit is revealed (not in Hiding state), false if hiding</returns>
        </member>
        <member name="M:PolymorphicAI.Land">
            <summary>
                Virtual method called when the AI unit lands on the ground. The base implementation
                is empty, allowing derived classes to implement specific landing behavior.
            </summary>
        </member>
        <member name="M:PolymorphicAI.RunNormalAction(ActionObject)">
            <summary>
                Executes standard timed actions like Wait, Fire, and UseSpecial by decrementing the
                action's duration timer. Removes the action from the queue when the duration
                expires.
            </summary>
            <param name="currentAction">The action to process</param>
        </member>
        <member name="M:PolymorphicAI.RunQueue">
            <summary>
                Processes the current action in the action queue based on its type. Handles
                movement, firing, special abilities, path following, state changes, and various AI
                behaviors. Removes completed actions and manages timeouts for stuck movement.
            </summary>
        </member>
        <member name="M:PolymorphicAI.Serialize">
            <summary>
                Serializes the AI state to a byte array. Base implementation returns null.
            </summary>
            <returns>Null in the base implementation</returns>
            <remarks>
                Virtual method intended to be overridden by derived classes that need custom
                serialization.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.SetRevealed(System.Boolean,System.Single,System.Single)">
            <summary>
                Sets whether the AI unit is revealed (no longer hidden). When revealing a hiding
                unit, changes its mental state to Idle and triggers a sound alert at the specified
                position.
            </summary>
            <param name="revealed">Whether the unit should be revealed</param>
            <param name="fromX">X coordinate of the source that revealed the unit</param>
            <param name="fromY">Y coordinate of the source that revealed the unit</param>
        </member>
        <member name="M:PolymorphicAI.StopAllActions">
            <summary>
                Immediately stops all AI actions by clearing the action queue with synchronization
                enabled. This ensures the action queue change is propagated across the network.
            </summary>
        </member>
        <member name="M:PolymorphicAI.StopStomping">
            <summary>
                Virtual method to stop any stomping action the AI might be performing. The base
                implementation is empty, allowing derived classes to implement specific
                stomp-stopping logic.
            </summary>
        </member>
        <member name="M:PolymorphicAI.Sync(ActionObject[],MentalState,System.Single,System.Single,System.Int32,ActionState)">
            <summary>
                Synchronizes AI state from network data, updating action queue, mental state, and
                position.
            </summary>
            <param name="queue">Array of actions to replace the current action queue</param>
            <param name="mentalState">The mental state to apply</param>
            <param name="newX">The X position to potentially warp to</param>
            <param name="newY">The Y position to potentially warp to</param>
            <param name="seenPlayer">The player number that has been seen (-10 or actual player number)</param>
            <param name="state">The action state to apply if position correction occurs</param>
            <remarks>
                Only updates position if the unit is idle/hanging and the position difference
                exceeds thresholds (32 units for most units, 64 for Xenomorphs/Melters). Vertical
                position only updates if not parachuting or jumping.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.Think_Networked">
            <summary>
                Wrapper for Think() that only processes AI logic if the unit is alive.
            </summary>
            <remarks>
                Checks if unit.health is greater than 0 before calling the Think method. Used in
                networked gameplay contexts.
            </remarks>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:PolymorphicAI.actionQueue">
            <summary>
                The queue of actions this AI will perform sequentially. Each ActionObject contains
                an action type, optional grid point target, and duration.
            </summary>
        </member>
        <member name="F:PolymorphicAI.framesSinceSync">
            <summary>
                Tracks frames elapsed since last network synchronization of the action queue. Reset
                to 0 when syncing. Used for network optimization to avoid excessive RPC calls.
                Default is 100.
            </summary>
        </member>
        <member name="F:PolymorphicAI.hasActionQueueChanged">
            <summary>
                Flag indicating whether the action queue has been modified since the last network
                sync. Set to true when actions are added. Used to determine when to send network
                updates. Reset after syncing.
            </summary>
        </member>
        <member name="F:PolymorphicAI.laughIndex">
            <summary>
                Static counter shared across all AI instances to stagger laugh timing. Increments
                each time a laugh action is added. Used with modulo 4 to create varied wait times
                (0.4s intervals) before laughing.
            </summary>
        </member>
        <member name="F:PolymorphicAI.mook">
            <summary>
                Reference to the Mook component if this AI controls a Mook unit. Used for
                Mook-specific behaviors like hiding in grass, somersaulting, and sound playback.
            </summary>
        </member>
        <member name="F:PolymorphicAI.pathAgent">
            <summary>
                The pathfinding agent component used for navigation. Handles movement calculations
                and obstacle avoidance for this AI.
            </summary>
        </member>
        <member name="F:PolymorphicAI.rayCastHit">
            <summary>
                Stores raycast hit information for physics queries. Protected field available to
                derived classes for collision detection operations.
            </summary>
        </member>
        <member name="F:PolymorphicAI.repathCount">
            <summary>
                Counter that tracks failed pathfinding attempts for the current FollowPath action.
                Increments when path is null. If exceeds 5, the action is cancelled. Resets to 0
                when path succeeds or action completes.
            </summary>
        </member>
        <member name="F:PolymorphicAI.t">
            <summary>
                Time delta value clamped between 0 and 0.033334 seconds. Multiplied by 2.5 in
                Tutorial mode, used for all time-based calculations in the AI update loop.
            </summary>
        </member>
        <member name="F:PolymorphicAI.timeOnSameSpot">
            <summary>
                Accumulates time in seconds when the AI remains at the same grid position. Resets
                when position changes. If exceeds 2 seconds, the current action is cancelled to
                prevent being permanently stuck.
            </summary>
        </member>
        <member name="F:PolymorphicAI.timeStuckAgainstWall">
            <summary>
                Accumulates time in seconds when the AI is blocked while trying to move forward.
                Resets to 0 when movement succeeds. If exceeds 0.3 seconds, the current move action
                is cancelled.
            </summary>
        </member>
        <member name="F:PolymorphicAI.unit">
            <summary>
                Reference to the Unit component attached to this GameObject. Provides access to
                health, position, facing direction, and other unit properties.
            </summary>
        </member>
        <!-- AI Decision Making Methods -->
        <member name="M:PolymorphicAI.DoAlertedThink">
            <summary>
                Executes combat behavior when an enemy is seen. Fires at the target, then checks if
                the enemy is still visible. If the enemy is lost, increments thoughtsSincePlayerSeen
                and eventually returns to idle. Otherwise continues firing with movement between
                shots.
            </summary>
        </member>
        <member name="M:PolymorphicAI.DoAttractedThink">
            <summary>
                Executes behavior when attracted to a sound or distraction. Determines direction
                toward the attraction point, shows a question mark bubble (70% chance), waits
                briefly, then moves 2-4 spaces toward the attraction before returning to idle.
            </summary>
        </member>
        <member name="M:PolymorphicAI.DoHidingThink">
            <summary>
                Executes behavior while hiding in grass or cover. Alternates between short waits
                (0.25-0.3 seconds) and looking for enemies. Keeps the unit crouched and vigilant
                while concealed.
            </summary>
        </member>
        <member name="M:PolymorphicAI.DoIdleThink">
            <summary>
                Executes idle behavior by creating a patrol pattern. Generates 3-6 random actions
                alternating between waiting and moving to available grid points. If alwaysLookAround
                is true, adds looking actions and facing changes during the patrol.
            </summary>
        </member>
        <member name="M:PolymorphicAI.DoPanicThink">
            <summary>
                Executes panic behavior by moving 2-4 grid spaces in the current walk direction.
                This creates a fleeing behavior when the unit is panicked by explosions or threats.
            </summary>
        </member>
        <member name="M:PolymorphicAI.DoSuspiciousThink">
            <summary>
                Executes suspicious behavior when the AI has heard something. Adds wait and look
                actions to investigate. After 10 think cycles, may randomly turn around to check
                behind. Tracks suspicion with suspciousThinkCount.
            </summary>
        </member>
        <member name="M:PolymorphicAI.GetInput(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Processes the current action queue and sets input flags based on the next action to
                execute. This is the main method that translates queued AI actions into actual
                control inputs.
            </summary>
            <param name="left">Set to true when the AI should move left</param>
            <param name="right">Set to true when the AI should move right</param>
            <param name="up">Set to true when the AI should move up</param>
            <param name="down">Set to true when the AI should move down (also used for hiding in grass)</param>
            <param name="jump">Set to true when the AI should jump</param>
            <param name="fire">Set to true when the AI should fire its weapon</param>
            <param name="special1">Set to true when the AI should use special ability 1</param>
            <param name="special2">Set to true when the AI should use special ability 2</param>
            <param name="special3">Set to true when the AI should use special ability 3</param>
            <param name="special4">Set to true when the AI should use special ability 4</param>
            <param name="climbButton">Set to true when the AI should climb</param>
            <remarks>
                All parameters are initially set to false. The method examines the first action in
                the action queue and sets the appropriate flags based on the action type (Wait,
                Fire, Move, FacePoint, etc.). Special handling exists for the Hiding mental state
                where down is always set to true.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.GetThinkState">
            <summary>
                Returns the current mental state of the AI. Used to query what behavioral state the
                AI is currently in.
            </summary>
            <returns>The current MentalState (Idle, Suspicious, Alerted, Panicking, Attracted, or Hiding)</returns>
        </member>
        <member name="M:PolymorphicAI.IsAlerted">
            <summary>
                Checks whether the AI is currently in the Alerted mental state. This is when the AI
                has confirmed sight of an enemy.
            </summary>
            <returns>True if mental state is Alerted, false otherwise</returns>
        </member>
        <member name="M:PolymorphicAI.IsSuspicious">
            <summary>
                Checks whether the AI is currently in the Suspicious mental state. This is when the
                AI has heard something but hasn't confirmed an enemy presence.
            </summary>
            <returns>True if mental state is Suspicious, false otherwise</returns>
        </member>
        <member name="M:PolymorphicAI.Reassess">
            <summary>
                Reassesses the available movement grid points for the AI unit when not in a
                panicking state. This method is called when the AI needs to update its understanding
                of where it can move, typically after environmental changes or when switching mental
                states.
            </summary>
        </member>
        <member name="M:PolymorphicAI.RunHoverInput(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,ActionObject)">
            <summary>
                Handles hover input generation for AI units capable of hovering. Base implementation
                is empty.
            </summary>
            <param name="left">Hover left input flag</param>
            <param name="right">Hover right input flag</param>
            <param name="up">Hover up input flag</param>
            <param name="down">Hover down input flag</param>
            <param name="currentAction">The current hover action being processed</param>
            <remarks>
                This virtual method is intended to be overridden by AI classes that support hovering
                behavior.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.RunJumpingInput(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Handles input generation for the Jump action. Sets movement direction based on
                facing and activates jump.
            </summary>
            <param name="left">Set to true if the unit is facing left (negative scale.x)</param>
            <param name="right">Set to true if the unit is facing right (positive scale.x)</param>
            <param name="up">Movement up flag (not modified)</param>
            <param name="down">Movement down flag (not modified)</param>
            <param name="jump">Always set to true to perform the jump</param>
            <param name="fire">Fire input flag (not modified)</param>
            <param name="special1">Special ability 1 flag (not modified)</param>
            <param name="special2">Special ability 2 flag (not modified)</param>
            <param name="special3">Special ability 3 flag (not modified)</param>
            <param name="special4">Special ability 4 flag (not modified)</param>
            <remarks>
                The jump is always performed in the direction the unit is currently facing,
                determined by the sign of transform.localScale.x.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.RunMovementInput(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,ActionObject)">
            <summary>
                Handles movement input generation when the current action is Move type. Sets
                left/right flags based on target position.
            </summary>
            <param name="left">Set to true if the unit needs to move left to reach target</param>
            <param name="right">Set to true if the unit needs to move right to reach target</param>
            <param name="up">Movement up flag (not modified by this method)</param>
            <param name="down">Movement down flag (not modified by this method)</param>
            <param name="currentAction">The current action containing the target grid point to move to</param>
            <remarks>
                Only processes movement when the unit is on ground, in quicksand, hanging, attached
                to a wall, or using a jetpack. Movement stops when within 1 unit of the target X
                position.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.RunStompingInput(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Handles input generation for the Stomp action. Sets movement direction and down
                input for stomping.
            </summary>
            <param name="left">Set to true if the unit is facing left</param>
            <param name="right">Set to true if the unit is facing right</param>
            <param name="up">Movement up flag (not modified)</param>
            <param name="down">Always set to true for stomping action</param>
            <param name="jump">Jump input flag (not modified)</param>
            <param name="fire">Fire input flag (not modified)</param>
            <param name="special1">Special ability 1 flag (not modified)</param>
            <param name="special2">Special ability 2 flag (not modified)</param>
            <param name="special3">Special ability 3 flag (not modified)</param>
            <param name="special4">Special ability 4 flag (not modified)</param>
            <remarks>
                Stomping involves moving in the current facing direction while holding down,
                typically used for ground pound attacks.
            </remarks>
        </member>
        <member name="M:PolymorphicAI.SetMentalState(MentalState)">
            <summary>
                Sets the AI unit's mental state and performs necessary state transition logic. When
                transitioning to Alerted state, records the alert time. When entering Suspicious
                state, resets the suspicious think counter. This method can be called via RPC for
                network synchronization.
            </summary>
            <param name="newMentalState">The new mental state to set (Idle, Suspicious, Alerted, Panicking, Attracted, or Hiding)</param>
        </member>
        <member name="M:PolymorphicAI.Think">
            <summary>
                Main AI decision-making method that executes the appropriate thinking behavior based
                on the current mental state. Calls the corresponding Do[State]Think method for Idle,
                Suspicious, Alerted, Panicking, Attracted, or Hiding states.
            </summary>
        </member>
        <!-- AI Decision Making Fields -->
        <member name="F:PolymorphicAI.alwaysLookAround">
            <summary>
                When true, the AI will add look actions and face different directions during idle
                behavior, creating more alert-looking patrol patterns. Otherwise maintains current
                facing during idle movements.
            </summary>
        </member>
        <member name="F:PolymorphicAI.attractPoint">
            <summary>
                The grid point that the AI is attracted to when in Attracted mental state. Set by
                the Attract method and used in DoAttractedThink to move towards sounds or
                distractions.
            </summary>
        </member>
        <member name="F:PolymorphicAI.maxIdleWaitDuration">
            <summary>
                The maximum duration in seconds for wait actions during idle behavior. Used with
                Random.Range to create varied wait times. Also used as duration for move actions
                during idle. Default is 1 second.
            </summary>
        </member>
        <member name="F:PolymorphicAI.mentalState">
            <summary>
                The current mental state of the AI, determining its behavior patterns. Can be Idle,
                Suspicious, Alerted, Panicking, Attracted, or Hiding.
            </summary>
        </member>
        <member name="F:PolymorphicAI.minIdleWaitDuration">
            <summary>
                The minimum duration in seconds for wait actions during idle behavior. Used with
                Random.Range to create varied wait times. Default is 0.3 seconds.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:Projectile.Awake">
            <summary>
                Initializes layer masks, barrier layers, and projectile configuration during Unity's
                Awake phase. Sets up collision layers for ground, fragile objects, and team-specific
                barriers, initializes z-offset from transform position, and establishes random seed
                for deterministic effects.
            </summary>
        </member>
        <member name="M:Projectile.Start">
            <summary>
                Initializes damage background counter with a random offset between 0 and 0.2
                seconds. This creates variation in when projectiles start damaging background
                elements.
            </summary>
        </member>
        <member name="M:Projectile.Update">
            <summary>
                Main update loop that drives projectile behavior. Calls RunProjectile and RunLife
                methods each frame with the current delta time to process movement, collision, and
                lifetime.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:Projectile.barrierLayer">
            <summary>
                Layer mask for enemy barrier detection. Set during Awake to include "MobileBarriers"
                and "IndestructibleGround" layers. Used to detect barriers that can reflect player
                projectiles, changing their ownership and increasing damage.
            </summary>
        </member>
        <member name="F:Projectile.fragileLayer">
            <summary>
                Layer mask for fragile/destructible object detection. Set to "DirtyHippie" layer
                during Awake. Used to detect breakable objects like doors and crates that
                projectiles can damage or destroy on contact.
            </summary>
        </member>
        <member name="F:Projectile.friendlyBarrierLayer">
            <summary>
                Layer mask for player-created barrier detection. Set to "FriendlyBarriers" layer
                during Awake. Used to detect barriers that can reflect enemy projectiles, converting
                them to player-owned projectiles with increased damage.
            </summary>
        </member>
        <member name="F:Projectile.groundLayer">
            <summary>
                Layer mask for ground and solid object collision detection. Set during Awake to
                include "Ground", "LargeObjects", and "FLUI" layers. Used in raycast operations to
                detect walls and terrain that should stop or reflect projectiles.
            </summary>
        </member>
        <member name="F:Projectile.random">
            <summary>
                Random number generator instance for deterministic projectile variations.
                Initialized in Awake with either a random seed (0-10000) or the specified seed
                value. Used to create small random offsets for damage timing and other projectile
                behaviors that need to be consistent across clients.
            </summary>
        </member>
        <member name="F:Projectile.seed">
            <summary>
                Seed value for deterministic random number generation. Set via the SetSeed method to
                ensure synchronized projectile behavior across networked games. Used to initialize
                the random field for consistent randomization of effects and variations.
            </summary>
        </member>
        <member name="F:Projectile.t">
            <summary>
                Delta time value for frame-independent movement calculations. Initialized to 0.011f
                and updated each frame with clamped Time.deltaTime (maximum 0.0334f). Used
                throughout the projectile system for consistent movement and timing regardless of
                framerate.
            </summary>
        </member>
        <member name="F:Projectile.zOffset">
            <summary>
                Z-axis rendering offset for visual depth variation. Randomly set between -0.04 and
                0.04 in Awake, or can be overridden during Fire method. Applied to transform
                position to create slight 3D depth effect and prevent z-fighting when multiple
                projectiles overlap.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:Projectile.Bounce(UnityEngine.RaycastHit)">
            <summary>
                Reverses the projectile's Y velocity to create a bounce effect off surfaces. Sets
                the Y velocity to its absolute value, ensuring upward movement after bounce. Updates
                projectile rotation to match new trajectory.
            </summary>
            <param name="raycastHit">Information about the surface that was hit</param>
        </member>
        <member name="M:Projectile.Damage(System.Int32,DamageType,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Applies damage to this projectile if it's damageable. Reduces projectile damage by
                the incoming damage amount and destroys the projectile if damage reaches zero. Only
                processes damage for projectiles marked with isDamageable flag.
            </summary>
            <param name="damage">Amount of damage to apply to the projectile</param>
            <param name="damageType">Type of damage being applied</param>
            <param name="xI">X force component (unused)</param>
            <param name="yI">Y force component (unused)</param>
            <param name="damageDelay">Delay before damage is applied (unused)</param>
            <param name="newPlayerNum">Player number applying the damage (unused)</param>
        </member>
        <member name="M:Projectile.HitFragile">
            <summary>
                Processes collision with fragile/destructible objects. Uses sphere overlap to detect
                fragile objects within projectile radius and applies damage to each one found.
                Called during projectile movement to handle destruction of breakable terrain.
            </summary>
        </member>
        <member name="M:Projectile.HitGrenades">
            <summary>
                Detects and interacts with grenades within projectile radius if canHitGrenades is
                enabled. Uses Map.KnockAndDamageGrenades to apply knockback force based on
                projectile velocity. Only processes for projectiles with projectileSize greater than
                3.
            </summary>
        </member>
        <member name="M:Projectile.HitHorizontalWalls">
            <summary>
                Specialized collision detection for wide projectiles against horizontal walls. Uses
                three parallel raycasts (center, up, down) spaced by projectileSize. Only active
                when horizontalProjectile is set to true.
            </summary>
        </member>
        <member name="M:Projectile.HitOil">
            <summary>
                Checks for oil particles and oily terrain at the projectile's position. Ignites any
                oil found using EffectsController.IgniteOilParticles within a 24-unit radius. Also
                ignites oily blocks detected via raycast collision.
            </summary>
        </member>
        <member name="M:Projectile.HitProjectiles">
            <summary>
                Checks for collisions with other projectiles in the vicinity. Uses
                Map.HitProjectiles to detect and handle projectile-on-projectile interactions within
                the projectile's radius.
            </summary>
        </member>
        <member name="M:Projectile.HitUnits">
            <summary>
                Detects and damages enemy units within the projectile's area. Uses Map.HitUnits with
                projectile ownership to find valid targets. Awards deflection achievement if
                projectile was reflected and kills an enemy. Destroys projectile on successful hit.
            </summary>
        </member>
        <member name="M:Projectile.HitWalls">
            <summary>
                Performs raycast collision detection against walls in the projectile's path. Handles
                standard wall impacts by applying damage, creating effects, and destroying the
                projectile. Special handling for depleted uranium perk creates 24-radius explosions
                on impact. Returns true if wall was hit.
            </summary>
            <returns>True if the projectile hit a wall and was destroyed, false otherwise</returns>
        </member>
        <member name="M:Projectile.HitWildLife">
            <summary>
                Checks for and damages wildlife units within the projectile's radius. Destroys the
                projectile with effects if any wildlife is hit. Uses Map.DamageWildLife to apply
                damage to animals.
            </summary>
        </member>
        <member name="M:Projectile.MakeSparkShower(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an intense shower of spark particles at the specified position. Generates 12
                sparks with randomized velocities based on the provided shower direction. Each spark
                has high initial velocity (250+ units) for dramatic visual effect.
            </summary>
            <param name="xPos">X position to create sparks</param>
            <param name="yPos">Y position to create sparks</param>
            <param name="showerXI">Base X velocity for spark shower direction</param>
            <param name="showerYI">Base Y velocity for spark shower direction</param>
        </member>
        <member name="M:Projectile.ProjectileApplyDamageToBlock(UnityEngine.GameObject,System.Int32,DamageType,System.Single,System.Single)">
            <summary>
                Applies damage to terrain blocks with special handling for depleted uranium perks.
                Creates a 24-radius explosion for player projectiles with depleted uranium,
                otherwise applies standard block damage. Handles oil ignition for fire damage types.
            </summary>
            <param name="blockObject">The block GameObject to damage</param>
            <param name="damage">Amount of damage to apply</param>
            <param name="type">Type of damage being applied</param>
            <param name="forceX">X component of impact force</param>
            <param name="forceY">Y component of impact force</param>
        </member>
        <member name="M:Projectile.ReflectProjectile(UnityEngine.RaycastHit)">
            <summary>
                Reflects the projectile off barriers with complex angle calculations and damage
                bonuses. Changes projectile ownership, adds +12 damage, plays reflection sound, and
                calculates reflection angle based on impact normal and projectile direction. Awards
                achievement for deflection kills. Returns false if canReflect is disabled.
            </summary>
            <param name="raycastHit">Raycast hit information containing impact point and surface normal</param>
            <returns>True if projectile was successfully reflected, false if reflection is disabled</returns>
        </member>
        <member name="M:Projectile.RunDamageBackground(System.Single)">
            <summary>
                Periodically damages background doodads along the projectile's path. Uses a timer
                that triggers every 0.033 seconds, checking and damaging doodads within 3 units of
                the projectile position. Only processes if affectScenery is enabled.
            </summary>
            <param name="t">Delta time for this frame</param>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:Projectile.damage">
            <summary>
                Base damage value for the projectile. Default value is 1. This is the initial damage
                setting that gets copied to damageInternal during initialization and can be modified
                by SetDamage method. Represents the projectile's intended damage before any
                modifiers.
            </summary>
        </member>
        <member name="F:Projectile.damageInternal">
            <summary>
                The actual damage value used in calculations. Initially set from the damage field,
                but can be modified by fadeDamage mechanics, reflection bonuses (+12), or other
                gameplay effects. This is the value actually applied when the projectile hits
                targets.
            </summary>
        </member>
        <member name="F:Projectile.damageType">
            <summary>
                Specifies the type of damage this projectile inflicts (e.g., Bullet, Fire,
                Explosion). Passed to all damage application methods to determine appropriate hit
                reactions, visual effects, and special damage behaviors like oil ignition for fire
                damage.
            </summary>
        </member>
        <member name="F:Projectile.fadeDamage">
            <summary>
                When enabled, causes projectile damage to decrease proportionally with remaining
                life. Uses the formula damageInternal = fullDamage * (life/fullLife) to create
                projectiles that weaken over distance. Special interaction with BulletSnakeBroskin
                weapon type.
            </summary>
        </member>
        <member name="F:Projectile.firedBy">
            <summary>
                Reference to the MonoBehaviour (usually a unit) that created this projectile. Used
                for damage attribution, preventing self-collision at spawn, and special behaviors
                like inseminator targeting. Can be modified by return zones and reflection
                mechanics.
            </summary>
        </member>
        <member name="F:Projectile.fullDamage">
            <summary>
                Stores the original damage value at projectile initialization. Used with fadeDamage
                mechanic to calculate damage reduction over time using the formula: damage =
                fullDamage * (life/fullLife). Preserves the initial damage for percentage
                calculations.
            </summary>
        </member>
        <member name="F:Projectile.playerNum">
            <summary>
                Identifies which player fired this projectile. Value of -1 indicates enemy
                projectile, 0-3 indicates player 1-4, and 5 indicates a reflected projectile. Used
                for friendly fire checks, material selection, and damage attribution. Modified
                during reflection.
            </summary>
        </member>
        <member name="F:Projectile.unitHit">
            <summary>
                Reference to the last unit hit by this projectile. While this field exists in the
                base Projectile class, it is not actively used and is likely intended for derived
                classes that need to track specific hit targets.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:Projectile.Death">
            <summary>
                Handles projectile destruction with appropriate effects. Creates visual impact
                effects at the projectile's position, plays death sound if configured, and destroys
                the GameObject.
            </summary>
        </member>
        <member name="M:Projectile.IncreaseLife(System.Single)">
            <summary>
                Extends the projectile's remaining lifetime by a multiplier. Increases both current
                life and maximum life values proportionally, allowing projectiles to travel further
                before expiring.
            </summary>
            <param name="m">Multiplier to apply to the projectile's life (e.g., 2.0 doubles remaining life)</param>
        </member>
        <member name="M:Projectile.MakeEffects(System.Boolean,System.Single,System.Single,System.Boolean,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
                Creates visual effects when the projectile impacts. Generates sparks with
                physics-based trajectories, optional puff effects, and plays impact sounds. Supports
                both raycast-based hit information and position-only effects. Only creates effects
                once unless canMakeEffectsMoreThanOnce is enabled.
            </summary>
            <param name="particles">Whether to create particle effects (currently unused)</param>
            <param name="x">X position for the effects</param>
            <param name="y">Y position for the effects</param>
            <param name="useRayCast">Whether to use raycast hit information for effect direction</param>
            <param name="hitNormal">Normal vector of the surface hit (used if useRayCast is true)</param>
            <param name="hitPoint">Exact point of impact (used if useRayCast is true)</param>
        </member>
        <member name="M:Projectile.MoveProjectile">
            <summary>
                Updates the projectile's position based on current velocity and delta time. Applies
                doubled movement when doubleSpeed is enabled, effectively moving the projectile
                twice per frame for increased speed. Handles Z-axis positioning for rendering depth.
            </summary>
        </member>
        <member name="M:Projectile.OnDestroy">
            <summary>
                Cleanup method called when the projectile GameObject is destroyed. Deregisters the
                projectile from the Map system and calls base class cleanup.
            </summary>
        </member>
        <member name="M:Projectile.PlayDeathSound">
            <summary>
                Plays the projectile's death sound effect if a sound holder is configured. Uses the
                projectile's position and configured volume, with playback priority of 0.65.
            </summary>
        </member>
        <member name="M:Projectile.RunLife(System.Single)">
            <summary>
                Manages projectile lifetime countdown and destruction. Decrements life by delta time
                each frame, applying damage fade if enabled. When life reaches zero or damage fades
                completely, destroys the projectile with appropriate effects.
            </summary>
            <param name="t">Delta time for this frame</param>
        </member>
        <member name="M:Projectile.RunProjectile(System.Single)">
            <summary>
                Core projectile update method that processes movement, collision detection, and
                damage application. Handles projectile physics, checks for unit/terrain hits,
                applies damage to background elements, manages return zone interactions, and
                processes special behaviors like reversing. Updates position based on velocity and
                delta time.
            </summary>
            <param name="t">Delta time for this frame</param>
        </member>
        <member name="M:Projectile.SetDoubleSpeed">
            <summary>
                Activates double speed mode for the projectile. Limits the projectile's life to a
                maximum of 1 second and enables the doubleSpeed flag which causes MoveProjectile to
                update position twice per frame.
            </summary>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:Projectile.Position">
            <summary>
                Gets or sets the projectile's 2D position. Setting the position updates both the X
                and Y coordinates and immediately applies the new position to the transform. Getting
                returns the current X,Y as a Vector2.
            </summary>
        </member>
        <member name="P:Projectile.Velocity">
            <summary>
                Gets or sets the projectile's 2D velocity vector. Setting velocity updates both xI
                and yI components and recalculates the projectile's rotation to match the new
                direction. Getting returns xI,yI as a Vector2.
            </summary>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:Projectile.affectScenery">
            <summary>
                Controls whether this projectile can damage background scenery and doodads. Default
                is true. When disabled, the projectile passes through destructible background
                elements without affecting them. Checked in RunDamageBackground method.
            </summary>
        </member>
        <member name="F:Projectile.canHitGrenades">
            <summary>
                Determines if this projectile can interact with grenades. Default is true. When
                enabled, the projectile will knock back and potentially damage grenades it
                encounters. Only applies to projectiles with projectileSize greater than 3.
            </summary>
        </member>
        <member name="F:Projectile.canMakeEffectsMoreThanOnce">
            <summary>
                When enabled, allows MakeEffects to create visual effects multiple times during the
                projectile's lifetime. Works with hasMadeEffects flag to control whether effects can
                be repeated for projectiles that hit multiple targets or surfaces.
            </summary>
        </member>
        <member name="F:Projectile.damageBackgroundCounter">
            <summary>
                Timer controlling periodic background damage checks. Initialized with a small random
                negative value (-0.2 to 0) and increments by delta time. When positive, triggers
                background damage check every 0.033 seconds if affectScenery is enabled.
            </summary>
        </member>
        <member name="F:Projectile.damagedBackground">
            <summary>
                Flag tracking whether this projectile has already damaged background elements.
                Prevents multiple damage applications to scenery during a single projectile's
                lifetime. Set to true after first background damage event.
            </summary>
        </member>
        <member name="F:Projectile.doubleSpeed">
            <summary>
                Speed multiplier flag that doubles projectile movement when enabled. Set via
                SetDoubleSpeed method which also caps projectile life at 1 second. Applied in
                MoveProjectile to effectively move the projectile twice per frame.
            </summary>
        </member>
        <member name="F:Projectile.flickPuff">
            <summary>
                Puff effect prefab created when the projectile damages background scenery or
                doodads. Instantiated by EffectsController.CreateProjectilePuff during background
                damage checks to provide visual feedback for environmental destruction.
            </summary>
        </member>
        <member name="F:Projectile.fullLife">
            <summary>
                Original lifetime value stored at projectile initialization. Used with fadeDamage to
                calculate damage reduction over time and preserved for any mechanics that need to
                reference the projectile's initial lifetime setting.
            </summary>
        </member>
        <member name="F:Projectile.hasHit">
            <summary>
                Flag indicating the projectile has already hit a target. Set to true on successful
                collision to prevent multiple hit registrations from the same impact. Ensures
                projectiles only deal damage once per target.
            </summary>
        </member>
        <member name="F:Projectile.hasMadeEffects">
            <summary>
                Tracks whether visual impact effects have been created. Prevents duplicate effect
                spawning unless canMakeEffectsMoreThanOnce is enabled. Set to true after first
                effect creation in MakeEffects method.
            </summary>
        </member>
        <member name="F:Projectile.isDamageable">
            <summary>
                Indicates whether this projectile can be damaged and destroyed by attacks. While
                this field exists in the base class, it is not actively used in the base
                implementation and is likely intended for derived projectile types that can be shot
                down.
            </summary>
        </member>
        <member name="F:Projectile.life">
            <summary>
                Remaining lifetime of the projectile in seconds. Default value is 4 seconds.
                Decreases by delta time each frame and destroys the projectile when it reaches zero.
                Can be modified by SetDoubleSpeed (caps at 1 second) and IncreaseLife methods.
            </summary>
        </member>
        <member name="F:Projectile.projectileSize">
            <summary>
                Collision radius of the projectile in units. Default value is 8. Used for all
                sphere-based collision checks, hit detection radii, and raycast distances. Larger
                values create projectiles that can hit targets more easily and affect wider areas.
            </summary>
        </member>
        <member name="F:Projectile.shrapnel">
            <summary>
                Shrapnel prefab reference for creating debris particles. While not directly used in
                the base Projectile class, this field is available for derived projectile types to
                create custom shrapnel effects on impact.
            </summary>
        </member>
        <member name="F:Projectile.shrapnelSpark">
            <summary>
                Spark shrapnel prefab reference for creating spark particles. While not directly
                used in the base Projectile class, this field is available for derived projectile
                types to create custom spark effects, particularly for metal impacts.
            </summary>
        </member>
        <member name="F:Projectile.sound">
            <summary>
                Lazy-initialized Sound instance for playing projectile audio effects. Created on
                demand in PlayDeathSound when the projectile is destroyed. Cached to avoid creating
                multiple Sound objects for the same projectile.
            </summary>
        </member>
        <member name="F:Projectile.soundHolder">
            <summary>
                Reference to the SoundHolder component containing this projectile's sound effects.
                Used in PlayDeathSound to play impact sounds when the projectile is destroyed.
                Configured per projectile type for unique audio feedback.
            </summary>
        </member>
        <member name="F:Projectile.soundVolume">
            <summary>
                Volume level for projectile sound effects. Default value is 0.2f (20% volume).
                Applied when playing death sounds through the sound holder to control audio levels
                relative to other game sounds.
            </summary>
        </member>
        <member name="F:Projectile.sparkCount">
            <summary>
                Number of spark particles created on impact. Default value is 10. Used in
                MakeEffects to determine how many sparks to generate. Different impact contexts use
                full count or reduced counts for visual variety.
            </summary>
        </member>
        <member name="F:Projectile.startProjectileSpeed">
            <summary>
                Initial speed magnitude of the projectile when fired. Default 400f but set from
                velocity vector magnitude in Fire method. Used in collision prediction calculations
                to determine raycast distances based on projectile speed.
            </summary>
        </member>
        <member name="F:Projectile.whitePopEffect">
            <summary>
                Determines the type of impact effect created. When true, creates a white pop effect
                instead of the standard projectile pop effect. Used in MakeEffects to provide visual
                variety for different projectile types.
            </summary>
        </member>
        <member name="F:Projectile.z">
            <summary>
                The projectile's Z-axis position used for rendering depth. Updated during movement
                to maintain proper visual layering with other game objects.
            </summary>
        </member>
        <!-- Projectile Initialization & Configuration Methods -->
        <member name="M:Projectile.Fire(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour)">
            <summary>
                Primary initialization method that launches the projectile. Sets position, velocity,
                player ownership, and performs comprehensive spawn validation including collision
                checks, unit hits, and barrier reflections. Applies perk-based scaling for player
                projectiles and sets appropriate team materials.
            </summary>
            <param name="newX">Starting X position of the projectile</param>
            <param name="newY">Starting Y position of the projectile</param>
            <param name="xI">Initial X velocity</param>
            <param name="yI">Initial Y velocity</param>
            <param name="_zOffset">Z-axis offset for rendering depth</param>
            <param name="playerNum">Player number who fired the projectile (0-3 for players, -1 for enemies)</param>
            <param name="FiredBy">Reference to the unit that fired this projectile</param>
        </member>
        <member name="M:Projectile.GetSuggestedSpeed">
            <summary>
                Returns the suggested default speed for projectiles, used as a baseline for velocity
                calculations. Standard projectiles return 120 units per second.
            </summary>
            <returns>The suggested projectile speed (120f)</returns>
        </member>
        <member name="M:Projectile.SetDamage(System.Int32)">
            <summary>
                Sets the projectile's damage value, updating both the internal damage tracking and
                the public damage field used for display and calculations.
            </summary>
            <param name="d">The damage value to set</param>
        </member>
        <member name="M:Projectile.SetPosition">
            <summary>
                Updates the projectile's transform position using rounded X and Y coordinates with
                the configured z-offset for proper rendering depth.
            </summary>
        </member>
        <member name="M:Projectile.SetRotation">
            <summary>
                Calculates and applies rotation to the projectile's transform based on its current
                velocity. Uses atan2 to determine angle from velocity vector and converts to
                degrees. Applies an additional 180-degree rotation for horizontal projectiles.
            </summary>
        </member>
        <member name="M:Projectile.SetSeed(System.Int32)">
            <summary>
                Sets the random seed for this projectile, creating a new Randomf instance with the
                specified seed for deterministic random behavior in effects and variations.
            </summary>
            <param name="newSeed">The seed value for random number generation</param>
        </member>
        <member name="M:Projectile.SetSpeed(System.Single,System.Single)">
            <summary>
                Updates the projectile's velocity vector and recalculates its rotation to match the
                new direction of travel.
            </summary>
            <param name="xI">New X velocity component</param>
            <param name="yI">New Y velocity component</param>
        </member>
        <!-- Projectile Initialization & Configuration Fields -->
        <member name="F:Projectile.canReflect">
            <summary>
                Controls whether this projectile can be reflected by barriers. Default is true. When
                disabled, projectile ignores barrier collision checks that would normally cause
                reflection. Used to create projectiles that pass through or are destroyed by
                barriers instead of bouncing off.
            </summary>
        </member>
        <member name="F:Projectile.enemyMaterial">
            <summary>
                Material applied to enemy-fired projectiles for visual team identification. Set
                through CheckFriendlyFireMaterial when playerNum is negative. Creates visual
                distinction between projectiles that can harm the player versus those that cannot.
            </summary>
        </member>
        <member name="F:Projectile.friendlyMaterial">
            <summary>
                Material applied to player-fired projectiles for visual team identification. Set
                through CheckFriendlyFireMaterial when playerNum is 0 or greater. Helps players
                distinguish between friendly and enemy projectiles at a glance.
            </summary>
        </member>
        <member name="F:Projectile.horizontalProjectile">
            <summary>
                Determines raycast behavior for collision detection. Default is true. When true,
                uses offset raycasts from projectile sides for barrier detection. When false, uses
                direct center raycasts. Affects how projectiles interact with barriers and walls.
            </summary>
        </member>
        <member name="F:Projectile.isWideProjectile">
            <summary>
                Indicates if this is a wide projectile that requires special collision handling.
                When true, skips horizontal wall collision checks. Used in conjunction with
                horizontalProjectile to determine appropriate collision detection methods.
            </summary>
        </member>
        <!-- Collision Detection & Spawn Validation Methods -->
        <member name="M:Projectile.CheckSpawnPoint">
            <summary>
                Comprehensive spawn point validation that checks for walls, doodads, return zones,
                barriers, and units at the projectile's starting position. Handles barrier
                reflections for both enemy and friendly projectiles, destroys projectile if spawning
                inside solid objects, and attempts to hit units at spawn location. Registers
                projectile with Map system if spawn is valid.
            </summary>
        </member>
        <member name="M:Projectile.CheckSpawnPointFragile">
            <summary>
                Checks for fragile/destructible objects at spawn location using a 5-unit radius
                sphere overlap. Creates puff effects and applies damage to all fragile objects
                found, but does not destroy the projectile.
            </summary>
        </member>
        <member name="M:Projectile.CheckWallsAtSpawnPoint">
            <summary>
                Checks for wall collisions at the projectile's spawn position using a 5-unit radius
                sphere overlap. Applies damage to any walls found (excluding the firing unit's
                collider) and destroys the projectile if walls are hit, creating appropriate impact
                effects.
            </summary>
            <returns>True if walls were hit and projectile was destroyed, false otherwise</returns>
        </member>
        <member name="M:Projectile.TryHitUnitsAtSpawn">
            <summary>
                Attempts to damage units at the projectile's spawn location. Handles special case
                for inseminator units (alien face huggers) by targeting their host unit with double
                damage. Destroys projectile with effects if any units are successfully hit.
            </summary>
        </member>
        <!-- Collision Detection & Spawn Validation Fields -->
        <member name="F:Projectile.raycastHit">
            <summary>
                Stores the result of raycast collision detection operations. Contains hit point,
                surface normal, collider reference, and other collision data used for creating
                effects, calculating reflections, and applying damage at the correct position and
                angle.
            </summary>
        </member>
        <!-- Special Projectile Behaviors Methods -->
        <member name="M:Projectile.AvoidRect(UnityEngine.Transform,System.Single,System.Single)">
            <summary>
                Virtual method for implementing projectile avoidance behavior around rectangular
                areas. Base implementation is empty - derived projectile types override this to
                steer around obstacles.
            </summary>
            <param name="avoidTransform">Transform of the rectangle to avoid</param>
            <param name="avoidWidth">Width of the avoidance area</param>
            <param name="avoidHeight">Height of the avoidance area</param>
        </member>
        <member name="M:Projectile.CheckFriendlyFireMaterial">
            <summary>
                Updates the projectile's visual material based on team affiliation. Player
                projectiles (playerNum &gt;= 0) use the friendly material if available, while enemy
                projectiles use the enemy material. Helps players identify projectile ownership
                visually.
            </summary>
        </member>
        <member name="M:Projectile.CheckReturnZones">
            <summary>
                Scans for nearby ProjectileReturnZones that can capture and reverse this projectile.
                Only captures enemy projectiles (playerNum -1) within 64 units of an active zone.
                Initiates reversal behavior when a valid zone is found.
            </summary>
            <returns>True if the projectile was captured by a return zone, false otherwise</returns>
        </member>
        <member name="M:Projectile.IsHeldByZone">
            <summary>
                Checks if this projectile is currently being held and reversed by a return zone.
                Returns true when the projectile has an active zone reference and is in reversing
                state.
            </summary>
            <returns>True if held by a return zone, false otherwise</returns>
        </member>
        <member name="M:Projectile.ReverseProjectile">
            <summary>
                Initiates projectile reversal toward its firing unit. Sets reverse velocity targets
                to 80% of negative initial velocity, creating a boomerang effect. Only reverses if
                the original firing unit still exists.
            </summary>
        </member>
        <member name="M:Projectile.RunReversing">
            <summary>
                Handles projectile reversal behavior when captured by return zones. Gradually
                adjusts velocity toward the zone's return point using interpolation. Destroys the
                projectile when it gets within 16 units of the target position.
            </summary>
        </member>
        <member name="M:Projectile.Target(System.Single,System.Single,System.Int32)">
            <summary>
                Virtual method for implementing projectile targeting behavior. Base implementation
                is empty - guided projectile types override this to track toward specified
                coordinates.
            </summary>
            <param name="targetX">X coordinate of the target position</param>
            <param name="targetY">Y coordinate of the target position</param>
            <param name="playerNum">Player number associated with the targeting</param>
        </member>
        <!-- Special Projectile Behaviors Properties -->
        <member name="P:Projectile.StopBeingControlled">
            <summary>
                Virtual property that indicates whether the projectile should stop being controlled
                by external systems. Base implementation always returns false, but can be overridden
                by guided projectiles to signal when they should stop tracking targets.
            </summary>
        </member>
        <!-- Special Projectile Behaviors Fields -->
        <member name="F:Projectile.giveDeflectAchievementOnMookKill">
            <summary>
                When enabled, awards the "bronald_bradman" achievement if this deflected projectile
                kills an enemy. Checked in HitUnits when the projectile successfully damages a
                target. Used to track player skill in deflecting enemy projectiles back at enemies.
            </summary>
        </member>
        <member name="F:Projectile.heldDelay">
            <summary>
                Random delay before reversed projectile starts moving. Set to 0-0.333 seconds when
                caught by a return zone. Decrements each frame in RunReversing, creating a brief
                pause before the projectile reverses direction.
            </summary>
        </member>
        <member name="F:Projectile.reverseXI">
            <summary>
                Target X velocity for projectile reversal. Set to 80% of negative current X velocity
                when reversal begins. Used in RunReversing for smooth interpolation from current to
                reversed trajectory.
            </summary>
        </member>
        <member name="F:Projectile.reverseYI">
            <summary>
                Target Y velocity for projectile reversal. Set to 80% of negative current Y velocity
                when reversal begins. Used in RunReversing for smooth interpolation from current to
                reversed trajectory.
            </summary>
        </member>
        <member name="F:Projectile.reversing">
            <summary>
                Indicates the projectile is being reversed by a return zone (like Brondleman's
                ability). Set to true when captured by a ProjectileReturnZone. Triggers special
                movement behavior in RunReversing that gradually redirects the projectile.
            </summary>
        </member>
        <member name="F:Projectile.zone">
            <summary>
                Reference to the ProjectileReturnZone currently controlling this projectile. Set
                when the projectile enters a return zone's area of effect. Used to determine if the
                projectile should continue reversing behavior or has escaped the zone's influence.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:Projectile.DeregisterProjectile">
            <summary>
                Removes this projectile from the Map's projectile tracking system, typically called
                during cleanup when the projectile is destroyed.
            </summary>
        </member>
        <member name="M:Projectile.RegisterProjectile">
            <summary>
                Registers this projectile with the Map's projectile tracking system, allowing it to
                be found by other game systems for collision detection and effects.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:ProjectileController.Awake">
            <summary>
                Unity's Awake method that initializes mathematical lookup tables when the
                ProjectileController is first created.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Properties -->
        <member name="P:ProjectileController.instance">
            <summary>
                Gets the singleton instance of ProjectileController. Uses lazy initialization to
                find or create the instance when first accessed.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:ProjectileController.inst">
            <summary>
                Private static field that stores the singleton instance of ProjectileController.
            </summary>
        </member>
        <!-- Projectile Spawning Methods -->
        <member name="M:ProjectileController.SpawnGrenadeLocally(Grenade,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Spawns a grenade locally without network synchronization. Sets up the grenade with
                physics parameters and launches it.
            </summary>
            <param name="grenadePrefab">The grenade prefab to instantiate.</param>
            <param name="firedBy">The MonoBehaviour that threw this grenade.</param>
            <param name="x">The X position to spawn the grenade.</param>
            <param name="y">The Y position to spawn the grenade.</param>
            <param name="radius">The explosion radius of the grenade (passed to SetupGrenade but actual usage depends on grenade type).</param>
            <param name="force">The explosion force of the grenade (passed to SetupGrenade but actual usage depends on grenade type).</param>
            <param name="xI">The initial X velocity of the grenade.</param>
            <param name="yI">The initial Y velocity of the grenade.</param>
            <param name="playerNum">The player number who owns this grenade.</param>
            <param name="seed">Random seed for deterministic grenade behavior.</param>
            <returns>The spawned Grenade instance.</returns>
        </member>
        <member name="M:ProjectileController.SpawnGrenadeOverNetwork(Grenade,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
                Spawns a grenade across the network for multiplayer synchronization. Creates the
                grenade and sends RPCs to set it up and launch it on all clients. Note: Network
                functionality may not work reliably in mods.
            </summary>
            <param name="grenadePrefab">The grenade prefab to instantiate.</param>
            <param name="firedBy">The MonoBehaviour that threw this grenade.</param>
            <param name="x">The X position to spawn the grenade.</param>
            <param name="y">The Y position to spawn the grenade.</param>
            <param name="radius">The explosion radius (usage depends on grenade type).</param>
            <param name="force">The explosion force (usage depends on grenade type).</param>
            <param name="xI">The initial X velocity of the grenade.</param>
            <param name="yI">The initial Y velocity of the grenade.</param>
            <param name="playerNum">The player number who owns this grenade.</param>
            <param name="lifeM">Life multiplier for the grenade. Values less than 1 reduce the grenade's fuse time.</param>
            <returns>The spawned Grenade instance.</returns>
        </member>
        <member name="M:ProjectileController.SpawnLaserBeamLocally(LaserBeam,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Spawns a laser beam locally without network synchronization. Creates a laser beam
                with specified angle and rotation parameters.
            </summary>
            <param name="prefab">The laser beam prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that created this laser beam.</param>
            <param name="x">The X position to spawn the laser beam.</param>
            <param name="y">The Y position to spawn the laser beam.</param>
            <param name="z">The Z position to spawn the laser beam.</param>
            <param name="angle">The initial angle of the laser beam in degrees.</param>
            <param name="duration">How long the laser beam should last in seconds.</param>
            <param name="rotateSpeed">The rotation speed of the laser beam in degrees per second.</param>
            <param name="playerNum">The player number who owns this laser beam.</param>
            <returns>The spawned LaserBeam instance.</returns>
        </member>
        <member name="M:ProjectileController.SpawnLaserBeamOverNetwork(LaserBeam,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,UnityEngine.Transform,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Spawns a laser beam across the network for multiplayer synchronization. Can target a
                specific transform. Note: Network functionality may not work reliably in mods.
            </summary>
            <param name="prefab">The laser beam prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that created this laser beam.</param>
            <param name="x">The X position to spawn the laser beam.</param>
            <param name="y">The Y position to spawn the laser beam.</param>
            <param name="z">The Z position to spawn the laser beam.</param>
            <param name="duration">How long the laser beam should last in seconds.</param>
            <param name="target">Optional transform for the laser to track/target.</param>
            <param name="synced">Whether to enable continuous network synchronization.</param>
            <param name="playerNum">The player number who owns this laser beam.</param>
            <param name="executeImmediately">Whether to execute the network commands immediately.</param>
            <returns>The spawned LaserBeam instance.</returns>
        </member>
        <member name="M:ProjectileController.SpawnProjectileLocally(Projectile,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Spawns a projectile locally without network synchronization. This is the simplest
                overload for local projectile creation.
            </summary>
            <param name="projectilePrefab">The projectile prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that fired this projectile (usually the character or weapon).</param>
            <param name="x">The X position to spawn the projectile.</param>
            <param name="y">The Y position to spawn the projectile.</param>
            <param name="xI">The initial X velocity of the projectile.</param>
            <param name="yI">The initial Y velocity of the projectile.</param>
            <param name="playerNum">The player number who owns this projectile.</param>
            <returns>The spawned Projectile instance.</returns>
        </member>
        <member name="M:ProjectileController.SpawnProjectileLocally(Projectile,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Single)">
            <summary>
                Spawns a projectile locally with additional z-offset control. The
                AddTemporaryPlayerTarget parameter appears to be unused in this overload.
            </summary>
            <param name="prefab">The projectile prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that fired this projectile.</param>
            <param name="x">The X position to spawn the projectile.</param>
            <param name="y">The Y position to spawn the projectile.</param>
            <param name="xI">The initial X velocity of the projectile.</param>
            <param name="yI">The initial Y velocity of the projectile.</param>
            <param name="playerNum">The player number who owns this projectile.</param>
            <param name="AddTemporaryPlayerTarget">Unused parameter in this overload.</param>
            <param name="_zOffset">The Z-axis offset for the projectile spawn position.</param>
            <returns>The spawned Projectile instance.</returns>
        </member>
        <member name="M:ProjectileController.SpawnProjectileLocally(Projectile,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Single)">
            <summary>
                Spawns a projectile locally with all available parameters. The synced,
                AddTemporaryPlayerTarget, and executeImmediately parameters appear to be unused in
                local spawning.
            </summary>
            <param name="prefab">The projectile prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that fired this projectile.</param>
            <param name="x">The X position to spawn the projectile.</param>
            <param name="y">The Y position to spawn the projectile.</param>
            <param name="xI">The initial X velocity of the projectile.</param>
            <param name="yI">The initial Y velocity of the projectile.</param>
            <param name="synced">Unused parameter in local spawning.</param>
            <param name="playerNum">The player number who owns this projectile.</param>
            <param name="AddTemporaryPlayerTarget">Unused parameter in local spawning.</param>
            <param name="executeImmediately">Unused parameter in local spawning.</param>
            <param name="_zOffset">The Z-axis offset for the projectile spawn position.</param>
            <returns>The spawned Projectile instance.</returns>
        </member>
        <member name="M:ProjectileController.SpawnProjectileOverNetwork(Projectile,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Single)">
            <summary>
                Spawns a projectile across the network for multiplayer synchronization. Creates the
                projectile and sends RPCs to synchronize its state across all players. Note: Network
                functionality may not work reliably in mods.
            </summary>
            <param name="prefab">The projectile prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that fired this projectile.</param>
            <param name="x">The X position to spawn the projectile.</param>
            <param name="y">The Y position to spawn the projectile.</param>
            <param name="xI">The initial X velocity of the projectile.</param>
            <param name="yI">The initial Y velocity of the projectile.</param>
            <param name="synced">Whether to enable continuous network synchronization for this projectile.</param>
            <param name="playerNum">The player number who owns this projectile.</param>
            <param name="AddTemporaryPlayerTarget">Whether to add this projectile as a temporary target for the specified player.</param>
            <param name="executeImmediately">Whether to execute the network commands immediately or queue them.</param>
            <param name="_zOffset">The Z-axis offset for the projectile spawn position.</param>
            <returns>The spawned Projectile instance.</returns>
        </member>
        <member name="M:ProjectileController.SummonPortalNetworked(WarlockPortal,System.Int32,UnityEngine.Vector2,System.Single)">
            <summary>
                Spawns a warlock portal across the network with a delay. Only creates the portal if
                spawnPos is not Vector2.zero. Note: Network functionality may not work reliably in
                mods.
            </summary>
            <param name="portalPrefab">The warlock portal prefab to instantiate.</param>
            <param name="seenPlayerNum">The player number associated with this portal.</param>
            <param name="spawnPos">The position to spawn the portal. Portal is not created if this is Vector2.zero.</param>
            <param name="delay">Delay in seconds before the portal activates.</param>
        </member>
        <!-- Projectile Return System Methods -->
        <member name="M:ProjectileController.CheckReturnZone(System.Single,System.Single,System.Int32@,ProjectileReturnZone@,UnityEngine.MonoBehaviour@)">
            <summary>
                Checks if a position is within any registered return zone. If found, updates the
                projectile ownership and provides zone information. Return zones only affect
                projectiles from different players.
            </summary>
            <param name="x">The X position to check.</param>
            <param name="y">The Y position to check.</param>
            <param name="playerNum">The current player number of the projectile. Updated to the zone's player number if a zone is found.</param>
            <param name="returnZone">Output parameter that receives the ProjectileReturnZone if one is found at the position.</param>
            <param name="zoneFiredBy">Output parameter that receives the MonoBehaviour that created the return zone.</param>
            <returns>True if a return zone was found at the position, false otherwise.</returns>
        </member>
        <member name="M:ProjectileController.RegisterReturnZone(ProjectileReturnZone)">
            <summary>
                Registers a projectile return zone with the controller. Return zones can capture and
                redirect projectiles that enter their area.
            </summary>
            <param name="zone">The ProjectileReturnZone to register.</param>
        </member>
        <member name="M:ProjectileController.RemoveReturnZone(ProjectileReturnZone)">
            <summary>
                Removes a previously registered projectile return zone from the controller.
            </summary>
            <param name="zone">The ProjectileReturnZone to unregister.</param>
        </member>
        <!-- Projectile Return System Fields -->
        <member name="F:ProjectileController.returnZones">
            <summary>
                List of all currently active projectile return zones. These zones can capture and
                redirect projectiles that enter their radius.
            </summary>
        </member>
        <!-- Prefab Management Methods -->
        <member name="M:ProjectileController.GetAirstrikeGrenadePrefab">
            <summary>
                Gets the airstrike grenade prefab used for calling in aerial bombardments.
            </summary>
            <returns>The airstrike Grenade prefab.</returns>
        </member>
        <member name="M:ProjectileController.GetAlienPheromoneGrenadePrefab">
            <summary>
                Gets the alien pheromone grenade prefab used for alien-related mechanics.
            </summary>
            <returns>The alien pheromone Grenade prefab.</returns>
        </member>
        <member name="M:ProjectileController.GetMechDropGrenadePrefab">
            <summary>
                Gets the mech drop grenade prefab used for deploying mechs.
            </summary>
            <returns>The mech drop Grenade prefab.</returns>
        </member>
        <!-- Prefab Management Fields -->
        <member name="F:ProjectileController.airstrikeGrenade">
            <summary>
                The grenade prefab for airstrike special abilities. Used by character abilities and
                perks to call in aerial bombardment at marked locations. Can be spawned with
                stance-based trajectories (close-range: 30 velocity/70 angle, long-range: 200
                velocity/150 angle) or immediately detonated for instant strikes. Shared with
                SpecialAbilitiesController for consistent access.
            </summary>
        </member>
        <member name="F:ProjectileController.alienPheromoneGrenade">
            <summary>
                The grenade prefab for alien pheromone biological warfare. Creates pheromone effects
                that influence alien enemy behavior when detonated. Available as pocketed special
                ammunition pickup. Uses stance-based throwing system (crouching: 30/70 for close
                range, standing: 200/150 for long range) and shares animation behavior with
                airstrike and mech drop abilities.
            </summary>
        </member>
        <member name="F:ProjectileController.allGrenadePrefabs">
            <summary>
                Unity Inspector field containing references to all grenade prefabs in the game. Not
                referenced in code but likely populated via Unity Editor for cataloging, validation,
                or potential editor tooling purposes. Serves as a central registry of available
                grenade types.
            </summary>
        </member>
        <member name="F:ProjectileController.allProjectilePrefabs">
            <summary>
                Unity Inspector field containing references to all projectile prefabs in the game.
                Not referenced in code but likely populated via Unity Editor for cataloging,
                validation, or potential editor tooling purposes. Initialized as empty list in code.
            </summary>
        </member>
        <member name="F:ProjectileController.assasinationTargetPrefab">
            <summary>
                The assassination target prefab used by Matilda for marking elimination targets.
            </summary>
        </member>
        <member name="F:ProjectileController.broGummerSniperTargetPrefab">
            <summary>
                The specialized sniper targeting system prefab used by Bro Gummer.
            </summary>
        </member>
        <member name="F:ProjectileController.brobocop">
            <summary>
                The projectile prefab specifically used by Brobocop character.
            </summary>
        </member>
        <member name="F:ProjectileController.fireBallBombardment">
            <summary>
                The projectile prefab used for fireball bombardment attacks. Used in
                TimePressureBombardment for Rogueforce procedural generation mode to create
                environmental fire hazards. Spawned at random positions and immediately detonated to
                create explosive fiery bombardment effects.
            </summary>
        </member>
        <member name="F:ProjectileController.goldenLightProjectile">
            <summary>
                The golden light projectile prefab, likely used for special holy or light-based
                attacks by specific characters or abilities.
            </summary>
        </member>
        <member name="F:ProjectileController.mechDropGrenade">
            <summary>
                The grenade prefab for mech deployment special ability. Acts as a beacon that spawns
                a combat mech on detonation. Part of the pocketed special ammo system - players can
                collect and use this to deploy mechs using stance-based throwing mechanics identical
                to airstrikes. Uses custom animation sequence (row 5, frames 17-24) with deployment
                trigger at frame 4.
            </summary>
        </member>
        <member name="F:ProjectileController.remoteRocketPrefab">
            <summary>
                The prefab for remote-controlled rockets that can be guided by the player.
            </summary>
        </member>
        <member name="F:ProjectileController.shellBombardment">
            <summary>
                The projectile prefab used for artillery shell bombardment attacks.
            </summary>
        </member>
        <member name="F:ProjectileController.targetPrefab">
            <summary>
                A general-purpose following object prefab that can track targets.
            </summary>
        </member>
        <member name="F:ProjectileController.targetSystemPrefab">
            <summary>
                The targeting system prefab used by Robocop for locking onto enemies.
            </summary>
        </member>
        <member name="F:ProjectileController.teleportTargetPrefab">
            <summary>
                The remote teleport target prefab used for marking teleportation destinations in
                teleportation-based abilities and mechanics.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:SachelPack.OnDestroy">
            <summary>
                Removes this satchel pack from the global registry when destroyed. Calls
                Map.RemoveSachelPack to ensure the projectile is properly unregistered from game
                systems before calling base OnDestroy for cleanup.
            </summary>
        </member>
        <member name="M:SachelPack.Update">
            <summary>
                Frame update that applies gravity to non-stuck projectiles and handles rotation
                updates. Checks if the satchel is stuck to any surface (up, left, or right) and only
                applies gravity when not stuck. Calls base Update for standard projectile processing
                and SetRotation to update visual orientation.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:SachelPack.Death">
            <summary>
                Handles satchel pack destruction by notifying any object that has swallowed it
                before calling base death behavior. If this satchel has been swallowed by an object
                (like a worm), sends an "ExplodeWithin" message to cause internal damage before
                dying.
            </summary>
        </member>
        <member name="M:SachelPack.HitFragile">
            <summary>
                Handles collisions with fragile/destructible objects like doors and crates. Performs
                a raycast in the projectile's direction to detect fragile layer objects. For doors,
                plays a hit sound and reverses velocity based on the surface normal. For other
                fragile objects, applies damage that can destroy them.
            </summary>
        </member>
        <member name="M:SachelPack.HitProjectiles">
            <summary>
                Processes projectile-on-projectile collisions that can trigger early detonation.
                Manages a hit delay timer to prevent multiple hits in quick succession. When hit by
                another projectile, reduces the satchel's remaining lifetime and adds upward
                velocity. Multiple hits result in increasingly shorter fuse times (0.4s for first
                hit, 0.2s for subsequent hits).
            </summary>
        </member>
        <member name="M:SachelPack.HitUnits">
            <summary>
                Checks for unit collisions when the satchel pack impacts entities. Simply calls
                TryStickToUnit to attempt sticking to any unit at the current position. Overrides
                base behavior to enable the sticky mechanic instead of standard projectile damage.
            </summary>
        </member>
        <member name="M:SachelPack.MakeEffects(System.Boolean,System.Single,System.Single,System.Boolean,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
                Creates the massive explosion effects when the satchel pack detonates. Generates
                multiple layers of fire, smoke, and explosion effects distributed within the blast
                radius, creates shrapnel, damages terrain and units, burns units in range, shakes
                the camera, and disturbs wildlife. Only executes once per explosion.
            </summary>
            <param name="particles">Whether to create particle effects (not used in implementation)</param>
            <param name="x">X coordinate of the explosion center</param>
            <param name="y">Y coordinate of the explosion center</param>
            <param name="useRayCast">Whether to use raycasting for effects (not used in implementation)</param>
            <param name="hitNormal">Normal vector of the surface hit (not used in implementation)</param>
            <param name="point">Point of impact (not used in implementation)</param>
        </member>
        <member name="M:SachelPack.RunDamageBackground(System.Single)">
            <summary>
                Overrides base projectile behavior to disable background damage. Satchel packs don't
                damage background elements during flight - they only cause damage through their
                explosion effect when detonating.
            </summary>
            <param name="t">Time delta (not used as method is empty)</param>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:SachelPack.blastForce">
            <summary>
                Base explosion force multiplier for physics impulses. Multiplied by 40 when applied
                to create a final force of 800 units that launches units and debris away from the
                explosion center. Affects how far enemies and objects are thrown by the blast.
            </summary>
        </member>
        <member name="F:SachelPack.fire1">
            <summary>
                Primary fire effect prefab for explosion visuals. Creates flickering flame effects
                distributed randomly within the blast radius. Multiple instances are spawned with
                varying delays and velocities to create a dynamic fire spread effect.
            </summary>
        </member>
        <member name="F:SachelPack.range">
            <summary>
                Explosion blast radius in world units. Determines the area of effect for damage,
                burning, and visual effects when the satchel pack detonates. Default value of 28
                units creates a medium-sized explosion suitable for clearing groups of enemies.
            </summary>
        </member>
        <!-- Special Abilities Methods -->
        <member name="M:SachelPack.DetachFromUnit">
            <summary>
                Detaches the satchel pack from any unit it's stuck to and disables unit sticking.
                Called via RPC when the stuck unit dies and is moving slowly enough that the satchel
                should fall off. Clears the stuck unit reference and prevents re-sticking.
            </summary>
        </member>
        <member name="M:SachelPack.NoLongerSwallowedByObject">
            <summary>
                Clears the swallowed state when the satchel pack is no longer inside another object.
                Removes the reference to the swallowing object, preventing internal explosion damage
                when the satchel detonates.
            </summary>
        </member>
        <member name="M:SachelPack.StickToUnit(Unit,UnityEngine.Vector3)">
            <summary>
                Attaches the satchel pack to a unit at the specified local position. If the unit has
                enemy AI, triggers panic behavior for alerted enemies or shows a question bubble for
                unalerted ones. This method is called via RPC to synchronize sticking across all
                clients.
            </summary>
            <param name="unit">The unit to stick to</param>
            <param name="stucklocalPos">The local position on the unit where the satchel is attached</param>
        </member>
        <member name="M:SachelPack.SwallowedByObject(UnityEngine.GameObject)">
            <summary>
                Marks this satchel pack as being swallowed by another game object. Stores a
                reference to the swallowing object so that it can be notified to "ExplodeWithin"
                when the satchel detonates, causing internal damage to creatures that eat it.
            </summary>
            <param name="gO">The GameObject that has swallowed this satchel pack</param>
        </member>
        <member name="M:SachelPack.TryStickToUnit">
            <summary>
                Attempts to stick the satchel pack to any living unit at its current position. Only
                executes if stickyToUnits is enabled, no unit is already stuck to, and this is the
                local player's projectile. Uses Map.GetLivingUnit to find a valid target at the
                current coordinates.
            </summary>
        </member>
        <member name="M:SachelPack.TryStickToUnit(Unit,System.Boolean)">
            <summary>
                Attempts to stick the satchel pack to a specific unit with optional dead unit
                sticking. If successful, plays the stuck sound effect, calculates the local
                attachment position, and synchronizes the attachment across all clients via RPC.
            </summary>
            <param name="unit">The unit to attempt sticking to</param>
            <param name="_stickToDeadUnit">Whether the satchel should remain stuck to units after they die</param>
        </member>
        <!-- Special Abilities Fields -->
        <member name="F:SachelPack.objectThatHasSwallowedMe">
            <summary>
                Reference to a GameObject that has swallowed this satchel pack (like a worm enemy).
                When the satchel detonates while swallowed, it sends an "ExplodeWithin" message to
                cause internal damage to the creature that consumed it.
            </summary>
        </member>
        <member name="F:SachelPack.stickToDeadUnit">
            <summary>
                Controls whether the satchel remains attached to units after they die. When false
                (default), the satchel detaches if the dead unit's velocity drops below 100 units
                per second. When true, stays attached regardless of death state.
            </summary>
        </member>
        <member name="F:SachelPack.sticky">
            <summary>
                Master toggle for all sticky behavior including wall and unit sticking. When true,
                enables special spawn point checking that allows immediate wall attachment. When
                false, the satchel behaves as a standard bouncing projectile.
            </summary>
        </member>
        <member name="F:SachelPack.stickyToUnits">
            <summary>
                Enables unit sticking mechanics for this satchel pack. When true, the satchel will
                attempt to attach to any living unit it contacts. Automatically disabled when the
                satchel hits walls or other surfaces to prevent re-sticking after bouncing.
            </summary>
        </member>
        <member name="F:SachelPack.stuckLeft">
            <summary>
                Indicates the satchel is stuck to a wall on its left side. When true, the satchel
                maintains its position using raycasts to stay attached to the surface and stops all
                movement. Cleared if the wall is destroyed or disappears.
            </summary>
        </member>
        <member name="F:SachelPack.stuckRight">
            <summary>
                Indicates the satchel is stuck to a wall on its right side. When true, position is
                locked to the wall surface using raycasts and all velocity is zeroed. Can stick to
                damage relays and boss blocks in addition to regular terrain.
            </summary>
        </member>
        <member name="F:SachelPack.stuckToUnit">
            <summary>
                Reference to the unit this satchel pack is currently attached to. When set, the
                satchel follows the unit's position and inherits its velocity. Cleared when the unit
                dies (unless stickToDeadUnit is true) or when manually detached.
            </summary>
        </member>
        <member name="F:SachelPack.stuckTolocalPos">
            <summary>
                Local position offset where the satchel is attached relative to the stuck unit's
                transform. Used with TransformPoint to maintain consistent attachment position as
                the unit moves and rotates, creating realistic sticky bomb behavior.
            </summary>
        </member>
        <member name="F:SachelPack.stuckUp">
            <summary>
                Indicates the satchel is stuck to a ceiling or overhead surface. Maintains position
                relative to the surface above using raycasts. Can stick to special surfaces like
                damage relays and boss block pieces that regular projectiles would bounce off.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:SachelPack.ApplyGravity">
            <summary>
                Applies downward gravitational acceleration to the satchel pack's velocity.
                Decreases Y velocity by 600 units per second squared, creating realistic falling
                motion for thrown satchels that aren't stuck to surfaces.
            </summary>
        </member>
        <member name="M:SachelPack.CheckSpawnPoint">
            <summary>
                Validates and adjusts the spawn position to handle initial wall sticking for sticky
                satchels. For sticky satchels, checks for immediate wall collisions in the throw
                direction and sticks to surfaces if found. For non-sticky satchels, uses base spawn
                point checking. Also attempts to stick to units at spawn position.
            </summary>
        </member>
        <member name="M:SachelPack.Fire(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour)">
            <summary>
                Initializes and launches the satchel pack projectile. Performs initial wall
                collision check, calls base fire method for standard setup, then registers the
                satchel as a fetchable object for pickup mechanics and adds it to the global satchel
                pack registry for chain detonation systems.
            </summary>
            <param name="x">Starting X position</param>
            <param name="y">Starting Y position</param>
            <param name="xI">Initial X velocity</param>
            <param name="yI">Initial Y velocity</param>
            <param name="_zOffset">Z-axis offset for visual depth</param>
            <param name="playerNum">Player number who fired this projectile</param>
            <param name="FiredBy">The MonoBehaviour that fired this projectile</param>
        </member>
        <member name="M:SachelPack.HitWalls">
            <summary>
                Comprehensive wall collision detection and response system. For stuck satchels,
                maintains position relative to the stuck surface using raycasts. For flying
                satchels, checks all four directions for collisions. Handles special cases like saw
                blades (instant death), damage relays and boss blocks (sticking), and regular walls
                (bouncing). Updates position and velocity based on collision type.
            </summary>
            <returns>True if wall processing should continue, false if stuck to a unit</returns>
        </member>
        <member name="M:SachelPack.MakeBounceEffect(DirectionEnum,UnityEngine.Vector3)">
            <summary>
                Creates visual and audio effects when the satchel pack bounces off a surface.
                Override this method in derived classes to add bounce particles, sparks, or other
                impact effects at the specified position.
            </summary>
            <param name="direction">The direction the satchel bounced from</param>
            <param name="pos">The world position where the bounce occurred</param>
        </member>
        <member name="M:SachelPack.RunProjectile(System.Single)">
            <summary>
                Main projectile update method that processes movement and physics. Calls the base
                implementation to handle standard projectile behavior including position updates,
                collision detection, and lifetime management.
            </summary>
            <param name="t">Delta time for this frame</param>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:SachelPack.bounceXM">
            <summary>
                Horizontal bounce dampening multiplier applied when the satchel impacts vertical
                walls. Default value of 0.7 means the satchel retains 70% of its horizontal speed
                but reverses direction, creating a realistic ricochet effect off walls.
            </summary>
        </member>
        <member name="F:SachelPack.bounceYM">
            <summary>
                Vertical bounce dampening multiplier applied when the satchel impacts horizontal
                surfaces. Default value of 0.3 means the satchel retains 30% of its vertical
                velocity after bouncing, creating realistic energy loss. Ceiling bounces use a
                slightly higher value (0.4) for gameplay reasons.
            </summary>
        </member>
        <member name="F:SachelPack.frictionM">
            <summary>
                Ground friction multiplier applied to horizontal velocity when the satchel bounces
                on floors. Default value of 0.4 means horizontal speed is reduced to 40% on each
                ground contact, causing the satchel to gradually slow down and stop rolling.
            </summary>
        </member>
        <member name="F:SachelPack.heightOffGround">
            <summary>
                Offset distance in world units between the satchel's position and surfaces it sticks
                to. Default value of 2 units prevents the satchel from clipping into walls or
                floors, maintaining visual separation while appearing attached to the surface.
            </summary>
        </member>
        <!-- Audio System Methods -->
        <member name="M:SachelPack.PlayBounceSound(System.Single)">
            <summary>
                Plays impact sound effects when the satchel pack bounces off surfaces. Sound volume
                is calculated based on total velocity, with a minimum threshold of 33 units/second
                required to play. Volume scales quadratically with impact speed up to a maximum,
                then multiplied by the bounceVolumeM modifier.
            </summary>
            <param name="velocity">The velocity component used for the bounce (not directly used, total velocity is calculated instead)</param>
        </member>
        <member name="M:SachelPack.PlayStuckSound(System.Single)">
            <summary>
                Plays the attachment sound effect when the satchel pack sticks to a surface or unit.
                Uses the special attack sound from the sound holder at the specified volume with 3D
                positioning at the satchel's current location.
            </summary>
            <param name="v">Volume level for the sound effect (typically 0.7f)</param>
        </member>
        <!-- Audio System Fields -->
        <member name="F:SachelPack.bounceVolumeM">
            <summary>
                Master volume multiplier for bounce sound effects. Scales the calculated impact
                volume based on velocity, allowing different satchel types to have louder or quieter
                bounce sounds. Default value of 1.0 uses normal volume scaling.
            </summary>
        </member>
        <!-- Combat & Damage Fields (continued) Fields -->
        <member name="F:SachelPack.explosion">
            <summary>
                Main explosion puff effect prefab. Currently not used in the implementation but
                available for creating primary explosion visuals. The code uses shader explosions
                instead for the main blast effect.
            </summary>
        </member>
        <member name="F:SachelPack.explosionSmall">
            <summary>
                Small explosion puff effect prefab. Currently not used in the implementation but
                available for creating secondary explosion effects. The code uses shader explosions
                of varying sizes instead.
            </summary>
        </member>
        <member name="F:SachelPack.fire2">
            <summary>
                Secondary fire effect prefab for explosion visuals. Creates additional flickering
                flame effects that spawn alongside fire1 and fire3 to build dense fire coverage.
                Multiple instances spawn with random positions within the blast radius and varying
                delays between 0.1-0.7 seconds.
            </summary>
        </member>
        <member name="F:SachelPack.fire3">
            <summary>
                Tertiary fire effect prefab for explosion visuals. Works with fire1 and fire2 to
                create layered flame effects. Spawns once with randomized position and delay,
                contributing to the overall fire spread pattern during detonation.
            </summary>
        </member>
        <member name="F:SachelPack.hitProjectileDelay">
            <summary>
                Cooldown timer between projectile hit detections in seconds. Prevents multiple hits
                from being registered in rapid succession. Resets to 0.204s after each hit and
                counts down each frame until another hit can be detected.
            </summary>
        </member>
        <member name="F:SachelPack.projectileHitCount">
            <summary>
                Tracks how many times this satchel has been hit by other projectiles. Used to
                progressively shorten the fuse time with each hit - first hit reduces life to 0.4s,
                subsequent hits reduce it to 0.2s, encouraging chain reactions.
            </summary>
        </member>
        <member name="F:SachelPack.smoke1">
            <summary>
                Primary smoke puff effect for explosion atmosphere. Creates a single smoke cloud
                positioned randomly within 60% of the blast radius with a short delay (0-0.2s) and
                spreads outward at 3x the explosion range for dramatic smoke coverage.
            </summary>
        </member>
        <member name="F:SachelPack.smoke2">
            <summary>
                Secondary smoke puff effect for explosion atmosphere. Spawns with longer delay
                (0-0.5s) than smoke1 and uses directional velocity to spread in a specific
                direction, creating asymmetric smoke patterns for visual variety.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:Shrapnel.Awake">
            <summary>
                Initializes the shrapnel object when created or resurrected from the object pool.
                Sets up sprite references, caches original sprite values for restoration,
                initializes random seeds and z-depth offsets, and configures initial gravity and
                bounce settings. This method handles both fresh instantiation and pool resurrection
                scenarios.
            </summary>
        </member>
        <member name="M:Shrapnel.EffectDie">
            <summary>
                Handles the death of this shrapnel by attempting to return it to the object pool. If
                pooling is not available or fails, destroys the GameObject entirely. This is the
                primary cleanup method called when shrapnel expires.
            </summary>
        </member>
        <member name="M:Shrapnel.EffectFirstUpdate">
            <summary>
                Performs first-frame initialization for pooled effects. Registers with the
                ShrapnelManager for performance optimization through timeslicing, sets up physics
                layer masks, initializes see-saw motion parameters with random offsets, and applies
                any pending color changes. This ensures proper setup regardless of how the object
                was created.
            </summary>
        </member>
        <member name="M:Shrapnel.EffectResurrect">
            <summary>
                Resurrects this shrapnel from the object pool, resetting all properties to their
                initial states. Clears motion values, resets sprite dimensions, removes parented
                transform references, and re-invokes Awake for fresh initialization. This enables
                efficient object pooling by fully resetting the instance.
            </summary>
        </member>
        <member name="M:Shrapnel.Start">
            <summary>
                Called when the shrapnel first becomes active. Delegates initialization to
                EffectFirstUpdate for proper setup of pooled effect systems.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Properties -->
        <member name="P:Shrapnel.ShouldTimeslice">
            <summary>
                Gets whether this shrapnel should participate in timeslicing for performance
                optimization. Default returns true, allowing the ShrapnelManager to skip updates on
                some frames when many particles are active. Override to false for critical effects
                that must update every frame.
            </summary>
        </member>
        <member name="P:Shrapnel.DoneFirstUpdate">
            <summary>
                Gets or sets whether this effect has completed its first update cycle after being
                resurrected from an object pool. Used by the pooling system to ensure one-time
                initialization logic runs only once per resurrection. Set to false when
                ResurrectForPool is called, and automatically set to true by FirstUpdateFromPool.
                Part of the IPoolableEffect interface implementation.
            </summary>
        </member>
        <member name="P:Shrapnel.PoolIndex">
            <summary>
                Gets or sets the index position of this effect within its parent object pool. Set to
                -1 when the effect is not part of a pool or has been removed from pooling. Used by
                the pooling system to efficiently manage and return effects to their designated pool
                slots. Part of the IPoolableEffect interface implementation.
            </summary>
        </member>
        <member name="P:Shrapnel.ParentPool">
            <summary>
                Gets or sets the EffectPool instance that manages this pooled effect. Null when the
                effect is not pooled. Set by ResurrectForPool when retrieving from a pool. Used to
                return the effect back to its originating pool when it dies, avoiding garbage
                collection. Part of the IPoolableEffect interface implementation.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:Shrapnel.timesliceIndex">
            <summary>
                Unique index assigned by ShrapnelManager for timeslicing optimization. Used to
                distribute update calls across multiple frames when many shrapnel particles are
                active, improving performance by updating only a subset each frame.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:Shrapnel.ApplyGravity">
            <summary>
                Applies downward acceleration to vertical velocity based on gravity settings and
                time delta. Uses curGravity multiplier which can be modified for different gravity
                effects (e.g., in quicksand).
            </summary>
        </member>
        <member name="M:Shrapnel.Bounce(System.Boolean,System.Boolean)">
            <summary>
                Handles physics response when colliding with surfaces. Applies bounce multipliers to
                reverse velocity, adds friction, reduces lifetime and rotation speed. Can trigger
                death effects, blood splashes, or gradual life loss based on configuration flags.
            </summary>
            <param name="bounceX">Whether horizontal bounce occurred</param>
            <param name="bounceY">Whether vertical bounce occurred</param>
        </member>
        <member name="M:Shrapnel.CheckWallCollisions(System.Boolean@,System.Boolean@,System.Single@,System.Single@)">
            <summary>
                Checks for collisions with terrain blocks and handles bouncing or constraint logic.
                Also manages parenting to moving platforms when moveWithRestingTransform is enabled.
                Updates bounce flags and adjusts position/velocity based on collision results.
            </summary>
            <param name="bounceY">Output flag indicating vertical bounce occurred</param>
            <param name="bounceX">Output flag indicating horizontal bounce occurred</param>
            <param name="yIT">Reference to vertical movement delta, modified if constrained</param>
            <param name="xIT">Reference to horizontal movement delta, modified if constrained</param>
        </member>
        <member name="M:Shrapnel.Launch(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Launches the shrapnel from a specific position with initial velocity. Sets position,
                applies velocity with random variations, calculates lifetime with randomization,
                initializes rotation based on horizontal velocity, and configures sprite shrinking
                rates. If shrapnelControlsMotion is false, creates a Rigidbody for Unity physics
                simulation.
            </summary>
            <param name="x">Initial X position in world coordinates</param>
            <param name="y">Initial Y position in world coordinates</param>
            <param name="xI">Initial horizontal velocity</param>
            <param name="yI">Initial vertical velocity</param>
        </member>
        <member name="M:Shrapnel.Launch(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Launches the shrapnel with explicit rotation speed control. Similar to the
                4-parameter version but allows direct specification of rotation speed rather than
                calculating it from velocity. Used when precise rotation control is needed.
            </summary>
            <param name="x">Initial X position in world coordinates</param>
            <param name="y">Initial Y position in world coordinates</param>
            <param name="xI">Initial horizontal velocity</param>
            <param name="yI">Initial vertical velocity</param>
            <param name="_rI">Initial rotation speed in degrees per second</param>
        </member>
        <member name="M:Shrapnel.RunMovement">
            <summary>
                Executes physics movement for this frame, including drag application, velocity
                integration, wall collision detection, and position updates. Handles special cases
                like destruction inside walls and collision bouncing. Called by Update when
                shrapnelControlsMotion is true.
            </summary>
        </member>
        <member name="M:Shrapnel.SetPosition">
            <summary>
                Updates the transform position and rotation based on current values. If
                rotateAtRightAngles is true or rotation speed is zero, snaps rotation to 90-degree
                increments and rounds position to integer values for pixel-perfect rendering.
                Otherwise applies smooth rotation and positioning.
            </summary>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:Shrapnel._curRandomOnBounce">
            <summary>
                Current amount of random horizontal velocity applied on bounce. Initialized from
                xI_randomOnBounce and reduced after each bounce. Multiplied by 0.66 after each
                bounce application to create diminishing randomness over the shrapnel's lifetime.
            </summary>
        </member>
        <member name="F:Shrapnel.bloodSplashOnDeath">
            <summary>
                When true, creates a blood splash effect when the shrapnel bounces upward off the
                ground (yI &gt; 0). Uses the bloodColor field to determine splash color. Also calls
                Death() if the shrapnel isn't already dead. Used for gore particles.
            </summary>
        </member>
        <member name="F:Shrapnel.bounceM">
            <summary>
                The bounce multiplier that controls velocity retention after impacts. Default value
                is 0.4 (40% velocity retention). Applied differently for horizontal bounces
                (multiplied by 1.5) versus vertical bounces to create realistic bounce behavior.
            </summary>
        </member>
        <member name="F:Shrapnel.collidesWithWalls">
            <summary>
                Whether this shrapnel checks for and responds to collisions with walls and ground.
                When true, performs collision detection each frame and bounces off surfaces. When
                false, passes through all terrain. Default is true.
            </summary>
        </member>
        <member name="F:Shrapnel.curGravity">
            <summary>
                The current gravity multiplier being applied to the shrapnel. Initialized from
                gravityM during Awake(). Used in ApplyGravity() to calculate downward acceleration,
                can be modified at runtime for special effects.
            </summary>
        </member>
        <member name="F:Shrapnel.deathOnBounce">
            <summary>
                When true, immediately destroys the shrapnel particle upon any collision bounce.
                Used for fragile particles that should shatter on impact. Calls Death() method when
                triggered.
            </summary>
        </member>
        <member name="F:Shrapnel.destroyInsideWalls">
            <summary>
                Controls whether the shrapnel is immediately destroyed when inside wall colliders.
                Default is true for automatic cleanup. Checked during RunMovement() to prevent
                shrapnel from getting stuck inside terrain.
            </summary>
        </member>
        <member name="F:Shrapnel.drag">
            <summary>
                Air resistance factor applied to velocity each frame. When greater than 0, reduces
                both X and Y velocity by (velocity * drag * deltaTime). Used to simulate air
                friction and slow particles over time without using Unity's physics system.
            </summary>
        </member>
        <member name="F:Shrapnel.frictionM">
            <summary>
                Friction multiplier applied to horizontal velocity when bouncing off the ground.
                Default value is 1.0. When the shrapnel bounces vertically, the X velocity is
                multiplied by (0.8 * frictionM) to simulate ground friction effects.
            </summary>
        </member>
        <member name="F:Shrapnel.gravityM">
            <summary>
                Gravity strength multiplier for this shrapnel instance. Default value is 1.0 for
                normal gravity. Applied to the standard gravity acceleration of 500 units/second².
                Set to 0 for floating particles or values less than 1 for slower falling effects.
            </summary>
        </member>
        <member name="F:Shrapnel.groundLayer">
            <summary>
                Layer mask containing the ground collision layers (Ground and IndestructibleGround).
                Set during EffectFirstUpdate() and used for raycasting when moveWithRestingTransform
                is enabled to detect ground surfaces the shrapnel can parent to.
            </summary>
        </member>
        <member name="F:Shrapnel.lifeLossM">
            <summary>
                The percentage of starting life lost when the shrapnel bounces, if lifeLossOnBounce
                is enabled. Default value is 0.2 (20% life loss per bounce). Applied in Bounce()
                method to gradually reduce the shrapnel's lifetime through repeated impacts.
            </summary>
        </member>
        <member name="F:Shrapnel.lifeLossOnBounce">
            <summary>
                Determines whether the shrapnel loses life when bouncing off surfaces. When true,
                bouncing reduces the shrapnel's life by a percentage of its start life. Works in
                conjunction with lifeLossM to control how much life is lost per bounce.
            </summary>
        </member>
        <member name="F:Shrapnel.moveWithRestingTransform">
            <summary>
                Enables the shrapnel to move with surfaces it lands on, such as moving platforms or
                vehicles. When true, CheckWallCollisions() performs raycasts to detect surfaces
                below and parents the shrapnel to them.
            </summary>
        </member>
        <member name="F:Shrapnel.parentedCollider">
            <summary>
                Reference to a collider that the shrapnel is currently resting on or attached to.
                Used for platform attachment mechanics. When set, the shrapnel moves with the
                collider's transform, allowing it to ride on moving platforms or objects.
            </summary>
        </member>
        <member name="F:Shrapnel.parentedPosition">
            <summary>
                Stores the position of the parented collider's transform when attachment occurs.
                Used to calculate relative movement. Updated in CheckWallCollisions() when the
                shrapnel lands on a surface with moveWithRestingTransform enabled.
            </summary>
        </member>
        <member name="F:Shrapnel.r">
            <summary>
                Current rotation angle in degrees. Updated each frame by adding rI * deltaTime when
                shrapnelControlsMotion is true, creating spinning motion for debris particles.
            </summary>
        </member>
        <member name="F:Shrapnel.rI">
            <summary>
                Rotation speed in degrees per second. Set during Launch based on horizontal velocity
                direction, a random value, and the rotationSpeedMultiplier. Gradually reduced by
                bouncing impacts when configured.
            </summary>
        </member>
        <member name="F:Shrapnel.randomMotion">
            <summary>
                Enables chaotic random velocity changes each frame to simulate erratic particle
                movement. When true, adds random values between -6 and 6 (multiplied by
                randomMotionM) to both X and Y velocity, then applies damping to prevent excessive
                speed buildup.
            </summary>
        </member>
        <member name="F:Shrapnel.randomMotionM">
            <summary>
                Multiplier for random motion intensity when randomMotion is enabled. Default is 1.0.
                Higher values create more erratic movement. Also affects the damping rate - velocity
                is multiplied by (1 - deltaTime * 2 * randomMotionM) each frame.
            </summary>
        </member>
        <member name="F:Shrapnel.rotateAtRightAngles">
            <summary>
                When true, constrains rotation to 90-degree increments for pixel-art style
                rendering. Also enables position rounding to integer values for crisp pixel-perfect
                display. Default is true.
            </summary>
        </member>
        <member name="F:Shrapnel.rotationSpeedMultiplier">
            <summary>
                Multiplier applied to the rotation speed when the shrapnel is launched. Used to
                scale the base rotation speed calculation. When Launch() is called, this multiplier
                is applied to the calculated rotation speed (200-500 units) to create varied spin
                effects.
            </summary>
        </member>
        <member name="F:Shrapnel.seeSawCounter">
            <summary>
                Internal counter that tracks the current phase of the see-saw oscillation.
                Incremented each frame by (deltaTime * seeSawSpeed) and used as input to sine
                functions for generating the swaying motion. Initialized with a random value between
                0 and 100 to desynchronize multiple particles.
            </summary>
        </member>
        <member name="F:Shrapnel.seeSawFalling">
            <summary>
                Enables a pendulum-like swaying motion as the particle falls. When true, applies
                damping to velocity and adds sinusoidal horizontal movement based on fall speed.
                Creates a leaf-like or paper-like falling effect. Uses seeSawIntensity and
                seeSawSpeed to control the motion.
            </summary>
        </member>
        <member name="F:Shrapnel.seeSawIntesity">
            <summary>
                Controls the horizontal swing amplitude when seeSawFalling is enabled. Default is
                1.0. Applied as a multiplier to the base swing force of 300 units/second. Only
                affects horizontal movement when falling speed exceeds -8 units/second.
            </summary>
        </member>
        <member name="F:Shrapnel.seeSawSpeed">
            <summary>
                Controls the oscillation frequency of see-saw falling motion. Initialized to a
                random value between 8 and 13 in EffectFirstUpdate(). Higher values create faster
                swaying. Used to increment the seeSawCounter each frame.
            </summary>
        </member>
        <member name="F:Shrapnel.shrapnelControlsMotion">
            <summary>
                Determines whether the shrapnel class controls movement directly (true) or delegates
                to Unity's Rigidbody physics (false). When false, a Rigidbody component is added
                during Launch() for realistic physics simulation, commonly used for grenades.
            </summary>
        </member>
        <member name="F:Shrapnel.size">
            <summary>
                Collision size radius for the shrapnel particle in world units. Used for wall
                collision detection and determining when the shrapnel is inside walls. Also used to
                set the box collider size when using Unity's Rigidbody physics (size * 2 + 2 units).
            </summary>
        </member>
        <member name="F:Shrapnel.xI_randomOnBounce">
            <summary>
                The maximum horizontal velocity variation applied when bouncing. Controls how much
                random horizontal movement is added after impacts. Copied to _curRandomOnBounce
                during Awake() and reduced by 66% after each bounce for diminishing randomness.
            </summary>
        </member>
        <member name="F:Shrapnel.zOffset">
            <summary>
                The Z-axis offset for positioning the shrapnel in 3D space. Initialized with a small
                random value (0-0.05) to create visual depth variation. Applied to
                transform.position.z in SetPosition() to prevent z-fighting when multiple shrapnel
                overlap.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:Shrapnel.SetColor(UnityEngine.Color)">
            <summary>
                Sets the sprite color for this shrapnel. If called before first update, the color is
                cached and applied during initialization to ensure it persists through pooling
                operations.
            </summary>
            <param name="shrapnelColor">The color to apply to the sprite renderer</param>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:Shrapnel._originalSpriteColor">
            <summary>
                Stores the original color of the sprite component before any modifications. Default
                is Color.white. Cached during Awake() and used to restore the sprite to its original
                appearance during resurrection.
            </summary>
        </member>
        <member name="F:Shrapnel._originalSpriteDimY">
            <summary>
                Stores the original Y pixel dimension of the sprite. Default is 2.0. Used to set
                spritePixelHeight for UV-based fade animations where different sprite regions
                represent decay stages.
            </summary>
        </member>
        <member name="F:Shrapnel._originalSpriteHeight">
            <summary>
                Stores the original height of the sprite before any scaling effects. Default is 1.0.
                Used alongside _originalSpriteWidth to maintain the sprite's original aspect ratio
                during resurrection.
            </summary>
        </member>
        <member name="F:Shrapnel._originalSpriteWidth">
            <summary>
                Stores the original width of the sprite before any scaling effects. Default is 1.0.
                Used to restore the sprite to its original size when the shrapnel is resurrected
                from the object pool.
            </summary>
        </member>
        <member name="F:Shrapnel._spriteValuesCached">
            <summary>
                Tracks whether the original sprite values have been cached. Prevents redundant
                caching of sprite properties. Set to true after first caching _originalSpriteColor,
                width, height, and dimY values during Awake().
            </summary>
        </member>
        <member name="F:Shrapnel.fadeUVs">
            <summary>
                When true, cycles through different UV coordinates on the sprite sheet based on
                remaining lifetime. Uses spritePixelHeight to offset UV coordinates in 4 stages:
                full brightness at 80%+ life, then progressively darker frames at 60%, 30%, and
                below 30% life remaining.
            </summary>
        </member>
        <member name="F:Shrapnel.fades">
            <summary>
                When true, the sprite's alpha transparency fades from fully opaque to fully
                transparent over the particle's lifetime. Calculates alpha as (life / startLife).
                Used for particles that should gradually disappear rather than vanishing instantly.
            </summary>
        </member>
        <member name="F:Shrapnel.lifeM">
            <summary>
                Base lifetime multiplier for the shrapnel particle. Default is 1.0. Applied to the
                calculated lifetime in Launch() methods. Higher values make particles last longer
                before being destroyed. Final lifetime is (base time + random variation) * lifeM.
            </summary>
        </member>
        <member name="F:Shrapnel.randomLifeM">
            <summary>
                Controls the amount of random variation in particle lifetime. Default is 1.0. In the
                4-parameter Launch(), adds random variation between -0.5 and 0.5 seconds multiplied
                by this value. Helps create more natural-looking particle effects by varying
                lifespans.
            </summary>
        </member>
        <member name="F:Shrapnel.setColorAtStart">
            <summary>
                Flag indicating whether a custom color was set via SetColor() that should be
                reapplied after pooling resurrection. This field is set to true when SetColor() is
                called, reset to false during EffectResurrect(), and checked during
                EffectFirstUpdate() to restore the custom color. This mechanism ensures that
                shrapnel particles maintain their intended color even when recycled from the object
                pool system.
            </summary>
        </member>
        <member name="F:Shrapnel.shrink">
            <summary>
                When true, the sprite gradually shrinks to zero size over the particle's lifetime.
                Uses spriteWidthI and spriteHeightI to calculate the shrink rate. Default is true.
                Creates a dissolving or disintegrating visual effect.
            </summary>
        </member>
        <member name="F:Shrapnel.sprite">
            <summary>
                Reference to the SpriteSM component used for rendering the shrapnel's visual
                appearance. Cached during Awake() and used throughout the lifecycle for color
                changes, size adjustments, and UV animation.
            </summary>
        </member>
        <member name="F:Shrapnel.spriteHeight">
            <summary>
                Current height of the sprite in world units. Initialized from the sprite component's
                height in Launch() and modified over time when shrink is enabled. Used to
                dynamically resize the visual representation of the shrapnel particle.
            </summary>
        </member>
        <member name="F:Shrapnel.spriteHeightI">
            <summary>
                Rate of height change per second when shrink is enabled. Calculated as
                (-spriteHeight / life) to ensure the sprite reaches zero size when the particle
                dies. Applied each frame as (spriteHeightI * deltaTime) to gradually shrink the
                particle.
            </summary>
        </member>
        <member name="F:Shrapnel.spritePixelHeight">
            <summary>
                Height of each sprite frame in pixels on the texture atlas. Used with fadeUVs to
                calculate UV coordinate offsets for displaying different animation frames.
                Initialized from the sprite's pixel dimensions in Awake(). Default is 2 pixels.
            </summary>
        </member>
        <member name="F:Shrapnel.spriteWidth">
            <summary>
                Current width of the sprite in world units. Initialized from the sprite component's
                width in Launch() and modified over time when shrink is enabled. Used to dynamically
                resize the visual representation of the shrapnel particle.
            </summary>
        </member>
        <member name="F:Shrapnel.spriteWidthI">
            <summary>
                Rate of width change per second when shrink is enabled. Calculated as (-spriteWidth
                / life) to ensure the sprite reaches zero size when the particle dies. Applied each
                frame as (spriteWidthI * deltaTime) to gradually shrink the particle.
            </summary>
        </member>
        <!-- Core System Methods -->
        <member name="M:Shrapnel.Death">
            <summary>
                Marks the shrapnel as dead and triggers cleanup through EffectDie. Can be called
                directly or via RPC for networked destruction. Sets isDead flag to prevent multiple
                death calls.
            </summary>
        </member>
        <member name="M:Shrapnel.ForceDeathRPC">
            <summary>
                Sends a network RPC to destroy this shrapnel on all connected clients. Ensures
                synchronized particle removal in multiplayer scenarios.
            </summary>
        </member>
        <member name="M:Shrapnel.RunLife">
            <summary>
                Decrements lifetime by frame delta and triggers Death when expired. Simple countdown
                system that ensures shrapnel doesn't persist indefinitely, maintaining performance
                and visual clarity.
            </summary>
        </member>
        <member name="M:Shrapnel.ShouldRunThisFrame">
            <summary>
                Determines if this shrapnel should update this frame based on timeslicing
                optimization. When many particles are active, distributes updates across multiple
                frames to maintain performance. Always updates timesliceIndex counter for proper
                distribution.
            </summary>
        </member>
        <member name="M:Shrapnel.Update">
            <summary>
                Main update loop handling all shrapnel behavior. Performs timeslicing checks,
                calculates time delta with compensation, handles both manual and Rigidbody physics,
                applies various motion effects (gravity, drag, see-saw, quicksand), manages sprite
                effects (fading, UV animation, shrinking), and checks lifecycle conditions. Returns
                false if skipped due to timeslicing.
            </summary>
        </member>
        <!-- Core System Fields -->
        <member name="F:Shrapnel.RandomizeSeed">
            <summary>
                When true, generates a random seed value during Awake() instead of using the fixed
                seed value. Randomizes the seed to a value between 0 and 999,999,999 for varied
                shrapnel behavior across instances.
            </summary>
        </member>
        <member name="F:Shrapnel._shrapnelManager">
            <summary>
                Cached reference to the global ShrapnelManager singleton that manages timeslicing
                and pooling for performance. Retrieved during EffectFirstUpdate() and used to
                register this shrapnel instance and access timeslice settings.
            </summary>
        </member>
        <member name="F:Shrapnel.bloodColor">
            <summary>
                The color of blood effects created when this shrapnel impacts surfaces with
                bloodSplashOnDeath enabled. Readonly field that determines which blood splash effect
                variant is spawned (Red, Green, Oil, etc).
            </summary>
        </member>
        <member name="F:Shrapnel.isDead">
            <summary>
                Tracks whether the shrapnel has died and is ready for cleanup or pooling. Set to
                true by Death() method. Prevents redundant death calls and ensures proper cleanup
                sequencing before returning to object pool.
            </summary>
        </member>
        <member name="F:Shrapnel.life">
            <summary>
                Remaining lifetime in seconds before automatic destruction. Decremented each frame
                and triggers Death when reaching zero. Can be reduced by collisions, environmental
                effects, or explicit modification.
            </summary>
        </member>
        <member name="F:Shrapnel.random">
            <summary>
                The deterministic random number generator instance used for all randomness in the
                shrapnel's behavior. Initialized during Awake() with either the fixed seed or a
                randomized value based on RandomizeSeed flag.
            </summary>
        </member>
        <member name="F:Shrapnel.seed">
            <summary>
                The random seed used to initialize the Randomf instance for deterministic
                randomness. Default value is 10. Can be overridden by RandomizeSeed flag to use a
                random value, ensuring consistent behavior for replays or testing.
            </summary>
        </member>
        <member name="F:Shrapnel.startLife">
            <summary>
                Original lifetime value set during Launch, used for calculating fade ratios and
                other time-based effects. Preserved throughout the shrapnel's existence for
                normalized time calculations. Default is 1 second.
            </summary>
        </member>
        <member name="F:Shrapnel.t">
            <summary>
                Delta time value for the current frame, adjusted for time slicing. Clamped between 0
                and 0.133 seconds to prevent large time jumps. When time slicing is active, this
                value is multiplied by the time slice amount to compensate for running fewer updates
                per second.
            </summary>
        </member>
        <!-- Core System Properties -->
        <member name="P:Shrapnel.ShouldKillIfNotVisible">
            <summary>
                Gets or sets whether this shrapnel should automatically die when it moves
                off-screen. Defaults to true in Awake for performance optimization. When true,
                checks visibility in Update using SortOfFollow.IsItSortOfVisible with a 48x48 pixel
                buffer zone. If not visible and life &gt; 0, immediately sets life to -0.1f to
                trigger death. Can be overridden (e.g., set to false for cutscene effects that need
                to persist off-screen).
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:Sound.Awake">
            <summary>
                Initializes the Sound singleton instance and sets up all audio components. Creates
                four primary AudioSource components: the main music source, high/low intensity music
                sources for dynamic music, and ambient background/effects sources. Configures volume
                based on PlayerOptions settings and whether in menu screen. Creates a pool of 64
                ReusableOneShotSound objects for efficient sound effect playback. Sets up 3D audio
                properties including rolloff mode and spatial blend.
            </summary>
        </member>
        <member name="M:Sound.LateUpdate">
            <summary>
                Main update loop for the Sound system. Handles ambient sound delays, music fading
                in/out, intensity-based music transitions, low pass filter effects, pitch shifting,
                ambient effects timing, and various sound category frame limiters. Manages smooth
                transitions between high and low intensity music based on gameplay alertness.
                Processes audio effects like boss pulse timing and victory sting playback.
            </summary>
        </member>
        <member name="M:Sound.OnEnable">
            <summary>
                Unity callback when the Sound object is enabled. Checks if automatic music playback
                should start based on several conditions: musicClip must be assigned, music volume
                must be above 0.1, music must not already be playing, playAutomatically must be
                true, and playDelay must be 0 or less. If all conditions are met, starts playing the
                main music track.
            </summary>
        </member>
        <member name="M:Sound.Start">
            <summary>
                Handles initial music playback setup when the component starts. Automatically plays
                music if playDelay is 0, playAutomatically is true, music is enabled, and no music
                is currently playing. Also disables the audio low pass filter if one is assigned.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:Sound.isInMenuScreen">
            <summary>
                Indicates whether the Sound system is currently being used in a menu screen rather
                than gameplay. This affects music volume calculations in SetMusicVolume() and
                determines which volume settings to apply. Menu screens use direct PlayerOptions
                volume while gameplay may have additional volume modifiers.
            </summary>
        </member>
        <member name="F:Sound.playAutomatically">
            <summary>
                Controls whether music should start playing automatically when the Sound system
                initializes. When true, the music will begin playing in Start() or OnEnable() if
                other conditions are met. Set to false when boss music or special tracks are playing
                to prevent the main music from interfering. This flag is disabled during boss pulse
                and boss fight music playback.
            </summary>
        </member>
        <member name="F:Sound.playDelay">
            <summary>
                The delay in seconds before music starts playing automatically after initialization.
                Used in Start() and OnEnable() to postpone music playback. When greater than 0, the
                delay counts down in Update() before triggering playback. A value of 0 or less
                allows immediate playback if other conditions are met.
            </summary>
        </member>
        <!-- Audio System Management Methods -->
        <member name="M:Sound.GetInstance">
            <summary>
                Returns the singleton instance of the Sound class for global access to the audio
                system.
            </summary>
            <returns>The single Sound instance managing all game audio</returns>
        </member>
        <member name="M:Sound.Pause">
            <summary>
                Pauses all audio playback by deactivating the Sound instance GameObject. This stops
                all music, sound effects, and ambient sounds while preserving their state. The audio
                can be resumed later with Resume().
            </summary>
        </member>
        <member name="M:Sound.PlayAnnouncer(UnityEngine.AudioClip[],System.Single,System.Single,System.Single)">
            <summary>
                Plays a random announcer sound from an array. Returns null if clips array is null or
                empty. Otherwise selects a random clip from the array and calls the single-clip
                overload with all parameters.
            </summary>
            <param name="clips">Array of AudioClips to randomly select from</param>
            <param name="v">Volume level for playback</param>
            <param name="pitch">Pitch multiplier for playback</param>
            <param name="delay">Delay in seconds before playing (default 0)</param>
            <returns>The AudioSource playing the announcer sound, or null if clips array was invalid</returns>
        </member>
        <member name="M:Sound.PlayAnnouncer(UnityEngine.AudioClip,System.Single,System.Single,System.Single)">
            <summary>
                Plays an announcer sound with special audio settings. Positions the sound at the
                Sound instance position, or camera position if Sound instance is null. Creates the
                audio using PlayAudioClip with reverb and effects bypass enabled, marked as
                announcer sound, and never pooled. The created AudioSource is unparented and marked
                with DontDestroyOnLoad to persist across scene changes.
            </summary>
            <param name="clip">The AudioClip to play</param>
            <param name="v">Volume level for playback</param>
            <param name="pitch">Pitch multiplier for playback</param>
            <param name="delay">Delay in seconds before playing (default 0)</param>
            <returns>The AudioSource playing the announcer sound, or null if unable to create</returns>
        </member>
        <member name="M:Sound.Resume">
            <summary>
                Resumes audio playback after a pause by reactivating the Sound GameObject.
                Repositions the Sound transform to match the SortOfFollow camera position if
                available. If music was playing before the pause (musicOn is true) or boss pulse
                music was active, restarts the music playback from where it was paused.
            </summary>
        </member>
        <member name="M:Sound.SetPosition(UnityEngine.Vector3)">
            <summary>
                Updates the world position of the Sound instance GameObject. This affects the
                listener position for 3D audio calculations and determines where ambient sounds and
                music originate from. Typically called to follow the camera or player position for
                proper audio spatialization.
            </summary>
            <param name="position">The new world position for the Sound system</param>
        </member>
        <!-- Audio System Management Properties -->
        <member name="P:Sound.MusicEnabled">
            <summary>
                Gets whether music is enabled based on the player's music volume setting. Music is
                considered enabled if the volume is greater than 0.01f.
            </summary>
        </member>
        <!-- Audio System Management Fields -->
        <member name="F:Sound.instance">
            <summary>
                Static reference to the singleton Sound instance. Set during Awake() and accessed
                globally via GetInstance(). Provides centralized access to all audio playback
                functionality throughout the game.
            </summary>
        </member>
        <member name="F:Sound.music">
            <summary>
                Main AudioSource component for background music playback. Created in Awake() with
                specific settings (looping, no doppler, priority 1). Handles standard music tracks,
                boss music, victory stings, and special music sequences.
            </summary>
        </member>
        <!-- Music Playback & Control Methods -->
        <member name="M:Sound.FadeInLevelMusic">
            <summary>
                Fades in the level's intensity-based music system. Only executes if music volume is
                above 0.01f. Enables the music intensity system, stops all currently playing music
                tracks (low intensity, high intensity, and regular music), then calls FadeInMusic()
                to start the fade-in process.
            </summary>
        </member>
        <member name="M:Sound.FadeInMusic">
            <summary>
                Starts fading in the music from silence to full volume. If music isn't already
                playing, calls PlayMusic() first. Sets playingMusicLoud to false, enables
                fadingInMusic, disables fadingOutMusic, and sets the fade speed to the player's
                music volume setting.
            </summary>
        </member>
        <member name="M:Sound.FadeMusic">
            <summary>
                Sets the static fading flag to true and disables automatic music playback. This
                appears to be a simplified fade control that affects the global music state.
            </summary>
        </member>
        <member name="M:Sound.FadeOutMusic">
            <summary>
                Starts fading out the currently playing music to silence. Only executes if music
                volume is above 0.01f. Enables fadingOutMusic, disables fadingInMusic, sets fade
                speed to half the player's music volume, and disables automatic music playback.
            </summary>
        </member>
        <member name="M:Sound.GetBossMusicVolumeM(UnityEngine.AudioClip)">
            <summary>
                Returns a volume multiplier specific to different boss music tracks. Alien boss
                music gets 1.6666x volume, Forest boss gets 1.28x, and all others get 1.1x. Also
                sets playingMusicLoud to false.
            </summary>
            <param name="clip">The boss music clip to get volume multiplier for</param>
            <returns>Volume multiplier value between 1.1 and 1.6666</returns>
        </member>
        <member name="M:Sound.GetVictorySting">
            <summary>
                Gets the appropriate victory music clip based on the currently playing boss music.
                The method sets playingMusicLoud to false and returns specific victory clips for
                different boss themes (jungle, alien, forest, hell, charlie, delta). If no specific
                boss music is playing or if Map.MapData is null, returns the default victory sting
                clip.
            </summary>
            <returns>The victory music AudioClip that corresponds to the current boss theme, or the default victory sting</returns>
        </member>
        <member name="M:Sound.IsVictoryStingPlaying">
            <summary>
                Returns whether a victory sting (short celebratory music clip) is currently playing
                after defeating a boss or completing a level.
            </summary>
            <returns>True if victory music is playing, false otherwise</returns>
        </member>
        <member name="M:Sound.PlayDeathMusic">
            <summary>
                Static method that plays the death music clip when the player dies. Only plays if
                music volume is above 0.01f. Sets the music AudioSource to play the death clip
                non-looping at the player's configured music volume.
            </summary>
        </member>
        <member name="M:Sound.PlayMainMusic">
            <summary>
                Plays the main background music clip. Sets playingMusicLoud to false and only plays
                if music volume is above 0.01f. Configures the music AudioSource to play the
                musicClip in a loop at the player's configured music volume.
            </summary>
        </member>
        <member name="M:Sound.PlayMusic">
            <summary>
                Main music playback method that handles all music selection logic. Checks map data
                for music type and theme, selects appropriate low/high intensity music clips based
                on level theme (Jungle, City, Hell, Desert, etc.), handles special cases like boss
                fights and BroDown mode, and configures volume multipliers for specific music types.
                Stops music if map specifies silence. Manages the dual-intensity music system for
                dynamic gameplay audio.
            </summary>
        </member>
        <member name="M:Sound.PlayVictorySting">
            <summary>
                Static method that plays the victory music by calling the internal implementation on
                the singleton instance. This is a convenience wrapper for external classes to
                trigger victory music playback.
            </summary>
        </member>
        <member name="M:Sound.PlayVictoryStingInternal">
            <summary>
                Internal method that plays the victory music. Sets playingMusicLoud to false and
                prevents multiple plays by checking isVictoryStingPlaying. Stops all intensity music
                tracks and boss pulse music, disables music intensity system, then plays the
                appropriate victory clip obtained from GetVictorySting() with volume adjusted by
                GetBossMusicVolumeM(). Sets the music to non-looping and resets all fade states.
            </summary>
        </member>
        <!-- Music Playback & Control Fields -->
        <member name="F:Sound.alertnessCounter">
            <summary>
                Counter for tracking alertness or intensity level. Currently unused in the codebase
                - appears to be a placeholder for a music intensity or alert state system that was
                not implemented.
            </summary>
        </member>
        <member name="F:Sound.currentIntensityMusicVolume">
            <summary>
                The current volume level for intensity-based music tracks (range 0-0.7f). This value
                can be adjusted during gameplay using PageUp/PageDown keys and is affected by fade
                in/out operations. It's multiplied by different factors for high intensity (0.6f)
                and low intensity (0.5f) music to create proper volume balance. During music fades,
                this value lerps towards the target volume at the rate specified by fadeSpeed.
                Default starting value is 0.13f but typically matches
                PlayerOptions.Instance.musicVolume.
            </summary>
        </member>
        <member name="F:Sound.deathClip">
            <summary>
                Audio clip played when the player dies. Used by PlayDeathMusic() static method,
                plays once (not looped) at the current music volume setting.
            </summary>
        </member>
        <member name="F:Sound.fadeSpeed">
            <summary>
                The rate at which music volume changes during fade in/out operations, measured in
                volume units per second. Default value is 0.1f for gradual fades. Can be set to
                specific values like 0.02f for very slow boss pulse fades, or to
                PlayerOptions.Instance.musicVolume for standard fades that complete in about 1
                second at full volume. Used by both fadingInMusic and fadingOutMusic to control
                transition smoothness.
            </summary>
        </member>
        <member name="F:Sound.fading">
            <summary>
                A static flag controlling global music fade-out behavior. When true, the main music
                volume decreases by 0.5f per second until it reaches 0.01f, then stops playing. This
                provides a quick fade-out effect used when transitioning between levels or game
                states. Unlike fadingOutMusic which uses a configurable fade speed, this always
                fades at a fixed rate. Set via the FadeMusic() method and affects all Sound
                instances.
            </summary>
        </member>
        <member name="F:Sound.fadingInMusic">
            <summary>
                Controls whether music is currently fading in with configurable speed. When true,
                music volume increases from its current level up to the target volume at the rate
                specified by fadeSpeed. Automatically sets to false when the target volume is
                reached. Used for smooth music entrances after silence or when resuming from a faded
                state. Takes priority over fadingOutMusic when both would be active.
            </summary>
        </member>
        <member name="F:Sound.fadingOutMusic">
            <summary>
                Controls whether music is currently fading out with configurable speed. When true,
                both regular music and intensity music volumes decrease at the rate specified by
                fadeSpeed. This is used for smooth transitions when stopping music or switching
                tracks. Automatically set to false when fadingInMusic is activated. The fade
                continues until volume reaches zero or is interrupted by other music commands.
            </summary>
        </member>
        <member name="F:Sound.highAlienClip">
            <summary>
                High intensity music for Alien theme. Used as highIntensityMusicClip in SetMusic()
                when MusicType is Alien. Has a 1.25x volume multiplier for increased loudness.
            </summary>
        </member>
        <member name="F:Sound.highDesertClip">
            <summary>
                Audio clip for high intensity desert theme music. Assigned to highIntensityMusicClip
                when MusicType.Desert is selected. Used as part of the dynamic music system that
                plays high intensity music during combat in desert environments.
            </summary>
        </member>
        <member name="F:Sound.highFactoryClip">
            <summary>
                High intensity music for Factory/Forest theme. Used as highIntensityMusicClip in
                SetMusic() when MusicType is Factory (typically for Forest and City theme levels).
            </summary>
        </member>
        <member name="F:Sound.highHellClip">
            <summary>
                High intensity music for Hell theme. Used as highIntensityMusicClip in SetMusic()
                when MusicType is Hell (for Hell-themed levels).
            </summary>
        </member>
        <member name="F:Sound.highIntensityMusic">
            <summary>
                AudioSource for high-intensity music layer in the dynamic music system. Fades in
                during combat or high-action sequences based on
                StatisticsController.GetMusicIntensity(). Created in Awake() with volume at 66.6% of
                base music volume.
            </summary>
        </member>
        <member name="F:Sound.highIntensityMusicClip">
            <summary>
                Current high intensity music clip selected based on the map's MusicType (jungle,
                factory, hell, desert, etc). This clip is assigned to the highIntensityMusic
                AudioSource and plays during combat situations. Volume is controlled by
                musicVolumeCaseSpecificMultiplier and intensity blending system.
            </summary>
        </member>
        <member name="F:Sound.highIntensityTime">
            <summary>
                The remaining time in seconds to continue playing high intensity music after combat
                ends. When gameplay action triggers high intensity music, this timer is set (default
                1.2 seconds) and counts down. The high intensity track continues playing until both
                this timer reaches zero AND StatisticsController.GetMusicIntensity() returns 0. This
                creates a brief musical "cooldown" after action sequences, preventing jarring
                transitions when combat briefly pauses.
            </summary>
        </member>
        <member name="F:Sound.highJungleBlueSkyClip">
            <summary>
                High intensity music for jungle blue sky theme. Used as highIntensityMusicClip in
                SetMusic() when MusicType is JungleBlueSky or as the default fallback music.
            </summary>
        </member>
        <member name="F:Sound.highJungleRedSkyClip">
            <summary>
                High intensity music for jungle red sky theme. Used as highIntensityMusicClip in
                SetMusic() when MusicType is JungleRedSky (typically for BurningJungle theme
                levels).
            </summary>
        </member>
        <member name="F:Sound.highOriginalMusicClip">
            <summary>
                High intensity version of the original Broforce drums music. Used as
                highIntensityMusicClip in SetMusic() when MusicType is BroforceDrums (typically for
                Jungle theme levels).
            </summary>
        </member>
        <member name="F:Sound.isVictoryStingPlaying">
            <summary>
                Tracks whether a victory sting is currently playing. Prevents multiple victory
                stings from playing simultaneously and is checked by other systems (like Helicopter)
                to know when victory music is active. Set to true when PlayVictoryStingInternal() is
                called.
            </summary>
        </member>
        <member name="F:Sound.lowAlienClip">
            <summary>
                Low intensity music for Alien theme. Used as lowIntensityMusicClip in SetMusic()
                when MusicType is Alien. Has a 1.25x volume multiplier for increased loudness.
            </summary>
        </member>
        <member name="F:Sound.lowDesertClip">
            <summary>
                Audio clip for low intensity desert theme music. Assigned to lowIntensityMusicClip
                when MusicType.Desert is selected. Used as part of the dynamic music system that
                plays low intensity music during calm moments in desert environments.
            </summary>
        </member>
        <member name="F:Sound.lowFactoryClip">
            <summary>
                Low intensity music for Factory/Forest theme. Used as lowIntensityMusicClip in
                SetMusic() when MusicType is Factory (typically for Forest and City theme levels).
            </summary>
        </member>
        <member name="F:Sound.lowHellClip">
            <summary>
                Low intensity music for Hell theme. Used as lowIntensityMusicClip in SetMusic() when
                MusicType is Hell (for Hell-themed levels).
            </summary>
        </member>
        <member name="F:Sound.lowIntensityMusic">
            <summary>
                AudioSource for low-intensity music layer in the dynamic music system. Plays during
                exploration or calm moments, fading out when action increases. Created in Awake()
                with volume at 50% of base music volume.
            </summary>
        </member>
        <member name="F:Sound.lowIntensityMusicClip">
            <summary>
                Current low intensity music clip selected based on the map's MusicType (jungle,
                factory, hell, desert, etc). This clip is assigned to the lowIntensityMusic
                AudioSource and plays during calm gameplay moments. Volume is controlled by
                musicVolumeCaseSpecificMultiplier and intensity blending system.
            </summary>
        </member>
        <member name="F:Sound.lowJungleBlueSkyClip">
            <summary>
                Low intensity music for jungle blue sky theme. Used as lowIntensityMusicClip in
                SetMusic() when MusicType is JungleBlueSky or as the default fallback music.
            </summary>
        </member>
        <member name="F:Sound.lowJungleRedSkyClip">
            <summary>
                Low intensity music for jungle red sky theme. Used as lowIntensityMusicClip in
                SetMusic() when MusicType is JungleRedSky (typically for BurningJungle theme
                levels).
            </summary>
        </member>
        <member name="F:Sound.lowOriginalMusicClip">
            <summary>
                Low intensity version of the original Broforce drums music. Used as
                lowIntensityMusicClip in SetMusic() when MusicType is BroforceDrums (typically for
                Jungle theme levels).
            </summary>
        </member>
        <member name="F:Sound.musicClip">
            <summary>
                The main background music AudioClip for the current level or menu. This is the
                primary music track that plays during normal gameplay when not in boss fights or
                special sequences. Used by PlayMainMusic() and checked during automatic playback in
                Start() and OnEnable(). Can be null if no music is assigned.
            </summary>
        </member>
        <member name="F:Sound.musicOn">
            <summary>
                A static flag indicating whether music is globally enabled in the game. This is
                toggled by the F2 key during gameplay and affects all music playback decisions. When
                false, no music will play regardless of other settings. When true, music plays
                according to volume settings and game state. Default value is true. Separate from
                the MusicEnabled property which checks player volume settings.
            </summary>
        </member>
        <member name="F:Sound.musicStartTime">
            <summary>
                The timestamp in seconds where music playback should begin when starting a track.
                This allows music to start at a specific point rather than the beginning, useful for
                syncing music across level transitions or resuming after interruptions. Applied to
                the main music AudioSource via music.time when PlayMusic() is called. Default value
                is 0 (start from beginning).
            </summary>
        </member>
        <member name="F:Sound.musicVolumeCaseSpecificMultiplier">
            <summary>
                Volume multiplier for music tracks based on the selected MusicType. Default is 1.0f
                for most types. Alien music uses 1.25f for higher volume. Applied to both low and
                high intensity music volumes.
            </summary>
        </member>
        <member name="F:Sound.overrideVolumeLevel">
            <summary>
                An override multiplier for music volume that takes precedence over standard volume
                calculations. When greater than 0, music volume is clamped to this value times the
                player's music volume setting. Used for special scenarios like menu screens (0.43f
                volume cap). When -1 (default), no override is applied and normal volume
                calculations are used. This ensures certain music never plays too loudly regardless
                of player settings.
            </summary>
        </member>
        <member name="F:Sound.playingIntensityIntro">
            <summary>
                Indicates whether the music intensity system is playing intro versions of the
                intensity tracks. When true, switching between low and high intensity will play the
                tracks from the beginning rather than syncing timestamps. This flag is cleared after
                the first intensity switch occurs. Used to ensure music starts properly when the
                intensity system first activates, preventing mid-track jumps that could sound
                unnatural.
            </summary>
        </member>
        <member name="F:Sound.shopMusicElevatorJingle">
            <summary>
                Elevator music jingle used in shop sequences
                (BossPulseType.ShopMusicElevatorJingle). Provides light background music for shop or
                elevator intermission scenes.
            </summary>
        </member>
        <member name="F:Sound.starSpangledBanner">
            <summary>
                The Star-Spangled Banner (US national anthem) music clip used for patriotic moments.
                Played during BossPulseType.StarSpangledBanner with playingMusicLoud flag set to
                true. Does not use boss pulse flag, indicating special ceremonial playback.
            </summary>
        </member>
        <member name="F:Sound.useMusicIntensity">
            <summary>
                Controls whether the dynamic music intensity system is active. When true, music
                switches between low and high intensity tracks based on gameplay action (via
                StatisticsController.GetMusicIntensity()). When false, standard single-track music
                plays instead. This is automatically set to true for most level music, false for
                boss fights, victory stings, and special music like BroDown mode. The intensity
                system allows seamless transitions between calm and action-packed musical moments.
            </summary>
        </member>
        <member name="F:Sound.victorySting">
            <summary>
                Default audio clip for victory music. Used by GetVictorySting() as the fallback
                victory music when no boss-specific victory clip matches or when Map.MapData exists.
                Also used in PlaySpecialMusic().
            </summary>
        </member>
        <!-- Ambient Sound Management Methods -->
        <member name="M:Sound.CheckInitialAmbience">
            <summary>
                Checks if ambient sounds should start playing based on map data. Called early in
                initialization to set up environmental audio. Only switches ambience if not already
                playing and map data exists.
            </summary>
        </member>
        <member name="M:Sound.PlayAmbientSource">
            <summary>
                Internal helper method that starts playing the currently selected ambient sound
                holder. Sets the background audio clip from the first sound in the holder's
                background array, starts playback, and marks ambient as playing.
            </summary>
        </member>
        <member name="M:Sound.PlayAutomaticAmbient">
            <summary>
                Automatically selects and plays ambient background sounds based on the current level
                theme. Maps themes to specific ambient sound holders: Jungle/Forest use jungle
                ambience, City uses city sounds, Hell uses hell ambience, Desert uses desert sounds,
                etc. Starts the ambient background AudioSource with the selected sounds at zero
                volume for fade-in.
            </summary>
        </member>
        <member name="M:Sound.SetAmbientToAlienCave">
            <summary>
                Sets the ambient background sounds to alien cave environment with otherworldly
                sounds and alien atmosphere. Includes direct audio source setup, playing immediately
                after assignment.
            </summary>
        </member>
        <member name="M:Sound.SetAmbientToBurningJungle">
            <summary>
                Sets the ambient background sounds to burning jungle environment (fire crackling,
                destruction sounds). Only changes if not already using burning jungle ambience.
            </summary>
        </member>
        <member name="M:Sound.SetAmbientToCave">
            <summary>
                Sets the ambient background sounds to cave environment (echoes, dripping water, cave
                ambience). Includes direct audio source setup, playing immediately after assignment.
            </summary>
        </member>
        <member name="M:Sound.SetAmbientToCity">
            <summary>
                Sets the ambient background sounds to city environment (traffic, urban noise). Only
                changes if not already using city ambience.
            </summary>
        </member>
        <member name="M:Sound.SetAmbientToDesert">
            <summary>
                Sets the ambient background sounds to desert environment (wind, sand, sparse
                wildlife). Includes direct audio source setup, playing immediately after assignment.
            </summary>
        </member>
        <member name="M:Sound.SetAmbientToHeavyRain">
            <summary>
                Sets the ambient background sounds to heavy rain environment with more intense storm
                sounds. Includes direct audio source setup, playing immediately after assignment.
            </summary>
        </member>
        <member name="M:Sound.SetAmbientToHell">
            <summary>
                Sets the ambient background sounds to hell environment (demonic sounds, lava). Only
                changes if not already using hell ambience.
            </summary>
        </member>
        <member name="M:Sound.SetAmbientToHellFirey">
            <summary>
                Sets the ambient background sounds to fiery hell variant with more intense fire and
                flame sounds. Only changes if not already using hell fiery ambience.
            </summary>
        </member>
        <member name="M:Sound.SetAmbientToJungle">
            <summary>
                Sets the ambient background sounds to jungle environment (birds, insects, foliage).
                Only changes if not already using jungle ambience to avoid restarting sounds.
            </summary>
        </member>
        <member name="M:Sound.SetAmbientToLightRain">
            <summary>
                Sets the ambient background sounds to light rain environment. Includes direct audio
                source setup unlike other ambient setters, playing the rain sounds immediately after
                assignment.
            </summary>
        </member>
        <member name="M:Sound.StopAmbience">
            <summary>
                Completely stops all ambient background sounds by setting playingAmbient to false
                and clearing the current ambient sound holder reference.
            </summary>
        </member>
        <member name="M:Sound.StopRainAmbience">
            <summary>
                Specifically stops rain ambience (both light and heavy variants) and switches back
                to automatic ambient selection based on level theme. Only acts if currently playing
                rain sounds.
            </summary>
        </member>
        <member name="M:Sound.SwitchAmbienceTo(AmbienceType)">
            <summary>
                Central ambient sound switching method that routes to specific ambient setters based
                on the AmbienceType enum. Handles all ambient types including None, Auto, Jungle,
                City, Cave, Hell variants, Rain variants, and Desert. Stops ambience for None type,
                uses automatic selection for Auto type.
            </summary>
            <param name="ambienceType">The type of ambient sound environment to switch to</param>
        </member>
        <!-- Ambient Sound Management Fields -->
        <member name="F:Sound.ambienceStartDelay">
            <summary>
                Delay in seconds before ambient sounds begin playing at level start. Defaults to
                0.1f seconds. Counts down in LateUpdate() and triggers CheckInitialAmbience() when
                it reaches zero, allowing other systems to initialize first.
            </summary>
        </member>
        <member name="F:Sound.ambienceVolume">
            <summary>
                The maximum volume level for ambient background sounds (range 0-1). This controls
                the volume ceiling that ambient sounds can reach when fading in. During gameplay,
                the ambient background AudioSource gradually increases its volume up to this value
                using a fade-in rate of 0.15f per second. Default value is 0.6f, making ambient
                sounds play at 60% of full volume to maintain proper audio balance with other game
                sounds.
            </summary>
        </member>
        <member name="F:Sound.ambientBackground">
            <summary>
                AudioSource for continuous ambient background sounds. Plays looping environmental
                audio from the active SoundHolderAmbient. Volume fades in over time (0.15f per
                second) when ambient is enabled and fades out when disabled.
            </summary>
        </member>
        <member name="F:Sound.ambientEffectDelay">
            <summary>
                The countdown timer in seconds until the next random ambient effect sound plays.
                When this reaches zero while ambient sounds are active, a random effect sound from
                the current SoundHolderAmbient is played with randomized stereo panning. After
                playing, the timer resets to a random value between 1 and 5 seconds. Only counts
                down when ambient is playing and the ambient effects AudioSource is not already
                playing a sound.
            </summary>
        </member>
        <member name="F:Sound.ambientEffects">
            <summary>
                AudioSource for occasional ambient effect sounds. Plays random one-shot effects from
                the active SoundHolderAmbient at randomized intervals (1-5 seconds) and stereo
                positions. Non-looping with 75% volume.
            </summary>
        </member>
        <member name="F:Sound.playingAmbient">
            <summary>
                Tracks whether ambient environmental sounds are currently playing. When true, the
                ambient background AudioSource is either playing or fading in, and ambient effect
                sounds (like random jungle noises) can trigger periodically. When false, any playing
                ambient sounds will fade out at 1.5f volume per second. This flag is set when
                changing ambience types (jungle, city, hell, etc.) and cleared when stopping
                ambience entirely.
            </summary>
        </member>
        <member name="F:Sound.soundHolderAmbient">
            <summary>
                The currently active ambient sound holder. Points to one of the specific ambient
                holders (jungle, city, etc.) based on the current level theme or manual selection.
                Used by PlayAmbientSource() to access background and effect clips.
            </summary>
        </member>
        <member name="F:Sound.soundholderAmbientCave">
            <summary>
                Ambient sound holder for cave environments. Contains echoing cave ambience with
                dripping water and other underground sounds. Activated via
                SwitchAmbienceTo(AmbienceType.Cave) or SetAmbientToCave().
            </summary>
        </member>
        <member name="F:Sound.soundholderAmbientCaveAlien">
            <summary>
                Ambient sound holder for alien cave environments. Contains otherworldly cave
                ambience with alien atmospheric sounds. Activated via
                SwitchAmbienceTo(AmbienceType.AlienCave) or SetAmbientToAlienCave().
            </summary>
        </member>
        <member name="F:Sound.soundholderAmbientCity">
            <summary>
                Ambient sound holder for city-themed levels. Contains background ambience and
                occasional effect sounds appropriate for urban environments. Automatically selected
                when playing City theme levels or manually via SetAmbientToCity().
            </summary>
        </member>
        <member name="F:Sound.soundholderAmbientDesert">
            <summary>
                Ambient sound holder for desert environments. Contains wind and sand ambience
                appropriate for arid landscapes. Automatically selected for Desert theme levels or
                via SetAmbientToDesert().
            </summary>
        </member>
        <member name="F:Sound.soundholderAmbientHeavyRain">
            <summary>
                Ambient sound holder for heavy rain atmosphere. Contains intense rain and storm
                sounds. Activated via SwitchAmbienceTo(AmbienceType.HeavyRain) or
                SetAmbientToHeavyRain(). Can be stopped with StopRainAmbience().
            </summary>
        </member>
        <member name="F:Sound.soundholderAmbientHell">
            <summary>
                Ambient sound holder for hell-themed levels. Contains demonic ambience with fire and
                brimstone sounds. Automatically selected for Hell theme levels or via
                SetAmbientToHell().
            </summary>
        </member>
        <member name="F:Sound.soundholderAmbientHellFirey">
            <summary>
                Ambient sound holder for intense hell environments with heavy fire effects. Contains
                more aggressive hell ambience with prominent fire sounds. Activated via
                SwitchAmbienceTo(AmbienceType.HellFire) or SetAmbientToHellFirey().
            </summary>
        </member>
        <member name="F:Sound.soundholderAmbientJungle">
            <summary>
                Ambient sound holder for jungle-themed levels. Contains background ambience (birds,
                insects) and occasional jungle effect sounds. Used for both Jungle and Forest
                themes. Selected automatically or via SetAmbientToJungle().
            </summary>
        </member>
        <member name="F:Sound.soundholderAmbientJungleBurning">
            <summary>
                Ambient sound holder for burning jungle environments. Combines jungle ambience with
                fire crackling and burning sounds. Automatically selected for BurningJungle theme or
                via SetAmbientToBurningJungle().
            </summary>
        </member>
        <member name="F:Sound.soundholderAmbientRainy">
            <summary>
                Ambient sound holder for light rain atmosphere. Contains rain background sounds and
                occasional thunder effects. Can be activated via SwitchAmbienceTo(AmbienceType.Rain)
                or SetAmbientToLightRain().
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:Sound.DisableLowPass">
            <summary>
                Static helper method to disable the low pass audio filter effect. Safely checks for
                null instance and filter before disabling to avoid errors.
            </summary>
        </member>
        <!-- Boss Music System Methods -->
        <member name="M:Sound.PlayBossFightMusic(BossMusicType)">
            <summary>
                Plays boss fight music based on the specified type or map theme. Sets
                playingMusicLoud to false and only plays if music volume is above 0.01f and not
                already playing jungle boss music. When type is Default, selects music based on
                Map.MapData's theme or musicType (alien overrides theme). Otherwise uses the
                specified BossMusicType to select from available boss fight clips. Calls
                SetBossMusicVolume() to adjust volume, sets looping, and stops intensity music
                tracks.
            </summary>
            <param name="bossMusicType">The type of boss music to play, or Default to auto-select based on map</param>
        </member>
        <member name="M:Sound.PlayBossPulse(BossPulseType,System.Boolean)">
            <summary>
                Plays specific boss pulse music based on the BossPulseType. Only plays if music
                volume is above 0.01f. Disables automatic playback and sets various music state
                flags. Maps each BossPulseType to a specific AudioClip (e.g., Soldier to
                bossPulseDolf, Mech to bossPulseGoliath). Special handling for StarSpangledBanner
                (sets playingMusicLoud true), ChasedInHell and VictorySting (disables
                playingBossPulse). Supports fade-in with configurable fade speed. Stops intensity
                music tracks when switching to boss pulse.
            </summary>
            <param name="type">The type of boss pulse music to play, determining which AudioClip to use</param>
            <param name="fadeIn">Whether to fade in the music from silence (default false)</param>
        </member>
        <member name="M:Sound.SetBossMusicVolume">
            <summary>
                Sets the volume for boss fight music based on the current clip and game mode. Final
                boss music plays at 1.0x player volume, deathmatch mode plays at 0.85x, and all
                other boss music plays at 1.15x player volume.
            </summary>
        </member>
        <!-- Boss Music System Fields -->
        <member name="F:Sound.bossFightClipAlien">
            <summary>
                The boss fight music AudioClip for alien-themed boss encounters. Selected when
                PlayBossFightMusic() is called with BossMusicType.Alien. Creates an otherworldly
                atmosphere appropriate for alien boss battles with corresponding victory music.
            </summary>
        </member>
        <member name="F:Sound.bossFightClipCharlie">
            <summary>
                Audio clip for the boss fight music in City/Charlie-themed levels. Selected in
                PlayBossFightMusic() when the level theme is City or when BossMusicType.Charlie is
                specified.
            </summary>
        </member>
        <member name="F:Sound.bossFightClipDelta">
            <summary>
                Audio clip for the boss fight music in BurningJungle/Delta-themed levels. Selected
                in PlayBossFightMusic() when the level theme is BurningJungle, BossMusicType.Delta,
                or BossMusicType.Desert is specified.
            </summary>
        </member>
        <member name="F:Sound.bossFightClipDesert">
            <summary>
                Audio clip for the boss fight music in Desert-themed levels. Currently not used in
                the code but appears to be intended for desert boss fights.
            </summary>
        </member>
        <member name="F:Sound.bossFightClipFinal">
            <summary>
                Audio clip for the final boss fight music. Selected in PlayBossFightMusic() when
                BossMusicType.Final is specified. Has special volume scaling in
                GetBossMusicRescaleAmount().
            </summary>
        </member>
        <member name="F:Sound.bossFightClipForest">
            <summary>
                The boss fight music AudioClip for forest-themed boss encounters. Explicitly
                selected when PlayBossFightMusic() is called with BossMusicType.Forest. Provides
                variety in boss music based on environment theme with matching victory music.
            </summary>
        </member>
        <member name="F:Sound.bossFightClipHell">
            <summary>
                Audio clip for the boss fight music in Hell-themed levels. Selected in
                PlayBossFightMusic() when the level theme is Hell or when BossMusicType.Hell is
                specified.
            </summary>
        </member>
        <member name="F:Sound.bossFightClipJungle">
            <summary>
                The boss fight music AudioClip specifically for jungle-themed boss encounters.
                Selected in PlayBossFightMusic() when the boss type is Default and the level theme
                or random selection chooses jungle. Has a corresponding victory clip in
                bossVictoryClipJungle.
            </summary>
        </member>
        <member name="F:Sound.bossPulseAlien">
            <summary>
                Boss pulse music for creepy alien encounters (BossPulseType.AlienCreepy). Played
                with looping enabled during battles with alien enemies that have a horror theme.
            </summary>
        </member>
        <member name="F:Sound.bossPulseAlienEpic">
            <summary>
                Boss pulse music for epic alien encounters (BossPulseType.Alien). Played with
                looping enabled during major alien boss battles.
            </summary>
        </member>
        <member name="F:Sound.bossPulseChaseHell">
            <summary>
                Special music for hell chase sequences (BossPulseType.ChasedInHell). Played without
                boss pulse flag, indicating it's more atmospheric than combat music.
            </summary>
        </member>
        <member name="F:Sound.bossPulseDolf">
            <summary>
                Boss pulse music for Soldier type boss encounters. Also used as the default boss
                music when type is unspecified. Played with looping enabled during
                BossPulseType.Soldier encounters or as fallback.
            </summary>
        </member>
        <member name="F:Sound.bossPulseElevator">
            <summary>
                Boss pulse music clip intended for elevator boss encounters. Currently unused in the
                codebase but available for future elevator sequences.
            </summary>
        </member>
        <member name="F:Sound.bossPulseGoliath">
            <summary>
                Boss pulse music for Mech type boss encounters (BossPulseType.Mech). Played with
                looping enabled during battles with mechanical boss enemies.
            </summary>
        </member>
        <member name="F:Sound.bossPulseHeavy">
            <summary>
                Boss pulse music for War type boss encounters (BossPulseType.War). Played with
                looping enabled during intense war-themed boss battles.
            </summary>
        </member>
        <member name="F:Sound.bossPulseHelicockter">
            <summary>
                Boss pulse music for helicopter encounters (BossPulseType.Helicockter). Also reused
                for BossPulseType.SatanicChant encounters. Played with looping enabled.
            </summary>
        </member>
        <member name="F:Sound.bossPulseMammoth">
            <summary>
                Boss pulse music for Tank type boss encounters (BossPulseType.Tank). Played with
                looping enabled during battles with tank or mammoth boss enemies.
            </summary>
        </member>
        <member name="F:Sound.bossPulseMuscleTemple">
            <summary>
                Boss pulse music for Muscle Temple encounters (BossPulseType.MuscleTemple). Played
                with looping enabled during muscle-themed temple boss battles.
            </summary>
        </member>
        <member name="F:Sound.bossPulseSatan">
            <summary>
                Boss pulse music for Hell type boss encounters (BossPulseType.Hell). Played with
                looping enabled during battles with demonic or hell-themed bosses.
            </summary>
        </member>
        <member name="F:Sound.bossPulseSuperSatan">
            <summary>
                Boss pulse music clip intended for super Satan boss encounters. Currently unused in
                the codebase but available for future boss types.
            </summary>
        </member>
        <member name="F:Sound.bossPulseSwissArmy">
            <summary>
                Boss pulse music for BattleStation type encounters (BossPulseType.BattleStation).
                Played with looping enabled during complex multi-phase boss battles.
            </summary>
        </member>
        <member name="F:Sound.bossPulseTerrorkockter">
            <summary>
                Boss pulse music for Military type boss encounters (BossPulseType.Miltary). Played
                with looping enabled during battles with military-themed boss enemies.
            </summary>
        </member>
        <member name="F:Sound.bossVictoryClipAlien">
            <summary>
                Audio clip for the victory music played after defeating an alien boss. Used by
                GetVictorySting() when the current music is bossFightClipAlien.
            </summary>
        </member>
        <member name="F:Sound.bossVictoryClipCharlie">
            <summary>
                Audio clip for the victory music played after defeating a Charlie/City boss. Used by
                GetVictorySting() when the current music is bossFightClipCharlie.
            </summary>
        </member>
        <member name="F:Sound.bossVictoryClipDelta">
            <summary>
                Audio clip for the victory music played after defeating a Delta boss. Used by
                GetVictorySting() when the current music is bossFightClipDelta.
            </summary>
        </member>
        <member name="F:Sound.bossVictoryClipDesert">
            <summary>
                Audio clip for the victory music played after defeating a Desert boss. Currently not
                used in the code but appears to be intended for desert boss victories.
            </summary>
        </member>
        <member name="F:Sound.bossVictoryClipForest">
            <summary>
                The victory music sting that plays after defeating a boss when bossFightClipForest
                was the active boss music. Used by GetVictorySting() to ensure the victory audio
                matches the forest theme established during the boss fight.
            </summary>
        </member>
        <member name="F:Sound.bossVictoryClipHell">
            <summary>
                Audio clip for the victory music played after defeating a Hell boss. Used by
                GetVictorySting() when the current music is bossFightClipHell.
            </summary>
        </member>
        <member name="F:Sound.bossVictoryClipJungle">
            <summary>
                The victory music sting that plays after defeating a boss when bossFightClipJungle
                was the active boss music. Retrieved by GetVictorySting() to provide
                theme-appropriate victory audio that matches the jungle boss fight music.
            </summary>
        </member>
        <member name="F:Sound.playingBossPulse">
            <summary>
                Indicates whether boss pulse music is currently playing. Boss pulse music is looping
                background music used during boss encounters or special sequences. When true, it
                affects music volume calculations and prevents intensity-based music switching.
            </summary>
        </member>
        <member name="F:Sound.playingMusicLoud">
            <summary>
                Indicates whether music should be played at increased volume. When true, music
                volume is multiplied by 1.25f. Used for dramatic sequences like the Star Spangled
                Banner or certain victory stings. Resets to false when switching to other music
                types.
            </summary>
        </member>
        <!-- Sound Effects Playback Methods -->
        <member name="M:Sound.PlaySoundEffect(UnityEngine.AudioClip[],System.Single)">
            <summary>
                Plays a random sound effect from an array at the Sound instance's position. Returns
                immediately if array is empty. Otherwise selects a random clip and calls the
                single-clip overload with default pitch of 1.0.
            </summary>
            <param name="clips">Array of AudioClips to randomly select from</param>
            <param name="v">Volume level for playback</param>
        </member>
        <member name="M:Sound.PlaySoundEffect(UnityEngine.AudioClip[],System.Single,System.Single)">
            <summary>
                Plays a random sound effect from an array at the Sound instance's position with
                specified pitch. Returns immediately if array is empty. Otherwise selects a random
                clip and calls the single-clip overload with the specified pitch.
            </summary>
            <param name="clips">Array of AudioClips to randomly select from</param>
            <param name="v">Volume level for playback</param>
            <param name="p">Pitch multiplier for playback</param>
        </member>
        <member name="M:Sound.PlaySoundEffect(UnityEngine.AudioClip,System.Single)">
            <summary>
                Plays a sound effect at the Sound instance's position with default pitch. Simply
                calls the pitch-enabled overload with a pitch value of 1.0.
            </summary>
            <param name="clip">The AudioClip to play</param>
            <param name="v">Volume level for playback</param>
        </member>
        <member name="M:Sound.PlaySoundEffect(UnityEngine.AudioClip,System.Single,System.Single)">
            <summary>
                Plays a sound effect at the Sound instance's position. Returns if clip is null or
                hasPlayedEffectSound is true. Creates the sound using PlayAudioClip with the Sound
                instance position, disabling reverb bypass and marking as an announcer sound.
                Parents the created AudioSource to the Sound instance and sets hasPlayedEffectSound
                to prevent multiple plays in the same frame.
            </summary>
            <param name="clip">The AudioClip to play</param>
            <param name="v">Volume level for playback</param>
            <param name="p">Pitch multiplier for playback</param>
        </member>
        <member name="M:Sound.PlaySoundEffectAt(UnityEngine.AudioClip[],System.Single,UnityEngine.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Single)">
            <summary>
                Plays a random sound effect from an array of clips at a specific 3D position.
                Returns null if clips array is null or empty. Otherwise selects a random clip from
                the array and calls the single-clip overload with all provided parameters.
            </summary>
            <param name="clips">Array of AudioClips to randomly select from</param>
            <param name="v">Volume level for playback</param>
            <param name="pos">3D position where the sound should originate</param>
            <param name="pitch">Pitch multiplier (default 1.0)</param>
            <param name="bypassReverb">Whether to bypass reverb zones (default true)</param>
            <param name="bypassEffects">Whether to bypass audio effects (default false)</param>
            <param name="neverPool">Whether to prevent pooling this sound (default false)</param>
            <param name="delay">Delay in seconds before playing (default 0)</param>
            <returns>The AudioSource playing the sound, or null if clips array was invalid</returns>
        </member>
        <member name="M:Sound.PlaySoundEffectAt(UnityEngine.AudioClip,System.Single,UnityEngine.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Single)">
            <summary>
                Plays a sound effect at a specific 3D position. Returns null if clip is null or
                hasPlayedEffectSound is true (preventing multiple effect sounds in the same frame).
                Otherwise calls PlayAudioClip with the provided parameters to create a positioned
                sound effect.
            </summary>
            <param name="clip">The AudioClip to play</param>
            <param name="v">Volume level for playback</param>
            <param name="pos">3D position where the sound should originate</param>
            <param name="pitch">Pitch multiplier (default 1.0)</param>
            <param name="bypassReverb">Whether to bypass reverb zones (default true)</param>
            <param name="bypassEffects">Whether to bypass audio effects (default false)</param>
            <param name="neverPool">Whether to prevent pooling this sound (default false)</param>
            <param name="delay">Delay in seconds before playing (default 0)</param>
            <returns>The AudioSource playing the sound, or null if unable to play</returns>
        </member>
        <member name="M:Sound.PlaySoundEffectSpecial(UnityEngine.AudioClip[],System.Single)">
            <summary>
                Plays a special sound effect from an array, selecting randomly. Returns immediately
                if array is empty. This method appears to bypass the hasPlayedEffectSound check by
                calling the regular PlaySoundEffect method, allowing special sounds to play even if
                a regular effect has already played this frame.
            </summary>
            <param name="clips">Array of AudioClips to randomly select from</param>
            <param name="v">Volume level for playback</param>
        </member>
        <member name="M:Sound.PlaySoundEffectSpecial(UnityEngine.AudioClip,System.Single)">
            <summary>
                Plays a special sound effect that bypasses normal effect sound restrictions. Returns
                if clip is null. Creates the sound using PlayAudioClip at the Sound instance
                position with reverb bypass enabled. Parents the AudioSource to the Sound instance.
                Unlike regular PlaySoundEffect, this doesn't check or set hasPlayedEffectSound.
            </summary>
            <param name="clip">The AudioClip to play</param>
            <param name="v">Volume level for playback</param>
        </member>
        <!-- Sound Effects Playback Fields -->
        <member name="F:Sound.achievementSoundClip">
            <summary>
                Audio clip intended for achievement unlock notifications. Currently not used in the
                codebase - appears to be a placeholder for an achievement system that was not
                implemented or was removed.
            </summary>
        </member>
        <member name="F:Sound.brodownMusic">
            <summary>
                Audio clip for the special music played during BroDown game mode. Used in SetMusic()
                when GameModeController.GameMode is BroDown, overriding normal level music.
            </summary>
        </member>
        <member name="F:Sound.chainJangles">
            <summary>
                Array of chain jangling sound effect clips. Currently unused in Sound.cs but likely
                used by chain-related game objects for ambient metal chain sounds.
            </summary>
        </member>
        <member name="F:Sound.chainSnap">
            <summary>
                Chain snapping/breaking sound effect clip. Currently unused in Sound.cs but likely
                triggered when chain objects break or snap in the game world.
            </summary>
        </member>
        <member name="F:Sound.giveHalo">
            <summary>
                Halo giving sound effect clip. Currently unused in Sound.cs but may be triggered
                when players receive holy/angelic power-ups or halos.
            </summary>
        </member>
        <member name="F:Sound.hasPlayedChargeSound">
            <summary>
                A per-frame flag preventing multiple charging/power-up sound effects from playing
                simultaneously. Reset to false at the end of each LateUpdate cycle. Likely used by
                weapon charging systems or special ability code to ensure only one charge-up sound
                effect plays per frame, preventing audio distortion from overlapping charge sounds.
            </summary>
        </member>
        <member name="F:Sound.hasPlayedCreatureSound">
            <summary>
                A per-frame flag preventing multiple creature/enemy sound effects from playing
                simultaneously. Reset to false at the end of each LateUpdate cycle. While not used
                within the Sound class itself, this flag is likely checked by creature/enemy code
                before playing sounds like roars or death cries, ensuring only one creature sound
                plays per frame to avoid cacophony.
            </summary>
        </member>
        <member name="F:Sound.hasPlayedEffectSound">
            <summary>
                A per-frame flag preventing multiple general sound effects from playing
                simultaneously. Set to true when PlaySoundEffect() or PlaySoundEffectAt()
                successfully plays a sound, preventing additional effect sounds that frame. Reset to
                false at the end of each LateUpdate cycle. This throttling prevents audio distortion
                from overlapping similar sounds and maintains clean audio output during intense
                action.
            </summary>
        </member>
        <member name="F:Sound.hasPlayedExplosionSound">
            <summary>
                A per-frame flag preventing multiple explosion sound effects from playing
                simultaneously. Reset to false at the end of each LateUpdate cycle. While not
                actively used in the current Sound class implementation, this flag is likely checked
                by other game systems before playing explosion sounds to avoid audio overload when
                multiple explosions occur in the same frame.
            </summary>
        </member>
        <member name="F:Sound.hasPlayedHeroSound">
            <summary>
                A per-frame flag preventing multiple hero/player character sound effects from
                playing simultaneously. Reset to false at the end of each LateUpdate cycle (note:
                reset twice in the code, likely a minor bug). Expected to be checked by hero/bro
                code before playing sounds like grunts, special moves, or voice lines to maintain
                audio clarity.
            </summary>
        </member>
        <member name="F:Sound.hasPlayedSpeechSound">
            <summary>
                A per-frame flag preventing multiple speech/dialogue sound effects from playing
                simultaneously. Reset to false at the end of each LateUpdate cycle. While not used
                within Sound class, this flag would be checked by dialogue or announcement systems
                to ensure only one speech clip plays per frame, preventing overlapping voice lines
                that would be unintelligible.
            </summary>
        </member>
        <member name="F:Sound.resurrectHoly">
            <summary>
                Holy resurrection sound effect clip. Currently unused in Sound.cs but may be
                triggered by game events related to player resurrection or holy power-ups.
            </summary>
        </member>
        <member name="F:Sound.rogueforceBombardmentSiren">
            <summary>
                Audio clip for the bombardment warning siren. Note: This field references RogueForce
                content which is incomplete/unavailable in current game builds. The
                TimePressureBombardment system that would use this is disabled.
            </summary>
        </member>
        <!-- Audio Source Pool Management Methods -->
        <member name="M:Sound.GetPoolClip">
            <summary>
                Retrieves a reusable audio source from the object pool. Returns null if the pool is
                empty. Otherwise takes the last item from _oneShotBank, removes it from the list,
                activates its GameObject, enables the component, and returns it for use.
            </summary>
            <returns>A ReusableOneShotSound from the pool, or null if pool is empty</returns>
        </member>
        <member name="M:Sound.PlayAudioClip(UnityEngine.AudioClip,UnityEngine.Vector3,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Core method for playing audio clips with full control over positioning and effects.
                Creates or retrieves an AudioSource (from pool unless neverPool is true), configures
                all audio properties including 3D positioning, pitch adjustment (with special
                handling for announcer sounds and low currentPitch values), rolloff settings, and
                bypass flags. For positioned sounds, calculates distance-based volume falloff and
                stereo panning relative to the camera. Handles delayed playback and automatic
                cleanup timing based on clip length. Announcer sounds get special settings with no
                distance falloff and higher priority.
            </summary>
            <param name="clip">The AudioClip to play</param>
            <param name="position">3D position for the sound</param>
            <param name="volume">Base volume level</param>
            <param name="pitch">Pitch multiplier (adjusted by currentPitch)</param>
            <param name="bypassReverb">Whether to bypass reverb zones</param>
            <param name="bypassEffects">Whether to bypass audio effects</param>
            <param name="delay">Delay before playing in seconds</param>
            <param name="announcerSound">Whether this is an announcer sound with special settings</param>
            <param name="neverPool">Whether to prevent pooling this AudioSource</param>
            <returns>The configured AudioSource, or null if unable to create</returns>
        </member>
        <member name="M:Sound.Repool(ReusableOneShotSound)">
            <summary>
                Static method that returns a ReusableOneShotSound to the object pool. Adds the sound
                back to the singleton instance's _oneShotBank list for future reuse.
            </summary>
            <param name="sound">The ReusableOneShotSound to return to the pool</param>
        </member>
        <!-- Audio Source Pool Management Fields -->
        <member name="F:Sound.OneShotPoolSize">
            <summary>
                Defines the maximum number of pooled audio sources for one-shot sound effects. This
                constant sets the size of the reusable audio source pool at 64, though the actual
                pooling implementation and usage of this value is not directly visible in the
                provided code. The pool system helps optimize performance by reusing audio sources
                instead of creating new ones.
            </summary>
        </member>
        <member name="F:Sound._oneShotBank">
            <summary>
                A pool of reusable audio source components for efficient sound effect playback.
                Initialized with 64 ReusableOneShotSound objects during Awake() to avoid runtime
                allocations. When playing a sound effect, an available source is pulled from this
                list, configured, and played. After the sound completes, it's returned to the pool
                via Repool(). This pooling system prevents garbage collection overhead from
                constantly creating/destroying GameObjects for short sound effects.
            </summary>
        </member>
        <!-- Volume & Settings Control Methods -->
        <member name="M:Sound.Dimmusic(System.Single)">
            <summary>
                Temporarily dims the music volume for a specified duration. Sets the musicDimTime
                field which is used in Update to apply a volume reduction effect. The music volume
                gradually fades down and stays dimmed until the timer expires, creating a smooth
                ducking effect for emphasis on other audio.
            </summary>
            <param name="p">The duration in seconds to keep the music dimmed</param>
        </member>
        <member name="M:Sound.LowPassFilter(System.Single,System.Single)">
            <summary>
                Applies a low-pass audio filter effect for a specified duration. Sets up the filter
                parameters and enables lowPassFading to create a muffled sound effect. The actual
                filtering is handled by RunLowPassFilter and continues until the duration expires.
                Commonly used for underwater effects or emphasis moments.
            </summary>
            <param name="m">The filter intensity (0-1 range, where lower values create more muffling)</param>
            <param name="duration">How long in seconds to maintain the low-pass filter effect</param>
        </member>
        <member name="M:Sound.RunLowPassFilter(System.Single)">
            <summary>
                Configures and enables the low-pass filter with a target cutoff frequency based on
                the intensity parameter. When m is 1.0 or higher, sets the target frequency to
                10000Hz for minimal filtering. Lower m values reduce the target frequency
                proportionally (10000 * m), creating stronger muffling effects. Always enables the
                filter and sets lowPassFading to true to trigger gradual transitions.
            </summary>
            <param name="m">The filter intensity multiplier (1.0 = minimal effect, lower values = more muffling)</param>
        </member>
        <member name="M:Sound.RunPitch">
            <summary>
                Handles the gradual pitch shifting and low-pass filter effects over time. When
                shiftingPitch is active, smoothly transitions currentPitch toward desiredPitch at
                0.5 units per second. Applies the pitch to all music AudioSources (main, low
                intensity, high intensity) as (1 + currentPitch) / 2. Also manages the low-pass
                filter effect based on pitch and lowPassTimeOut, creating a muffled effect at
                extreme pitch values.
            </summary>
        </member>
        <member name="M:Sound.SetMusicVolume(System.Single)">
            <summary>
                Sets the volume of the currently playing music based on player options. Updates the
                music AudioSource volume to match the PlayerOptions.Instance.musicVolume setting,
                clamped between 0 and 1. When not in a menu screen, also updates the
                currentIntensityMusicVolume field to track the gameplay music volume.
            </summary>
            <param name="val">The volume value parameter (currently unused - method always uses PlayerOptions.Instance.musicVolume instead)</param>
        </member>
        <member name="M:Sound.SetPitch(System.Single)">
            <summary>
                Sets a target pitch value for gradual pitch shifting of all music tracks. Enables
                smooth pitch transitions by setting desiredPitch and activating the shiftingPitch
                flag. The actual pitch change occurs over time in RunPitch(), creating a
                time-slowing or time-speeding effect on the audio.
            </summary>
            <param name="p">The target pitch value (1.0 is normal speed, lower values slow down, higher values speed up)</param>
        </member>
        <member name="M:Sound.SetPitchNearInstant(System.Single)">
            <summary>
                Sets the pitch with a faster transition than SetPitch. Immediately adjusts
                currentPitch to 75% of the target value before enabling gradual shifting to the
                final pitch. Used for more responsive pitch changes while still maintaining some
                smoothness in the transition.
            </summary>
            <param name="p">The target pitch value to transition to</param>
        </member>
        <member name="M:Sound.StartDippingMusicVolume(System.Single)">
            <summary>
                Begins temporarily reducing the music volume by setting a multiplier value. This
                creates a "ducking" effect where music volume is lowered (typically during important
                sound effects or dialogue). The actual volume reduction is applied during Update
                when multiplying with dippingMusicVolumeM.
            </summary>
            <param name="m">The volume multiplier to apply (0-1 range, where lower values reduce volume more)</param>
        </member>
        <member name="M:Sound.StopDippingMusicVolume">
            <summary>
                Stops the music volume dipping effect by resetting the dippingMusicVolumeM
                multiplier back to 1.0. This restores the music to its normal volume level after a
                temporary reduction.
            </summary>
        </member>
        <member name="M:Sound.SuddenLowPass(System.Single)">
            <summary>
                Applies an immediate low-pass filter effect at the Sound instance's position. This
                is a convenience overload that calls the position-based version using the Sound
                transform position. Creates an instant muffled effect without gradual transition.
            </summary>
            <param name="m">The filter intensity (0-1 range, where lower values create more muffling)</param>
        </member>
        <member name="M:Sound.SuddenLowPass(System.Single,UnityEngine.Vector3)">
            <summary>
                Applies an immediate low-pass filter effect with distance-based attenuation. Only
                applies if useSuddenLowPass is enabled and not already fading. Calculates distance
                from the sound position to the effect position and reduces the filter intensity
                based on lowPassMinRange and lowPassMaxRange. Sets the audio low-pass filter cutoff
                frequency for an instant muffled effect, commonly used for explosions or impacts.
            </summary>
            <param name="m">The base filter intensity (0-1 range)</param>
            <param name="pos">The world position where the effect originates (used for distance calculations)</param>
        </member>
        <!-- Volume & Settings Control Fields -->
        <member name="F:Sound.audioLowPass">
            <summary>
                Reference to the AudioLowPassFilter component used for muffled sound effects during
                explosions or dramatic moments. When enabled, this filter reduces high frequencies
                to create an underwater or shell-shocked audio effect. The cutoff frequency is
                dynamically adjusted between the target frequency and frequency loss values.
                Automatically disabled when the effect completes or when cutoff frequency exceeds
                3000Hz to save processing power.
            </summary>
        </member>
        <member name="F:Sound.currentPitch">
            <summary>
                Current pitch multiplier applied to music playback. Smoothly interpolates towards
                desiredPitch when shiftingPitch is true. Affects all music sources and some sound
                effects. Default is 1.0 (normal pitch).
            </summary>
        </member>
        <member name="F:Sound.desiredPitch">
            <summary>
                Target pitch value that currentPitch should transition to. Used for smooth pitch
                shifting effects on music and sound. Default is 1.0 (normal pitch). Values below 1
                lower pitch, above 1 raise pitch.
            </summary>
        </member>
        <member name="F:Sound.dippingMusicVolumeM">
            <summary>
                Music volume multiplier for temporary volume reduction ("dipping"). Defaults to 1.0f
                (no reduction). Can be set via StartDippingMusicVolume() to reduce music during
                important sound effects or dialogue, then restored with StopDippingMusicVolume().
            </summary>
        </member>
        <member name="F:Sound.lowPassFading">
            <summary>
                Whether the low-pass filter is currently transitioning between frequencies. When
                true, the Update method interpolates lowPassFreqCurrent towards lowPassFreqTarget
                each frame. Set to false when the transition completes.
            </summary>
        </member>
        <member name="F:Sound.lowPassFreqCurrent">
            <summary>
                Current low-pass filter cutoff frequency in Hz. Smoothly interpolates towards
                lowPassFreqTarget during filter fading. Higher values mean less filtering (more
                treble frequencies pass through). Default is 10000Hz (minimal filtering).
            </summary>
        </member>
        <member name="F:Sound.lowPassFreqLoss">
            <summary>
                Amount of frequency reduction applied to the low-pass filter cutoff. Subtracted from
                lowPassFreqCurrent when setting the actual filter cutoff frequency. Used for sudden
                low-pass effects like explosions. Gradually diminishes based on
                lowPassFrequencyJitterDampening.
            </summary>
        </member>
        <member name="F:Sound.lowPassFreqTarget">
            <summary>
                The target cutoff frequency in Hz for the low-pass filter effect. Default is 10000Hz
                (minimal filtering). During filter effects, this is set to lower values like 12500Hz
                for sudden impacts or calculated values for pitch-based filtering. The actual filter
                frequency lerps towards this target at different rates (5f/second when increasing,
                12f/second when decreasing) to create smooth transitions. Values below 3000Hz create
                heavily muffled audio.
            </summary>
        </member>
        <member name="F:Sound.lowPassFrequencyJitterDampening">
            <summary>
                Dampening factor for reducing lowPassFreqLoss over time. Higher values cause the
                frequency loss to diminish more quickly, returning the audio to normal faster after
                sudden filter effects. Default is 12.
            </summary>
        </member>
        <member name="F:Sound.lowPassM">
            <summary>
                Multiplier for low-pass filter effects during timeout periods. Values between 0 and
                1 control filter intensity (0 = maximum filtering, 1 = no filtering). Gradually
                returns to 1 when lowPassTimeOut expires. Default is 1.
            </summary>
        </member>
        <member name="F:Sound.lowPassMaxRange">
            <summary>
                Maximum effective range for sudden low-pass filter effects. Beyond this distance, no
                filtering is applied. Used with lowPassMinRange to create a gradual falloff zone
                where filter intensity decreases with distance. Default is 300 units.
            </summary>
        </member>
        <member name="F:Sound.lowPassMinRange">
            <summary>
                Minimum distance in units before sudden low-pass effects begin to apply. Sounds
                within this range receive full filter effect. Used in conjunction with
                lowPassMaxRange to calculate distance-based filter falloff. Default is 160 units.
            </summary>
        </member>
        <member name="F:Sound.lowPassTimeOut">
            <summary>
                Duration in seconds for temporary low-pass filter effects. When positive, maintains
                the low-pass filter with lowPassM multiplier. When reaching zero, the filter
                gradually returns to normal. Set to -1 to disable timeout-based filtering.
            </summary>
        </member>
        <member name="F:Sound.musicDimTime">
            <summary>
                The remaining time in seconds for temporary music volume reduction (dimming). When
                greater than 0, music volume is reduced by a factor calculated as (1 -
                min(musicDimTime * 4, 0.9)), creating a quick dip in volume. Used for emphasis
                during special moments like announcements or dramatic effects. The dim effect
                gradually fades back to normal volume as the timer counts down to zero.
            </summary>
        </member>
        <member name="F:Sound.shiftingPitch">
            <summary>
                Whether pitch is currently transitioning between values. When true, RunPitch
                interpolates currentPitch towards desiredPitch at 0.5 units per second. Also
                triggers low-pass filtering based on pitch value.
            </summary>
        </member>
        <member name="F:Sound.useSuddenLowPass">
            <summary>
                Whether sudden low-pass filter effects (like explosions) are enabled. When true,
                allows SuddenLowPass method to apply immediate frequency reduction based on distance
                from effect source. Default is true.
            </summary>
        </member>
        <member name="F:Sound.wordTime">
            <summary>
                A timing constant set to 0.4 seconds, though it appears to be unused in the current
                implementation. Based on the field name and value, this was likely intended to
                control timing for speech or word-based audio effects, possibly for lip-sync or
                dialogue pacing. The field remains in the code but has no active references in the
                Sound class methods.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:SpriteBase.Awake">
            <summary>
                Unity Awake method that initializes the sprite's mesh components and texture. Gets
                MeshFilter and MeshRenderer components, destroys any existing shared mesh, extracts
                texture from material, starts the animation pump if needed, and creates normals
                array if requested.
            </summary>
        </member>
        <member name="M:SpriteBase.Clear">
            <summary>
                Resets the sprite to default state. Disables billboarding, sets color to white,
                resets offset to zero, and clears the animation complete delegate.
            </summary>
        </member>
        <member name="M:SpriteBase.Init">
            <summary>
                Initializes the sprite mesh with vertices, UVs, colors, and triangles. Creates a new
                dynamic mesh if needed, sets up winding order, calculates UVs with bleed
                compensation, configures pixel-perfect rendering if enabled, and applies initial
                size and color.
            </summary>
        </member>
        <member name="M:SpriteBase.OnDisable">
            <summary>
                Unity OnDisable callback that temporarily removes the sprite from the animation
                system when disabled. Preserves the animating state so it can be restored when
                re-enabled.
            </summary>
        </member>
        <member name="M:SpriteBase.OnEnable">
            <summary>
                Unity OnEnable callback that re-adds the sprite to the animation system if it was
                animating when disabled. Only operates in play mode to avoid editor issues.
            </summary>
        </member>
        <member name="M:SpriteBase.Start">
            <summary>
                Unity Start method that completes sprite initialization. Stores the initial UV
                rectangle, calculates pixels per UV unit from texture dimensions, and sets up the
                camera reference for pixel-perfect rendering calculations.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:SpriteBase.AddToAnimatedList">
            <summary>
                Adds this sprite to the global animation pump for frame updates. Starts the
                animation pump if not already running and marks the sprite as animating.
            </summary>
        </member>
        <member name="M:SpriteBase.Copy(SpriteBase)">
            <summary>
                Copies configuration from another sprite including material, texture, plane
                orientation, winding order, offset, anchor method, resize settings, pixel perfect
                flag, and color. Updates texture dimensions for UV calculations.
            </summary>
            <param name="s">Source sprite to copy settings from</param>
        </member>
        <member name="M:SpriteBase.IsAnimating">
            <summary>
                Checks whether this sprite is currently animating.
            </summary>
            <returns>True if the sprite is in the animation update list, false otherwise.</returns>
        </member>
        <member name="M:SpriteBase.PauseAnim">
            <summary>
                Pauses the sprite animation by removing it from the animation update list. The
                animation state is preserved and can be resumed later.
            </summary>
        </member>
        <member name="M:SpriteBase.RecalcTexture">
            <summary>
                Refreshes texture reference from the current material's main texture. Updates pixel
                dimensions used for UV coordinate calculations. Called when material or texture
                changes.
            </summary>
        </member>
        <member name="M:SpriteBase.RemoveFromAnimatedList">
            <summary>
                Removes this sprite from the global animation pump, stopping frame updates. Marks
                the sprite as no longer animating.
            </summary>
        </member>
        <member name="M:SpriteBase.RevertToStatic">
            <summary>
                Reverts the sprite to its static (non-animated) state. Stops any active animation,
                recalculates UVs, applies bleed compensation, and optionally resizes based on
                pixel-perfect or auto-resize settings.
            </summary>
        </member>
        <member name="M:SpriteBase.SetAnimCompleteDelegate(SpriteBase.AnimCompleteDelegate)">
            <summary>
                Sets a delegate to be called when the current animation completes. Used for
                triggering events or transitioning to other animations when an animation cycle
                finishes.
            </summary>
            <param name="del">Delegate to invoke when animation completes, or null to clear</param>
        </member>
        <member name="M:SpriteBase.SetColor(UnityEngine.Color)">
            <summary>
                Sets the vertex color for all four vertices of the sprite. Color is multiplied with
                texture in the shader for tinting effects.
            </summary>
            <param name="c">Color to apply to all vertices</param>
        </member>
        <member name="M:SpriteBase.SetSpriteResizedDelegate(SpriteBase.SpriteResizedDelegate)">
            <summary>
                Sets a delegate to be called whenever the sprite is resized. Useful for updating
                dependent systems when sprite dimensions change due to UV updates or manual
                resizing.
            </summary>
            <param name="del">Delegate to invoke when sprite is resized, receives new width, height, and sprite reference</param>
        </member>
        <member name="M:SpriteBase.StepAnim(System.Single)">
            <summary>
                Virtual method for advancing sprite animation by the specified time delta. Base
                implementation returns false. Derived classes override this to implement actual
                animation logic.
            </summary>
            <param name="time">Time elapsed since last animation step in seconds</param>
            <returns>Always returns false in base implementation. Derived classes return true if animation continues, false if complete</returns>
        </member>
        <member name="M:SpriteBase.StopAnim">
            <summary>
                Virtual method that stops the sprite animation. Base implementation is empty -
                override in derived classes to implement custom animation stopping behavior.
            </summary>
        </member>
        <member name="M:SpriteBase.TransformBillboarded(UnityEngine.Transform)">
            <summary>
                Transforms the sprite to face a specific transform (billboard effect). Currently
                empty in base class, likely implemented in derived classes for camera-facing
                sprites.
            </summary>
            <param name="t">Transform to face towards</param>
        </member>
        <!-- Animation & Sprite Systems Properties -->
        <member name="P:SpriteBase.MeshRenderer">
            <summary>
                Gets or sets the MeshRenderer component used to render this sprite. Provides direct
                access to rendering properties like materials and shadows.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:SpriteBase.animCompleteDelegate">
            <summary>
                Delegate invoked when an animation completes playback. Set via
                SetAnimCompleteDelegate method and called by derived classes (PackedSprite,
                SpriteSM) when they finish playing an animation sequence. Allows external code to
                respond to animation completion events for state transitions or chaining animations.
            </summary>
        </member>
        <member name="F:SpriteBase.animating">
            <summary>
                Indicates whether the sprite is currently playing an animation. When true, the
                sprite is registered with the SpriteAnimationPump for regular StepAnim updates.
                Managed by AddToAnimatedList/RemoveFromAnimatedList methods and preserved across
                OnDisable/OnEnable cycles.
            </summary>
        </member>
        <member name="F:SpriteBase.defaultAnim">
            <summary>
                The index of the animation to play by default. Used in conjunction with
                playAnimOnStart to automatically begin animation playback when the sprite
                initializes. Also used as the fallback animation when an animation completes with
                the Play_Default_Anim end action. Must be a valid index within the animations array.
            </summary>
        </member>
        <member name="F:SpriteBase.framesToAdvance">
            <summary>
                The number of animation frames to advance in the current update, calculated as
                timeSinceLastFrame / timeBetweenAnimFrames. Allows animations to catch up if
                multiple frames worth of time have elapsed since the last update, ensuring smooth
                playback even with variable frame rates.
            </summary>
        </member>
        <member name="F:SpriteBase.playAnimOnStart">
            <summary>
                When true, automatically plays the default animation when the sprite starts. Used by
                derived classes like PackedSprite and SpriteSM to trigger initial animation playback
                during their Start method if a valid defaultAnim index is specified and the
                application is playing.
            </summary>
        </member>
        <member name="F:SpriteBase.resizedDelegate">
            <summary>
                Delegate invoked when the sprite is resized via SetSize method. Receives the new
                width, height, and a reference to the sprite being resized. Allows external code to
                respond to size changes for layout updates or dependent object adjustments. Set via
                SetSpriteResizedDelegate method.
            </summary>
        </member>
        <member name="F:SpriteBase.timeBetweenAnimFrames">
            <summary>
                The duration in seconds between animation frames, calculated as 1/framerate. Used
                with timeSinceLastFrame to determine when to advance the animation. Set by derived
                classes when playing animations to control playback speed.
            </summary>
        </member>
        <member name="F:SpriteBase.timeSinceLastFrame">
            <summary>
                Accumulates elapsed time since the last animation frame change. Used by derived
                animation classes to determine when to advance to the next frame based on the
                animation framerate. Reset to zero (minus overflow) each time a frame advances.
            </summary>
        </member>
        <!-- Mesh Management Methods -->
        <member name="M:SpriteBase.CalcEdges">
            <summary>
                Calculates the top-left and bottom-right corner positions based on the current
                anchor method. Supports nine anchor points (corners, edges, and center) for flexible
                sprite positioning.
            </summary>
        </member>
        <member name="M:SpriteBase.CalcSize">
            <summary>
                Calculates sprite dimensions based on rendering mode. In pixel-perfect mode,
                calculates size from screen pixels and orthographic camera size. In auto-resize
                mode, scales proportionally with UV changes. Updates sprite size after calculation.
            </summary>
        </member>
        <member name="M:SpriteBase.RefreshVertices">
            <summary>
                Recalculates and updates all vertex positions with shear and skew effects applied.
                Used for creating slanted or distorted sprites while maintaining proper UV mapping.
            </summary>
        </member>
        <member name="M:SpriteBase.SetSize(System.Single,System.Single)">
            <summary>
                Sets the sprite size and updates vertex positions based on the current plane
                orientation. Routes to appropriate size setting method (SetSizeXY, SetSizeXZ, or
                SetSizeYZ) and invokes resize delegate if set.
            </summary>
            <param name="width">New width of the sprite in world units</param>
            <param name="height">New height of the sprite in world units</param>
        </member>
        <member name="M:SpriteBase.SetSizeXY(System.Single,System.Single)">
            <summary>
                Updates sprite vertices for XY plane orientation (standard 2D sprite facing camera).
                Calculates edge positions based on anchor point and updates all four vertices with
                proper offset application.
            </summary>
            <param name="w">Width of the sprite in world units</param>
            <param name="h">Height of the sprite in world units</param>
        </member>
        <member name="M:SpriteBase.SetSizeXZ(System.Single,System.Single)">
            <summary>
                Updates sprite vertices for XZ plane orientation (ground/ceiling sprite). Positions
                vertices in the horizontal plane with Y as the up axis.
            </summary>
            <param name="w">Width of the sprite in world units</param>
            <param name="h">Height (depth) of the sprite in world units</param>
        </member>
        <member name="M:SpriteBase.SetSizeYZ(System.Single,System.Single)">
            <summary>
                Updates sprite vertices for YZ plane orientation (wall sprite facing sideways).
                Positions vertices in the YZ plane with X as the normal direction.
            </summary>
            <param name="w">Width of the sprite in world units</param>
            <param name="h">Height of the sprite in world units</param>
        </member>
        <!-- Mesh Management Fields -->
        <member name="F:SpriteBase.colors">
            <summary>
                Array of 4 vertex colors for the sprite quad. All elements set to same color value
                by SetColor(). Allows per-vertex tinting if needed. Applied to mesh.colors for
                rendering.
            </summary>
        </member>
        <member name="F:SpriteBase.faces">
            <summary>
                Triangle indices array defining two triangles (6 indices) that form the sprite quad.
                Order determined by SetWindingOrder() - CCW uses [0,1,3,3,1,2] and CW uses
                [0,3,1,3,2,1].
            </summary>
        </member>
        <member name="F:SpriteBase.mesh">
            <summary>
                The dynamically created Mesh object for this sprite. Created in Init() with
                MarkDynamic() for frequent updates. Stores vertices, UVs, colors, and triangle data
                for rendering the sprite quad.
            </summary>
        </member>
        <member name="F:SpriteBase.meshFilter">
            <summary>
                Reference to the MeshFilter component attached to this GameObject. Initialized in
                Awake() and used to assign the dynamically created mesh. Required component for
                sprite rendering.
            </summary>
        </member>
        <member name="F:SpriteBase.meshRenderer">
            <summary>
                Reference to the MeshRenderer component attached to this GameObject. Initialized in
                Awake() and exposed via MeshRenderer property. Used to access material and texture
                information.
            </summary>
        </member>
        <member name="F:SpriteBase.normals">
            <summary>
                Optional array of vertex normals for lighting calculations. Only created when
                createNormals is true. All normals face backward (Vector3.back) for typical 2D
                sprite lighting.
            </summary>
        </member>
        <member name="F:SpriteBase.texture">
            <summary>
                Reference to the main texture used by this sprite. Retrieved from material's
                _MainTex property in Awake() and RecalcTexture(). Used for pixel-to-UV calculations
                and dimension calculations.
            </summary>
        </member>
        <member name="F:SpriteBase.uvs">
            <summary>
                Primary UV coordinates array for the 4 sprite vertices. Updated by UpdateUVs() based
                on uvRect and winding order. Defines which part of the texture maps to each vertex.
            </summary>
        </member>
        <member name="F:SpriteBase.uvs2">
            <summary>
                Secondary UV coordinates array for special effects. Set by SetUV2() to standard 0-1
                quad values regardless of primary UVs. Can be used by shaders for effects
                independent of texture mapping.
            </summary>
        </member>
        <member name="F:SpriteBase.vertices">
            <summary>
                Array of 4 vertices defining the sprite quad corners. Updated by SetSizeXY/XZ/YZ and
                RefreshVertices() methods. Order depends on winding setting. Applied to mesh for
                rendering.
            </summary>
        </member>
        <!-- UV Coordinate System Methods -->
        <member name="M:SpriteBase.CalcUVs">
            <summary>
                Virtual method for calculating UV coordinates. Base implementation is empty. Derived
                classes override this to implement specific UV calculation logic for different
                sprite types.
            </summary>
        </member>
        <member name="M:SpriteBase.PixelCoordToUVCoord(UnityEngine.Vector2)">
            <summary>
                Converts pixel coordinates to UV coordinates with Y-axis flipping for Unity's UV
                system. Unity UVs have origin at bottom-left while textures have origin at top-left.
            </summary>
            <param name="xy">Pixel coordinates to convert.</param>
            <returns>UV coordinates with flipped Y axis.</returns>
        </member>
        <member name="M:SpriteBase.PixelCoordToUVCoord(System.Int32,System.Int32)">
            <summary>
                Converts integer pixel coordinates to UV coordinates with Y-axis flipping for
                Unity's UV system.
            </summary>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>UV coordinates with flipped Y axis.</returns>
        </member>
        <member name="M:SpriteBase.PixelSpaceToUVSpace(UnityEngine.Vector2)">
            <summary>
                Converts pixel coordinates to UV space (0-1 range) based on texture dimensions.
            </summary>
            <param name="xy">Pixel coordinates to convert.</param>
            <returns>UV coordinates in 0-1 range, or Vector2.zero if no texture is assigned.</returns>
        </member>
        <member name="M:SpriteBase.PixelSpaceToUVSpace(System.Int32,System.Int32)">
            <summary>
                Converts integer pixel coordinates to UV space (0-1 range) based on texture
                dimensions.
            </summary>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>UV coordinates in 0-1 range.</returns>
        </member>
        <member name="M:SpriteBase.SetBleedCompensation">
            <summary>
                Applies the current bleed compensation values to adjust UV coordinates. Bleed
                compensation prevents texture bleeding by inset the UV rectangle.
            </summary>
        </member>
        <member name="M:SpriteBase.SetBleedCompensation(System.Single,System.Single)">
            <summary>
                Sets and applies bleed compensation with specified pixel values. Bleed compensation
                prevents texture bleeding at sprite edges.
            </summary>
            <param name="x">Horizontal bleed compensation in pixels.</param>
            <param name="y">Vertical bleed compensation in pixels.</param>
        </member>
        <member name="M:SpriteBase.SetBleedCompensation(UnityEngine.Vector2)">
            <summary>
                Sets and applies bleed compensation from a Vector2. Converts pixel values to UV
                space and insets the UV rectangle to prevent texture bleeding.
            </summary>
            <param name="xy">Bleed compensation values in pixels (x and y).</param>
        </member>
        <member name="M:SpriteBase.SetUV2">
            <summary>
                Sets secondary UV coordinates (UV2) for shader effects. Always uses normalized 0-1
                coordinates regardless of primary UV settings, useful for effects that need full
                texture coverage.
            </summary>
        </member>
        <member name="M:SpriteBase.SetUVs(UnityEngine.Rect)">
            <summary>
                Sets the UV rectangle for texture mapping. Applies bleed compensation and optionally
                recalculates size for pixel-perfect or auto-resize sprites.
            </summary>
            <param name="uv">The UV coordinate rectangle (0-1 range).</param>
        </member>
        <member name="M:SpriteBase.SetUVsFromPixelCoords(UnityEngine.Rect)">
            <summary>
                Sets UV coordinates from pixel coordinates on the texture. Converts pixel
                coordinates to UV space (0-1 range) and applies settings.
            </summary>
            <param name="pxCoords">Rectangle defining the sprite area in texture pixels.</param>
        </member>
        <member name="M:SpriteBase.UpdateUVs">
            <summary>
                Updates the UV coordinates of all four vertices based on current UV rectangle and
                winding order. Handles both clockwise and counter-clockwise winding to ensure proper
                texture display.
            </summary>
        </member>
        <!-- UV Coordinate System Fields -->
        <member name="F:SpriteBase.bleedCompensationUV">
            <summary>
                UV space inset calculated from bleedCompensation pixel values. Used internally by
                SetBleedCompensation() to adjust uvRect boundaries, preventing texture bleeding by
                moving UV coordinates inward from texture edges.
            </summary>
        </member>
        <member name="F:SpriteBase.bottomRight">
            <summary>
                Calculated bottom-right corner position of sprite in local space. Set by CalcEdges()
                based on sprite dimensions and anchor method. Used as reference point for vertex
                calculations in SetSize methods.
            </summary>
        </member>
        <member name="F:SpriteBase.pixelsPerUV">
            <summary>
                Stores the texture dimensions as pixels per UV unit. The x component contains the
                texture width in pixels and the y component contains the texture height. This value
                is automatically updated whenever the texture changes and is used to convert between
                pixel coordinates and UV coordinates during sprite rendering calculations.
            </summary>
        </member>
        <member name="F:SpriteBase.prevUVRect">
            <summary>
                Previous frame's UV rectangle used for auto-resize calculations. When autoResize is
                enabled, CalcSize() compares current uvRect to this value to proportionally scale
                sprite dimensions when UV region changes.
            </summary>
        </member>
        <member name="F:SpriteBase.topLeft">
            <summary>
                Calculated top-left corner position of sprite in local space. Set by CalcEdges()
                based on sprite dimensions and anchor method. Used as reference point for vertex
                calculations in SetSize methods.
            </summary>
        </member>
        <member name="F:SpriteBase.uvRect">
            <summary>
                Rectangle defining the texture coordinates for this sprite in UV space (0-1 range).
                Modified by SetUVs(), SetUVsFromPixelCoords(), and SetBleedCompensation(). Used by
                UpdateUVs() to set mesh UV coordinates.
            </summary>
        </member>
        <!-- Sprite Configuration Methods -->
        <member name="M:SpriteBase.SetAnchor(SpriteBase.ANCHOR_METHOD)">
            <summary>
                Sets the anchor point for sprite positioning. Determines which part of the sprite
                aligns with its transform position.
            </summary>
            <param name="a">The anchor method defining the alignment point.</param>
        </member>
        <member name="M:SpriteBase.SetCamera(UnityEngine.Camera)">
            <summary>
                Sets the camera reference for pixel-perfect calculations. Updates screen size from
                camera's pixel dimensions and recalculates sprite size to maintain pixel-perfect
                appearance.
            </summary>
            <param name="c">Camera to use for pixel-perfect calculations, returns immediately if null</param>
        </member>
        <member name="M:SpriteBase.SetOffset(UnityEngine.Vector3)">
            <summary>
                Sets an additional position offset applied to the sprite vertices. Useful for
                fine-tuning sprite positioning.
            </summary>
            <param name="o">The 3D offset to apply to sprite vertices.</param>
        </member>
        <member name="M:SpriteBase.SetPlane(SpriteBase.SPRITE_PLANE)">
            <summary>
                Sets the orientation plane for the sprite mesh (XY, XZ, or YZ). Rebuilds the mesh
                vertices for the new plane orientation.
            </summary>
            <param name="p">The sprite plane orientation to use.</param>
        </member>
        <member name="M:SpriteBase.SetWindingOrder(SpriteBase.WINDING_ORDER)">
            <summary>
                Sets the triangle winding order for the mesh faces. Clockwise (CW) renders the front
                face, counter-clockwise (CCW) renders the back face.
            </summary>
            <param name="order">The winding order to apply (CW or CCW).</param>
        </member>
        <!-- Sprite Configuration Fields -->
        <member name="F:SpriteBase.anchor">
            <summary>
                The anchor point determining sprite alignment with its transform position. Default
                is MIDDLE_CENTER for centered sprites.
            </summary>
        </member>
        <member name="F:SpriteBase.autoResize">
            <summary>
                Enables automatic sprite resizing when UV coordinates change. When true and UV rect
                changes, sprite dimensions are scaled proportionally to maintain the same aspect
                ratio as the texture region. Checked in CalcSize(), Copy(), and UV update methods.
            </summary>
        </member>
        <member name="F:SpriteBase.billboarded">
            <summary>
                Flag indicating if sprite should face the camera (billboard mode). Currently only
                set/cleared but not actively used in base implementation - likely utilized by
                derived classes or external systems.
            </summary>
        </member>
        <member name="F:SpriteBase.bleedCompensation">
            <summary>
                Pixel-based inset values to prevent texture bleeding at sprite edges. Applied to UV
                coordinates to slightly shrink the sampled area.
            </summary>
        </member>
        <member name="F:SpriteBase.color">
            <summary>
                Vertex color applied to all four sprite vertices for tinting. Defaults to white (no
                tint). Updated via SetColor() which applies this color to the colors array and mesh.
            </summary>
        </member>
        <member name="F:SpriteBase.createNormals">
            <summary>
                Controls whether mesh normals are generated. When true, creates a normals array with
                all vertices facing backward (Vector3.back) during Awake() and applies them during
                Init(). Used for sprites that need proper lighting.
            </summary>
        </member>
        <member name="F:SpriteBase.curCamera">
            <summary>
                Reference to the current camera used for pixel-perfect calculations. Set by
                SetCamera() method. Used to get orthographic size for converting between world units
                and screen pixels.
            </summary>
        </member>
        <member name="F:SpriteBase.height">
            <summary>
                The height of the sprite in world units. Used for mesh vertex calculation and
                size-based operations.
            </summary>
        </member>
        <member name="F:SpriteBase.offset">
            <summary>
                3D position offset applied to all sprite vertices. Added to calculated vertex
                positions in SetSizeXY/XZ/YZ methods to shift the entire sprite mesh. Can be updated
                via SetOffset() method.
            </summary>
        </member>
        <member name="F:SpriteBase.pixelPerfect">
            <summary>
                Enables pixel-perfect sprite rendering mode. When true, sprite dimensions are
                automatically calculated based on camera orthographic size and screen dimensions to
                ensure 1:1 pixel mapping. Used in Init(), CalcSize(), and throughout rendering
                pipeline.
            </summary>
        </member>
        <member name="F:SpriteBase.plane">
            <summary>
                The orientation plane for the sprite mesh. Determines whether the sprite is rendered
                on the XY (default 2D), XZ (ground), or YZ plane.
            </summary>
        </member>
        <member name="F:SpriteBase.screenSize">
            <summary>
                Static screen dimensions in pixels shared across all sprites. Updated by SetCamera()
                with camera's pixel width/height. Used in CalcSize() for pixel-perfect calculations
                with orthographic camera size.
            </summary>
        </member>
        <member name="F:SpriteBase.shearAmount">
            <summary>
                Horizontal shear factor for skewing sprite vertices. Applied to top vertices when
                RefreshVertices() is called, creating a parallelogram effect by offsetting the top
                edge horizontally by this amount multiplied by sprite width.
            </summary>
        </member>
        <member name="F:SpriteBase.skewAmount">
            <summary>
                Vertical skew factor for tilting sprite vertices. Applied when RefreshVertices() is
                called - subtracts from top-left vertex Y and adds to top-right vertex Y, creating a
                tilted appearance.
            </summary>
        </member>
        <member name="F:SpriteBase.width">
            <summary>
                The width of the sprite in world units. Used for mesh vertex calculation and
                size-based operations.
            </summary>
        </member>
        <member name="F:SpriteBase.winding">
            <summary>
                The triangle winding order for mesh faces. CW (clockwise) shows the front face, CCW
                (counter-clockwise) shows the back face. Default is CW.
            </summary>
        </member>
        <member name="F:SpriteBase.worldUnitsPerScreenPixel">
            <summary>
                The conversion factor between world units and screen pixels for pixel-perfect
                rendering. Calculated as (camera orthographic size * 2) / screen height when
                pixelPerfect is enabled. This value ensures sprites are rendered at exact pixel
                boundaries without filtering artifacts, maintaining the crisp pixel art aesthetic.
            </summary>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:SpriteBase.i">
            <summary>
                General purpose loop iterator variable. Used by derived classes as a temporary
                variable during various operations. Not used directly in SpriteBase but provided as
                a protected member for subclass convenience.
            </summary>
        </member>
        <member name="F:SpriteBase.tempUV">
            <summary>
                Temporary UV coordinate storage used during calculations. Used in CalcSize for
                auto-resize UV ratio calculations and in SetUVsFromPixelCoords for pixel-to-UV
                conversions. Avoids allocation of new Vector2 objects during frequent operations.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:SpriteSM.Awake">
            <summary>
                Unity Awake callback that initializes the sprite system. Creates normals, gets the
                mesh renderer component, initializes the animations array if null, builds all UV
                animations, and calls base initialization. This ensures all sprite components are
                properly set up before Start is called.
            </summary>
        </member>
        <member name="M:SpriteSM.OnDrawGizmos">
            <summary>
                Unity editor callback that monitors sprite changes during edit mode. Creates and
                maintains a SpriteMirror instance to detect property changes, automatically
                reinitializing the sprite when modifications are detected to ensure real-time
                preview updates in the editor.
            </summary>
        </member>
        <member name="M:SpriteSM.Start">
            <summary>
                Unity Start callback that plays the default animation if configured. Checks if
                playAnimOnStart is true, defaultAnim is within the animations array bounds, and the
                application is playing (not in editor mode). This allows sprites to automatically
                start animating when the game begins.
            </summary>
        </member>
        <!-- Sprite Management Methods -->
        <member name="M:SpriteSM.Clear">
            <summary>
                Clears the sprite state by calling base clear functionality and stopping any current
                animation. If an animation is playing, it pauses the animation and sets the current
                animation reference to null. This effectively resets the sprite to its initial
                non-animated state.
            </summary>
        </member>
        <member name="M:SpriteSM.Copy(SpriteBase)">
            <summary>
                Copies all settings from another SpriteSM instance. Copies base sprite properties,
                lower left pixel, pixel dimensions, bleed compensation, and size settings. Also
                duplicates the entire animations array and rebuilds all UV animations for this
                sprite. This creates a complete duplicate of the source sprite's visual
                configuration.
            </summary>
            <param name="s">The source sprite to copy settings from. Must be a SpriteSM instance.</param>
        </member>
        <member name="M:SpriteSM.SetTextureDefaults">
            <summary>
                Sets the sprite to use the full texture dimensions as defaults. Recalculates the
                texture reference, sets the lower left pixel to (0, texture.height), sets the sprite
                size to match the texture dimensions, updates pixel dimensions, calculates UVs, and
                updates the mesh UVs. This is useful for initializing a sprite to display an entire
                texture without manual configuration.
            </summary>
        </member>
        <!-- Sprite Management Fields -->
        <member name="F:SpriteSM.lockWidthAndHeight">
            <summary>
                When true, forces the sprite's world size to exactly match its pixel dimensions.
                Overrides autoResize behavior and ensures 1:1 pixel-to-unit scaling regardless of
                other size calculation settings.
            </summary>
        </member>
        <member name="F:SpriteSM.meshRender">
            <summary>
                Cached reference to the Renderer component on this GameObject. Used for accessing
                the material and texture during trim operations and pixel sampling. Initialized
                during Awake.
            </summary>
        </member>
        <member name="F:SpriteSM.mirror">
            <summary>
                SpriteMirror instance used exclusively in the editor to detect property changes.
                Stores a snapshot of sprite properties and compares them each frame to automatically
                reinitialize the sprite when modifications occur.
            </summary>
        </member>
        <member name="F:SpriteSM.refreshMeshNow">
            <summary>
                Editor flag that forces an immediate mesh update when set to true. Used in editor
                scripts to trigger sprite recreation after property changes without waiting for the
                next update cycle.
            </summary>
        </member>
        <!-- UV Coordinate System Methods -->
        <member name="M:SpriteSM.CalcUVs">
            <summary>
                Calculates the UV coordinates for the sprite based on pixel coordinates. Converts
                the lower left pixel position to UV space and sets the UV rect's position. Then
                converts pixel dimensions to UV space and sets the UV rect's size. This mapping
                allows the sprite to display the correct portion of its texture.
            </summary>
        </member>
        <member name="M:SpriteSM.SetLowerLeftPixel(UnityEngine.Vector2)">
            <summary>
                Sets the lower left pixel coordinate of the sprite on the texture and recalculates
                all UV mappings. Updates the UV rect position and size based on the new pixel
                coordinates, applies bleed compensation, and optionally recalculates the sprite size
                if auto-resize or pixel-perfect mode is enabled.
            </summary>
            <param name="lowerLeft">The pixel coordinates of the lower left corner on the texture.</param>
        </member>
        <member name="M:SpriteSM.SetLowerLeftPixel(System.Single,System.Single)">
            <summary>
                Sets the lower left pixel coordinate of the sprite on the texture using individual X
                and Y values. This is a convenience overload that creates a Vector2 and calls the
                main SetLowerLeftPixel method.
            </summary>
            <param name="x">The X pixel coordinate on the texture.</param>
            <param name="y">The Y pixel coordinate on the texture.</param>
        </member>
        <member name="M:SpriteSM.SetLowerLeftPixel(UnityEngine.Vector2)">
            <summary>
                Sets the lower-left corner position of the sprite within the texture in pixel
                coordinates. Recalculates UV coordinates, applies bleed compensation, and optionally
                resizes the sprite based on autoResize or pixelPerfect settings.
            </summary>
            <param name="lowerLeft">The pixel coordinates of the lower-left corner in texture space.</param>
        </member>
        <member name="M:SpriteSM.SetLowerLeftPixel(System.Single,System.Single)">
            <summary>
                Sets the lower-left corner position of the sprite within the texture using
                individual x and y pixel coordinates. Wrapper method that creates a Vector2 and
                calls the main SetLowerLeftPixel method.
            </summary>
            <param name="x">The x pixel coordinate of the lower-left corner.</param>
            <param name="y">The y pixel coordinate of the lower-left corner.</param>
        </member>
        <member name="M:SpriteSM.SetPixelDimensions(UnityEngine.Vector2)">
            <summary>
                Sets the pixel dimensions of the sprite on the texture and updates UV coordinates
                accordingly. Converts pixel space to UV space, updates the UV rect size, applies
                bleed compensation, and optionally recalculates sprite size for auto-resize or
                pixel-perfect modes. If lockWidthAndHeight is true, also updates the sprite's world
                size to match pixel dimensions.
            </summary>
            <param name="size">The width and height in pixels on the texture.</param>
        </member>
        <member name="M:SpriteSM.SetPixelDimensions(System.Int32,System.Int32)">
            <summary>
                Sets the pixel dimensions of the sprite on the texture using individual width and
                height values. This is a convenience overload that creates a Vector2 and calls the
                main SetPixelDimensions method.
            </summary>
            <param name="x">The width in pixels on the texture.</param>
            <param name="y">The height in pixels on the texture.</param>
        </member>
        <member name="M:SpriteSM.SetPixelDimensions(UnityEngine.Vector2)">
            <summary>
                Sets the pixel dimensions of the sprite region within the texture. Updates UV
                coordinates to match the new dimensions, applies bleed compensation, and optionally
                updates the sprite's world size based on lockWidthAndHeight, autoResize, or
                pixelPerfect settings.
            </summary>
            <param name="size">The width and height in pixels of the sprite region.</param>
        </member>
        <member name="M:SpriteSM.SetPixelDimensions(System.Int32,System.Int32)">
            <summary>
                Sets the pixel dimensions of the sprite region within the texture using integer
                width and height values. Wrapper method that creates a Vector2 and calls the main
                SetPixelDimensions method.
            </summary>
            <param name="x">The width in pixels of the sprite region.</param>
            <param name="y">The height in pixels of the sprite region.</param>
        </member>
        <!-- UV Coordinate System Fields -->
        <member name="F:SpriteSM.lowerLeftPixel">
            <summary>
                The pixel coordinates of the lower-left corner of this sprite's region within the
                texture. Used as the starting point for UV coordinate calculations and determines
                which part of the texture is displayed.
            </summary>
        </member>
        <member name="F:SpriteSM.pixelDimensions">
            <summary>
                The width and height in pixels of this sprite's region within the texture. Combined
                with lowerLeftPixel to define the complete rectangular area of the texture that this
                sprite displays.
            </summary>
        </member>
        <!-- Trim Operations Methods -->
        <member name="M:SpriteSM.ExpandDown">
            <summary>
                Expands the sprite area downward until no more non-transparent pixels are found.
                Checks each row below the current area, testing all pixels in that row. If any pixel
                has alpha greater than alphaBias, expands the area to include that row. Updates
                pixel dimensions, lower left position, size, and UVs to reflect the expanded area.
            </summary>
        </member>
        <member name="M:SpriteSM.ExpandLeft">
            <summary>
                Expands the sprite area to the left until no more non-transparent pixels are found.
                Checks each column to the left of the current area, testing all pixels in that
                column. If any pixel has alpha greater than alphaBias, expands the area to include
                that column. Updates pixel dimensions, lower left position, size, and UVs to reflect
                the expanded area.
            </summary>
        </member>
        <member name="M:SpriteSM.ExpandRight">
            <summary>
                Expands the sprite area to the right until no more non-transparent pixels are found.
                Checks each column to the right of the current area, testing all pixels in that
                column. If any pixel has alpha greater than alphaBias, expands the area to include
                that column. Updates pixel dimensions, size, and UVs to reflect the expanded area.
            </summary>
        </member>
        <member name="M:SpriteSM.ExpandUp">
            <summary>
                Expands the sprite area upward until no more non-transparent pixels are found.
                Checks each row above the current area, testing all pixels in that row. If any pixel
                has alpha greater than alphaBias, expands the area to include that row. Updates
                pixel dimensions, size, and UVs to reflect the expanded area.
            </summary>
        </member>
        <member name="M:SpriteSM.Trim">
            <summary>
                Automatically trims transparent pixels from all sides of the sprite to create a
                tight bounding box. Snaps the sprite position to 0.5 unit intervals, reduces the
                sprite to a 2x2 pixel area at the center, then iteratively expands outward until
                non-transparent pixels are found. Finally trims any remaining transparent edges.
                This creates the smallest possible sprite that contains all visible pixels.
            </summary>
        </member>
        <member name="M:SpriteSM.TrimBottom">
            <summary>
                Trims transparent pixels from the bottom of the sprite. Iterates through rows from
                bottom to top, checking all pixels in each row. Stops when a row contains any pixel
                with alpha greater than alphaBias. Updates the sprite's size, dimensions, lower left
                position, and UVs to exclude the trimmed area.
            </summary>
        </member>
        <member name="M:SpriteSM.TrimRight">
            <summary>
                Trims transparent pixels from the right side of the sprite. Iterates through columns
                from right to left, checking all pixels in each column. Stops when a column contains
                any pixel with alpha greater than alphaBias. Updates the sprite's dimensions and UVs
                to exclude the trimmed area.
            </summary>
        </member>
        <member name="M:SpriteSM.TrimTop">
            <summary>
                Trims transparent pixels from the top of the sprite. Iterates through rows from top
                to bottom, checking all pixels in each row. Stops when a row contains any pixel with
                alpha greater than alphaBias. Updates the sprite's size, dimensions, and UVs to
                exclude the trimmed area.
            </summary>
        </member>
        <member name="M:SpriteSM.Trimleft">
            <summary>
                Trims transparent pixels from the left side of the sprite. Iterates through columns
                from left to right, checking all pixels in each column. Stops when a column contains
                any pixel with alpha greater than alphaBias. Updates the sprite's position,
                dimensions, and UVs to exclude the trimmed area.
            </summary>
        </member>
        <!-- Trim Operations Fields -->
        <member name="F:SpriteSM.alphaBias">
            <summary>
                Alpha threshold value (0.2) used during trim operations. Pixels with alpha values
                below this threshold are considered transparent and will be trimmed. Higher values
                result in more aggressive trimming.
            </summary>
        </member>
        <member name="F:SpriteSM.trim">
            <summary>
                Editor flag that enables automatic transparent pixel trimming. When true, the sprite
                boundaries are automatically adjusted to exclude fully transparent edges, optimizing
                the sprite size.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:SpriteSM.AddAnimation(UVAnimation_Multi)">
            <summary>
                Adds a new UV animation to the sprite's animation collection. Creates a new array
                with one additional slot, copies all existing animations, and adds the new animation
                at the end. This allows dynamic addition of animations at runtime.
            </summary>
            <param name="anim">The UV animation to add to the sprite.</param>
        </member>
        <member name="M:SpriteSM.GetAnim(System.String)">
            <summary>
                Retrieves an animation by name from the animations array. Searches through all
                configured animations and returns the first match found.
            </summary>
            <param name="name">The name of the animation to retrieve.</param>
            <returns>The UVAnimation_Multi with the specified name, or null if not found.</returns>
        </member>
        <member name="M:SpriteSM.GetCurAnim">
            <summary>
                Returns the currently playing animation. Used to check animation state or access
                animation properties during playback.
            </summary>
            <returns>The current UVAnimation_Multi instance, or null if no animation is playing.</returns>
        </member>
        <member name="M:SpriteSM.PlayAnim(UVAnimation_Multi)">
            <summary>
                Starts playing the specified UV animation from the beginning. Resets the animation,
                calculates frame timing based on the animation's framerate, and begins stepping
                through frames. For single-frame animations, immediately triggers the completion
                delegate. Adds the sprite to the animated list if it has multiple frames and isn't
                already animating.
            </summary>
            <param name="anim">The animation to play.</param>
        </member>
        <member name="M:SpriteSM.PlayAnim(System.Int32)">
            <summary>
                Plays an animation by its index in the animations array. Validates the index is
                within bounds before playing the animation at that position.
            </summary>
            <param name="index">The zero-based index of the animation to play.</param>
        </member>
        <member name="M:SpriteSM.PlayAnim(System.String)">
            <summary>
                Plays an animation by its name. Searches through all animations to find one with a
                matching name and plays the first match found. Does nothing if no animation with the
                specified name exists.
            </summary>
            <param name="name">The name of the animation to play.</param>
        </member>
        <member name="M:SpriteSM.PlayAnimInReverse(UVAnimation_Multi)">
            <summary>
                Starts playing the specified UV animation in reverse from the end. Resets the
                animation, sets it to play in reverse mode, calculates frame timing, and begins
                stepping backwards through frames. Handles single-frame animations and animation
                list management the same as forward playback.
            </summary>
            <param name="anim">The animation to play in reverse.</param>
        </member>
        <member name="M:SpriteSM.PlayAnimInReverse(System.Int32)">
            <summary>
                Plays an animation in reverse by its index in the animations array. Validates the
                index is within bounds before playing the animation at that position in reverse.
            </summary>
            <param name="index">The zero-based index of the animation to play in reverse.</param>
        </member>
        <member name="M:SpriteSM.PlayAnimInReverse(System.String)">
            <summary>
                Plays the animation with the specified name in reverse direction. Searches through
                all animations in the animations array to find a match by name, then configures it
                to play backwards with the same framerate and animation settings as normal playback.
            </summary>
            <param name="name">The name of the animation to play in reverse.</param>
        </member>
        <member name="M:SpriteSM.StepAnim(System.Single)">
            <summary>
                Advances the current animation by the specified time and updates the sprite's UV
                coordinates. Calculates frames to advance based on elapsed time and frame rate.
                Handles animation completion according to the animation's end action (do nothing,
                revert to static, or play default). Triggers animation complete delegate when
                appropriate. Updates bleed compensation and recalculates size if in auto-resize or
                pixel-perfect mode.
            </summary>
            <param name="time">The time in seconds to advance the animation.</param>
            <returns>True if the animation is still playing, false if it has completed.</returns>
        </member>
        <member name="M:SpriteSM.StopAnim">
            <summary>
                Stops the currently playing animation and reverts the sprite to its static state.
                Removes the sprite from the animation update list, resets the current animation's
                frame counter, and restores the original UV coordinates.
            </summary>
        </member>
        <member name="M:SpriteSM.UnpauseAnim">
            <summary>
                Resumes playback of a previously paused animation. If a current animation exists,
                re-adds the sprite to the animated update list to continue frame stepping.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:SpriteSM.animations">
            <summary>
                Array of all UV animations configured for this sprite. Each animation contains frame
                data, timing, and playback settings. Animations are identified by name and can be
                played, stopped, or reversed through the animation control methods.
            </summary>
        </member>
        <member name="F:SpriteSM.curAnim">
            <summary>
                The currently playing animation instance. Null when no animation is active. Used by
                the animation system to track frame progression, handle animation events, and
                determine when animations complete.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:SpriteSM.CheckReadbility">
            <summary>
                Placeholder method for checking texture readability. Currently has no implementation
                but is called before pixel read operations. This may have been intended for runtime
                texture readability validation.
            </summary>
        </member>
        <member name="M:SpriteSM.GetPixel(System.Single,System.Single)">
            <summary>
                Gets the color of a pixel at the specified texture coordinates. Returns transparent
                black if the material, texture, or coordinates are invalid. Checks texture
                readability, validates coordinates are within texture bounds, and returns the pixel
                color. Note that Y coordinates are flipped since Unity textures have origin at
                bottom-left.
            </summary>
            <param name="x">The X coordinate on the texture in pixels.</param>
            <param name="y">The Y coordinate on the texture in pixels (bottom-left origin).</param>
            <returns>The color of the pixel at the specified coordinates, or transparent black if invalid.</returns>
        </member>
        <member name="M:SpriteSM.Snap(System.Single)">
            <summary>
                Snaps a value to the nearest interval as defined by roundInterval. Divides the value
                by the interval, rounds to the nearest integer, then multiplies back by the
                interval. This is used for pixel-perfect positioning and sizing.
            </summary>
            <param name="value">The value to snap to the grid.</param>
            <returns>The value snapped to the nearest interval.</returns>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:SpriteSM.round">
            <summary>
                Enables position rounding for pixel-perfect alignment. When true, sprite positions
                are snapped to intervals defined by roundInterval to prevent sub-pixel rendering
                artifacts.
            </summary>
        </member>
        <member name="F:SpriteSM.roundInterval">
            <summary>
                The rounding interval in pixels used when round is enabled. Positions are snapped to
                multiples of this value. Default value of 1 provides standard pixel-perfect
                alignment.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:StatisticsController.Awake">
            <summary>
                Initializes the singleton instance and creates a new LevelStats object for tracking
                current level statistics. Sets initial destruction count to 0.
            </summary>
        </member>
        <member name="M:StatisticsController.NotOnGUI">
            <summary>
                Debug GUI display method (despite misleading name). Shows current level statistics
                including destruction count, kills/total enemies, formatted time, rescues/cages,
                brutality score, and brutality meter with scrollbar. Not actually disabled.
            </summary>
        </member>
        <member name="M:StatisticsController.NotifyPause(System.Boolean)">
            <summary>
                Handles pause state notifications for time tracking. Records pause start time when
                paused. Placeholder for pause duration calculation when unpaused (currently unused).
            </summary>
            <param name="paused">True when game is paused, false when resumed</param>
        </member>
        <member name="M:StatisticsController.Start">
            <summary>
                Initializes statistics tracking for the level start. Resets elapsed time to 0, sets
                brutality and time percentiles to -1, initializes brutality grace period to 6
                seconds, resets brutality level to 0, and loads existing campaign brutality totals
                if brutality scoring is enabled for the current campaign.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:StatisticsController.pauseTime">
            <summary>
                Tracks the timestamp when the game was paused. Set to current Time.time when paused,
                used for pause duration tracking. Initialized to -1f indicating no pause has
                occurred yet.
            </summary>
        </member>
        <!-- Networking & RPC Methods -->
        <member name="M:StatisticsController.DeserializeStats(System.Byte[])">
            <summary>
                Deserializes received statistics data from network. Unpacks byte stream to populate
                current stats including all kill/alert counters, elapsed time, and level attempts.
                Creates new LevelStats if needed.
            </summary>
            <param name="byteStream">The serialized statistics data to unpack</param>
        </member>
        <member name="M:StatisticsController.PackState(UnityStream)">
            <summary>
                Packs the current elapsed time into a network stream for multiplayer synchronization
            </summary>
            <param name="stream">The Unity network stream to serialize data to</param>
            <returns>The modified stream after serialization</returns>
            <remarks>
                This method ensures all players have synchronized elapsed time. If no currentStats
                exists or instance is null, sends 0 as default time value
            </remarks>
        </member>
        <member name="M:StatisticsController.SerializeStats">
            <summary>
                Serializes current level statistics for network transmission. Packs destruction,
                kills, rescues, alert states, knife kills, unaware kills, elapsed time, and level
                attempts into byte array. Uses current stats or falls back to last level stats.
            </summary>
            <returns>Serialized statistics data as byte array</returns>
        </member>
        <member name="M:StatisticsController.UnpackState(UnityStream)">
            <summary>
                Unpacks elapsed time from a network stream during multiplayer synchronization
            </summary>
            <param name="stream">The Unity network stream to deserialize data from</param>
            <returns>The stream after deserialization</returns>
            <remarks>
                Updates the current statistics elapsed time with the received value from the network
            </remarks>
        </member>
        <!-- Statistics Tracking System Methods -->
        <member name="M:StatisticsController.CacheStats">
            <summary>
                Caches the current level statistics for later aggregation (used by super
                checkpoints). If no cached stats exist, stores the current stats directly. If cached
                stats already exist, adds the current stats to them. Creates a new empty LevelStats
                object for continued tracking.
            </summary>
        </member>
        <member name="M:StatisticsController.CalcAndSubmitCampaignScore">
            <summary>
                Calculates total campaign statistics and submits them to leaderboards. Iterates
                through all level scores to sum brutality and time, then submits to Playtomic if
                using Badumna connection. Called at campaign completion.
            </summary>
        </member>
        <member name="M:StatisticsController.CalculateTotalTime">
            <summary>
                Calculates and synchronizes the total elapsed time across all players. Gets time
                from current or last level stats and sends RPC to all players if host. Ensures
                consistent time tracking in multiplayer.
            </summary>
        </member>
        <member name="M:StatisticsController.ClearCachedStats">
            <summary>
                Clears the cached statistics buffer. Used to reset temporary stats storage between
                level attempts or when starting fresh.
            </summary>
        </member>
        <member name="M:StatisticsController.GetCampaignTotalBrotality">
            <summary>
                Calculates and returns the total brutality score across all campaign levels. Sums
                calculated brutality values from each level's statistics. Also builds debug string
                with detailed breakdowns (unused).
            </summary>
            <returns>Total brutality score for the entire campaign</returns>
        </member>
        <member name="M:StatisticsController.GetCampaignTotalTime">
            <summary>
                Calculates and returns the total time spent across all campaign levels. Iterates
                through campaign score dictionary summing elapsed times. Also builds detailed debug
                string with per-level statistics (unused).
            </summary>
            <returns>Total elapsed time across all completed campaign levels</returns>
        </member>
        <member name="M:StatisticsController.GetDeathsCount">
            <summary>
                Returns the total number of recorded deaths from the last completed level's death
                list.
            </summary>
            <returns>The count of death objects in the last level's death list</returns>
        </member>
        <member name="M:StatisticsController.GetTime">
            <summary>
                Gets the elapsed time from the last completed level's statistics.
            </summary>
            <returns>The elapsed time in seconds from the last level stats</returns>
        </member>
        <member name="M:StatisticsController.GetTimeString">
            <summary>
                Converts the current level's elapsed time into a formatted time string in MM:SS.T
                format (where T is tenths of seconds).
            </summary>
            <returns>Formatted time string showing minutes, seconds, and tenths</returns>
        </member>
        <member name="M:StatisticsController.GetTimeString(System.Single)">
            <summary>
                Converts a time value in seconds to a formatted string in MM:SS.T format (where T is
                tenths of seconds).
            </summary>
            <param name="time">Time in seconds to format</param>
            <returns>Formatted time string showing minutes, seconds, and tenths</returns>
        </member>
        <member name="M:StatisticsController.LogLevelScore(System.Int32,System.Single,System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
                Stores level statistics in the campaign score dictionary. Creates the dictionary if
                needed and replaces existing scores for the same level number. Used internally after
                level completion.
            </summary>
            <param name="levelNum">The level number identifier</param>
            <param name="time">Time taken to complete the level</param>
            <param name="brotality">Brutality score (unused in current implementation)</param>
            <param name="stealth">Stealth score (unused in current implementation)</param>
            <param name="kills">Number of enemies killed</param>
            <param name="levelAttempts">Number of attempts to complete the level</param>
        </member>
        <member name="M:StatisticsController.NotifyBlockDestroyed(Block)">
            <summary>
                Records terrain destruction for brutality scoring. Called when any block is
                destroyed. Adds 0.1 to totalBrotality and increments destruction counter.
            </summary>
            <param name="block">The block that was destroyed</param>
        </member>
        <member name="M:StatisticsController.NotifyKnifedMook(Mook)">
            <summary>
                Records when a mook is killed by a knife attack. Called from mook damage handling
                when death is caused by knife damage type. Increments the mooksKnifed statistic for
                stealth tracking.
            </summary>
            <param name="mook">The mook that was knifed</param>
        </member>
        <member name="M:StatisticsController.NotifyLevelFinished(LevelResult)">
            <summary>
                Handles all statistics processing when a level ends. Records death counts by
                hero/mook type for campaign tracking, merges cached stats on success, calculates
                stealth score, logs level score to campaign dictionary, and resets or increments
                level attempts based on result.
            </summary>
            <param name="result">Whether the level was completed successfully or failed</param>
        </member>
        <member name="M:StatisticsController.NotifyLevelLoaded">
            <summary>
                Records the total number of mooks at level start by storing the current totalMooks
                count. Called when a level finishes loading to establish the baseline mook count for
                completion percentage tracking.
            </summary>
        </member>
        <member name="M:StatisticsController.NotifyMookDeath(Mook)">
            <summary>
                Records a mook death for statistics tracking. Increments kill count, updates
                brutality score based on kill timing (combo multiplier if kills within 0.5 seconds),
                sets brutality grace periods, adds 1 brutality point and 1 music intensity, updates
                last kill time, and tracks stealth kills if the mook was unaware.
            </summary>
            <param name="mook">The mook that died</param>
        </member>
        <member name="M:StatisticsController.NotifyMookHeardSound(Mook)">
            <summary>
                Increments the count of mooks that have heard suspicious sounds. Only counts living
                mooks that can be added to statistics.
            </summary>
            <param name="mook">The mook that heard a sound</param>
        </member>
        <member name="M:StatisticsController.NotifyMookSeenBro(Mook)">
            <summary>
                Notifies the statistics system when a mook has seen a bro (player). Called when AI
                becomes aware of player presence. Increments the mooksHalfAlerted counter if
                conditions are met.
            </summary>
            <param name="mook">The mook that has spotted a bro</param>
        </member>
        <member name="M:StatisticsController.NotifyMookTryShootAtBBro(Mook)">
            <summary>
                Records when a mook attempts to shoot at a bro. Called by enemy AI when entering
                shooting state. Increments mooksFullyAlerted to track complete enemy awareness.
            </summary>
            <param name="mook">The mook attempting to shoot</param>
        </member>
        <member name="M:StatisticsController.NotifyRescue">
            <summary>
                Records a prisoner rescue event. Adds 3 brutality points, sets grace period based on
                current brutality level (unused grace calculation), and increments rescue counter.
                Called when players free prisoners from cages.
            </summary>
        </member>
        <member name="M:StatisticsController.NotifyTankDeath(Tank)">
            <summary>
                Records a tank death for statistics and world map campaign tracking. Updates vehicle
                death counters in world map saves, sets last kill time, adds 10 brutality points and
                4 music intensity, and sets brutality grace period to 5 seconds (then immediately to
                1 second). Tracks as vehicle type in campaign statistics.
            </summary>
            <param name="tank">The tank that was destroyed</param>
        </member>
        <member name="M:StatisticsController.NotifyTruckDeath(Tank)">
            <summary>
                Records a truck death for statistics and world map campaign tracking. Updates
                vehicle death counters in world map saves, sets last kill time, adds 5 brutality
                points and 3 music intensity, and sets brutality grace period to 4 seconds (then
                immediately to 1 second). Tracks as vehicle type in campaign statistics.
            </summary>
            <param name="tank">The truck (Tank instance) that was destroyed</param>
        </member>
        <member name="M:StatisticsController.RegisterMook(Mook)">
            <summary>
                Registers a mook as part of the level's total mook count for statistics tracking.
                Only counts mooks that return true from CanAddToStatistics().
            </summary>
            <param name="mook">The mook instance to register for statistics tracking</param>
        </member>
        <member name="M:StatisticsController.RegisterRescueBro">
            <summary>
                Increments the total cage/rescue count for the current level statistics. Called when
                a bro rescue cage is discovered in the level.
            </summary>
        </member>
        <member name="M:StatisticsController.ResetScore">
            <summary>
                Resets all campaign scoring data. Clears the campaign score dictionary and
                deathmatch death objects. Called when starting a new campaign or resetting progress.
            </summary>
        </member>
        <member name="M:StatisticsController.SetTotalTime(System.Single)">
            <summary>
                RPC method that sets the synchronized total time value. Called by host to update all
                players' elapsed time. Updates currentStats.elapsedTime if stats exist.
            </summary>
            <param name="totatTime">The synchronized total time value</param>
        </member>
        <!-- Statistics Tracking System Fields -->
        <member name="F:StatisticsController.cachedStats">
            <summary>
                Temporary storage for statistics during level transitions or checkpoints
            </summary>
            <remarks>
                Used to preserve statistics across checkpoint restarts. Added back to currentStats
                upon level completion
            </remarks>
        </member>
        <member name="F:StatisticsController.currentStats">
            <summary>
                Active statistics being tracked for the current level in progress
            </summary>
            <remarks>
                Created at level start, updated throughout gameplay, and moved to lastLevelStats
                upon completion. Null when not in a level
            </remarks>
        </member>
        <member name="F:StatisticsController.efficiencyScore">
            <summary>
                Score based on completion efficiency (unused in current implementation)
            </summary>
            <remarks>
                Field exists but is never referenced in the codebase. Likely deprecated in favor of
                the brutality system
            </remarks>
        </member>
        <member name="F:StatisticsController.killScore">
            <summary>
                Score points awarded for kills (unused in current implementation)
            </summary>
            <remarks>
                Field exists but is never referenced in the codebase. Likely deprecated in favor of
                the brutality system
            </remarks>
        </member>
        <member name="F:StatisticsController.lastLevelStats">
            <summary>
                Statistics from the most recently completed level
            </summary>
            <remarks>
                Set when a level is successfully completed. Used by UI screens to display
                end-of-level statistics
            </remarks>
        </member>
        <member name="F:StatisticsController.rescueScore">
            <summary>
                Score points awarded for rescuing bros (unused in current implementation)
            </summary>
            <remarks>
                Field exists but is never referenced in the codebase. Likely deprecated in favor of
                the brutality system
            </remarks>
        </member>
        <member name="F:StatisticsController.totalMooks">
            <summary>
                Running count of total mooks spawned across all levels in the current session
            </summary>
            <remarks>
                Incremented by each mook's Start() method. Used to set mooksAtStart in currentStats
                when a level begins
            </remarks>
        </member>
        <!-- Brutality Scoring System Methods -->
        <member name="M:StatisticsController.AddBrotality(System.Int32)">
            <summary>
                Adds points to the brutality score and music intensity. Adds the specified amount to
                totalBrotality and musicIntensity. Sets grace period to 1 second (5+ points) or
                extends existing grace if less than 1 second (under 5 points).
            </summary>
            <param name="extra">The amount of brutality points to add</param>
        </member>
        <member name="M:StatisticsController.AddBrotalityGrace(System.Single)">
            <summary>
                Extends the brutality grace period timer. Sets grace period to the specified value
                if greater than current. Grace period prevents brutality score decay temporarily
                after actions.
            </summary>
            <param name="grace">The grace period duration in seconds to potentially set</param>
        </member>
        <member name="M:StatisticsController.CalculateBrotality(LevelStats)">
            <summary>
                Calculates the final brutality score from level statistics. Subtracts penalties from
                total, multiplies by 10, rounds up, then multiplies by 10 again. Ensures scores are
                rounded to nearest 100.
            </summary>
            <param name="stats">The level statistics to calculate brutality from</param>
            <returns>Final brutality score as a long value</returns>
        </member>
        <member name="M:StatisticsController.CalculateBrotalityLevel(System.Single)">
            <summary>
                Determines brutality level based on current score value. Sets level 0-5 based on
                thresholds: 0 (≤12), 1 (≤37), 2 (≤87), 3 (≤162), 4 (≤362), 5 (&gt;362). Updates
                static brotalityLevel field.
            </summary>
            <param name="brotalityValue">The current brutality score to evaluate</param>
        </member>
        <member name="M:StatisticsController.CalculateStealth">
            <summary>
                Placeholder method for stealth score calculation. Currently empty - stealth scoring
                system not implemented. Intended to evaluate undetected kills and silent
                progression.
            </summary>
        </member>
        <member name="M:StatisticsController.GetBrotalityLevel">
            <summary>
                Returns the current brutality level (0-5). Level determines score decay rate and
                visual feedback intensity. Static accessor for the private brotalityLevel field.
            </summary>
            <returns>Current brutality level from 0 (lowest) to 5 (highest)</returns>
        </member>
        <member name="M:StatisticsController.GetBrotalometerValue">
            <summary>
                Gets the current brutality meter value, which represents total brutality minus
                penalties.
            </summary>
            <returns>The current brutality meter value as displayed on the HUD</returns>
        </member>
        <member name="M:StatisticsController.GetMusicIntensity">
            <summary>
                Gets the current music intensity value that drives dynamic music changes based on
                combat action. Increased by kills and decreased over time when not in combat.
            </summary>
            <returns>The current music intensity value</returns>
        </member>
        <member name="M:StatisticsController.NotifyCaptureCheckPoint">
            <summary>
                Awards brutality bonus for capturing a checkpoint. Adds 3 brutality points and sets
                brutality grace period to 5 seconds (then immediately to 1 second). Does nothing if
                level is already finished.
            </summary>
        </member>
        <member name="M:StatisticsController.ShowBrotalityScore">
            <summary>
                Determines whether brutality score should be displayed based on current campaign
                settings. Returns true only if a campaign is loaded with a header that has brutality
                scoreboard enabled and the game is not in edit mode.
            </summary>
            <returns>True if brutality score should be shown, false otherwise</returns>
        </member>
        <member name="M:StatisticsController.Update">
            <summary>
                Unity Update method that manages brutality scoring mechanics. Handles grace period
                countdown, brutality decay rates based on level (3-50 per second), applies decay
                multipliers for extended inactivity (up to 3x), manages music intensity fadeout,
                calculates brutality meter display value, updates brutality level thresholds, and
                tracks elapsed time when unpaused.
            </summary>
        </member>
        <!-- Brutality Scoring System Fields -->
        <member name="F:StatisticsController.brotalitometerValue">
            <summary>
                Current visual fill level of the brutality meter UI (unused)
            </summary>
            <remarks>
                Field exists but is never referenced. The Brotalitometer class manages its own
                display value
            </remarks>
        </member>
        <member name="F:StatisticsController.brotalityFifthBarValue">
            <summary>
                Deprecated constant that was likely used for visual brutality bar display. Value of
                200f represents the fifth threshold level. No longer used in current implementation.
            </summary>
        </member>
        <member name="F:StatisticsController.brotalityFirstBarValue">
            <summary>
                Brutality score threshold for filling the first bar of the brutality meter (12
                points)
            </summary>
            <remarks>
                Used by Brotalitometer UI to determine visual representation of brutality progress
            </remarks>
        </member>
        <member name="F:StatisticsController.brotalityFourthBarValue">
            <summary>
                Deprecated constant that was likely used for visual brutality bar display. Value of
                75f represents the fourth threshold level. No longer used in current implementation.
            </summary>
        </member>
        <member name="F:StatisticsController.brotalityGrace">
            <summary>
                Grace period timer for maintaining brutality multiplier chains (unused)
            </summary>
            <remarks>
                Field exists but is never referenced in code. The brutality system instead uses
                lastKillTime for timing
            </remarks>
        </member>
        <member name="F:StatisticsController.brotalityLevel">
            <summary>
                Tracks the current brutality level (0-5) based on brotalitometerValue thresholds.
                Used by UI elements like MookAlertLevelIndicator to display alert icons. Level 0:
                &lt;=12, Level 1: &lt;=37, Level 2: &lt;=87, Level 3: &lt;=162, Level 4: &lt;=362,
                Level 5: &gt;362. Reset to 0 at level start.
            </summary>
        </member>
        <member name="F:StatisticsController.brotalitySecondBarValue">
            <summary>
                Deprecated constant that was likely used for visual brutality bar display. Value of
                25f represents the second threshold level. No longer used in current implementation.
            </summary>
        </member>
        <member name="F:StatisticsController.brotalityThirdBarValue">
            <summary>
                Deprecated constant that was likely used for visual brutality bar display. Value of
                50f represents the third threshold level. No longer used in current implementation.
            </summary>
        </member>
        <member name="F:StatisticsController.lastBrotality">
            <summary>
                Previous brutality score value (unused in current implementation)
            </summary>
            <remarks>
                Field exists but is never referenced. Brutality tracking is handled through
                currentStats instead
            </remarks>
        </member>
        <member name="F:StatisticsController.lastKillTime">
            <summary>
                Timestamp of the most recent kill, used for brutality multiplier timing
            </summary>
            <remarks>
                Set by RegisterMookDeath and RegisterTankDeath. Used to determine if kills are
                within 0.5 seconds for multiplier chains
            </remarks>
        </member>
        <member name="F:StatisticsController.musicIntensity">
            <summary>
                Music intensity level based on recent player actions (unused)
            </summary>
            <remarks>
                Field exists but is never referenced. Music intensity is controlled directly by the
                Sound class instead
            </remarks>
        </member>
        <!-- Death Recording System Methods -->
        <member name="M:StatisticsController.AddToDeathList(DeathObject)">
            <summary>
                Adds a death object to the current level's death list if it doesn't already exist.
                Checks for null objects and validates that statistics tracking is initialized.
                Prevents duplicate entries by checking if a death with the same unit ID already
                exists.
            </summary>
            <param name="deathObj">The death object to add to the tracking list</param>
        </member>
        <member name="M:StatisticsController.AddToDeathListRPC(NID,DeathType,MookType,System.Single,System.Single)">
            <summary>
                RPC method that creates and adds a mook death object to the current level's death
                list. Called on all clients to synchronize death tracking.
            </summary>
            <param name="nid">Network ID of the unit that died</param>
            <param name="deathType">The type/cause of death</param>
            <param name="mookType">The type of mook that died</param>
            <param name="xI">X position where death occurred</param>
            <param name="yI">Y position where death occurred</param>
        </member>
        <member name="M:StatisticsController.AddToDeathListRPC(NID,DeathType,HeroType,System.Single,System.Single)">
            <summary>
                RPC method that creates and adds a hero death object to the current level's death
                list. Called on all clients to synchronize death tracking.
            </summary>
            <param name="nid">Network ID of the hero that died</param>
            <param name="deathType">The type/cause of death</param>
            <param name="mookType">The type of hero that died (parameter name is legacy)</param>
            <param name="xI">X position where death occurred</param>
            <param name="yI">Y position where death occurred</param>
        </member>
        <member name="M:StatisticsController.GetDeathObject(System.Int32)">
            <summary>
                Retrieves a specific death object from the last level's death list by index. Used by
                the level over screen to display death replay information.
            </summary>
            <param name="deathIndex">The index of the death object to retrieve</param>
            <returns>The DeathObject at the specified index, or null if index is out of bounds</returns>
        </member>
        <member name="M:StatisticsController.NotifyDeathType(NID,MookType,DeathType,System.Single,System.Single)">
            <summary>
                Records and broadcasts a death event to all players via RPC. Only processes non-None
                and non-Unassigned death types when the level is not finished. Sends death
                information including unit ID, type, death cause, and position.
            </summary>
            <param name="nid">Network ID of the unit that died</param>
            <param name="mookType">The type of mook that died</param>
            <param name="deathType">The type/cause of death</param>
            <param name="xI">X position where death occurred</param>
            <param name="yI">Y position where death occurred</param>
        </member>
        <member name="M:StatisticsController.NotifyMookDeathType(Mook,DeathType)">
            <summary>
                Records and broadcasts a mook death with specific death type to all players via RPC.
                Extracts mook properties (ID, type, position) and sends death notification if death
                type is valid and level is not finished.
            </summary>
            <param name="mook">The mook that died</param>
            <param name="deathType">The type/cause of death</param>
        </member>
        <member name="M:StatisticsController.NotifyMookDeathType(TestVanDammeAnim,DeathType)">
            <summary>
                Records and broadcasts a hero (bro) death with specific death type to all players
                via RPC. Extracts hero properties (ID, type, position) and sends death notification
                if death type is valid and level is not finished.
            </summary>
            <param name="vanDamme">The hero/bro that died</param>
            <param name="deathType">The type/cause of death</param>
        </member>
        <!-- Deathmatch Statistics Methods -->
        <member name="M:StatisticsController.AddDeathmatchDeathObject(System.Int32,DeathObject)">
            <summary>
                Records a death event in deathmatch mode, tracking which player scored the kill
            </summary>
            <param name="killer">The player index who scored the kill (0-3)</param>
            <param name="deathObject">The death object containing information about the death event</param>
            <remarks>
                Initializes the deathmatchDeathObjects array if not already created. Each player has
                their own list of kills tracked separately
            </remarks>
        </member>
        <member name="M:StatisticsController.ClearDeathmatchDeathObjects">
            <summary>
                Clears all recorded deathmatch kills for all players
            </summary>
            <remarks>
                Called when resetting deathmatch statistics or starting a new match. Safely handles
                null checks before clearing
            </remarks>
        </member>
        <member name="M:StatisticsController.GetDeathmatchKillObjects(System.Int32)">
            <summary>
                Retrieves all death objects (kills) recorded for a specific player in deathmatch
            </summary>
            <param name="player">The player index (0-3) to get kills for</param>
            <returns>List of death objects representing kills by this player, or null if no data exists</returns>
        </member>
        <!-- Campaign Progress System Fields -->
        <member name="F:StatisticsController.brotalityPercentile">
            <summary>
                The percentile ranking for brutality score (0-100, where 0 means top percentile)
            </summary>
            <remarks>
                Set to -1 when no data available. Used by LevelOverScreen to display "Top X%"
                messages when player rank is outside top 10
            </remarks>
        </member>
        <member name="F:StatisticsController.brotalityRank">
            <summary>
                The player's global rank for brutality score on the current campaign leaderboard
            </summary>
            <remarks>
                Initialized to 9999 when no rank data is available. Updated by PlaytomicController
                when leaderboard data is retrieved. Lower numbers indicate better rank (1 = first
                place)
            </remarks>
        </member>
        <member name="F:StatisticsController.levelAttempts">
            <summary>
                Tracks the number of attempts made on the current level before successful completion
            </summary>
            <remarks>
                Incremented on each level failure, reset to 0 after successful completion. Saved to
                LogLevelScore for analytics
            </remarks>
        </member>
        <member name="F:StatisticsController.stealthPercentile">
            <summary>
                The percentile ranking for stealth score (0-100, where 0 means top percentile)
            </summary>
            <remarks>
                Set to -1 when no data available. Used by LevelOverScreen to display "Top X%"
                messages when player rank is outside top 10
            </remarks>
        </member>
        <member name="F:StatisticsController.stealthRank">
            <summary>
                The player's global rank for stealth score on the current campaign leaderboard
            </summary>
            <remarks>
                Initialized to 9999 when no rank data is available. Updated by PlaytomicController
                when leaderboard data is retrieved. Lower numbers indicate better rank (1 = first
                place)
            </remarks>
        </member>
        <member name="F:StatisticsController.timePercentile">
            <summary>
                The percentile ranking for completion time (0-100, where 0 means top percentile)
            </summary>
            <remarks>
                Set to -1 when no data available. Used by LevelOverScreen to display "Top X%"
                messages when player rank is outside top 10
            </remarks>
        </member>
        <member name="F:StatisticsController.timeRank">
            <summary>
                The player's global rank for completion time on the current campaign leaderboard
            </summary>
            <remarks>
                Initialized to 9999 when no rank data is available. Updated by PlaytomicController
                when leaderboard data is retrieved. Lower numbers indicate better rank (1 = first
                place)
            </remarks>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:TestVanDammeAnim.AddBoxCollider">
            <summary>
                Adds or configures a BoxCollider component with character-specific collision
                dimensions. Sets different box sizes and centers for various enemy types (Xenomorph,
                FaceHugger, etc.) with default humanoid dimensions as fallback.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AddRigidbody">
            <summary>
                Adds or configures a Rigidbody component for physics simulation. Sets the rigidbody
                to kinematic mode with gravity disabled for manual physics control.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Awake">
            <summary>
                Unity lifecycle method that initializes TestVanDammeAnim. Sets up sprite systems,
                parachute functionality, collision layers, materials, and core physics components
                required for character operation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.FixedUpdate">
            <summary>
                Unity fixed update method that runs oil test checking at fixed intervals.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.LateUpdate">
            <summary>
                Unity lifecycle method for post-frame updates. Handles input bit preservation,
                inseminator unit synchronization, map disable area extension, and quicksand
                checking.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.OnDestroy">
            <summary>
                Unity lifecycle callback when the GameObject is destroyed. Calls base implementation
                for cleanup.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.OnDisable">
            <summary>
                Unity lifecycle callback when the component is disabled. Empty implementation for
                potential override.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.OnEnable">
            <summary>
                Unity lifecycle callback when the component is enabled. Empty implementation for
                potential override.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RegisterUnit">
            <summary>
                Registers this unit with the Map system for game tracking and management.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunSync">
            <summary>
                Network synchronization method that updates the unit's position. Calls base
                synchronization and updates position based on current transform.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetDefaultGroundLayer">
            <summary>
                Sets up the default ground collision layer mask including Ground, LargeObjects, and
                IndestructibleGround layers for ground detection and collision checking.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetDeltaTime">
            <summary>
                Updates the frame delta time with clamping to prevent large time steps. Stores
                previous frame time and clamps current time to maximum of 0.0334 seconds.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetHighFiveBoostDeltaTime">
            <summary>
                Sets modified delta time during high-five boost effects. Applies different time
                multipliers based on time scale and special boost conditions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetStrictGroundLayer">
            <summary>
                Sets up a strict ground collision layer mask including only Ground and
                IndestructibleGround layers, excluding LargeObjects for more restrictive ground
                detection.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Start">
            <summary>
                Unity lifecycle method that handles game mode-specific initialization. Configures
                special ammo based on game mode (deathmatch, procedural generation, campaign), sets
                up sound system, avatar states, and initial invulnerability.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Update">
            <summary>
                Core Unity lifecycle method that executes the main update loop for TestVanDammeAnim
                each frame. Processes essential character systems in this execution order: 1. **Acid
                coverage effects** - Visual and damage processing for acid-covered characters 2.
                **Delta time management** - Frame timing with high-five boost support 3. **Input
                processing** - Handle player input or trigger action control 4. **Status effect
                timers** - Stun, freeze, zombie revival, and death counters 5. **Animation frame
                management** - Sprite frame advancement and timing 6. **Movement calculation and
                execution** - Core physics and movement processing 7. **Special movement states** -
                Impaled, strung-up, or platform movement 8. **Combat systems** - Weapon management,
                firing, and melee processing 9. **Hero-specific systems** - Checkpoints, rescues,
                enemy alerting, item pickup 10. **Invulnerability management** - Temporary
                invincibility and revival timing 11. **Alien infection system** - Insemination
                mechanics and chest-bursting 12. **Environmental effects** - Ducking, grass
                interaction, boundary checks 13. **Audio and visual effects** - Wall dragging
                sounds, trails, freeze shaders 14. **Player management** - Kick system and recall
                mechanics 15. **Parachute system** - Deployment timing and physics modification This
                method coordinates all core character functionality and represents the main
                execution loop for character behavior.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:TestVanDammeAnim.CancelMelee">
            <summary>
                Cleanly exits melee state and resets all melee-related variables. Clears all melee
                flags, removes target reference, and intelligently determines next action state
                based on current conditions (preserves ladder climbing, sets jumping if airborne,
                running if moving, or idle).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckBustCage">
            <summary>
                Checks if there's a cage in front of the player that can be broken. Performs a
                raycast within 16 units to detect cage components.
            </summary>
            <returns>True if a cage is found that can be busted, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CheckPlasmaDeath(System.Single@,System.Single@)">
            <summary>
                Handles special plasma/vaporization death effects when plasma damage is 1 or
                greater. Creates white flash effects and for explosion damage types, generates area
                damage and smoke effects while shaking the camera and disturbing nearby wildlife.
                Returns true if plasma death occurred.
            </summary>
            <param name="xGibI">Reference to horizontal gib velocity, modified for plasma deaths</param>
            <param name="yGibI">Reference to vertical gib velocity, modified for plasma deaths</param>
            <returns>True if plasma death effects were triggered, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CreateGibEffects(DamageType,System.Single,System.Single)">
            <summary>
                Creates appropriate visual effects when the character is gibbed based on damage
                type. Crush damage creates a spread pattern, OutOfBounds uses larger spread, and
                BittenBySandworm creates directional effects. Generates frozen particles if the
                character was frozen, plays gib sounds, and sprays blood effects.
            </summary>
            <param name="damageType">Type of damage determining the gib effect pattern</param>
            <param name="xI">Base horizontal velocity for effects</param>
            <param name="yI">Base vertical velocity for effects</param>
        </member>
        <member name="M:TestVanDammeAnim.CreateGibs(System.Single,System.Single)">
            <summary>
                Default gib creation method that generates standard gib pieces with velocity. Uses
                the character's material for gib textures and applies an upward bias to gib velocity
                for more dramatic effect.
            </summary>
            <param name="xI">Horizontal velocity for gib pieces</param>
            <param name="yI">Vertical velocity for gib pieces</param>
        </member>
        <member name="M:TestVanDammeAnim.Damage(System.Int32,DamageType,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour,System.Single,System.Single)">
            <summary>
                Core damage handling method that processes all incoming damage to the character.
                Handles special cases like inseminator unit redirection, parachute destruction
                (grants 1.33s invulnerability), instant-gib damage types, acid coverage, skeleton
                creation, and damage reduction based on game mode. Creates appropriate visual
                effects (blood, impact effects) and manages death state including revival mechanics.
                Triggers death sequence if health drops below zero.
            </summary>
            <param name="damage">Amount of damage to apply</param>
            <param name="damageType">Type of damage being applied (affects reactions and effects)</param>
            <param name="xI">Horizontal impulse force from damage</param>
            <param name="yI">Vertical impulse force from damage</param>
            <param name="direction">Direction of incoming damage (-1 left, 1 right)</param>
            <param name="damageSender">The MonoBehaviour that caused the damage (for kill tracking)</param>
            <param name="hitX">X coordinate where damage was applied</param>
            <param name="hitY">Y coordinate where damage was applied</param>
        </member>
        <member name="M:TestVanDammeAnim.DealWithBounce(DamageType@,System.Int32@)">
            <summary>
                Handles bounce damage differently based on whether the unit is a player or enemy.
                For players in non-competitive modes, nullifies all damage and applies a 0.25 second
                blind effect instead. For enemies or players in DeathMatch/BroDown modes, changes
                the damage type to Crush.
            </summary>
            <param name="damageType">Reference to the damage type, may be changed to Crush</param>
            <param name="damage">Reference to the damage amount, set to 0 for players in non-competitive modes</param>
        </member>
        <member name="M:TestVanDammeAnim.Death(System.Single,System.Single,DamageObject)">
            <summary>
                Handles the complete character death sequence. Cancels active melee attacks,
                deactivates parachute, stops network syncing, clears revival sources, stops player
                UI bubbles, reports kills for scoring, reduces lives if applicable, applies death
                velocity modifications, deactivates weapons, creates blood effects, releases held
                objects, disables collision, and saves death GIFs for player characters. This is the
                main death orchestration method.
            </summary>
            <param name="xI">Horizontal velocity to apply on death</param>
            <param name="yI">Vertical velocity to apply on death</param>
            <param name="damage">DamageObject containing information about what killed the character</param>
        </member>
        <member name="M:TestVanDammeAnim.DestroyRemoteProjectile">
            <summary>
                Destroys a remotely controlled projectile. Clears controlling flag and calls Death()
                on the projectile.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.FallDamage(System.Single)">
            <summary>
                Virtual method for handling fall damage based on fall velocity. Empty implementation
                for subclasses to calculate and apply fall damage.
            </summary>
            <param name="yI">The vertical velocity at impact</param>
        </member>
        <member name="M:TestVanDammeAnim.FindNearbyMook">
            <summary>
                Searches for a nearby mook that can be interacted with. Prioritizes skinned mook on
                the player's back, otherwise searches for mooks within 30 unit radius behind the
                player.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.FireWeapon(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Fires weapon projectile at specified position and velocity. Sets gun animation
                frame, creates muzzle flash, spawns projectile, and triggers fire events.
            </summary>
            <param name="x">X position for projectile spawn</param>
            <param name="y">Y position for projectile spawn</param>
            <param name="xSpeed">X velocity for projectile</param>
            <param name="ySpeed">Y velocity for projectile</param>
        </member>
        <member name="M:TestVanDammeAnim.Gib(DamageType,System.Single,System.Single)">
            <summary>
                Destroys the character into gibs (gore pieces) if gibbing is allowed. Releases held
                objects, sets appropriate death type, creates gib visual effects, sends network RPC
                to synchronize gibbing, saves death GIFs for heroes, handles special plasma death
                effects, and disconnects any attached face huggers.
            </summary>
            <param name="damageType">Type of damage that caused the gibbing</param>
            <param name="xI">Horizontal velocity for gib pieces</param>
            <param name="yI">Vertical velocity for gib pieces</param>
        </member>
        <member name="M:TestVanDammeAnim.GibRPC(DamageType,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Network RPC handler for synchronizing gibbing across all connected players. Updates
                the character position for out-of-bounds deaths and calls the local Gib method to
                ensure consistent visual effects across the network.
            </summary>
            <param name="damageType">Type of damage that caused the gibbing</param>
            <param name="xI">Horizontal velocity for gib pieces</param>
            <param name="yI">Vertical velocity for gib pieces</param>
            <param name="_x">X position for out-of-bounds gibbing</param>
            <param name="_y">Y position for out-of-bounds gibbing</param>
        </member>
        <member name="M:TestVanDammeAnim.IsLockedInMelee">
            <summary>
                Checks if character is locked in melee animation. Used to prevent other actions
                during melee attacks.
            </summary>
            <returns>True if doing melee and cannot do independent animations, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.Knock(DamageType,System.Single,System.Single,System.Boolean)">
            <summary>
                Applies knockback force to the character from damage or explosions. Clears any
                impalement state and ignores knockback if frozen. Applies half the horizontal
                knockback force and uses different vertical limits for heroes (300) versus enemies
                (400). Automatically deactivates parachute if knocked upward.
            </summary>
            <param name="damageType">Type of damage causing the knockback</param>
            <param name="xI">Horizontal knockback force (half is applied)</param>
            <param name="yI">Vertical knockback force</param>
            <param name="forceTumble">Whether to force the character into a tumbling state (currently unused)</param>
        </member>
        <member name="M:TestVanDammeAnim.KnockSimple(DamageObject)">
            <summary>
                Simplified knockback method using a DamageObject for consistent force application.
                Ignores knockback if frozen and applies blast forces with the same velocity clamping
                as SetVelocity method.
            </summary>
            <param name="damageObject">DamageObject containing knockback force information</param>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseAlien(Mook,System.Single,System.Single,System.Boolean,System.Int32)">
            <summary>
                RPC method that handles alien release from chest bursting. Applies fire damage to
                spawned alien if specified.
            </summary>
            <param name="newAlien">The alien unit being released</param>
            <param name="xI">X velocity for alien spawn</param>
            <param name="yI">Y velocity for alien spawn</param>
            <param name="onFire">Whether the alien should be set on fire</param>
            <param name="seenPlayer">Index of player that witnessed the spawn</param>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseGrenadeRPC(Grenade,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                RPC method for releasing grenades across network. Handles grenade physics and
                positioning.
            </summary>
            <param name="GrenadeToRelease">Grenade object to release</param>
            <param name="XI">X velocity for grenade</param>
            <param name="YI">Y velocity for grenade</param>
            <param name="X">X position for grenade release</param>
            <param name="Y">Y position for grenade release</param>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseHeldObject(System.Boolean)">
            <summary>
                Releases currently held object (grenade or mook) with appropriate physics and
                networking. Handles both throwing and dropping scenarios.
            </summary>
            <param name="thrown">Whether object is being thrown (true) or dropped (false)</param>
        </member>
        <member name="M:TestVanDammeAnim.RunFiring">
            <summary>
                Main firing logic update that manages fire rate, delays, and weapon usage. Stops
                rolling when firing, handles fire counter and rate modifications, triggers the
                UseFire method, applies avatar effects, and clears gesture animations during combat.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunIndependentMeleeFrames">
            <summary>
                Virtual method for handling melee animation frames independently from main
                animation. Allows subclasses to implement custom melee animation logic.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunKnifeMeleeMovement">
            <summary>
                Handles movement physics during knife melee attacks with three distinct patterns.
                Old system applies simple gravity. Jumping melee applies falling gravity with speed
                clamping. Dashing melee uses frame-based movement: frames 0-1 stop movement, frames
                2-3 dash horizontally (with target tracking if available), frames 4-5 reduce speed,
                frames 6+ apply only gravity. Quicksand disables horizontal movement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunMelee">
            <summary>
                Executes melee attack behavior by delegating to RunKnifeMeleeMovement. Acts as the
                entry point for melee execution.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetMeleeType">
            <summary>
                Determines the type of melee attack (standing, jumping, or dashing) based on current
                character state. When using new knifing frames, checks if jumping, moving
                horizontally, or on ladder to set appropriate melee type.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetVelocity(DamageType,System.Single,System.Single,System.Single)">
            <summary>
                Sets character velocity from damage or explosion forces, adding to existing velocity
                rather than replacing it. Clamps horizontal velocity to ±200 and vertical velocity
                between -20000 and 300 to prevent excessive speeds.
            </summary>
            <param name="damageType">Type of damage causing the velocity change</param>
            <param name="xI">Horizontal velocity to add</param>
            <param name="xIBlast">Additional horizontal blast force (currently same as xI)</param>
            <param name="yIBlast">Vertical blast force to add</param>
        </member>
        <member name="M:TestVanDammeAnim.SetupThrownMookVelocity(System.Single@,System.Single@)">
            <summary>
                Calculates output velocity for thrown mook objects. Sets X velocity to 210 units in
                facing direction plus 20% of current momentum, and Y velocity to 120 units upward
                plus 30% of current vertical momentum.
            </summary>
            <param name="XI">Output X velocity for thrown mook</param>
            <param name="YI">Output Y velocity for thrown mook</param>
        </member>
        <member name="M:TestVanDammeAnim.SpawnPrimaryProjectile(Projectile,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Spawns primary weapon projectile using the ProjectileController system with
                specified parameters.
            </summary>
            <param name="projectilePrefab">Projectile prefab to spawn</param>
            <param name="x">X position for projectile spawn</param>
            <param name="y">Y position for projectile spawn</param>
            <param name="xSpeed">X velocity for projectile</param>
            <param name="ySpeed">Y velocity for projectile</param>
            <returns>Spawned Projectile instance</returns>
        </member>
        <member name="M:TestVanDammeAnim.StartFiring">
            <summary>
                Initiates firing with rate control. Sets the fire counter based on fire rate: uses
                fireRate value for fast firing (rate &lt; 0.3f) or 0 for slower rates.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StartMelee">
            <summary>
                Virtual method for initiating melee attacks. Empty implementation serves as an
                override point for subclasses to implement melee attack logic.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopFiring">
            <summary>
                Virtual method placeholder for stopping fire action. Empty in base class, allows
                subclasses to implement fire stopping behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ThrowBackGrenade(Grenade)">
            <summary>
                Picks up and prepares to throw a grenade. Disables the grenade, parents it to the
                player, handles achievement tracking for player-thrown grenades, plays throw sound,
                and initiates throwing animation.
            </summary>
            <param name="grenade">The grenade object to pick up and throw</param>
        </member>
        <member name="M:TestVanDammeAnim.ThrowBackMook(Mook)">
            <summary>
                Picks up and prepares to throw a mook enemy. Sets the mook as being thrown, parents
                it to the player, plays heavy throw sound, and starts throwing animation with
                appropriate frame.
            </summary>
            <param name="mook">The mook object to pick up and throw</param>
        </member>
        <member name="M:TestVanDammeAnim.ThrowGrenade(Grenade,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Executes grenade throwing mechanics with specified position and velocity parameters.
            </summary>
            <param name="GrenadeToThrow">Grenade object to throw</param>
            <param name="XI">X velocity for grenade trajectory</param>
            <param name="YI">Y velocity for grenade trajectory</param>
            <param name="X">X position for grenade release</param>
            <param name="Y">Y position for grenade release</param>
        </member>
        <member name="M:TestVanDammeAnim.TriggerBroFireEvent">
            <summary>
                Triggers perk system fire event for hero characters to activate fire-related perks
                and bonuses.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TriggerBroMeleeEvent">
            <summary>
                Triggers perk system melee event for hero characters to activate melee-related perks
                and bonuses.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TriggerBroSpecialEvent">
            <summary>
                Triggers perk system special ability event for hero characters to activate
                special-related perks and bonuses.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseFire">
            <summary>
                Executes primary weapon firing sequence. Cancels melee if active, calculates
                projectile trajectory, spawns projectile, plays attack sound, and disturbs wildlife.
            </summary>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:TestVanDammeAnim._invulnerableTime">
            <summary>
                Remaining duration of invulnerability in seconds. Decremented each frame, providing
                temporary damage immunity. Commonly set after spawning (3 seconds) or parachute
                destruction (1.33 seconds). Visual feedback provided through flashing effect.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.addedDeathMatchScore">
            <summary>
                Flag preventing duplicate score additions in deathmatch game modes. Set to true
                after death score is recorded to ensure each death only counts once. Reset when the
                unit respawns for the next life.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canDoIndependentMeleeAnimation">
            <summary>
                Allows melee animations to play independently from movement animations. When true,
                melee attacks don't interrupt movement animations. Used by characters like
                IndianaBrones.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canGib">
            <summary>
                Determines if this character can be gibbed (exploded into pieces) when killed.
                Default true allows normal gibbing on death. Set to false for characters that should
                have death animations instead of exploding. Checked during death processing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.cancelMeleeOnChangeDirection">
            <summary>
                Stops melee attack when the character changes facing direction. Used by characters
                with directional melee attacks to ensure attacks match the intended direction.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dashingMelee">
            <summary>
                Indicates the character is performing a melee attack while dashing. Set by
                SetMeleeType() when dashing, triggers special dash-melee animations and damage
                values.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.deadTimeCounter">
            <summary>
                Timer tracking how long the unit has been dead. Incremented each frame after death.
                Used for delayed effects like late gibbing, corpse removal, or preventing revival
                after extended death duration.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.disembowelHoldFrames">
            <summary>
                Frame counter for chainsaw disembowelment death animation. When greater than zero,
                holds the death animation at the current frame to show prolonged chainsaw damage.
                Creates dramatic pause during brutal chainsaw deaths.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.doingMelee">
            <summary>
                Indicates the character is currently performing a melee attack. Affects animation
                states and prevents certain other actions while active. Cleared when the melee
                attack completes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.fireCounter">
            <summary>
                Accumulates time to control automatic firing rate. When this counter exceeds
                fireRate, a shot is fired and the counter is decremented by fireRate. Initialized to
                0.0667 to ensure immediate first shot capability.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.fireDelay">
            <summary>
                Delay in seconds before firing can begin. Prevents immediate firing in certain
                situations such as after spawning or switching weapons.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.fireRate">
            <summary>
                Time interval between automatic weapon shots in seconds. Default value of 0.0334
                provides approximately 30 shots per second. Can be modified by power-ups through
                ValueOrchestrator.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.firedWhileInvulnerable">
            <summary>
                Tracks if the player fired weapons during invulnerability period. When true,
                immediately cancels invulnerability as a penalty for aggressive play during spawn
                protection. Encourages defensive play after respawning.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gibThreshold">
            <summary>
                Health threshold below which the unit will gib instead of playing death animation
                (default -10). When health drops below this value from damage, the unit explodes
                into pieces. More negative values require more overkill damage to trigger gibbing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gibs">
            <summary>
                Reference to the GibHolder containing gore particle prefabs for this character. Used
                when the unit is gibbed to spawn appropriate blood and body part effects. Each
                character can have unique gib sets for visual variety.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hasPlayedMissSound">
            <summary>
                Prevents multiple miss sound effects from playing for a single melee attack. Reset
                when canceling melee or starting a new attack.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heroThatKilledMeIndex">
            <summary>
                Player index of the hero that killed this unit (default -1 for no killer). Used for
                respawn positioning to place the unit near their killer. Also used for kill
                attribution in statistics and scoring systems.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.iDiedAtPosition">
            <summary>
                World position where this unit died (default Vector3.zero). Stored for respawn
                calculations and death statistics. Used with heroThatKilledMeIndex to determine
                optimal respawn location near the action.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledByChainSaw">
            <summary>
                Flag indicating the unit was killed by chainsaw impalement. Currently not actively
                used in the codebase. May have been intended for special chainsaw death animations
                or to prevent certain post-death effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impalementCollider">
            <summary>
                GameObject reference to the collider used for impalement mechanics. Destroyed when
                cleanup is needed to prevent physics conflicts. Handles collision detection for
                impalement death scenarios.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.jumpingMelee">
            <summary>
                Indicates the character is performing a melee attack while jumping or airborne. Set
                by SetMeleeType() based on action state, determines aerial melee animations and
                physics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastAlertTime">
            <summary>
                Tracks when the character last alerted nearby enemies. Prevents alert spam with
                minimum 0.07 seconds between alerts. Only alerts when character is alive and not in
                stealth mode.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meleeChosenUnit">
            <summary>
                Stores the target unit for melee attacks. Set when a valid melee target is found
                nearby and used to calculate movement toward the target during the melee animation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meleeFollowUp">
            <summary>
                Indicates whether a melee combo or follow-up attack is allowed. Set to false in
                CancelMelee(), checked with dashingMelee to control combo behavior.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meleeHasHit">
            <summary>
                Tracks whether the current melee attack has successfully connected with a target.
                Prevents multiple damage applications from a single melee attack.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.projectileTime">
            <summary>
                Timestamp preventing immediate detonation of remote projectiles after firing. Set to
                Time.time when firing remote explosives. Prevents accidental self-destruction by
                requiring 0.56 seconds to elapse before detonation is allowed.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.remoteCar">
            <summary>
                Reference to a remote control car currently being controlled by this character. When
                set, player input controls the car instead of the character. Provides reference for
                remote vehicle mechanics. Cleared when car is destroyed or control ends.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.remoteProjectile">
            <summary>
                Reference to a projectile currently under remote control by this character. When
                set, character can detonate or guide the projectile. Cleared when projectile is
                destroyed or control is released. Used for remote-controlled explosives gameplay.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.skinnedMookOnMyBack">
            <summary>
                Reference to a SkinnedMook enemy that has jumped onto this unit's back. When set,
                reduces movement speed by 50%, prevents dashing and wall climbing, and marks the
                unit as having "baggage". The attached enemy can be removed by melee attacks or
                death.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.specialCounter">
            <summary>
                Controls timing for special ability usage. Similar to fireCounter but for special
                attacks. Initialized to 0.0667 seconds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.standingMelee">
            <summary>
                Indicates the character is performing a melee attack while standing or grounded. Set
                by SetMeleeType() based on action state, determines ground melee animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.willComeBackToLife">
            <summary>
                Indicates this unit will resurrect after death. When true, displays a halo effect
                above the corpse and prevents certain death cleanup operations. The resurrection
                occurs after willComebackToLifeTime expires.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.willComebackToLifeTime">
            <summary>
                Countdown timer in seconds until resurrection occurs. Set when unit dies with
                willComeBackToLife active. Decremented each frame while dead, triggering
                resurrection and full health restoration when reaching zero.
            </summary>
        </member>
        <!-- Special Abilities Methods -->
        <member name="M:TestVanDammeAnim.AddSpecialAmmo">
            <summary>
                Increases special ammunition by 1 if below maximum capacity and updates the
                HeroController with the new value.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AirDashDown">
            <summary>
                Initiates a downward slam air dash with an extended duration (5x normal), starting
                with a slight upward movement before transitioning to a powerful downward motion.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AirDashLeft">
            <summary>
                Initiates a leftward air dash with a two-phase execution: a charge-up delay followed
                by the actual dash. The dash grants brief invulnerability and enables downward
                dashing afterwards.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AirDashRight">
            <summary>
                Initiates a rightward air dash with a two-phase execution: a charge-up delay
                followed by the actual dash. The dash grants brief invulnerability and enables
                downward dashing afterwards.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AirDashUp">
            <summary>
                Performs an instant upward air dash without charge-up delay, launching the character
                upward with 150% jump force for a shorter duration than horizontal dashes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Airdash(System.Boolean)">
            <summary>
                Main air dash input handler that checks directional inputs and availability, then
                calls the appropriate directional dash method. Processes dashes in priority order:
                Right, Left, Down, Up.
            </summary>
            <param name="highFived">If true, allows horizontal dashes without requiring fresh directional input.</param>
        </member>
        <member name="M:TestVanDammeAnim.CanUseJetpack">
            <summary>
                Checks if the hero can use jetpack abilities. Base implementation returns false,
                override for jetpack-enabled heroes.
            </summary>
            <returns>True if jetpack can be used</returns>
        </member>
        <member name="M:TestVanDammeAnim.GetRemoteControlCar">
            <summary>
                Creates and assigns a remote control car to this unit. Only executes for the owning
                player, sets up networking RPCs for control. Applies initial knockback and sets fire
                delay to prevent immediate use.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.GetSpecialAmmo">
            <summary>
                Gets the current special ammunition count for this character.
            </summary>
            <returns>Current special ammunition amount</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsAmmoFull">
            <summary>
                Checks if special ammunition is at maximum capacity compared to the original special
                ammo limit.
            </summary>
            <returns>True if ammunition is at maximum, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.MustUsePockettedSpecialAmmo">
            <summary>
                Checks if pocketed special ammo must be used. Base implementation returns false,
                designed for override by characters with special ammo requirements.
            </summary>
            <returns>False in base implementation, can be overridden to return true when special ammo must be used</returns>
        </member>
        <member name="M:TestVanDammeAnim.PickupPockettableAmmo(PockettedSpecialAmmoType)">
            <summary>
                Handles picking up pocketable special ammunition. Virtual method intended for
                override by specific character implementations.
            </summary>
            <param name="ammoType">Type of pocketable ammo being picked up</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayAidDashSound">
            <summary>
                Virtual method for playing the air dash execution sound effect. Empty in base class,
                intended for override in derived classes. Note: Method name contains typo ("Aid"
                instead of "Air").
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayAirDashChargeUpSound">
            <summary>
                Virtual method for playing the air dash charge-up sound effect. Empty in base class,
                intended for override in derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ResetSpecialAmmo">
            <summary>
                Resets special ammunition to the original maximum amount and updates the
                HeroController with the new value.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunAirDashing">
            <summary>
                Central air dash controller that manages dash execution based on direction.
                Delegates to specific directional dash methods, counts down dash timer, and clamps
                velocities to normal ranges when dash completes. Special handling for upward dashes
                limits velocity to 80% jump force.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunDownwardDash">
            <summary>
                Executes downward slam dash with accelerating descent. Uses complex velocity
                calculation that accelerates downward movement, triggers sound and visual effects
                when reaching -50 velocity threshold, and clamps final velocity between 1.25x max
                fall speed and 300 units.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunLeftAirDash">
            <summary>
                Executes leftward air dash with two-phase implementation. Delay phase: stops
                vertical movement and adds slight rightward anticipation movement. Dash phase:
                triggers animation change, plays dash sound, creates rightward poof effect, and
                calls SetAirDashLeftSpeed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunRightAirDash">
            <summary>
                Executes rightward air dash with two-phase implementation. Delay phase: stops
                vertical movement and adds slight leftward anticipation movement. Dash phase:
                triggers animation change, plays dash sound, creates rightward poof effect, and
                calls SetAirDashRightSpeed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunUpwardDash">
            <summary>
                Executes upward air dash immediately without delay phase. Resets jump timer, applies
                150% jump force for strong upward boost, and zeroes horizontal movement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetAirDashLeftSpeed">
            <summary>
                Sets velocity for leftward air dash execution. Zeroes vertical movement and sets
                horizontal velocity to -2.3x normal speed for fast leftward movement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetAirDashRightSpeed">
            <summary>
                Sets velocity for rightward air dash execution. Zeroes vertical movement and sets
                horizontal velocity to 2.3x normal speed for fast rightward movement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetAirdashAvailable">
            <summary>
                Resets all directional air dash availability flags to true, allowing the character
                to perform air dashes in all directions again.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetHeldObjectPos(System.Single,System.Single)">
            <summary>
                Positions held objects (grenades/mooks) relative to character with specified offset
                coordinates.
            </summary>
            <param name="xOffset">X offset from character position</param>
            <param name="yOffset">Y offset from character position</param>
        </member>
        <member name="M:TestVanDammeAnim.SetRemoteProjectile(Projectile)">
            <summary>
                Associates a remote-controlled projectile with this unit. Updates projectile time
                tracking and stores the projectile reference.
            </summary>
            <param name="p">The projectile to be remotely controlled</param>
        </member>
        <member name="M:TestVanDammeAnim.SetSpecialAmmoRPC(System.Int32)">
            <summary>
                Sets special ammunition amount via RPC for network synchronization and updates the
                HeroController.
            </summary>
            <param name="ammo">Amount of special ammunition to set</param>
        </member>
        <member name="M:TestVanDammeAnim.StartPockettedSpecial">
            <summary>
                Virtual method for initiating pocketed special ability. Empty in base class,
                designed for character-specific overrides to implement special weapon usage.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseJetpack">
            <summary>
                Activates jetpack thrust for vertical movement. Virtual method intended for override
                by jetpack-equipped heroes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UsePockettedSpecial">
            <summary>
                Virtual method for using pocketed special abilities. Resets facing direction and can
                be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseSpecial">
            <summary>
                Uses special ability (grenade throwing). Consumes special ammo, spawns grenade
                projectile with position-based trajectory, or flashes ammo indicator if depleted.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseSteroidsNetworked">
            <summary>
                Activates steroid power-up effects across the network. Virtual method intended for
                override by heroes with steroid abilities.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseSteroidsNetworkedForDuration(System.Single)">
            <summary>
                Activates steroid power-up effects for a specific duration across the network.
                Virtual method intended for override by heroes with timed steroid abilities.
            </summary>
            <param name="duration">Duration of the steroid effect in seconds</param>
        </member>
        <!-- Special Abilities Properties -->
        <member name="P:TestVanDammeAnim.SpecialAmmo">
            <summary>
                Gets or sets the current special ammunition count. Setting this property
                synchronizes the value across all clients when the unit is owned by the local
                player.
            </summary>
        </member>
        <!-- Special Abilities Fields -->
        <member name="F:TestVanDammeAnim._specialAmmo">
            <summary>
                Current special ammunition count (backing field for SpecialAmmo property). Changes
                to this value are synchronized across the network via RPC calls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.originalSpecialAmmo">
            <summary>
                Default and maximum special ammunition capacity. Typically set to 3 but can be
                overridden (e.g., 6 for certain game modes). Used to initialize special ammo on
                spawn and check if ammo is full.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pressSpecialFacingDirection">
            <summary>
                Stores the character's facing direction when a special ability is activated. Used to
                lock facing direction during special abilities when turnAroundWhhileUsingSpecials is
                false. Reset when actions complete.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.specialGrenade">
            <summary>
                Reference to the grenade prefab spawned when using special abilities. Different
                throwing trajectories are used based on whether the character is ducking or
                standing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.turnAroundWhhileUsingSpecials">
            <summary>
                Controls whether the character can change facing direction while using special
                abilities. When false, the character's facing is locked to the direction they were
                facing when the special was activated. Defaults to true.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usingPockettedSpecial">
            <summary>
                Indicates the character is using a stored or pocketed special ability. Often set and
                cleared together with the main usingSpecial flag and affects animation states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usingSpecial">
            <summary>
                Indicates the character is currently performing a special ability animation. Set
                true when special is pressed, false when animation completes or is interrupted by
                acid/remote control. Takes priority in animation selection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usingSpecial2">
            <summary>
                Secondary special ability input state, primarily used by AI enemies. Checked as part
                of the IsUsingSpecial condition for determining if any special ability is active.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usingSpecial3">
            <summary>
                Tertiary special ability input state, primarily used by AI enemies. Part of the
                multi-special ability system that allows AI to have different special attacks.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usingSpecial4">
            <summary>
                Quaternary special ability input state, primarily used by AI enemies. Provides a
                fourth special ability option for complex AI behavior patterns.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasUsingSpecial">
            <summary>
                Previous frame's primary special ability state. Used for edge detection to determine
                when special abilities are first activated.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasUsingSpecial2">
            <summary>
                Previous frame's secondary special ability state. Used for edge detection of AI
                special ability inputs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasUsingSpecial3">
            <summary>
                Previous frame's tertiary special ability state. Used for edge detection of AI
                special ability inputs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasUsingSpecial4">
            <summary>
                Previous frame's quaternary special ability state. Used for edge detection to
                trigger AI special abilities on button press.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:TestVanDammeAnim.AddParentedDiff(System.Single,System.Single)">
            <summary>
                Adds positional differences to the character's coordinates based on parent movement,
                with special handling for different parent types.
            </summary>
            <param name="xDiff">The horizontal position difference to apply.</param>
            <param name="yDiff">The vertical position difference to apply.</param>
        </member>
        <member name="M:TestVanDammeAnim.AddSpeedLeft">
            <summary>
                Accelerates the character leftward with speed limits and multipliers based on
                movement state. Base acceleration is 2x, dashing provides 4x, and parachute reduces
                speed by 50%. Includes an extra 2.6x boost when below maximum speed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AddSpeedRight">
            <summary>
                Accelerates the character rightward with speed limits and multipliers based on
                movement state. Base acceleration is 2x, dashing provides 4x, and parachute reduces
                speed by 50%. Includes an extra 2.6x boost when below maximum speed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AirJump">
            <summary>
                Virtual method placeholder for air jump/double jump mechanics. Empty in base class,
                allows subclasses to implement air jumping behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ApplyFallingGravity">
            <summary>
                Orchestrates gravity application based on character state, delegating to specialized
                gravity methods for parachute, quicksand, or normal conditions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ApplyNormalGravity">
            <summary>
                Applies standard gravity with modifiers for fluid submersion and high-five boost
                effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ApplyQuicksandGravity">
            <summary>
                Applies special gravity behavior in quicksand, clamping velocities and creating a
                floating effect with different sink rates for alive versus dead characters.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AssignGroundTransform(UnityEngine.Transform)">
            <summary>
                Assigns and tracks the transform of the ground or platform the character is standing
                on. Stores local position offset for proper movement synchronization with moving
                platforms. Handles special notifications for blocks when being stood on.
            </summary>
            <param name="gTransform">The ground transform to assign as the current standing surface</param>
        </member>
        <member name="M:TestVanDammeAnim.AssignParentedPos">
            <summary>
                Stores the current position relative to the parent transform for tracking movement
                between frames.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AssignWallTransform(UnityEngine.Transform)">
            <summary>
                Assigns the wall transform for wall climbing mechanics. Stores the wall reference
                and calculates the character's local position relative to the wall for proper
                climbing movement.
            </summary>
            <param name="wTransform">The wall transform to assign for climbing</param>
        </member>
        <member name="M:TestVanDammeAnim.AttachToZipline(ZipLine)">
            <summary>
                Attaches character to zipline for transportation. Sets zipline state and disables
                normal movement controls.
            </summary>
            <param name="zipLine">ZipLine object to attach to</param>
        </member>
        <member name="M:TestVanDammeAnim.CalculateCollumnRowFromTransform">
            <summary>
                Updates the unit's grid position based on its transform position. Sets X and Y from
                transform and recalculates grid coordinates.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateGridPosition">
            <summary>
                Converts world position to grid coordinates for tile-based game mechanics. Updates
                the character's row and column values based on 16-unit grid size.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateGroundHeight">
            <summary>
                Updates the ground height for the character by calling GetGroundHeightGround to
                perform ground detection calculations.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateMovement">
            <summary>
                Core movement calculation method that processes all character input and physics.
                Handles wind effects, sandstorm damage, firing input, dash detection, directional
                movement with double-tap dash triggers, air dashes during high-five holds, action
                state transitions, edge slip prevention, down input processing with parachute
                deactivation, and comprehensive jump mechanics including wall jumps, quicksand
                jumps, wall climbing initiation, and air jump grace periods.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CanAirDash(DirectionEnum)">
            <summary>
                Determines if character can perform air dash in specified direction based on
                character state and directional availability. Returns true if character can air dash
                or is on ground, false if dead, acid-covered, or direction unavailable.
            </summary>
            <param name="direction">Direction to check for air dash availability (Up, Down, Left, Right)</param>
            <returns>True if air dash is possible in the specified direction, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanBeAffectedByWind">
            <summary>
                Determines if character can be affected by wind effects. Returns false during
                chimney flip to prevent wind interference with the maneuver.
            </summary>
            <returns>True if character can be affected by wind, false during chimney flip</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanJumpOffGround">
            <summary>
                Determines if character can jump from current ground position by checking for solid
                ground contact with wall collision considerations. Accounts for directional movement
                restrictions and quicksand movement penalties.
            </summary>
            <returns>True if character can jump from current position, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanTouchGround(System.Single)">
            <summary>
                Checks if the character can touch ground using multiple raycasts at different
                positions. Performs up to 4 raycasts for regular ground and 4 additional raycasts
                for ladders if applicable.
            </summary>
            <param name="xOffset">Horizontal offset for additional raycast checks.</param>
            <returns>True if any raycast hits ground or ladder, false otherwise.</returns>
        </member>
        <member name="M:TestVanDammeAnim.CheckDucking">
            <summary>
                Advanced ducking logic that handles auto-ducking in tight spaces. Checks for ceiling
                and floor constraints, auto-ducks when running into low passages, and stops ducking
                when space becomes available.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ClampSpeedPressingLeft">
            <summary>
                Clamps horizontal velocity to -10 when pressing left without simultaneous right
                input to ensure responsive leftward movement initiation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ClampSpeedPressingRight">
            <summary>
                Clamps horizontal velocity to 10 when pressing right without simultaneous left input
                to ensure responsive rightward movement initiation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ClampWallDragYI(System.Single@)">
            <summary>
                Limits vertical velocity during wall dragging to control sliding speed. Prevents
                upward movement and clamps minimum falling speed to -40 units.
            </summary>
            <param name="yIT">Reference to vertical velocity to be clamped</param>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainSpeedToSidesOfScreen">
            <summary>
                Enforces screen boundaries to prevent the character from moving outside the playable
                area, with special handling for repositioning fallen players.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.DontSlipOverEdges">
            <summary>
                Prevents heroes from accidentally falling off edges by detecting ground ahead and
                stopping movement. Uses raycast detection based on facing direction to check for
                ground at feet width distance, stopping rolling and zeroing velocity when edge
                detected.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.EvaluateIsJumping">
            <summary>
                Determines if the character should be in a jumping state by checking if they are
                more than 0.1 units above the ground. Only evaluates when ground height is valid
                (not -100000).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.GetFollowPosition">
            <summary>
                Returns the position for the camera to follow, accounting for parachute state.
                During parachute deployment, returns a position with temporary Y value to smooth
                camera movement.
            </summary>
            <returns>The world position the camera should follow</returns>
        </member>
        <member name="M:TestVanDammeAnim.GetGroundHeightGround">
            <summary>
                Calculates the ground height below the character using box casts and raycasts.
                Checks for both regular ground and ladders, updating ground references and footstep
                sound types based on what is detected.
            </summary>
            <returns>The highest ground point found, or -200f if no ground is detected.</returns>
        </member>
        <member name="M:TestVanDammeAnim.GetGroundLayer">
            <summary>
                Returns the appropriate layer mask for ground detection based on whether the player
                is holding down. When not holding down, includes platforms; when holding down,
                excludes platforms to allow dropping through.
            </summary>
            <returns>LayerMask combining ground, fragile, and optionally platform layers.</returns>
        </member>
        <member name="M:TestVanDammeAnim.GetParentedToPos">
            <summary>
                Calculates the character's position relative to their parent transform, used for
                maintaining relative positioning on moving platforms.
            </summary>
            <returns>The character's position in parent transform space, or world position if not parented.</returns>
        </member>
        <member name="M:TestVanDammeAnim.GetParentedToTransform">
            <summary>
                Returns the current parent transform in order of priority: impaled transform, wall
                climb transform, or ground transform.
            </summary>
            <returns>The active parent transform, or null if not parented to anything.</returns>
        </member>
        <member name="M:TestVanDammeAnim.HitLeftWall">
            <summary>
                Virtual method called when character collides with left wall. Empty implementation
                that can be overridden by derived classes for wall collision handling.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.HitRightWall">
            <summary>
                Virtual method called when character collides with right wall. Empty implementation
                that can be overridden by derived classes for wall collision handling.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.IsGroundBelow">
            <summary>
                Simple ground detection with fixed 5-unit range using two raycasts from left and
                right foot positions.
            </summary>
            <returns>True if either foot detects ground within 5 units below.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsGroundBelow(System.Single)">
            <summary>
                Parameterized ground detection with variable range using two raycasts from foot
                positions.
            </summary>
            <param name="maxDistance">Maximum distance to check for ground below the character.</param>
            <returns>True if either foot detects ground within the specified distance.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsGroundBelowAtXOffset(System.Single,System.Boolean)">
            <summary>
                Ground detection at a specific horizontal offset from the character position, useful
                for checking ground ahead or behind.
            </summary>
            <param name="xOffset">Horizontal offset from character position to check.</param>
            <param name="includeLadders">Whether to include ladder detection in addition to ground.</param>
            <returns>True if ground (and optionally ladders) detected at the offset position.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsNearGround(System.Single)">
            <summary>
                Checks if the character is within a specified distance from the ground.
            </summary>
            <param name="maxOffset">Maximum distance above ground to consider "near".</param>
            <returns>True if the character's Y position is below ground height plus the offset.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsOilyBelow">
            <summary>
                Detects if there are oily surfaces beneath the character using two raycasts from
                foot positions. Checks 9 units down from Y+4 position with foot spread of 4 units.
            </summary>
            <returns>True if either foot position detects an oily block below.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsOnGround">
            <summary>
                Determines if the character is standing on ground by checking if Y position is
                within 0.5 units above ground height and vertical velocity is not positive.
            </summary>
            <returns>True if the character is on ground, false otherwise.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsWallInFront(System.Single)">
            <summary>
                Detects if there's a wall in front of the character at waist height using
                raycasting. Used for wall detection in movement and climbing systems.
            </summary>
            <param name="distance">The distance to check for walls</param>
            <returns>True if a wall is detected within the specified distance</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsWallInFrontOfHead(System.Single)">
            <summary>
                Detects if there's a wall at head height (Y position + 17 units) using raycasting.
                Used to prevent movement into walls at head level.
            </summary>
            <param name="distance">The distance to check for walls</param>
            <returns>True if a wall is detected at head height within the specified distance</returns>
        </member>
        <member name="M:TestVanDammeAnim.Jump(System.Boolean)">
            <summary>
                Handles all jump mechanics including wall jumps, grace jumping, and special surface
                interactions. Adjusts jump force based on surface type (barbed wire reduces to 80%,
                bouncy blocks increase to 190%) and inherits velocity from moving platforms.
            </summary>
            <param name="wallJump">If true, performs a wall jump with horizontal velocity reset and climb sound/animation.</param>
        </member>
        <member name="M:TestVanDammeAnim.NotPressingJump">
            <summary>
                Processes jump button release by disabling wall climbing state when jump is not
                being pressed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.OpenParachute">
            <summary>
                Activates the parachute if not already active. Sets the IsParachuteActive flag to
                true.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ParachuteLandedOn">
            <summary>
                Called when another object lands on this unit's parachute. Virtual method intended
                for override by specific implementations.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PressDown">
            <summary>
                Handles down button press input by recording the tap time for potential down-based
                actions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RaycastGroundSingleSquare(UnityEngine.Vector3)">
            <summary>
                Helper method that performs a single raycast for ground detection. Casts from 8
                units above character position with 12 unit ray length.
            </summary>
            <param name="direction">The direction to cast the ray (typically Vector3.down)</param>
            <returns>True if ground is detected within range, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.ResetToOriginalJumpForce">
            <summary>
                Restores the original jump force and clears the attack jump force timer if
                previously modified.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunAirFriction">
            <summary>
                Virtual method placeholder for air friction. Empty in base class, allows subclasses
                to implement air resistance.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunCheckHanging">
            <summary>
                Detects if character can hang from ceiling using upward raycasts. Requires 0.8
                seconds after jump, appropriate directional conditions, and ceiling detection within
                range. Sets vertical velocity based on ceiling distance and tracks interactive
                ceiling objects.
            </summary>
            <returns>True if hanging conditions are met and ceiling is detected.</returns>
        </member>
        <member name="M:TestVanDammeAnim.RunDeadGravity">
            <summary>
                Applies physics when character is dead. In air: applies gravity or quicksand gravity
                unless impaled, triggers falling animation at -50 velocity. On ground: applies
                friction using 10x friction multiplier.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunFallen">
            <summary>
                Virtual method placeholder for post-fall state behavior. Empty in base class, allows
                subclasses to implement custom fallen state logic.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunFalling">
            <summary>
                Virtual method placeholder for falling state behavior. Empty in base class, allows
                subclasses to implement custom falling logic.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunGroundFriction">
            <summary>
                Applies friction when character is on ground and idle. Normal friction rapidly
                decelerates at 25x rate, while rolling friction is slower at 5x rate.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunHanging">
            <summary>
                Manages movement and physics while hanging from ceiling. Provides slight upward
                movement with up/jump input, applies horizontal speed clamping based on animation
                frame, increases friction when not moving, and continuously checks for ceiling
                presence. Automatically stops hanging when ceiling is lost or down is pressed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunImpaledMovement">
            <summary>
                Handles movement constraints when the character is impaled by an object. Checks if
                the impaling object still exists, manages blood effects, and evaluates if the
                character should remain in the impaled state.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunMovement">
            <summary>
                Central movement processing hub that orchestrates all character movement based on
                action state. Handles dead state physics with quicksand damping, ladder and zipline
                mechanics, jump timing and gravity application, water physics damping, comprehensive
                collision detection for walls/ceilings/floors, out-of-bounds death triggers, and
                frame-based movement calculations. This is the core method that drives all character
                physics and movement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunStrungByPredabroMovement">
            <summary>
                Handles special movement when the character is caught by a Predabro enemy. Positions
                the character below the predabro with a -24 Y offset (additional -5 for MookBigGuy)
                and zeros out velocity while caught.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetActionStateToJumping(System.Boolean)">
            <summary>
                Changes the character's action state to jumping with health validation. Normal mode
                requires positive health and not already jumping. Updates animation frame unless
                using special ability.
            </summary>
            <param name="forced">If true, bypasses the check for already being in jump state (but still requires health &gt; 0).</param>
        </member>
        <member name="M:TestVanDammeAnim.SetActionstateToIdle">
            <summary>
                Sets the character's action state to idle. Simple state transition method that can
                be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetCanParachute(System.Boolean)">
            <summary>
                Enables or disables parachute capability with appropriate delay setup. When
                enabling, stores camera Y position and sets delay (0.15s for players, 0.6s for
                NPCs). When disabling, deactivates the parachute.
            </summary>
            <param name="canParachute">Whether parachute use is allowed</param>
        </member>
        <member name="M:TestVanDammeAnim.SetParachuteDelay(System.Single)">
            <summary>
                Sets the delay before the parachute can be deployed. Used to prevent immediate
                parachute use after certain actions.
            </summary>
            <param name="time">Delay in seconds before parachute can be used</param>
        </member>
        <member name="M:TestVanDammeAnim.SetPositionAndVelocity(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the position and velocity of TestVanDammeAnim with teleportation handling. If
                the distance change exceeds 6 units, directly sets position to prevent large jumps.
            </summary>
            <param name="newX">New X coordinate position</param>
            <param name="newY">New Y coordinate position</param>
            <param name="xi">X velocity component</param>
            <param name="yi">Y velocity component</param>
        </member>
        <member name="M:TestVanDammeAnim.ShiftUnitWithParent">
            <summary>
                Updates the character's position based on parent transform movement, applying the
                difference between frames.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StartDucking">
            <summary>
                Initiates ducking state and adjusts collision heights. Sets ducking flag, updates
                height values, cancels hanging state, and triggers animation update.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopAirDashing">
            <summary>
                Cancels air dash state and resets related variables. Clears chimney flip animation
                frames and air dash timers.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopDashing">
            <summary>
                Manages dash speed multiplier cleanup when ending dash sequences. Resets dash speed
                to 1.0 for grounded characters while preserving last dash speed for airborne
                characters to maintain momentum.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopDucking">
            <summary>
                Exits ducking state if conditions allow. Checks if player is still holding down
                while standing still and restores standing height values.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TeleportOnScreenCounter(System.Int32)">
            <summary>
                Sets a delay counter for teleporting the hero back on screen when they fall below
                the visible area. Used to give a grace period before forcibly bringing off-screen
                players back into play.
            </summary>
            <param name="delay">Number of frames to wait before teleporting back on screen</param>
        </member>
        <member name="M:TestVanDammeAnim.Tumble">
            <summary>
                Virtual method placeholder for tumble mechanics. Empty in base class, allows
                subclasses to implement tumbling behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseAttackJumpForceForSeconds(System.Single)">
            <summary>
                Temporarily increases jump force to attack jump force for a specified duration.
                Stores original jump force for restoration.
            </summary>
            <param name="seconds">Duration in seconds to use the enhanced jump force</param>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:TestVanDammeAnim.GetSpeed">
            <summary>
                Gets the effective movement speed considering all active modifiers and environmental
                effects. Speed is reduced by 50% when surrounded by barbed wire.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.IsStandingStill">
            <summary>
                Gets a value indicating whether the character is completely stationary. Returns true
                when the character is on the ground and both X and Y velocities are below 0.5.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.XY">
            <summary>
                Gets or sets the character's position as a Vector2. This override provides network
                synchronization hooks for the base class position property.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.jumpForce">
            <summary>
                Gets or sets the force applied when the character jumps. This value can be
                temporarily modified for special attack jumps.
            </summary>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:TestVanDammeAnim.GRAVITY">
            <summary>
                Standard gravity constant of 1100 units/second² used for character physics. Note:
                While defined as a constant, the codebase often uses the literal value 1100f instead
                of referencing this constant. Represents downward acceleration for all characters.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.JUMP_TIME">
            <summary>
                Duration in seconds that jump force is applied when the jump button is held. Default
                0.123 seconds allows for variable jump heights. Used to calculate upward velocity
                during jumps. Can be modified per-character for different jump behaviors.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._jumpForce">
            <summary>
                Private backing field for the jumpForce property. Stores the base jump force value
                in units per second. Default value is 260.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airDashDelay">
            <summary>
                Controls the delay/charge-up time before an air dash executes. Set to
                defaultAirdashDelay when initiating a dash and counts down during the charge phase.
                Provides invulnerability during the delay period.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashDirection">
            <summary>
                Tracks which direction the current air dash is going. Can be Right, Left, Up, Down,
                or Any. Affects movement physics during the dash execution.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashDownAvailable">
            <summary>
                Tracks if downward air dash is available. Set to true by SetAirdashAvailable and
                disabled after use. Downward dashes use a 5x duration multiplier for extended
                effect.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashLeftAvailable">
            <summary>
                Tracks if leftward air dash is available. Set to true by SetAirdashAvailable and
                disabled after use to prevent repeated air dashes until landing or wall climbing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashMaxTime">
            <summary>
                Maximum duration of an air dash in seconds. Base value of 0.5 seconds is multiplied
                by 0.8x for upward dashes (shorter) and 5x for downward dashes (longer slam).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashRightAvailable">
            <summary>
                Tracks if rightward air dash is available. Set to true by SetAirdashAvailable and
                disabled after use to create a one-dash-per-direction aerial movement system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashTime">
            <summary>
                Timer controlling air dash duration and availability. Set to airdashMaxTime when
                initiating dash and decrements each frame. Different dash types use different
                multipliers (up=0.8x, down=5x).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashUpAvailable">
            <summary>
                Tracks if upward air dash is available. Set to true by SetAirdashAvailable and
                disabled after use to prevent repeated air dashes in the same direction until reset.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.attackJumpForce">
            <summary>
                Alternative jump force used during attack moves. Applied temporarily via
                UseAttackJumpForceForSeconds method to create special attack jump mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.attackJumpForceSecondsRemaining">
            <summary>
                Timer for temporary jump force modifications during special attacks. While greater
                than or equal to 0, overrides normal jump force with attackJumpForce. Counts down
                each frame and resets to -1 when expired.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.belowScreenCounter">
            <summary>
                Timer tracking how long unit has been below screen bottom. Incremented when Y
                position is 30 units below screenMinY. Triggers repositioning when exceeding 2
                seconds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.bouncyJumpMultiplyer">
            <summary>
                Multiplier constant (1.9x) intended for bouncy/spring jump mechanics. Currently
                defined but not actively used in TestVanDammeAnim. May be utilized by derived
                classes for special jump behaviors on trampolines or springs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canAirdash">
            <summary>
                Master toggle for air dash ability. When true, allows the character to perform
                directional air dashes. Used by characters like Nebro, BroLee, and TheBrocketeer.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canCeilingHang">
            <summary>
                Allows the character to hang from ceilings. When true, enables hanging when near
                ceiling with up/jump input. Used by special characters like ScorpionBro.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canDash">
            <summary>
                Master toggle for dashing ability. Default is true. When false, prevents all dash
                moves and affects ladder climbing behavior (cannot climb ladders while dashing).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canPushBlocks">
            <summary>
                Controls whether the character can push moveable blocks. Default is true. Only
                allows pushing when running or climbing ladders. Triggers Map.PushBlock when
                conditions are met.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canTouchCeiling">
            <summary>
                Controls whether unit can collide with ceilings. Set by ConstrainToCeiling method
                and affects wall drag behavior. Protected field for internal collision state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canTouchLeftWalls">
            <summary>
                Allows or blocks collision with left walls. Public field for external collision
                control. Referenced in barbed wire collision checks.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canTouchRightWalls">
            <summary>
                Allows or blocks collision with right walls. Public field for external collision
                control. Works with canTouchLeftWalls for directional collision management.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canWallClimb">
            <summary>
                Determines if the character can climb walls. Default is true but can be disabled for
                certain character types. Also used by the AI pathfinding system to determine
                movement options.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ceilingHeight">
            <summary>
                Height of ceiling above character. Updated by upward raycast checks from center and
                both sides. Default value of 1000 indicates no ceiling. Used for vertical space
                calculations and movement constraints.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.chimneyFlip">
            <summary>
                Indicates whether the player is currently performing a chimney flip wall-jump
                maneuver. Set to true when initiating the flip, false when animation completes or
                air dash stops.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.chimneyFlipConstrained">
            <summary>
                Determines whether horizontal movement is restricted during a chimney flip. When
                true, horizontal movement is limited unless up/jump is held.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.chimneyFlipDirection">
            <summary>
                Horizontal direction of chimney flip (-1 for left, 1 for right). Multiplied by 100
                to set horizontal velocity during the flip maneuver.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.chimneyFlipFrames">
            <summary>
                Animation frame counter for chimney flip, starting at 11 and counting down to 0.
                Used to calculate animation frame (22 - chimneyFlipFrames) and control movement
                restrictions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.constrainedLeft">
            <summary>
                Indicates collision with wall on left side during current frame. Set true when
                raycast detects left wall collision. Works with constrainedRight for full wall
                detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.constrainedRight">
            <summary>
                Indicates collision with wall on right side during current frame. Set true when
                raycast detects right wall collision. Used for ceiling hang transitions and wall
                interaction mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dashSpeedM">
            <summary>
                Current air dash speed multiplier (default 1.0). Increased during air dashes to
                provide burst movement. Value changes dynamically during dash execution and returns
                to 1.0 when dash ends.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dashTime">
            <summary>
                Timestamp marking when the current dash started. Set when initiating a dash after
                successful double-tap detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dashing">
            <summary>
                Current dash state of the character. When true, applies dash speed multiplier and
                triggers dash animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.defaultAirdashDelay">
            <summary>
                The standard delay time in seconds before air dashes execute. Default value of 0.15
                seconds provides consistency across different air dash types.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.delayedDashing">
            <summary>
                Handles dash continuation after landing from an aerial state. When true, allows dash
                to resume upon landing if conditions are met.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.doodadCurrentlyHangingFrom">
            <summary>
                Reference to the ceiling JiggleDoodad object the character is currently hanging
                from. Set when grabbing ceiling and used for physics interactions with environmental
                effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.doubleJumpsLeft">
            <summary>
                Tracks remaining double jump charges. Always reset to 0 in the base implementation
                when landing, wall jumping, or entering various states. Actual double jump
                functionality appears to be implemented in derived classes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.downTapTime">
            <summary>
                Timestamp of the last down direction button press. Set in PressDown() method,
                potentially used for ground pound or slide mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.feetWidth">
            <summary>
                Width for foot collision detection in units. Default value of 4 used in ground
                detection raycasts. Adjusts based on movement direction for better platforming feel.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.frictionM">
            <summary>
                Ground friction multiplier affecting horizontal deceleration. Default value of 10.
                Applied as xI *= (1 - Clamp01(t * frictionM)) when on ground. Higher values create
                faster deceleration.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.graceJumping">
            <summary>
                Allows jump input buffering on bouncy blocks. Set to true when initiating jump and
                checked for bouncy block interactions to provide forgiving jump timing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gravityWaterDanmping">
            <summary>
                Unused constant intended for water gravity damping (0.5f). Currently not referenced
                in the codebase. The actual water damping is handled by separate waterDampingX
                (0.95f) and waterDampingY (0.65f) fields.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.groundHeight">
            <summary>
                Current ground level below character. Updated by CalculateGroundHeight each frame.
                Core vertical reference point used for ground detection, fall damage calculations,
                and jumping mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.halfWidth">
            <summary>
                Half of unit's collision width in units. Default value of 6 used throughout for wall
                collision boundaries, ledge detection, and constraint calculations. Returned by
                HalfWidth property.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hangGrace">
            <summary>
                Grace period timer that allows the player to grab onto ceilings within a short
                window after moving away from a climbable surface. Initialized to hangGraceTime
                (0.3f) when near ceilings while jumping. Counts down each frame.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hangGraceTime">
            <summary>
                Grace period for hanging mechanics in seconds. Default value of 0.3 sets hangGrace
                timer when detecting hang points. Multiplied by 1.33x for upward hangs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hasDashedInAir">
            <summary>
                Tracks whether the player has already performed a dash while airborne in the current
                jump. Prevents multiple air dashes until landing, reset to false upon touching
                ground.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.jumpTime">
            <summary>
                Multi-purpose timer for jump-related mechanics. Set to 0.13 seconds at the start of
                a standard jump and controls jump boost duration. Also prevents wall climbing
                immediately after jumping. Different jump types use values between 0.03-0.07
                seconds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastCollumn">
            <summary>
                Previous grid column position. Field exists but usage not found in current
                implementation. Note: Field name contains spelling error ("Collumn" instead of
                "Column").
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastDashSpeedM">
            <summary>
                Previous frame's dash speed multiplier value. Used for smooth interpolation of dash
                speeds and to detect dash state changes. Helps create fluid dash animations and
                movement curves.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastJumpTime">
            <summary>
                Timestamp of most recent jump action. Used for various jump cooldowns: 0.08s minimum
                between jumps, 0.2s for wall jumps, and 0.3s for ceiling grab attempts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastLandTime">
            <summary>
                Timestamp of the most recent ground landing. Used for "coyote time" or grace
                jumping, allowing jumps shortly after leaving a platform. Enables more forgiving
                platforming by permitting jumps within a small window after walking off ledges.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastParentPosition">
            <summary>
                Intended to store previous parent position. Field exists but is never used in
                current implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastParentWorldPos">
            <summary>
                Caches parent's world position for movement calculations. Used to calculate
                parentedDiff in ShiftUnitWithParent based on position changes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastParentedToTransform">
            <summary>
                Tracks previous parent transform for detecting parent changes. Used to apply
                momentum when switching parents or leaving a moving platform. Set to null in
                Initialize.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastRow">
            <summary>
                Previous grid row position. Field exists but usage not found in current
                implementation. Likely intended for grid-based movement tracking.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ledgeGrapple">
            <summary>
                Indicates if the character is currently grabbing a ledge. Works with wasLedgeGrapple
                for state transition detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ledgeOffsetY">
            <summary>
                Vertical offset applied when grabbing ledges. Used to calculate which animation
                frame to display during ledge grapple animations, with values typically ranging from
                0 to 13.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.leftTapTime">
            <summary>
                Timestamp of the last left direction button press. Used with minDashTapTime to
                detect left double-tap for dashing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.maxFallSpeed">
            <summary>
                Terminal velocity limit for falling in units per second (default -400). Prevents
                acceleration beyond this speed when falling. Can be modified temporarily by
                abilities or environmental effects like fans or low gravity zones.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.maxWallClimbYI">
            <summary>
                Maximum upward velocity allowed when initiating wall climbing. Default value of 100
                prevents climbing at high speeds. Different units may have different values (e.g.,
                Alien: 250).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.minDashTapTime">
            <summary>
                Maximum time window (0.33 seconds) between two directional taps to trigger a dash.
                If second tap occurs within this window, dash is initiated.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.noclipSpeed">
            <summary>
                Movement speed when in level editor noclip mode. Default value of 200 units per
                second. Only active when Map.isEditing and LevelEditorGUI.NoClip are true. Speed
                increases while moving up to +300/sec.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.oldJumpForce">
            <summary>
                Unused field that was likely intended to store the original jump force during
                temporary modifications. Initialized to -1 but never used in implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.originalMaxFallSpeed">
            <summary>
                Stores the default terminal velocity value (default -400). Used to restore normal
                falling physics after temporary modifications from abilities or effects. Ensures
                fall speed limits return to baseline after special states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parachuteTemporyPositionY">
            <summary>
                Smooth Y-position interpolation for parachute deployment visuals. Initialized to
                camera position when parachute activates and gradually moves up toward actual
                position at 250 units/second. Creates smooth "pulling up" effect for attached visual
                elements.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parentHasMovedTime">
            <summary>
                Timer tracking when parent object has moved. Set to 0.5 seconds when parent moves
                and affects wall drag mechanics while positive. Decrements by delta time in
                RunMovement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parentVelocityInheritM">
            <summary>
                Multiplier for inheriting velocity from parent objects. Default value of 1.0 applies
                full parent velocity. Used when unimpaling and in movement calculations. Reset to 1
                after impalement ends.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parentedDiff">
            <summary>
                Movement difference calculated when parented to moving objects. Applied to unit
                position and transfers momentum (adds to xIBlast/yI) when leaving parent.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.rightTapTime">
            <summary>
                Timestamp of the last right direction button press. Used with minDashTapTime to
                detect right double-tap for dashing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.rumbleAmountPerShot">
            <summary>
                Controller vibration intensity per shot fired. Default value of 0.3. Intended for
                gamepad feedback but not actively used in base implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.screenMaxX">
            <summary>
                Maximum X coordinate of current camera/screen boundary. Set via
                SetResolutionCamera.GetScreenExtents. Used for screen constraint checks and respawn
                positioning.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.screenMaxY">
            <summary>
                Maximum Y coordinate of current camera/screen boundary. Set via
                SetResolutionCamera.GetScreenExtents. Used for top-of-screen constraints in
                MapExtents mode.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.screenMinX">
            <summary>
                Minimum X coordinate of current camera/screen boundary. Set via
                SetResolutionCamera.GetScreenExtents. Used with screenMaxX to calculate screen
                center for respawning.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.screenMinY">
            <summary>
                Minimum Y coordinate of current camera/screen boundary. Set via
                SetResolutionCamera.GetScreenExtents. Used to detect when character falls below
                screen (with 30 unit buffer).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.specialAttackXIBoost">
            <summary>
                Horizontal velocity boost applied during special attacks. Added to total velocity
                calculation to provide special move momentum.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.specialAttackYIBoost">
            <summary>
                Vertical velocity boost applied during special attacks. Added to vertical velocity
                calculation to provide special move momentum.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.speed">
            <summary>
                Base horizontal movement speed in units per second (default 110). Core value used
                throughout movement calculations for walking and running. Modified by various
                factors like terrain, status effects, and attached enemies.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.standingHeadHeight">
            <summary>
                Default head height when standing in units. Default value of 18 sets initial
                headHeight and is restored when standing up from crouch.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useAttackJumpForceForAttack">
            <summary>
                Flag indicating if special attack jump force should be used for attacks. Checked by
                AI systems to determine attack behavior and triggers temporary jump force
                modification.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallClimbing">
            <summary>
                Current wall climbing state flag. Set true when initiating wall climb. Affects
                movement physics, animations, and special moves like air dash. Reset when leaving
                walls or transitioning states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallClimbingWallTransform">
            <summary>
                Reference to wall being climbed. Set in AssignWallTransform when touching walls and
                used as part of the parenting system. Reset to null in ShiftUnitWithParent.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallClimbingWallTransformLocalPos">
            <summary>
                Local position on wall for climbing calculations. Set using InverseTransformPoint in
                AssignWallTransform and returned by GetParentedToPos during wall climbing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallDrag">
            <summary>
                Indicates if the character is sliding down a wall. When set to true, triggers wall
                drag audio loop and can initiate wall climbing if conditions are met. Automatically
                deactivates parachute when wall dragging begins.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallDragTime">
            <summary>
                Timer controlling wall sliding effect when touching walls. Set to 0.2 seconds on
                wall contact and prevents downward movement while active. Creates a brief "stick"
                effect that slows descent along walls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasConstrainedLeft">
            <summary>
                Previous frame's left wall collision state. Updated from constrainedLeft each frame.
                Used to detect wall release for state transitions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasConstrainedRight">
            <summary>
                Previous frame's right wall collision state. Updated from constrainedRight each
                frame. Used to detect wall release for state transitions like ceiling hanging.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasDashing">
            <summary>
                Previous frame's dash state, used for state change detection. Compared with current
                dashing state to trigger dash start effects and sounds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasLedgeGrapple">
            <summary>
                Previous frame's ledge grapple state. Used for edge detection to determine when
                ledge grabbing begins or ends.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasWallClimbing">
            <summary>
                Previous wall climbing state. Field exists but is never used in current
                implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasWallDragging">
            <summary>
                Previous frame's wall drag state for transition detection. Updated from wallDrag
                each frame. Used to detect wall drag state changes and prevents immediate
                re-grabbing of walls after release.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.waterDampingX">
            <summary>
                Horizontal movement damping factor when submerged in water. Default value of 0.95
                multiplies xI and xIBlast velocities, creating water resistance.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.waterDampingY">
            <summary>
                Vertical movement damping factor when submerged in water. Default value of 0.65
                multiplies yIT velocity, creating stronger vertical water resistance than
                horizontal.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.xIAttackExtra">
            <summary>
                Additional horizontal velocity during attack animations. Used by characters like
                BroLee for martial arts moves and BrocSnipes for sniper recoil. Reset to 0 after
                attacks complete.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.xIBlast">
            <summary>
                Horizontal knockback velocity component from explosions and impacts. Clamped to
                [-200, 200] range and affected by water damping. Adds to total velocity calculation
                without affecting base movement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.xIT">
            <summary>
                Frame-interpolated horizontal movement distance. Calculated as (xI + xIBlast +
                xIAttackExtra + specialAttackXIBoost) * deltaTime. Modified by wall constraints and
                water damping. Reduced by 0.95x when carrying objects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.yIBlast">
            <summary>
                Vertical knockback velocity component from explosions. Set via SetVelocity method
                and added to vertical velocity with clamping. Creates upward or downward force from
                impacts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.yIT">
            <summary>
                Frame-interpolated vertical movement distance. Calculated as (yI +
                specialAttackYIBoost) * deltaTime each frame. Modified by water damping,
                constraints, and traps. Represents actual vertical position change per frame.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:TestVanDammeAnim.AnimateActualDuckingRunning">
            <summary>
                Specialized ducking run animation that uses an 8-frame cycle with foot effects every
                4 frames. Adjusts gun position to (2f, -1f) to accommodate ducking pose and includes
                submersion checks for particle effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateActualIdleDuckingFrames">
            <summary>
                Provides the base ducking idle animation with adjusted gun positioning. Similar to
                standing idle but uses a different frame and positions gun at offset (2f, -1f) to
                accommodate the ducking pose.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateActualIdleFrames">
            <summary>
                Provides the base standing idle animation when the character is not performing any
                special actions. Activates gun, sets frame rate to 0.0667f, and displays a static
                pose. Conditionally sets gun sprite based on firing state.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateActualJumpingDuckingFrames">
            <summary>
                Handles specific jumping animation frames when character is in ducking state during
                jump.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateActualJumpingFrames">
            <summary>
                Manages complex jumping animation frames based on vertical and horizontal velocity.
                Supports three distinct velocity states: fast rising (yI &gt; 20f), fast falling (yI
                &lt; -55f), and normal jumping. Includes gun positioning and frame validation with
                different animations for varying movement speeds.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateActualNewRunningFrames">
            <summary>
                Running animation with environmental responsiveness. Adjusts frame rate based on
                quicksand (3x slower) and barbed wire (2x slower) conditions. Generates foot
                particle effects every 4 frames when not submerged and plays footstep sounds.
                Supports dash animation states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateAirdash">
            <summary>
                Handles horizontal air dash animation with direction-based sprite selection and
                timing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateAirdashDown">
            <summary>
                Handles downward air dash animation with specific sprite frames and timing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateChimneyFlip">
            <summary>
                Handles chimney flip animation sequence for wall-to-wall traversal between narrow
                spaces.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateHanging">
            <summary>
                Handles hanging animation from ledges or ceilings with proper sprite positioning and
                timing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateHighFiveHold">
            <summary>
                Handles animation for holding high-five gesture with proper timing and visual
                feedback.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateHighFiveRelease">
            <summary>
                Handles animation for releasing/completing high-five gesture with celebration
                effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateIdle">
            <summary>
                Main idle animation dispatcher that routes to specific animations based on character
                state. Implements a priority hierarchy system that handles ducking versus standing
                states separately. Routes to appropriate sub-animations including melee, high-five,
                special abilities, rolling, gestures, and dancing based on current character flags.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateImpaled">
            <summary>
                Handles impalement animation with different frames for living versus dead
                characters. Living characters use a clamped frame range, while dead characters or
                aliens use a specific static frame. Deactivates gun and resets sprite offset during
                impalement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateImpaledByChainSaw">
            <summary>
                Sets a specific animation frame for chainsaw impalement death. Deactivates the gun
                and resets sprite offset. Simpler than regular impalement animation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateJumping">
            <summary>
                Handles jumping animation sequences including takeoff, flight, and landing
                preparation phases.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateLedgeGrapple">
            <summary>
                Handles ledge grappling animation with grabbing and climbing motion sequences.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateMelee">
            <summary>
                Virtual method for melee attack animation. Empty implementation that can be
                overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateOnBackOffUnit">
            <summary>
                Sets the sprite frame for when the character is backing away from another unit.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimatePockettedSpecial">
            <summary>
                Executes pocketed special ability animation sequence. Manages 10-frame animation
                cycle, triggers ability execution at frame 4, and handles gun
                deactivation/reactivation throughout the sequence.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimatePushing">
            <summary>
                Animates character pushing objects with specialized timing and gun orientation. Uses
                3x slower frame rate than normal running, flips gun sprite horizontally (scale -1f
                on X-axis), and uses a specific sprite sheet row. Plays footstep sounds every 4
                frames.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateRolling">
            <summary>
                Animates the rolling sequence using a countdown-based frame system. Sets frame rate
                to 0.025f, deactivates the gun during rolling, and plays landing sound at frame 7 of
                the sequence.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateRunning">
            <summary>
                Main running animation dispatcher with comprehensive state priority system. Handles
                throwable objects, melee, special abilities, pushing, and rolling states. For base
                running, generates environmental effects including foot particles and sounds. Adapts
                frame rate for quicksand environments.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateSpecial">
            <summary>
                Handles special ability animation sequences. Manages timing, facing direction, and
                animation state for special moves.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateSpecial2">
            <summary>
                Virtual method for secondary special ability animation. Empty implementation that
                can be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateSpecial3">
            <summary>
                Virtual method for tertiary special ability animation. Empty implementation that can
                be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateSpecial4">
            <summary>
                Virtual method for quaternary special ability animation. Empty implementation that
                can be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateStrungUpFrames">
            <summary>
                Sets the sprite animation frame for when the character is strung up or hanged.
                Displays a static death pose frame.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateThrowingHeldObject">
            <summary>
                Handles animation for throwing held objects like grenades or mooks. Sets throwing
                state and manages object release timing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateZipline">
            <summary>
                Handles zipline traversal animation with movement-based sprite selection and timing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CreateFaderTrailInstance">
            <summary>
                Creates a fading trail effect sprite at character's current position and rotation.
                Instantiates fader sprite prefab, matches character's scale and material properties,
                and configures sprite dimensions for trail visualization.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunGun">
            <summary>
                Updates gun animation by managing frame timing. Increments gun counter and decreases
                gun frame when not wall dragging, calling SetGunSprite to update visuals when frame
                changes occur.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetGunSprite(System.Int32,System.Int32)">
            <summary>
                Sets the gun sprite frame and row based on current character state. Uses special
                hanging frame offset when hanging, climbing one-armed, or on zipline.
            </summary>
            <param name="spriteFrame">The frame index for the gun sprite</param>
            <param name="spriteRow">The row index for the gun sprite sheet</param>
        </member>
        <member name="M:TestVanDammeAnim.SetSpriteOffset(System.Single,System.Single)">
            <summary>
                Sets sprite rendering offset for visual positioning adjustments during animations.
            </summary>
            <param name="xOffset">X coordinate offset for sprite positioning</param>
            <param name="yOffset">Y coordinate offset for sprite positioning</param>
        </member>
        <!-- Animation & Sprite Systems Properties -->
        <member name="P:TestVanDammeAnim.Renderer">
            <summary>
                Gets the MeshRenderer component attached to this GameObject. Uses lazy
                initialization to cache the component reference for performance.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.material">
            <summary>
                Gets or sets the shared material of the MeshRenderer. This property provides direct
                access to modify the character's visual appearance.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:TestVanDammeAnim._frozenGunMaterial">
            <summary>
                Cached material for frozen gun appearance. Currently not actively used in
                TestVanDammeAnim - the Freeze method creates materials directly. May be used by
                derived classes or reserved for optimization to avoid material creation during
                gameplay.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._frozenMaterial">
            <summary>
                Cached material for frozen appearance. Currently not actively used in
                TestVanDammeAnim - the Freeze method creates materials directly. May be used by
                derived classes or reserved for optimization to avoid material creation during
                gameplay.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._oilyGunMaterial">
            <summary>
                Cached material for oil-covered gun appearance. Applied alongside _oilyMaterial to
                ensure both character and weapon show oil coverage. Uses the same oil shader as
                character material for consistent visual effect.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._oilyMaterial">
            <summary>
                Cached material for oil-covered appearance. Applied when the character is covered in
                oil, giving a dark, slick visual effect. Created on-demand using special oil shader
                with darkened color values for visual feedback of flammable state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.blood">
            <summary>
                Array of blood shrapnel prefabs intended for visual effects. Currently unused in
                favor of EffectsController.CreateBloodParticles() which uses the bloodColor field
                instead. Likely reserved for custom blood particle effects in derived classes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.currentGesture">
            <summary>
                Tracks the current gesture animation being performed (salute, wave, flex, etc.). Set
                via SetGestureAnimation RPC method and used by AnimateGesture to display the
                appropriate animation frames. Gestures block movement when active and are primarily
                used for multiplayer emotes and character interactions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.defaultMaterial">
            <summary>
                Stores the original material of the character sprite. Used as a reference to restore
                normal appearance after visual effects like freezing or oil coverage. Cached during
                initialization to ensure proper material restoration.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.frameRate">
            <summary>
                Animation frame playback rate in seconds per frame (default 0.0667, approximately 15
                FPS). Controls the speed of sprite animations. Lower values create faster
                animations, higher values create slower animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunCounter">
            <summary>
                Animation timer for gun sprite updates. Increments by delta time and triggers frame
                updates every 0.0334 seconds, providing smooth gun animation at approximately 30
                FPS.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunFrame">
            <summary>
                Tracks the current animation frame for weapon-related animations. Acts as a cooldown
                timer that prevents certain actions when greater than 0. Decremented during gun
                animation updates and initialized to 3 at start.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunMaterial">
            <summary>
                Stores the original material of the gun sprite. Used to restore normal gun
                appearance after visual effects. Cached separately from character material since gun
                may have different shader properties or textures.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunSprite">
            <summary>
                Sprite renderer component for the character's weapon. Updated independently from
                character sprite to show weapon animations and states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunSpriteHangingFrame">
            <summary>
                Starting frame offset for gun animations when character is hanging or climbing.
                Default value of 6. Added to the base frame number to show different gun positions
                for hanging states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunSpritePixelHeight">
            <summary>
                Height of each gun sprite frame in pixels. Default value of 32 pixels. Calculated
                from gunSprite.pixelDimensions.y and used for sprite sheet row calculations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunSpritePixelWidth">
            <summary>
                Width of each gun sprite frame in pixels. Default value of 32 pixels. Used to
                calculate sprite sheet coordinates and passed to shaders for visual effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hangingOneArmed">
            <summary>
                Indicates whether the character is currently hanging from a ledge with one arm. Used
                by the animation system to display one-armed hanging sprites (row 11, frame 0)
                versus two-armed hanging. Set during ledge grapple mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heroTrail">
            <summary>
                Active trail renderer that creates speed lines behind the hero during fast movement.
                Enabled when horizontal speed exceeds threshold and trail time dynamically adjusts
                between 0.1-0.4 seconds based on movement speed. Disabled when speed drops or hero
                dies.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heroTrailPrefab">
            <summary>
                Prefab reference for creating hero trail visual effects. Likely assigned in Unity
                editor and used as template for instantiating the heroTrail object. Part of the
                movement trail rendering system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.instantiatedSkeleton">
            <summary>
                Holds the skeleton or corpse object created when the character dies. Used for
                managing death gibs and can be exploded when hit while melting.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.knifeHand">
            <summary>
                Alternates which hand is used for knife climbing animations. Incremented during
                climbing actions and used with modulo 2 to control left/right hand animations for
                wall climbing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastT">
            <summary>
                Time elapsed during the previous frame in seconds (default 0.1). Used for
                frame-independent animation timing and physics calculations. Helps smooth animations
                during variable frame rates.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meltingSprite">
            <summary>
                Manages the visual effect when the character melts from acid damage. Set when the
                melting animation begins and checked to determine when the melting animation
                completes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meshRenderer">
            <summary>
                Reference to the MeshRenderer component for 3D rendering. Rarely used directly in
                TestVanDammeAnim as characters primarily use sprite-based rendering. May be utilized
                by specific derived classes for special visual effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.runningFrameRate">
            <summary>
                Base animation frame timing for running animations in seconds. Default value of
                0.025 seconds. Multiplied by 3 for slower animations in quicksand or other special
                states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.sprite">
            <summary>
                Main SpriteSM component responsible for rendering the character sprite. Initialized
                from GetComponent in Awake and used extensively throughout animation methods to
                control sprite sheet navigation via SetLowerLeftPixel, texture updates, and visual
                effects like color changes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.spriteOffset">
            <summary>
                Stores the original sprite offset position from initialization. Used as the base
                reference point when applying temporary sprite position adjustments via
                SetSpriteOffset, allowing the sprite to return to its original position after
                effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.spritePixelHeight">
            <summary>
                Height of each sprite frame in pixels on the sprite sheet. Initialized from
                sprite.pixelDimensions.y in Awake and used in SetLowerLeftPixel calculations to
                navigate sprite sheet rows during animation. Default value is 32 pixels.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.spritePixelWidth">
            <summary>
                Width of each sprite frame in pixels on the sprite sheet. Initialized from
                sprite.pixelDimensions.x in Awake and used in SetLowerLeftPixel calculations to
                navigate sprite sheet columns during animation. Default value is 32 pixels.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useDashFrames">
            <summary>
                Controls whether to use dash-specific animation frames. When true, uses row 8 frames
                0-3 for horizontal dashing and row 9 frames 5-7 for vertical air dashing. Enables
                visual feedback for dash abilities when available.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useDuckingFrames">
            <summary>
                Controls whether to display ducking/crouching animation frames. When true (default),
                shows proper ducking sprites when character crouches. When false, character
                maintains standing sprite even while ducked, which can look incorrect but may be
                used for specific characters.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useLadderClimbingTransition">
            <summary>
                Enables smooth transition animations when mounting or dismounting ladders. When
                true, plays a transition animation for ladderClimbingTransitionFrames duration
                before normal climbing begins. Works with useNewLadderClimbingFrames for complete
                ladder animation control.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewDuckingFrames">
            <summary>
                Configuration toggle intended for switching between old and new ducking animation
                sets. Currently not actively used in the code but reserved for future animation
                system updates.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewFrames">
            <summary>
                Configuration toggle intended for using updated animation frames. Currently not
                actively used in the code but reserved for future general animation system updates.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewHighFivingFrames">
            <summary>
                Controls whether to use updated animation frames for high-five interactions. When
                true, uses frames 4-5 from row 1 of the sprite sheet for the high-five gesture. Set
                per-character to enable or disable the high-five animation system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewKnifeClimbingFrames">
            <summary>
                Controls whether to use updated animation frames for knife wall climbing. When true,
                uses frames from row 5 of the sprite sheet instead of generic climbing frames. Set
                per-character in Unity Inspector to customize wall climbing animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewKnifingFrames">
            <summary>
                Toggle that switches between old and new melee/knifing animation sets. When enabled,
                uses different animation frames and movement patterns in AnimateMelee and
                RunMeleeMovement, affecting both the visual presentation and physics of melee
                attacks.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewLadderClimbingFrames">
            <summary>
                Controls whether to use updated animation frames for ladder climbing. When true,
                uses frames from row 4 of the sprite sheet instead of generic climbing frames. Set
                per-character to customize ladder climbing animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewLedgeGrappleFrames">
            <summary>
                Controls whether to use updated animation frames for ledge grappling. When true,
                uses frames from row 11 of the sprite sheet for the ledge hanging animation. Set
                per-character to enable new ledge grapple visuals.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewPushingFrames">
            <summary>
                Toggles between old and new pushing animation frames. When true, uses updated sprite
                frames for the block pushing animation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewThrowingFrames">
            <summary>
                Toggle that switches between old and new throwing animation sets. When false, uses
                frames 17-22 on row 1; when true, uses frames 17-24 on row 5. Affects both the
                throwing animation sequence and held object positioning during throws.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasHangingMoving">
            <summary>
                Tracks state change for hanging movement animations. Set to true when starting
                hanging movement and used to detect transition from moving to stationary while
                hanging.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.yScale">
            <summary>
                Maintains the vertical scale of the sprite (default 1.0). Preserved during direction
                changes to ensure consistent sprite appearance. Some derived classes may modify this
                for special visual effects like squashing or stretching animations.
            </summary>
        </member>
        <!-- Character State & Effects Methods -->
        <member name="M:TestVanDammeAnim.AlertNearbyMooks">
            <summary>
                Alerts nearby enemy units to player presence within 8x8 unit area. Updates last
                alert time for tracking alert frequency.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateFrozen">
            <summary>
                Sets the visual appearance when the character is frozen. Deactivates the gun sprite
                and sets the character sprite to frame 11 (frozen pose) on the sprite sheet. This
                method is called by Freeze to establish the frozen visual state.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Blind(System.Single)">
            <summary>
                Stuns the character for a specified duration, applying a blindness effect that
                prevents all actions. In DeathMatch mode, heroes receive a 70% reduction in stun
                duration. Also calculates a vocal delay (0.2-0.7 seconds) for playing stun sound
                effects.
            </summary>
            <param name="time">Duration in seconds to remain stunned</param>
        </member>
        <member name="M:TestVanDammeAnim.Blind">
            <summary>
                Applies a default 3-second blind/stun effect to the character. Immediately stops all
                movement and sets the stun timer, with the same vocal delay calculation as the timed
                version for sound effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Boost(System.Single)">
            <summary>
                Applies temporary speed boost effect for specified duration.
            </summary>
            <param name="time">Duration of boost effect in seconds</param>
        </member>
        <member name="M:TestVanDammeAnim.BrosMustFailToWin">
            <summary>
                Marks a player unit as needing to fail for victory conditions. Only applies to
                player-controlled units and disables gibbing to ensure proper failure tracking.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateZombieInput">
            <summary>
                Processes input for zombie units by copying control inputs from their revive source.
                Decrements zombie delay timer and explicitly disables special abilities for zombies.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CanBeThrown">
            <summary>
                Determines if the character can be thrown by other units. Characters that are heavy
                or currently impaled cannot be thrown.
            </summary>
            <returns>True if the character can be thrown, false if heavy or impaled</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanFreeze">
            <summary>
                Checks if the hero can be affected by freeze effects. Base implementation always
                returns true, can be overridden for freeze-immune heroes.
            </summary>
            <returns>True if the hero can be frozen</returns>
        </member>
        <member name="M:TestVanDammeAnim.CheckDestroyed">
            <summary>
                Handles character destruction cleanup. Removes from map tracking, reduces lives if
                applicable, and triggers unit destruction.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckFacingDirection">
            <summary>
                Manages character facing direction based on movement, input, and special abilities.
                Prevents direction changes during chimney flips, air dashes, or when configured to
                maintain special facing direction.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckNotifyDeathType">
            <summary>
                Checks if enough time has passed since death to notify death type. Calls
                NotifyDeathType after 0.33 second delay.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CopyInput(TestVanDammeAnim,System.Single@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Copies control inputs from one unit to another, primarily used for zombie control.
                If the source is alive, copies all input states. If dead, sets all inputs to false.
            </summary>
            <param name="zombie">The source unit to copy inputs from</param>
            <param name="zombieDelay">Delay timer reference (not modified by this method)</param>
            <param name="up">Up input state to set</param>
            <param name="down">Down input state to set</param>
            <param name="left">Left input state to set</param>
            <param name="right">Right input state to set</param>
            <param name="fire">Fire input state to set</param>
            <param name="buttonJump">Jump input state to set</param>
            <param name="special">Special input state to set</param>
            <param name="highFive">High-five input state to set</param>
        </member>
        <member name="M:TestVanDammeAnim.CreateElectricShockPuff(System.Single)">
            <summary>
                Creates a visual electric shock effect at the hero's position. Adds random
                positioning offsets for variation and randomly flips the effect horizontally.
                Parents the effect to the hero's transform so it follows movement.
            </summary>
            <param name="yOffset">Vertical offset from the hero's position for the effect</param>
        </member>
        <member name="M:TestVanDammeAnim.CreateSkeleton">
            <summary>
                Creates appropriate skeleton prefab based on character type (BigGuy, HellLostSoul,
                Grenadier, etc.) for death/melting animations. Only creates if skeleton doesn't
                already exist.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Dance(System.Single)">
            <summary>
                Makes the character dance for the specified duration. Sets dance timer and applies a
                stun effect for the same duration to prevent movement during the dance.
            </summary>
            <param name="time">Duration of the dance in seconds</param>
        </member>
        <member name="M:TestVanDammeAnim.DelayedRevive(System.Single)">
            <summary>
                Handles delayed revival mechanics for the hero. Virtual method intended for override
                by specific revival implementations.
            </summary>
            <param name="delay">Time in seconds before revival occurs</param>
        </member>
        <member name="M:TestVanDammeAnim.DestroyUnit">
            <summary>
                Virtual method that destroys the game object. Can be overridden by derived classes
                for custom destruction behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Disable">
            <summary>
                Disables the component to prevent updates and behavior. Sets the enabled state to
                false.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.FireFlashAvatar">
            <summary>
                Triggers the avatar firing flash effect with a short animation timer (0.04 seconds).
                Sets the avatar to fire state and applies controller rumble feedback for firing
                actions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Freeze(System.Single)">
            <summary>
                Freezes the character with a frozen visual effect for a specified duration. Creates
                frozen materials using a special "Frozen" shader with blue tint (0.094f, 0.388f,
                0.718f) and applies them to both character and gun sprites. The character is
                immobilized and plays a freeze scream sound effect while in this state.
            </summary>
            <param name="time">Duration in seconds to remain frozen</param>
        </member>
        <member name="M:TestVanDammeAnim.HideAndDisableCharacter">
            <summary>
                Completely hides and disables the character from gameplay. Disables rendering, main
                script, AI, and collision while setting invulnerability. Used for cutscenes or
                special game states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Impale(UnityEngine.Transform,UnityEngine.Vector3,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Impales the character on a transform, drastically reducing movement capability while
                maintaining position constraints.
            </summary>
            <param name="impaleTransform">The transform to impale the character on.</param>
            <param name="direction">The direction of the impaling force.</param>
            <param name="damage">The amount of damage to apply.</param>
            <param name="xI">The horizontal velocity component.</param>
            <param name="yI">The vertical velocity component.</param>
            <param name="xOffset">Horizontal offset from the impale transform.</param>
            <param name="yOffset">Vertical offset from the impale transform.</param>
        </member>
        <member name="M:TestVanDammeAnim.IsExitingDoor">
            <summary>
                Checks if the character is currently exiting a door. Base implementation always
                returns false, intended for override by derived classes.
            </summary>
            <returns>True if exiting a door, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsFlexing">
            <summary>
                Checks if the hero is performing a flex gesture. Requires the unit to be a hero and
                currently in the Flex gesture state.
            </summary>
            <returns>True if the hero is flexing</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsHanging">
            <summary>
                Checks if the unit is currently in a hanging state. Returns true when actionState
                equals Hanging.
            </summary>
            <returns>True if the unit is hanging</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsInQuicksand">
            <summary>
                Checks if the hero is currently sinking in quicksand. Returns the current quicksand
                state tracked by the movement system.
            </summary>
            <returns>True if the hero is in quicksand</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsIncapacitated">
            <summary>
                Checks if the hero is currently stunned or frozen. Returns true if either stun time
                or frozen time is active.
            </summary>
            <returns>True if the hero cannot act due to stun or freeze</returns>
        </member>
        <member name="M:TestVanDammeAnim.Melt">
            <summary>
                Initiates melting animation sequence using character-specific melting prefabs. Sets
                melted state and creates appropriate melting effects for different enemy types and
                states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.MustBroFailToWin">
            <summary>
                Checks whether this unit must fail for the victory condition to be met. Used in
                special game modes where player failure is the objective.
            </summary>
            <returns>True if this unit must fail for victory</returns>
        </member>
        <member name="M:TestVanDammeAnim.RecallBro">
            <summary>
                Handles character recall/respawn with visual fade effect. Switches to transparent
                shader, changes layer to Effects, removes from map tracking, and assigns to
                spectator player. Network RPC method that can be called remotely.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ReceiveHeroKillReport(KillData)">
            <summary>
                Receives notification when this hero kills another unit. Virtual method intended for
                override by specific hero implementations.
            </summary>
            <param name="killData">Data about the kill including victim and damage type</param>
        </member>
        <member name="M:TestVanDammeAnim.ReduceLives(System.Boolean)">
            <summary>
                Decrements player lives when the character dies. Only processes for the owning
                player, prevents double processing, and notifies HeroController of the death.
            </summary>
            <param name="destroyed">Whether the character was completely destroyed</param>
        </member>
        <member name="M:TestVanDammeAnim.Reenable">
            <summary>
                Re-enables the component after it has been disabled. Sets the enabled state to true.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ReplaceWithSkinnedInstance(Unit,System.Single,System.Single)">
            <summary>
                Replaces this unit instance with a skinned version, transferring all state and
                properties to the new instance.
            </summary>
            <param name="skinnedInstance">The skinned unit instance to replace this one with.</param>
            <param name="_x">The X position for the replacement unit.</param>
            <param name="_y">The Y position for the replacement unit.</param>
        </member>
        <member name="M:TestVanDammeAnim.RestartBubble">
            <summary>
                Restarts the player protection bubble display with default settings. Uses player
                options to determine if bubbles should always be shown and considers forced bros
                count for bubble visibility.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RestartBubble(System.Single)">
            <summary>
                Restarts the player protection bubble with a specified duration timer. Only
                functions in campaign mode and checks HUD visibility and chat state before
                displaying the bubble for the specific player number.
            </summary>
            <param name="time">Duration in seconds to display the protection bubble</param>
        </member>
        <member name="M:TestVanDammeAnim.Revive(System.Int32,System.Boolean,TestVanDammeAnim)">
            <summary>
                Revives a dead unit, either as a zombie or restoring a player character. Clears
                impalement state, creates revival effects, and assigns appropriate control. For
                players, reassigns character and adds life. For zombies, sets ownership to revive
                source.
            </summary>
            <param name="playerNum">Player number to assign if reviving as player (-1 for zombie)</param>
            <param name="isUnderPlayerControl">Whether the revived unit will be player-controlled</param>
            <param name="reviveSource">The unit that is reviving this character (for zombie control)</param>
            <returns>True if revival was successful</returns>
        </member>
        <member name="M:TestVanDammeAnim.RollOnto(System.Int32)">
            <summary>
                Applies knockback when another unit rolls onto this character. Uses the Knock method
                with horizontal force based on direction and fixed upward force.
            </summary>
            <param name="direction">Direction of the rolling impact (-1 left, 1 right)</param>
        </member>
        <member name="M:TestVanDammeAnim.RunAvatarFiring">
            <summary>
                Updates the avatar's firing animation state based on current fire input. Manages the
                avatar gun fire timer and switches between angry and calm states depending on
                whether the character is actively firing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunAvatarRunning">
            <summary>
                Updates the avatar's running animation by creating a bouncing effect. The avatar
                moves up and down based on the current run animation frame, but only when the
                character is in the running state.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunImpaledBlood">
            <summary>
                Creates periodic blood particle effects when the character is impaled. Manages blood
                spurts with randomized timing, limits effects to 5 spurts maximum, and uses artery
                effects for dramatic visual impact.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunTrail">
            <summary>
                Manages the visual trail effect based on character movement speed. Enables trail
                when moving faster than 50% speed, with trail duration scaling from 0.1 to 0.4
                seconds. Disables trail when dead or moving slowly.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetGibThreshold(System.Int32)">
            <summary>
                Sets the negative health threshold at which the hero will gib instead of normal
                death. Lower values require more extreme damage to trigger gibbing.
            </summary>
            <param name="newThreshold">The new gib threshold (typically negative)</param>
        </member>
        <member name="M:TestVanDammeAnim.SetImmuneToOutOfBounds">
            <summary>
                Makes the unit immune to death from going out of bounds. Used for special scenarios
                where units need to exist outside normal play area.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetInvulnerable(System.Single,System.Boolean,System.Boolean)">
            <summary>
                Makes the character invulnerable to damage for the specified duration. Can
                optionally display a protection bubble and/or halo effect to indicate the
                invulnerable state.
            </summary>
            <param name="time">Duration of invulnerability in seconds</param>
            <param name="restartBubble">Whether to show the protection bubble (default true)</param>
            <param name="showHalo">Whether to show a halo effect (default false)</param>
        </member>
        <member name="M:TestVanDammeAnim.SetSpawnState(System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Sets the initial spawn conditions for the hero including velocity and status
                effects. Network RPC method that can be called remotely to ensure consistent spawn
                state.
            </summary>
            <param name="_xI">Initial horizontal velocity</param>
            <param name="_yI">Initial vertical velocity</param>
            <param name="tumble">Whether to start in tumbling state</param>
            <param name="useParachuteDelay">Whether to apply parachute deployment delay</param>
            <param name="useParachute">Whether to spawn with parachute active</param>
            <param name="onFire">Whether to spawn on fire</param>
        </member>
        <member name="M:TestVanDammeAnim.SetWillComebackToLife(System.Single)">
            <summary>
                Marks the character to respawn after death with the specified comeback timer. Shows
                a halo effect if not already displayed to indicate the respawn state.
            </summary>
            <param name="time">Time in seconds before the character respawns</param>
        </member>
        <member name="M:TestVanDammeAnim.ShowAndEnableCharacter">
            <summary>
                Network wrapper for showing a hidden character. Checks ownership before sending RPC
                to show the character on all clients.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ShowCharacterInternal">
            <summary>
                Re-enables and shows a previously hidden character. Restores rendering, main script
                functionality, and grants 1 second of invulnerability. Network RPC method that can
                be called remotely.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SkinUnit">
            <summary>
                Converts this unit to a skinned variant if the player has an active skin and network
                ownership.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SprayBlood(System.Single,BloodColor)">
            <summary>
                Creates blood splatter effects on nearby surfaces using raycasts. Performs a raycast
                in a random direction from above the character and applies blood to hit blocks. Also
                triggers area blood effects through Map.BloodyDoodads.
            </summary>
            <param name="range">Maximum distance for blood spray raycasts</param>
            <param name="bloodColor">Color of the blood to spray</param>
        </member>
        <member name="M:TestVanDammeAnim.Stop">
            <summary>
                Immediately halts all character movement and actions. Clears all input flags, sets
                velocity to zero, resets melee states, and sets to idle if not dead.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopBeingStunned">
            <summary>
                Virtual method for ending stun effects. Empty implementation that can be overridden
                by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopBubble">
            <summary>
                Stops the player protection bubble display for the specific player number (0-3).
                Used when invulnerability expires or when the bubble should be hidden.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Stun">
            <summary>
                Applies a stun effect with default duration of 0.33 seconds. Calls the overloaded
                Stun method with the default time value.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Stun(System.Single)">
            <summary>
                Applies a stun effect for the specified duration. Stops character movement, sets
                stun timer, resets blind counter if negative, and calculates vocal delay for stun
                sound effects based on duration.
            </summary>
            <param name="time">Duration of the stun effect in seconds</param>
        </member>
        <member name="M:TestVanDammeAnim.SuckIntoPortal">
            <summary>
                Handles the character being sucked into an exit portal with visual effects. Adds
                SpinAndScaleDown component for the portal animation, stops protection bubbles and
                syncing, and links the character to the exit portal instance. RPC-enabled for
                network synchronization.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TempInvulnerability(System.Single)">
            <summary>
                Grants temporary invulnerability to TestVanDammeAnim for a specified duration. Sets
                invulnerable state and resets fired-while-invulnerable tracking.
            </summary>
            <param name="time">Duration of invulnerability in seconds. If 0 or negative, uses default duration of 1.2 times the current frame delta time (very brief)</param>
        </member>
        <member name="M:TestVanDammeAnim.TimeBroBoost(System.Single)">
            <summary>
                Applies time-based character boost effect for specified duration.
            </summary>
            <param name="time">Duration of time boost effect in seconds</param>
        </member>
        <member name="M:TestVanDammeAnim.UnFreeze">
            <summary>
                Removes the frozen state and restores the character's normal appearance. Resets the
                frozen timer to 0 and restores the default materials for both the character renderer
                and gun sprite (if present). This allows the character to resume normal movement and
                actions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Unimpale(System.Int32,DamageType,System.Single,System.Single,UnityEngine.MonoBehaviour)">
            <summary>
                Removes the character from an impaled state, applying damage and velocity while
                clearing impalement constraints.
            </summary>
            <param name="damage">The amount of damage to apply when unimpaling.</param>
            <param name="damageType">The type of damage being applied.</param>
            <param name="xI">The horizontal velocity to apply after unimpaling.</param>
            <param name="yI">The vertical velocity to apply after unimpaling.</param>
            <param name="firedBy">The source that caused the unimpaling.</param>
        </member>
        <member name="M:TestVanDammeAnim.Unrevive">
            <summary>
                Forces the character to die after being revived. Deals crush damage equal to
                health+1 with knockback based on facing direction.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Unrevive">
            <summary>
                Forces the character to die after being revived. Deals crush damage equal to
                health+1 with knockback based on facing direction.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.WhereDidIDie">
            <summary>
                Returns the position where the hero died for respawn or tracking purposes. Returns
                the recorded death position if killed by another hero, otherwise returns current
                position.
            </summary>
            <returns>The world position where death occurred</returns>
        </member>
        <member name="M:TestVanDammeAnim.YouKilledMe(Unit)">
            <summary>
                Called when this hero kills another unit. Virtual method intended for override to
                handle kill-specific behavior.
            </summary>
            <param name="unit">The unit that was killed</param>
        </member>
        <!-- Character State & Effects Properties -->
        <member name="P:TestVanDammeAnim.IsDucking">
            <summary>
                Gets a value indicating whether the character is currently in a ducking or crouching
                state.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.IsFrozen">
            <summary>
                Gets a value indicating whether the character is currently frozen by freeze effects.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.IsParachuteActive">
            <summary>
                Gets or sets a value indicating whether the parachute is currently active. Setting
                this property manages parachute GameObject visibility, physics effects, and landing
                invulnerability.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.IsPerformanceEnhanced">
            <summary>
                Gets a value indicating whether performance enhancement effects are currently
                active. This base implementation always returns false.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.WillReviveAlready">
            <summary>
                Gets a value indicating whether this unit will be automatically revived. This base
                implementation always returns false.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.counter">
            <summary>
                Gets or sets the animation frame timing counter. This counter accumulates delta time
                and triggers the next animation frame when it exceeds the frameRate threshold
                (0.0334 seconds).
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.impaledByTransform">
            <summary>
                Gets or sets the Transform that is currently impaling this unit. Setting this
                property also updates the related Impaler component reference.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.invulnerableTime">
            <summary>
                Gets or sets the remaining invulnerability duration in seconds. When greater than
                zero, the character cannot take damage.
            </summary>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:TestVanDammeAnim.HidingPlayer">
            <summary>
                Tracks whether the player character is currently hidden/disabled. Set to true in
                HideAndDisableCharacter for cutscenes and transitions. Character becomes
                invulnerable while hidden and sprites/renderers are disabled accordingly.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ImpaledByTransform">
            <summary>
                Private backing field for the impaledByTransform property. Stores the Transform of
                the object that is currently impaling this character.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.avatarAngryTime">
            <summary>
                Unused in base class. Reserved for BroLee implementation to control avatar/clone
                anger state in derived classes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.avatarGunFireTime">
            <summary>
                Unused in base class. Reserved for BroLee implementation to control avatar/clone
                firing timing in derived classes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.blindCounter">
            <summary>
                Counter for blind effect intervals. Incremented while blinded and triggers visual
                effects every 0.1 seconds. Reset when entering stun state. Creates periodic screen
                flash effects to indicate blindness status.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.bloodCountAmount">
            <summary>
                Number of blood particles to spawn on death. Default value of 80. Used in particle
                creation (divided by 4) and SprayBlood calls to control visual gore intensity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.bloodTime">
            <summary>
                Current blood effect timer. Decremented by 0.0667 per update. When positive, creates
                blood particles using character's bloodColor property.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.bloodTimeOut">
            <summary>
                Total duration limit for blood effects. Not directly used in visible base
                implementation but likely controls maximum blood effect duration.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canBeCoveredInAcid">
            <summary>
                Determines if this unit can be affected by acid coverage effects (default true).
                When false, prevents acid visual effects and damage over time. Checked before
                applying acid materials and status effects. Some boss units may disable this.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canBeStrungUp">
            <summary>
                Determines if this unit can be hung or strung up by certain traps or abilities.
                Currently not actively used in the codebase. May have been intended for trap
                mechanics or special death states where units could be suspended.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canDuck">
            <summary>
                Determines if the character is allowed to duck. Default is true. Checked in
                StartDucking method and movement collision logic to enable/disable ducking ability.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canUnFreeze">
            <summary>
                Determines if the frozen status can expire naturally over time. When true,
                frozenTime decrements each frame allowing automatic thawing. When false, unit
                remains frozen indefinitely until explicitly unfrozen by external effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.controllingProjectile">
            <summary>
                Unused in base class. Used by specific characters (BroDredd, BronnarJensen,
                BroGummer) to indicate when character is remotely controlling a projectile.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.controllingProjectileDelay">
            <summary>
                Unused in base class. Intended for timing mechanics to prevent immediate re-control
                after releasing a projectile.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dancingFrames">
            <summary>
                Number of animation frames in the dancing sequence. Default value of 12 frames
                creates the complete dance animation cycle. Used with frame modulo calculation for
                smooth looping dance animation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dancingFramesSheetPosition">
            <summary>
                Starting position on the sprite sheet for dancing animation frames. Default
                Vector2Int(15, 14) points to row 15, column 14. The X coordinate is combined with
                current frame modulo for animation progression.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dancingTime">
            <summary>
                Duration in seconds remaining for dance effect. Decremented each frame alongside
                stunTime. Character dances only when both stunTime and dancingTime are greater than
                zero. Set by Dance() method for forced dancing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.deadHeadHeight">
            <summary>
                Character's head height when dead in units. Default value of 10. Set in
                ConstrainToCeiling when actionState is Dead. Ensures dead bodies have appropriate
                collision boundaries.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.deadWaistHeight">
            <summary>
                Character's waist height when dead in units. Default value of 5. Lower than
                standing/ducking heights to reflect prone dead position.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.deathSoundVolume">
            <summary>
                Volume multiplier for death sound effects. Default value of 0.7. Applied at various
                levels (50% or 100%) to control death sound loudness.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.doRollOnLand">
            <summary>
                Enables rolling animation when landing from significant falls. When true, character
                performs a roll if landing with high downward velocity (yI &lt; -300). The roll
                lasts 0.133 seconds and prevents other actions during that time. Provides smooth
                landing from high falls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ducking">
            <summary>
                Tracks if the character is in a ducking/crouching state. Affects hitbox dimensions,
                prevents wall climbing, modifies movement speed, and changes animation frames when
                useDuckingFrames is true.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.duckingHeadHeight">
            <summary>
                Character's head height when ducking in units. Default value of 13. Set in
                StartDucking method and used to adjust collision detection height when crouched.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.duckingToeHeight">
            <summary>
                Character's toe height when ducking in units. Default value of 5. Slightly higher
                than standing (5 vs 4), possibly representing lifted feet when crouching.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.duckingWaistHeight">
            <summary>
                Character's waist height when ducking in units. Default value of 6. Set in
                StartDucking method to reflect crouched position.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.firstFrame">
            <summary>
                Generic first-frame flag common across many game objects. Initialized to true but
                not specifically used in TestVanDammeAnim implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.frozenTime">
            <summary>
                Duration in seconds remaining for the freeze effect. When greater than zero,
                character is frozen solid with blue tint shader. Prevents all movement, modifies
                damage behavior, and affects death mechanics. Decremented only when canUnFreeze is
                true.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.halo">
            <summary>
                Reference to a BroHalo visual effect component. Displays an angel halo above the
                character during certain states, particularly when marked for resurrection
                (willComeBackToLife). Provides visual feedback for special character states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.idleTime">
            <summary>
                Tracks seconds of player inactivity. Incremented when no input is received, reset on
                any input. Triggers AFK bubble display after threshold and enables other players to
                kick idle players after extended inactivity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.immuneToOutOfBounds">
            <summary>
                When true, prevents death from falling out of map bounds. Checked before applying
                out of bounds damage. Allows certain heroes or special states to survive falling off
                the map edges.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaleXOffset">
            <summary>
                Horizontal offset when character is impaled. Field exists but usage not found in
                current implementation. Likely provides visual offset for impaled state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaleYOffset">
            <summary>
                Vertical offset for positioning when impaled by an object. Used in GetParentedToPos
                to calculate the Y position relative to the impaling transform.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledBy">
            <summary>
                Reference to the Impaler component that has impaled this character. Used to evaluate
                if impalement should continue and for damage calculations. Cleared when impalement
                ends.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledCounter">
            <summary>
                Timer or counter for impalement state. Field exists but usage not found in current
                implementation. Related to impalement mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledDamage">
            <summary>
                Stores damage value to apply when unit is unimpaled. Set during Impale method and
                applied as damage in Unimpale when unit is released from impalement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledDirection">
            <summary>
                Direction of impalement (-1 or 1) based on impact velocity. Determines position
                constraints and sets minor velocity (xI = -0.01f * impaledDirection) during
                impalement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledLocalPos">
            <summary>
                Local position relative to impaling object. Field exists but is never used in
                current implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledPosition">
            <summary>
                World position where unit was impaled. Constrains movement to ±3 units from this
                point while impaled to prevent excessive movement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.isParachuteActive">
            <summary>
                Tracks whether the parachute is currently deployed and affecting physics. When true,
                applies air resistance and modified gravity. Set when parachute deploys during
                falls, cleared on landing or parachute destruction.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.isSkinnedMook">
            <summary>
                Flag indicating if this unit is a skinned mook enemy type. Public field but no usage
                found in TestVanDammeAnim base class.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastDamageType">
            <summary>
                Stores the type of damage last received by the character. Default is
                DamageType.None. Used for damage-specific death effects and responses, particularly
                explosion damage checks.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastHitSoundTime">
            <summary>
                Timestamp of when hurt sound was last played. Prevents sound spam with 0.1 second
                cooldown between hurt sounds. Updated when hurt sound plays.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meltDuration">
            <summary>
                Controls how long the acid melting death effect lasts in seconds. Default value of
                0.7 seconds is randomized by ±0.3 seconds in Awake for visual variety.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parachute">
            <summary>
                Reference to the Parachute component attached to this unit. Created when falling
                from sufficient height, destroyed on landing or damage. Provides visual parachute
                model and modifies falling physics when active.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parachuteDelay">
            <summary>
                Countdown timer preventing immediate parachute deployment after certain actions.
                Decremented each frame when greater than zero. Ensures parachute doesn't deploy
                during attacks or immediately after jumping, requiring actual falling before
                activation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pitchShiftAmount">
            <summary>
                Pitch modifier added to all character sound effects. Allows voice pitch variation
                between different characters. Applied to special, throw, hurt, and death sounds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pushingTime">
            <summary>
                Timer for push animation duration. Set to 0.06 seconds when block pushing begins and
                decrements each frame. Controls when to display pushing animation frames.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.recallCounter">
            <summary>
                Timer for the recall fade-out effect, ranging from 0 to 1. Controls sprite
                transparency (1 - recallCounter) during despawn. Character is destroyed when counter
                exceeds 1.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.recalling">
            <summary>
                Indicates if the character is being recalled/despawned with a fade-out effect. When
                true, character fades out over 1 second before being destroyed.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.reducedLife">
            <summary>
                Tracks if player has lost a life but hasn't respawned yet. Set true when player dies
                and reset on revival. Prevents multiple life deductions for a single death.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.rollingFrames">
            <summary>
                Current frame of the rolling animation sequence. Incremented based on time
                progression during rolls. Used to display the appropriate sprite frame from the
                rolling animation set on the sprite sheet.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.rollingTime">
            <summary>
                Duration remaining for the rolling animation after landing from a high fall. Set to
                0.133 seconds when landing with high velocity (yI &lt; -300) if doRollOnLand is
                true. Prevents other actions during the roll animation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.showGestureTimer">
            <summary>
                Timer controlling gesture animation display duration. Incremented while gesture is
                active and reset when gesture ends. Manages the timing of victory poses and other
                character gestures.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.spurtCount">
            <summary>
                Tracks number of blood spurts created for artery effects. Limited to 5 spurts
                maximum. Used with impaledCounter for timing blood effect intervals.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.standingToeHeight">
            <summary>
                Character's toe height when standing in units. Default value of 4. Set in
                StopDucking method as the normal foot collision height.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.standingWaistHeight">
            <summary>
                Character's waist height when standing in units. Default value of 10. Set in
                StopDucking method as the normal waist collision height.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.stunTime">
            <summary>
                Duration in seconds remaining for the stun effect. Decremented each frame when
                greater than zero. During stun, the character cannot perform actions. Combined with
                dancingTime to trigger dancing animations. Set by various stun methods and can be
                reduced for heroes in DeathMatch mode.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.stunVocalDelay">
            <summary>
                Delay in seconds before playing stun voice lines. Calculated when stunned with
                random value between 0.2 and 0.7 seconds based on stun duration. Prevents audio spam
                from rapid stun effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.teaBagCheatEnabled">
            <summary>
                Static flag that enables a cheat/easter egg for tea-bagging defeated enemies.
                Activated by entering a specific code in the main menu. When enabled, allows players
                to deal "SelfEsteem" damage by ducking near dead units.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.timeBroBoostTime">
            <summary>
                Duration of time-based speed boost effect in seconds, likely from Time Bro's special
                ability. Counts down each frame and affects delta time calculations independently
                from high-five boosts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.toeHeight">
            <summary>
                Current toe/foot height for low collision detection. Default value of 4. Used in
                raycasts for detecting ground-level obstacles. Dynamically changes based on stance.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.waistHeight">
            <summary>
                Current waist height used for collision detection. Default value of 10. Dynamically
                changes based on stance (standing/ducking/dead). Used extensively in raycasts and
                obstacle detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.xBoxControlled">
            <summary>
                Deprecated field that is never used in the codebase. May have been intended for Xbox
                controller detection.
            </summary>
        </member>
        <!-- Input & Control Methods -->
        <member name="M:TestVanDammeAnim.AnyInput">
            <summary>
                Checks if any input button is currently pressed (movement, fire, special, jump, or
                high-five).
            </summary>
            <returns>True if any input is detected, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanUseSwitch">
            <summary>
                Indicates whether this character can activate switches. Default implementation
                returns true; subclasses can override to add conditions.
            </summary>
            <returns>True if the character can use switches, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CheckDashing">
            <summary>
                Manages dash state based on player input and sprint status. For local players,
                detects dash button presses and releases. For remote players, creates visual and
                audio effects when dash state changes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckInput">
            <summary>
                Main input processing method that handles all player and AI input. Stores previous
                input states, handles zombie AI input, processes player controller input, manages
                remote control of vehicles/projectiles, handles idle timeout and kick detection, and
                integrates special abilities and gestures.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckTriggerActionInput">
            <summary>
                Processes input commands from trigger actions for scripted sequences. Handles
                movement commands with pathfinding, processes AI commands, tracks command
                completion, and integrates with PathAgent for navigation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckWhetherShouldClearInput">
            <summary>
                Virtual method for input clearing logic. Empty in base class, designed for override
                in derived classes to implement custom input clearing conditions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ClearAllInput">
            <summary>
                Performs a comprehensive reset of all input states. Clears current and previous
                states for movement, jumping, fire, special, high-five, and taunt buttons.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ClearFireInput">
            <summary>
                Resets all fire-related input states including fire, special abilities, and
                high-five inputs. Used to clear attack inputs when needed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.DebugShowInput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Debug method to display current input state. Shows formatted string with L/R/U/D/J/C
                states when debug mode is enabled.
            </summary>
            <param name="left">Left input state</param>
            <param name="right">Right input state</param>
            <param name="up">Up input state</param>
            <param name="down">Down input state</param>
            <param name="jump">Jump input state</param>
            <param name="climb">Climb input state</param>
        </member>
        <member name="M:TestVanDammeAnim.GetEnemyMovement">
            <summary>
                Retrieves AI input for enemy-controlled characters. Calls enemyAI or EnemyAI
                component for input and passes multiple input references for various actions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.GetSprintValue">
            <summary>
                Returns the current sprint state of the character.
            </summary>
            <returns>True if the character is sprinting, false otherwise.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsPressingDown">
            <summary>
                Returns whether the down input is currently being pressed.
            </summary>
            <returns>True if the down button is currently held, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsPressingLeftOrRight">
            <summary>
                Checks if the player is pressing either left or right directional input. Used for
                movement detection and control state queries.
            </summary>
            <returns>True if left or right input is active</returns>
        </member>
        <member name="M:TestVanDammeAnim.MustIgnoreHighFiveMeleePress">
            <summary>
                Determines if high-five/melee input should be ignored based on current state.
                Returns true if holding a grenade/mook or using any special abilities.
            </summary>
            <returns>True if the input should be ignored, false if it can be processed</returns>
        </member>
        <member name="M:TestVanDammeAnim.PressDashButton">
            <summary>
                Initiates dashing when the dash button is pressed, but only if the character is not
                already dashing and is moving left or right.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PressHighFiveMelee(System.Boolean)">
            <summary>
                Handles the high-five/melee button press with complex interaction priority logic.
                Checks for nearby grenades, mooks, switches, teleport doors, citizens, and other
                players. Prioritizes interactions based on game mode, proximity, and current state.
            </summary>
            <param name="forceHighFive">Forces a high-five attempt regardless of other potential interactions</param>
        </member>
        <member name="M:TestVanDammeAnim.PressSpecial">
            <summary>
                Initiates special ability use when the special button is pressed. Only activates if
                the character is not covered in acid and not performing a melee attack.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PressSpecial2">
            <summary>
                Placeholder method for secondary special ability activation. Currently only resets
                the animation frame to 0.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseDashButton">
            <summary>
                Stops dashing when the dash button is released, calling StopDashing to handle dash
                end logic.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseFire">
            <summary>
                Virtual method called when the fire button is released. Empty implementation for
                subclasses to add weapon-specific release behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseSpecial">
            <summary>
                Virtual method called when the special ability button is released. Empty
                implementation for subclasses to override.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunForcedInput">
            <summary>
                Processes forced input timers that override player control. Manages hold timers for
                up, left, right directions and forces specific inputs while timers are active.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopLeftRightInputFromHanging">
            <summary>
                Clears horizontal movement input when hanging. Prevents left/right movement while
                character is in hanging state.
            </summary>
        </member>
        <!-- Input & Control Properties -->
        <member name="P:TestVanDammeAnim.InputBits">
            <summary>
                Gets or sets the packed input states for network synchronization. This property
                packs 11 boolean input flags into a single short value for efficient network
                transmission.
            </summary>
        </member>
        <!-- Input & Control Fields -->
        <member name="F:TestVanDammeAnim.airDashJumpGrace">
            <summary>
                Grace period timer allowing jumps shortly after air dashing. Provides a brief window
                where jump input is accepted even if not technically grounded. Enables fluid air
                dash to jump combos for advanced movement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.blockMovementForGesture">
            <summary>
                Prevents movement input during gesture animations. Set to true when starting
                gestures and blocks movement processing until gesture completes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.buttonGesture">
            <summary>
                Current frame's gesture button input state from player controls. Used with
                wasButtonGesture for edge detection to trigger gesture-based actions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.buttonHighFive">
            <summary>
                Current frame's high-five button state. True when high-five/interaction button is
                pressed. Triggers cooperative high-five actions when near other players. Also used
                for general player interactions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.buttonJump">
            <summary>
                Current frame's jump button state. True when jump button is pressed, false when
                released. Primary input for jumping, wall jumping, and various jump-based mechanics.
                Used with wasButtonJump for edge detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.buttonTaunt">
            <summary>
                Current frame's taunt button state. True when taunt/gesture button is pressed.
                Allows players to perform character-specific taunts, gestures, or victory poses.
                Adds personality to gameplay.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canFireDelay">
            <summary>
                Cooldown timer preventing immediate firing after certain actions. Set to 0.3 seconds
                after detonating remote car and 0.25 seconds after creating one. Blocks fire and
                special inputs while positive to prevent accidental double-actions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.climbButton">
            <summary>
                Climbing input state from AI controls. Used by enemy AI to control climbing behavior
                on ladders and walls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dashButton">
            <summary>
                Current frame's dedicated dash button state. Alternative to double-tap dashing,
                provides direct dash control. When pressed with direction, initiates ground or air
                dash based on character state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.down">
            <summary>
                Current frame's down directional input state. True when down is pressed. Used for
                ducking, dropping through platforms, aiming downward, and sliding mechanics.
                Essential for defensive and movement options.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.fire">
            <summary>
                Current frame's state of the fire/shoot button input. Controls shooting mechanics,
                gun animations, and remote projectile control. Prevented during wall climbing,
                ladder use, or pushing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdDownTime">
            <summary>
                Timer for forcing downward input. Field exists but no active usage found in current
                implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdLeftTime">
            <summary>
                Timer for forcing leftward movement. Set to 0.3 seconds in certain conditions and
                forces left input while active. Decrements each frame when greater than 0.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdRightTime">
            <summary>
                Timer for forcing rightward input. Field exists but no active usage found in current
                implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdStillTime">
            <summary>
                Timer that prevents or limits movement when active. Checked in multiple movement
                conditions and prevents certain actions. Decrements each frame when greater than 0.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdUpTime">
            <summary>
                Timer for forcing upward input. Field exists but no active usage found in current
                implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastButtonJumpTime">
            <summary>
                Timestamp of the most recent jump button press. Used for jump buffering system - if
                player presses jump slightly before landing, jump executes upon touchdown. Creates
                more responsive controls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.left">
            <summary>
                Current frame's left directional input state. True when left is pressed. Primary
                horizontal movement input for moving left. Combined with other inputs for dashing,
                wall climbing, and special moves.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pressedJumpInAirSoJumpIfTouchGroundGrace">
            <summary>
                Grace period timer for jump input buffering while airborne. When jump is pressed in
                air, this timer counts down. If player lands while timer is positive, automatic jump
                occurs. Standard platformer quality-of-life feature.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.right">
            <summary>
                Current frame's right directional input state. True when right is pressed. Primary
                horizontal movement input for moving right. Combined with other inputs for dashing,
                wall climbing, and special moves.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.special">
            <summary>
                Current frame's state of the special ability button input. Cleared when
                acid-covered, in melee, dead, or controlled by AI. Used to trigger special
                abilities.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.specialDown">
            <summary>
                Tracks if special button is currently pressed. Reset during initialization and
                various game states. Part of input state management system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.sprint">
            <summary>
                Current frame's sprint modifier state. True when sprint/run button is held. Modifies
                movement speed when combined with directional inputs. May affect other actions like
                longer jumps or faster climbing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.up">
            <summary>
                Current frame's up directional input state. True when up is pressed on D-pad, analog
                stick, or keyboard. Used for aiming upward, climbing ladders/walls, entering doors,
                and menu navigation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasButtonGesture">
            <summary>
                Previous frame's gesture button state. Used for edge detection to determine when the
                gesture button is first pressed.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasButtonHighFive">
            <summary>
                Previous frame's high-five button state. Enables edge detection for high-five
                activation, ensuring actions trigger on button press rather than hold. Prevents
                continuous high-five attempts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasButtonJump">
            <summary>
                Previous frame's jump button state. Used with buttonJump to detect button press
                (false to true) and release (true to false) events. Essential for preventing jump
                spam and enabling precise jump control.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasButtonTaunt">
            <summary>
                Previous frame's taunt button state. Used for edge detection to trigger taunts on
                button press. Prevents continuous taunt animation while button is held, ensuring
                single taunt per press.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasClimbButton">
            <summary>
                Previous frame's climb button state from AI controls. Used for edge detection of AI
                climbing inputs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasDown">
            <summary>
                Previous frame's down directional state. Used for detecting new down presses for
                actions like initiating duck, platform drops, or slides. Enables proper state
                transitions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasFire">
            <summary>
                Previous frame's state of the fire button, used for edge detection. Triggers
                StartFiring() on press and StopFiring() on release, also used in death match
                invulnerability checks.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasLeft">
            <summary>
                Previous frame's left directional state. Critical for double-tap dash detection -
                tracks time between taps. Also used for detecting direction changes and state
                transitions in movement system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasRight">
            <summary>
                Previous frame's right directional state. Critical for double-tap dash detection -
                tracks time between taps. Also used for detecting direction changes and state
                transitions in movement system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasSpecial">
            <summary>
                Previous frame's state of the special button, used for edge detection. Compared with
                current special state to detect new button presses vs held inputs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasSpecialDown">
            <summary>
                Previous frame's special button state. Used for edge detection to identify button
                press and release events. Companion to specialDown for input tracking.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasSprint">
            <summary>
                Previous frame's sprint modifier state. Enables detection of sprint press/release
                for smooth speed transitions. Helps manage acceleration and deceleration in movement
                system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasUp">
            <summary>
                Previous frame's up directional state. Enables detection of up press/release events.
                Used for initiating climbs, detecting input combinations, and preventing continuous
                up-triggered actions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasXBoxFireDown">
            <summary>
                Previous frame's Xbox controller fire button state. Field declared but no usage
                found in current implementation. Likely reserved for Xbox-specific input handling.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasdashButton">
            <summary>
                Previous frame's dash button state. Used for edge detection to trigger single dash
                per button press. Prevents continuous dashing while button is held, ensuring
                controlled dash execution.
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:TestVanDammeAnim.AssignPushingTime">
            <summary>
                Sets a brief timer when pushing blocks and cancels any rolling animation. Called
                when the character begins pushing a moveable block.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CanCheckClimbAlongCeiling">
            <summary>
                Checks if ceiling climbing mechanics should be evaluated by detecting nearby hanging
                points. Used to determine if the character can transition to ceiling hanging state.
            </summary>
            <returns>True if ceiling climbing should be checked (hanging points detected and not ducking/pressing down), false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanDoRollOnLand">
            <summary>
                Determines whether the character should perform a roll when landing based on
                downward velocity.
            </summary>
            <returns>True if downward velocity exceeds -350 and rolling is allowed; otherwise, false.</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanTouchCeiling">
            <summary>
                Determines whether the character can interact with ceilings.
            </summary>
            <returns>True if the character can touch ceilings; otherwise, false.</returns>
        </member>
        <member name="M:TestVanDammeAnim.CheckClimbAlongCeiling">
            <summary>
                Handles ceiling climbing/hanging mechanics when transitioning from wall constraints.
                Performs upward raycasts to find ceiling attachment points and initiates hanging
                state when appropriate conditions are met.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckForCheckPoints">
            <summary>
                Checks if character is touching checkpoints at current position or slightly above
                ground level. Calls ReachedCheckPoint if checkpoint contact is detected.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckForQuicksand">
            <summary>
                Manages quicksand detection and transition effects. Tracks quicksand state changes,
                creates appropriate splash and particle effects on entry/exit, plays
                surface-specific sounds, and disables blast velocity while in quicksand.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckForQuicksandDeath">
            <summary>
                Monitors for lethal quicksand submersion and applies crush damage after 2-second
                delay. Checks if character is deep in quicksand (16 units below surface) and deals
                fatal damage if choke counter exceeds threshold.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckForTraps(System.Single)">
            <summary>
                Comprehensive trap detection system. Checks for acid pools, barbed wire, spikes, and
                mines. Handles impalement, damage, and movement constraints from environmental
                hazards.
            </summary>
            <param name="yIT">Y velocity reference that may be modified by trap interactions</param>
        </member>
        <member name="M:TestVanDammeAnim.CheckRescues">
            <summary>
                Checks for nearby heroes to rescue and grants rescue bonuses. Provides
                invulnerability, shows start bubble, and adds brutality grace period.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainToCeiling(System.Single@)">
            <summary>
                Handles collision detection with ceilings and manages chimney flip mechanics when
                the character hits walls and ceilings simultaneously.
            </summary>
            <param name="yIT">Reference to the vertical movement delta that will be constrained.</param>
            <returns>True if a ceiling constraint was applied; otherwise, false.</returns>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainToFloor(System.Single@)">
            <summary>
                Constrains the character's vertical movement to prevent falling through the floor,
                handling landing transitions and ground snapping.
            </summary>
            <param name="yIT">Reference to the vertical movement delta that will be constrained.</param>
            <returns>True if the character was constrained to the floor; otherwise, false.</returns>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainToFragileBarriers(System.Single@,System.Single)">
            <summary>
                Handles collision and destruction of fragile barriers like doors and glass. Sends
                damage messages to break barriers on contact, creates visual effects at impact
                points, and handles special door opening mechanics for living players.
            </summary>
            <param name="xIT">Reference to horizontal velocity, may be modified if constrained by barrier</param>
            <param name="radius">The collision detection radius</param>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainToMookBarriers(System.Single@,System.Single)">
            <summary>
                Prevents movement through enemy barriers while allowing friendly units to pass. Uses
                player numbers to determine if a barrier should block movement.
            </summary>
            <param name="xIT">Reference to horizontal velocity, set to 0 if blocked by enemy barrier</param>
            <param name="radius">The collision detection radius</param>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainToWalls(System.Single@,System.Single@)">
            <summary>
                Complex wall collision detection and constraint system that prevents the character
                from passing through walls and enables wall climbing. Performs multiple raycasts at
                different heights, handles wall climbing initiation, manages wall drag mechanics,
                and integrates with various movement systems including ledge grabbing and block
                pushing.
            </summary>
            <param name="yIT">Reference to vertical velocity, modified if wall climbing or dragging occurs</param>
            <param name="xIT">Reference to horizontal velocity, modified if movement is constrained by walls</param>
            <returns>True if the character was constrained by a wall, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.HitCeiling(UnityEngine.RaycastHit)">
            <summary>
                Handles the character's response when hitting a ceiling, including position
                adjustment, sound effects, and potential transition to hanging state.
            </summary>
            <param name="ceilingHit">The raycast hit information for the ceiling collision.</param>
        </member>
        <member name="M:TestVanDammeAnim.IsAboveLadder">
            <summary>
                Checks if the character is positioned above a ladder by using Physics.OverlapSphere
                with a -1 unit vertical offset. Used for ladder grab detection from above.
            </summary>
            <returns>True if positioned above a ladder</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsInStealthMode">
            <summary>
                Checks if the unit is in stealth mode by being crouched in grass. Requires the unit
                to be alive, crouching, player-controlled, standing still, and within grass.
            </summary>
            <returns>True if in stealth mode</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsNearbyLadder(System.Single,System.Single)">
            <summary>
                Checks if a ladder is nearby at the specified offset position. Used for
                proximity-based ladder detection in various movement states.
            </summary>
            <param name="xOffset">Horizontal offset from character position</param>
            <param name="yOffset">Vertical offset from character position</param>
            <returns>True if a ladder is detected at the offset position</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsOverFinish(System.Single@)">
            <summary>
                Comprehensive victory zone detection that checks if the character has reached the
                level finish area. Handles helicopter attachment, portal exits, level completion
                triggers, and applies appropriate invulnerability and state changes for level
                completion.
            </summary>
            <param name="ladderXPos">Reference to ladder X position, modified if attaching to helicopter</param>
            <returns>True if the character is in the finish/victory zone</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsOverLadder(System.Single@)">
            <summary>
                Checks if the character is positioned over a ladder. Resets jump-related timers and
                manages ladder block notifications when on a ladder.
            </summary>
            <param name="ladderXPos">Outputs the X position of the detected ladder</param>
            <returns>True if positioned over a ladder</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsOverLadder(System.Single,System.Single@)">
            <summary>
                Checks if the character is over a ladder with a horizontal offset. Handles ladder
                detection, jump timer resets, double jump management, and ladder block entry/exit
                notifications. Tracks current and previous ladder blocks for state management.
            </summary>
            <param name="xOffset">Horizontal offset for ladder detection</param>
            <param name="ladderXPos">Outputs the X position of the detected ladder</param>
            <returns>True if a ladder is detected at the offset position</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsSubmergedInPool">
            <summary>
                Extended submersion detection that treats quicksand and oil as equivalent to pool
                submersion. Overrides base class functionality by combining base pool detection with
                quicksand and oil state checks using logical OR operation.
            </summary>
            <returns>True if character is submerged in pool, quicksand, or oil; false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsSurroundedByBarbedWire">
            <summary>
                Checks if character is surrounded by barbed wire that can cause damage during
                movement.
            </summary>
            <returns>True if surrounded by damaging barbed wire, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsWithinGrass">
            <summary>
                Checks if the unit is inside grass or substance on both sides. Tests positions 5
                units to the left and right of the character.
            </summary>
            <returns>True if grass is detected on both sides</returns>
        </member>
        <member name="M:TestVanDammeAnim.Land">
            <summary>
                Comprehensive landing handler that processes all aspects of ground contact including
                state resets, damage calculation, visual effects, platform interactions, and sound
                effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.LandInOil">
            <summary>
                Initializes oil effect materials and applies them to both character and gun sprites.
                Creates oily materials using "Unlit/Depth Cutout With Image - Oily" shader with lazy
                instantiation pattern. Sets up UV2 coordinates and configures sprite size vectors
                for proper oil effect rendering.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.LeaveOil">
            <summary>
                Placeholder method for leaving oil areas. Actual oil cleanup logic is handled by the
                continuous RunHasLeftOilTest method which manages gradual oil level decay and
                material restoration.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.LedgeGrapple(System.Boolean,System.Boolean,System.Single,System.Single)">
            <summary>
                Handles ledge grabbing mechanics when the character is near an edge while jumping or
                falling. Initiates ledge grab state when conditions are met and adjusts character
                position for proper alignment.
            </summary>
            <param name="left">Whether the character is moving left</param>
            <param name="right">Whether the character is moving right</param>
            <param name="radius">The horizontal detection radius for ledge detection</param>
            <param name="heightOpenOffset">The vertical offset for ledge height calculation</param>
        </member>
        <member name="M:TestVanDammeAnim.PickupPickupables">
            <summary>
                Attracts nearby pickupable items when character is alive. Uses attraction radius to
                automatically collect items within range.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PushGrassAway">
            <summary>
                Pushes grass away from the unit and plays appropriate environmental sounds. Performs
                raycasts to find ground blocks, applies forces to jiggle doodads. Plays different
                sounds for grass versus blood pools based on doodad type.
            </summary>
            <returns>True if any grass was pushed away</returns>
        </member>
        <member name="M:TestVanDammeAnim.ReachedCheckPoint">
            <summary>
                Virtual method called when character reaches a checkpoint. Empty implementation that
                can be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RollOnLand">
            <summary>
                Initiates the rolling animation sequence when landing with sufficient velocity,
                setting the character to rolling state for 13 frames.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunBlindStars">
            <summary>
                Creates periodic blind star visual effects around blinded characters. Spawns
                shrapnel stars above character head with randomized positioning.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunClimbingLadder">
            <summary>
                Handles all ladder climbing physics and movement logic, including vertical movement
                based on input, horizontal positioning, and exit conditions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunHasLeftOilTest">
            <summary>
                Manages gradual oil level decay and material transitions when leaving oil areas.
                Decreases oil level over time using deltaTime, updates material opacity properties,
                and handles cleanup by restoring original materials when oil level reaches zero.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunZombieEffects">
            <summary>
                Handles ongoing zombie revival visual effects. Creates periodic zombie passive
                effects with random timing intervals.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StartHanging">
            <summary>
                Initiates the ceiling hanging state if the character is not ducking.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopHanging">
            <summary>
                Transitions the character from hanging state to jumping state.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopRolling">
            <summary>
                Ends the rolling state by setting the character to idle or running based on current
                input.
            </summary>
        </member>
        <!-- Environmental Interaction Properties -->
        <member name="P:TestVanDammeAnim.WallClimbing">
            <summary>
                Gets a value indicating whether the character is currently climbing a wall.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.WallDrag">
            <summary>
                Gets or sets a value indicating whether the character is sliding down a wall.
                Setting this property manages wall drag audio effects, knife climbing state, and
                parachute deactivation.
            </summary>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:TestVanDammeAnim.armUpInAnticipationWallClimb">
            <summary>
                Controls arm position during wall climb anticipation. When true, displays the
                character with arm raised (frame offset +1) in preparation for wall climbing.
                Provides visual feedback that the character is ready to climb.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.barrierLayer">
            <summary>
                LayerMask defining mobile barriers for collision. Set to "MobileBarriers" layer.
                Used for specialized mobile obstacle detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.bossBlockPieceCurrentlyStandingOn">
            <summary>
                Special reference for boss block platforms. Set via GetComponent when landing on
                boss blocks. Calls StandingOnBlock each frame and LandOn when landing with velocity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.breakDoorsOpen">
            <summary>
                Determines damage type when hitting doors. When true, sends DamageType.Crush to
                doors. When false, sends DamageType.Melee. Modifies door destruction behavior on
                collision.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canChimneyFlip">
            <summary>
                Enables chimney flip ability - jumping between two close walls. When true, character
                can perform wall jumps in narrow vertical spaces. Provides advanced movement option
                for certain characters. Currently not actively used in the base implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canLedgeGrapple">
            <summary>
                Determines if this character can grab and hang from ledges. Default true allows
                standard ledge grappling behavior. Set to false for characters that should fall
                instead of grabbing ledges. Checked during collision detection with ledges.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.currentLadderBlock">
            <summary>
                Reference to the ladder block character is currently on. Used to track state
                transitions between ladders and calls OnBroExit when leaving a ladder.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.fragileLayer">
            <summary>
                LayerMask defining fragile/destructible objects. Set to "DirtyHippie" layer.
                Combined with ground and platform layers for composite ground detection including
                destructible terrain.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.groundLayer">
            <summary>
                LayerMask defining which layers are considered solid ground for collision detection.
                Includes "Ground", "LargeObjects", and "IndestructibleGround" layers. Primary layer
                for floor, ceiling, and wall collision detection throughout the movement system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.groundTransform">
            <summary>
                Reference to current ground or platform standing on. Set in AssignGround when
                landing and used as part of parenting system for moving platforms. Reset to null in
                ShiftUnitWithParent.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.groundTransformLocalPos">
            <summary>
                Local position on ground or platform. Set in AssignGround with different calculation
                for Tank vs normal ground. Returned by GetParentedToPos when grounded.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.isInOil">
            <summary>
                Whether character is covered in oil. Set by LandInOil method and applies visual oil
                shader effect. Automatically clears when oilLevel reaches 0.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.isInQuicksand">
            <summary>
                Whether character is currently in quicksand. Applies 0.4x speed multiplier, 3x
                slower animation rate, prevents air dashing, and can cause death if submerged for 2+
                seconds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.knifeClimbStabHeight">
            <summary>
                Vertical distance in units between knife stab animations during wall climbing.
                Default value of 18 units creates a rhythmic stabbing pattern as the character
                climbs. Works with lastKnifeClimbStabY to trigger stab effects at regular intervals.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ladderClimbingTransitionFrames">
            <summary>
                Counter for ladder mounting/dismounting transition animation. Decrements each frame
                while playing transition animation. When it reaches 0, normal ladder climbing
                begins. Provides smooth visual transition onto ladders.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ladderLayer">
            <summary>
                LayerMask defining climbable ladder objects. Set to "Ladders" layer. Core to
                climbing mechanics with extensive use in ladder detection methods like IsOverLadder
                and FindNearbyLadder.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ladderX">
            <summary>
                Stores X position of current ladder for alignment. Set by IsOverLadder methods when
                ladder is detected. Used to align character to ladder position and passed to
                AttachToHelicopter for rope ladders.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastKnifeClimbStabY">
            <summary>
                Stores the Y position of the last knife stab during wall climbing. Used to determine
                when to play the next stab animation and sound effect. Stabs occur every
                knifeClimbStabHeight units of vertical movement to create rhythmic climbing
                feedback.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.newRaycastHit">
            <summary>
                Secondary raycast storage for complex collision checks. Used exclusively in chimney
                flip detection logic, allowing nested raycast checks without overwriting the main
                raycastHit.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.oilLevel">
            <summary>
                Amount of oil coverage on character from 0 to 1. Increases by 0.01 when landing in
                oil and decreases by 1 per second. Controls oil shader intensity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.openDoorsLayer">
            <summary>
                LayerMask defining interactive doors and movable objects. Set to "Movetivate" layer.
                Used for door collision checks at high speed and triggers damage/opening mechanics.
                Excludes parachute objects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.platformLayer">
            <summary>
                LayerMask defining layers that act as platforms (can stand on but pass through from
                below). Set to "Platform" layer. Often combined with groundLayer for comprehensive
                ground detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.prevLadderBlock">
            <summary>
                Tracks previous ladder block for state management. Stores previous ladder before
                updating current and ensures OnBroExit is called on the previous ladder when
                switching. Prevents duplicate exit calls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.quicksandChokeCounter">
            <summary>
                Timer until quicksand kills the character. Initialized to 2 seconds. Reset to 0 when
                entering quicksand and increments while head is submerged. Character dies when
                counter reaches 2.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.raycastHit">
            <summary>
                Primary storage for Physics.Raycast results. Reused throughout for ground detection,
                wall checks, ceiling checks, and damage application. Stores hit point, normal,
                distance, and collider information.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.raycastHitWalls">
            <summary>
                Stores raycast results for wall collision detection. Extensively used in
                ConstrainToWalls for collision detection at multiple heights, ledge grabbing,
                footstep sounds, and wall transform assignment.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.switchesLayer">
            <summary>
                LayerMask likely intended for interactive switches and triggers. Not initialized or
                used in TestVanDammeAnim base implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.victoryLayer">
            <summary>
                LayerMask defining level completion/victory trigger areas. Set to "Finish" layer.
                Used in IsOverFinish method to detect when player reaches level completion zones.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallClimbAnticipation">
            <summary>
                Tracks whether the character is in wall climb anticipation state. When true, the
                character is preparing to climb and may show anticipation animations. Used to
                coordinate the wall climbing animation sequence before actual climbing begins.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasInQuicksand">
            <summary>
                Tracks previous frame's quicksand state for edge detection. Compared with
                isInQuicksand to detect when character enters or exits quicksand.
            </summary>
        </member>
        <!-- Audio System Methods -->
        <member name="M:TestVanDammeAnim.CanLaugh">
            <summary>
                Checks if character can play laughter sounds based on available sound assets.
            </summary>
            <returns>True if laugh sounds are available, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttack2Sound(System.Single)">
            <summary>
                Plays secondary attack sound effect for special combat actions.
            </summary>
            <param name="volume">Volume level for the sound effect (default 0.35)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttack3Sound(System.Single)">
            <summary>
                Plays tertiary attack sound effect for advanced combat actions.
            </summary>
            <param name="volume">Volume level for the sound effect (default 1.0)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttack4Sound(System.Single,System.Single)">
            <summary>
                Plays quaternary attack sound effect with custom volume and pitch settings.
            </summary>
            <param name="volume">Volume level for the sound effect (default 1.0)</param>
            <param name="pitch">Base pitch modifier (default 0.9)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttackSound">
            <summary>
                Plays primary attack sound effect with default volume (0.3).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttackSound(System.Single)">
            <summary>
                Plays primary attack sound effect with specified volume.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttractedSound">
            <summary>
                Plays attraction sound effect when character is attracted to or influenced by
                external forces.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayBassDropShortSound">
            <summary>
                Plays shortened bass drop sound effect with higher volume and 0.3 second cooldown.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayBassDropSoundSound">
            <summary>
                Plays bass drop sound effect for dramatic moments with 0.3 second cooldown.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayBleedSound">
            <summary>
                Plays a bleeding sound effect when the character bleeds. Uses a fixed volume of 0.45
                with no pitch variation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayBurnSound(System.Single)">
            <summary>
                Plays burning/fire damage sound effect with randomized pitch. Lazy loads the sound
                instance on first use and plays from the burn sound array with pitch varying between
                0.6 and 1.0 for variety.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayChestBurstSound(System.Single)">
            <summary>
                Plays alien chest burst sound effect at character position with specified pitch.
            </summary>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayChimneyFlipSound(System.Single)">
            <summary>
                Plays chimney flip sound effect by calling the dash sound method.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayChokeSound">
            <summary>
                Plays choking sound effect with randomized pitch variation for suffocation or
                strangulation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayClimbSound">
            <summary>
                Plays sound effect for general climbing actions (reuses jump sound).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayConfusedSound">
            <summary>
                Plays confused sound effect for disoriented character states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayDashSound(System.Single)">
            <summary>
                Plays dashing movement sound effect with specified volume.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayDeathGargleSound">
            <summary>
                Plays a death gargle sound effect during character death. Uses pitch shift for
                variation at 0.45 volume.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayDeathSound">
            <summary>
                Plays death sound effects with volume adjusted based on sound availability. Reduces
                volume to 50% if no hit sounds are available.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayDecapitateSound">
            <summary>
                Plays a dismemberment sound effect when the character is decapitated. Uses a fixed
                volume of 0.5 with no pitch variation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayDizzieSound(System.Single,System.Single)">
            <summary>
                Plays dizzy/stunned sound effect with pitch randomization in &#xB1;0.05 range plus
                character-specific pitch shift for natural variation.
            </summary>
            <param name="volume">Volume level for the sound effect (default 0.33)</param>
            <param name="pitch">Base pitch value with &#xB1;0.05 random variation applied (default 1.0)</param>
            <returns>AudioSource component playing the sound</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlayExitLadderSound">
            <summary>
                Plays sound effect for exiting a ladder (reuses jump sound).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayFallDamageSound">
            <summary>
                Plays a fall damage impact sound effect. Convenience method that calls the
                overloaded version with 0.4 volume.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayFallDamageSound(System.Single)">
            <summary>
                Plays a fall damage impact sound effect with specified volume. Used when the
                character takes damage from falling.
            </summary>
            <param name="v">Volume for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayFallSound(System.Single)">
            <summary>
                Plays a falling or air movement sound effect. Returns the AudioSource to allow
                external manipulation of the playing sound.
            </summary>
            <param name="v">Volume for the sound effect (default 0.3)</param>
            <returns>The AudioSource playing the fall sound</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlayFizzleSound(System.Single)">
            <summary>
                Plays acid/chemical damage sound effect with slight pitch variation. Lazy loads the
                sound instance on first use and plays from the fizzle sound array with pitch between
                0.95 and 1.05 for subtle variety.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayFlexSound(System.Single)">
            <summary>
                Virtual method for playing flex sound. Empty implementation that can be overridden
                by derived classes.
            </summary>
            <param name="volumne">Volume level for the sound effect (note: parameter name has typo)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayFootStepSound(UnityEngine.AudioClip[],System.Single,System.Single)">
            <summary>
                Core footstep sound playing method with player versus NPC audio optimization.
                Players hear full volume while NPCs play at 50% volume and only when visible on
                screen. Includes footstep delay gating to prevent audio spam.
            </summary>
            <param name="clips">Array of audio clips to randomly select from for footstep sound</param>
            <param name="v">Volume level for the footstep sound</param>
            <param name="p">Pitch level for the footstep sound</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayFreezeScreamSound">
            <summary>
                Plays freeze scream sound effect with randomized pitch variation when character is
                frozen.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayGibSound">
            <summary>
                Plays gibbing sounds with variation based on frozen state. Plays frozen gib sounds
                if the character is frozen, otherwise plays normal death sounds.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayGreetingSound">
            <summary>
                Plays greeting sound effect for character interactions and high-five initiations.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayHighFiveSound">
            <summary>
                Plays high-five celebration sound with 0.3 second cooldown to prevent spam.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayHitSound(System.Single)">
            <summary>
                Plays hit reaction sounds with conditional logic based on health state. If alive and
                hurt sounds are available, plays hurt sound with a 0.1 second cooldown. Otherwise
                plays effort sounds. Scales volume to 0.37 for hurt sounds.
            </summary>
            <param name="v">Base volume for the sound effect (default 0.4)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayHurtSound(System.Single)">
            <summary>
                Directly plays a hurt sound effect when the character takes damage. Updates the last
                hit sound time to enforce cooldown between hurt sounds.
            </summary>
            <param name="v">Volume for the sound effect (default 0.3)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayJumpSound">
            <summary>
                Plays appropriate jumping sound based on current ground surface type. Uses identical
                surface detection logic as landing sounds but with jump-specific audio variants.
                Plays at slightly higher volume (0.65f) compared to landing sounds.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayKnifeClimbSound">
            <summary>
                Plays knife climbing sound effects with automatic variation cycling. Increments
                sound counter and uses modulo operation to cycle through available knife wall
                sounds. Plays at 0.2f volume and 1f pitch with 3D positioning.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayLandSound">
            <summary>
                Plays appropriate landing sound based on current ground surface type. Supports six
                surface types (Dirt, Stone, Metal, Wood, Grass, Slime) with corresponding sound
                arrays. All landing sounds play at 0.6f volume and 1f pitch.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayLaughterSound">
            <summary>
                Plays laughter sound effect with 2-second cooldown to prevent spam. Used for
                character celebration and reactions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayMuffledScreamsSound">
            <summary>
                Plays muffled screams sound effect typically used during alien face hugger attacks.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayPanicSound">
            <summary>
                Plays panic sound effect with randomized pitch variation for distressed character
                states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayPowerUpSound(System.Single)">
            <summary>
                Plays power-up sound effect with specified volume and default pitch.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayPowerUpSound(System.Single,System.Single)">
            <summary>
                Plays power-up sound effect with specified volume and pitch settings.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayPushBlockSound">
            <summary>
                Virtual method for playing block pushing sound. Empty implementation that can be
                overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayResurrectionSound(System.Single)">
            <summary>
                Plays resurrection sound effect with 2-second cooldown when character is revived or
                respawns.
            </summary>
            <param name="volume">Volume level for the sound effect (default 0.3)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayRollLandSound">
            <summary>
                Plays the appropriate landing sound effect when completing a roll, with volume based
                on impact velocity.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecial2Sound(System.Single)">
            <summary>
                Plays special ability 2 sound effect with specified pitch. Default overload that
                calls the volume/pitch variant.
            </summary>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecial2Sound(System.Single,System.Single)">
            <summary>
                Plays special ability 2 sound effect with custom volume and pitch settings.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecial3Sound(System.Single)">
            <summary>
                Plays special ability 3 sound effect with specified volume and default pitch.
            </summary>
            <param name="v">Volume level for the sound effect</param>
            <returns>AudioSource component playing the sound</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecial3Sound(System.Single,System.Single)">
            <summary>
                Plays special ability 3 sound effect with custom volume and pitch settings.
            </summary>
            <param name="v">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
            <returns>AudioSource component playing the sound</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecial4Sound(System.Single)">
            <summary>
                Plays special ability 4 sound effect with specified volume.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecialAttackSound(System.Single)">
            <summary>
                Plays special attack sound effect with specified volume.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecialSound">
            <summary>
                Plays special ability sound effect with default volume (0.8) and pitch (1.0).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecialSound(System.Single)">
            <summary>
                Plays special ability sound effect with specified volume and default pitch.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecialSound(System.Single,System.Single,System.Boolean)">
            <summary>
                Plays special ability sound effect with full control over volume, pitch, and reverb
                settings.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
            <param name="bypassReverb">Whether to bypass environmental reverb effects</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecialSound(System.Single,System.Single)">
            <summary>
                Plays special ability sound effect with specified volume and pitch.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayStunnedSound">
            <summary>
                Plays stunned sound effect by calling the dizzy sound method with default
                parameters.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayThrowHeavySound(System.Single)">
            <summary>
                Plays heavy throwing sound effect for objects like heavy weapons or large items.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayThrowLightSound(System.Single)">
            <summary>
                Plays light throwing sound effect for objects like grenades or light weapons.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayYeahSound(System.Single)">
            <summary>
                Plays celebration "yeah" sound effect with specified volume. Delegates to power-up
                sound system.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayYeahSound(System.Single,System.Single,System.Boolean)">
            <summary>
                Plays celebration "yeah" sound effect with full control over volume, pitch, and
                reverb. Delegates to power-up sound system.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
            <param name="bypassReverb">Whether to bypass environmental reverb effects</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayZappedSound(System.Single)">
            <summary>
                Plays an electrical zapping sound effect when the character is electrocuted. Uses
                randomized pitch between 0.95 and 1.05 for variation.
            </summary>
            <param name="v">Volume for the sound effect (default 0.25)</param>
        </member>
        <member name="M:TestVanDammeAnim.RunWallDraggingAudio">
            <summary>
                Manages wall dragging audio effects for heroes with wall climb ability. Adjusts
                pitch and volume based on climbing state and vertical velocity.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetCurrentFootstepSound(UnityEngine.Collider)">
            <summary>
                Updates the current footstep sound type based on the ground collider's tag, but only
                if a footstep sound holder exists and the collider has a tag other than "Untagged".
            </summary>
            <param name="collider">The ground collider the character is touching.</param>
        </member>
        <!-- Audio System Properties -->
        <member name="P:TestVanDammeAnim.ShowGesturesMenu">
            <summary>
                Gets a value indicating whether the gestures menu should be displayed. Always false
                because the Gestures Menu is unimplemented.
            </summary>
        </member>
        <!-- Audio System Fields -->
        <member name="F:TestVanDammeAnim._lastLaughterSoundTime">
            <summary>
                Timestamp of the last laughter/taunt sound played. Used to prevent laughter sound
                spam by enforcing a minimum 2-second delay between plays. Manages audio cooldown for
                character taunts and victory sounds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._lastResurectionSoundTime">
            <summary>
                Timestamp of the last resurrection sound played. Used to prevent resurrection sound
                spam by enforcing a minimum 2-second delay between plays. Ensures audio doesn't
                overlap during rapid revival attempts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.currentFootStepGroundType">
            <summary>
                Current terrain type string for footstep sound selection. Set from collider tags and
                used to select appropriate footstep sounds. Reset to empty when leaving ground.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.footstepDelay">
            <summary>
                Controls footstep sound timing with a default 0.5 second delay. Decrements each
                frame and must reach 0 before another footstep sound can play.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.knifeSoundCount">
            <summary>
                Cycles through knife climbing sound variations. Incremented with each knife climb
                action and used with modulo to select from sound array for audio variety.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastBassTime">
            <summary>
                Global static cooldown for bass drop sound effects. Prevents bass drop sounds within
                0.3 seconds of each other. Used for special announcer-style bass effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastFootStepGroundType">
            <summary>
                Stores previous ground type for footstep sound system. Initialized to
                GroundType.BrickBehind as the default terrain type.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastHighFiveTime">
            <summary>
                Global static cooldown for high-five sound effects. Ensures minimum 0.3 second delay
                between high-five sounds across all instances to prevent audio overlap.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.longGrassDelay">
            <summary>
                Minimum delay between long grass sound effects in seconds. Default value of 0.15
                seconds prevents grass sound spam when moving through vegetation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.longGrassDelayTimer">
            <summary>
                Tracks time until next grass sound can play. Decrements each frame and is reset to
                longGrassDelay when a grass sound plays.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.sound">
            <summary>
                Primary audio system interface for all character sound effects including footsteps,
                attacks, death sounds, special abilities, and environmental sounds. Lazy initialized
                if null.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.soundHolder">
            <summary>
                Container for general sound effects used by the character. Stores various audio
                clips for actions like shooting, jumping, and taking damage.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.soundHolderFootSteps">
            <summary>
                Container specifically for footstep and movement-related sounds. Includes
                wallDragLoops array used for wall sliding audio effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallDragAudio">
            <summary>
                Audio source for wall sliding sound effects. Created on demand when wall climbing
                and plays looping drag sounds. Volume and pitch adjusted based on slide speed.
            </summary>
        </member>
        <!-- Unit Management Methods -->
        <member name="M:TestVanDammeAnim.AttachToHelicopter(System.Single,Helicopter)">
            <summary>
                Attaches the character to a helicopter for level exit sequences. Adds the hero to
                the helicopter's attached list, parents the character to the ladder holder,
                positions them relative to the helicopter, and adjusts facing direction.
            </summary>
            <param name="ladderXPos">The ladder X position reference</param>
            <param name="helicopter">The helicopter instance to attach to</param>
            <returns>Updated ladder X position after attachment</returns>
        </member>
        <member name="M:TestVanDammeAnim.DischargePilotingUnit(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Exits piloting mode and restores character to normal state. Re-enables rendering,
                restores health, sets position/velocity, and optionally applies stun effects.
            </summary>
            <param name="newX">X position to place character after discharge</param>
            <param name="newY">Y position to place character after discharge</param>
            <param name="xI">X velocity to apply after discharge</param>
            <param name="yI">Y velocity to apply after discharge</param>
            <param name="stunPilot">Whether to stun the character after discharge</param>
        </member>
        <member name="M:TestVanDammeAnim.GetPilottedUnit">
            <summary>
                Gets the unit currently being piloted by this character.
            </summary>
            <returns>The piloted unit, or null if not piloting anything</returns>
        </member>
        <member name="M:TestVanDammeAnim.GrabHelicopterLadder">
            <summary>
                Placeholder method for grabbing the helicopter ladder. Currently has no
                implementation but serves as a virtual method hook for derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StartPilotingUnit(Unit)">
            <summary>
                Initiates piloting mode by disabling character rendering and controls while
                transferring control to specified unit. Sets health to 10000, enables
                invulnerability, and stops UI bubbles.
            </summary>
            <param name="pilottedUnit">The unit this character will pilot</param>
        </member>
        <!-- Unit Management Properties -->
        <member name="P:TestVanDammeAnim.playerBubble">
            <summary>
                Gets the ReactionBubble instance appropriate for this player's number. Returns the
                corresponding bubble UI element based on the player's assigned number.
            </summary>
        </member>
        <!-- Unit Management Fields -->
        <member name="F:TestVanDammeAnim.ElgilbleToBeKicked">
            <summary>
                Whether this player can be kicked by teammates for being idle. Set true after 15
                seconds of no input with 2+ players. Reset to false on any input. Note: Field name
                contains typo (should be "Eligible").
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.broMustFailToWin">
            <summary>
                Marks bros that must fail or die to satisfy certain win conditions. When true,
                disables normal gibbing (sets canGib false) and only allows death from OutOfBounds
                damage. Used for special game modes or scenarios.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hasBeenKicked">
            <summary>
                Tracks whether the unit has been kicked by another character. Set to true in KickRPC
                when kick is received. Prevents duplicate kick processing and triggers kick
                animation and bubble display.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heldGrenade">
            <summary>
                Reference to grenade currently held by character for throwing back. Enables grenade
                catch-and-throw mechanics. Used to calculate throw velocity based on grenade weight.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heldMook">
            <summary>
                Reference to enemy (Mook) currently held by character. Enables enemy grab-and-throw
                mechanics. Position updates applied to held mook during carry.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.isOnHelicopter">
            <summary>
                Indicates whether the hero has boarded the extraction helicopter at level
                completion. Set to true when entering helicopter, changes playerNum to 5 for special
                handling. Used to track successful level extraction.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.kickPlayerBubble">
            <summary>
                Visual indicator shown above idle players that can be kicked by teammates. Changes
                material/color based on kick state. Only appears in multiplayer with 2+ players
                after 15 seconds of inactivity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastPathingTime">
            <summary>
                Timestamp of last AI pathfinding attempt. Enforces 0.1 second cooldown between
                pathfinding requests to prevent excessive calculations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.nearbyMook">
            <summary>
                Reference to closest enemy available for interaction. Set to skinned mook on back if
                present, otherwise searches for nearby mook. Used for grab/interaction targeting.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.onBackOf">
            <summary>
                Reference to another unit this unit is riding on (piggyback riding). Used for
                special movement mechanics when one character carries another.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pathingAttempts">
            <summary>
                Counter for AI pathfinding attempts. Incremented on each attempt and stops trying
                after 10 attempts to prevent infinite loops. Reset when command completes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pilottedUnit">
            <summary>
                Reference to the vehicle or unit currently being piloted by this character. Set when
                entering vehicles, cleared when exiting. When set, modifies UI display and input
                handling. Serialized for network synchronization.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.throwingHeldObject">
            <summary>
                Indicates if character is currently in throwing animation. Set true when starting
                throw and false when completed. Controls throwing animation state.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:TestVanDammeAnim.ActivateGun">
            <summary>
                Shows the gun sprite by setting it active. Counterpart to DeactivateGun, used to
                restore weapon visibility after states that hide it. Includes null check for safety.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateCeilingHeight">
            <summary>
                Calculates the height of the ceiling above the character using three upward raycasts
                (center, left, right). Returns the lowest ceiling point found, which is used for
                death animations to prevent visual clipping through level geometry.
            </summary>
            <returns>Height in units to the nearest ceiling above the character</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanReduceLives">
            <summary>
                Determines whether lives should be reduced when this character dies. Returns true
                for non-zombie characters, allowing normal life deduction. Zombie characters return
                false to prevent life loss on death.
            </summary>
            <returns>True if lives should be reduced on death, false for zombies</returns>
        </member>
        <member name="M:TestVanDammeAnim.DeactivateGun">
            <summary>
                Hides the gun sprite by setting it inactive. Used during death sequences, frozen
                states, and other situations where the weapon should not be visible. Includes null
                check for safety.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.GetFootPoofColor">
            <summary>
                Determines appropriate particle effect color based on environmental ground
                conditions. Uses priority-based detection: oil takes precedence over quicksand,
                which takes precedence over pool submersion. Returns BloodColor.None for normal
                ground.
            </summary>
            <returns>BloodColor enum value representing the appropriate particle effect color for current environment</returns>
        </member>
        <member name="M:TestVanDammeAnim.NotifyDeathType">
            <summary>
                Reports the character's death type to the statistics system for analytics tracking.
                Uses an internal flag to ensure the death is only reported once, preventing
                duplicate statistics entries.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PackState(UnityStream)">
            <summary>
                Serializes character state for network synchronization. Packs piloted unit, action
                state, and health. For heroes, also includes player number and hero type.
            </summary>
            <param name="stream">The network stream to write data to</param>
            <returns>The stream with packed data</returns>
        </member>
        <member name="M:TestVanDammeAnim.RunOnlineBadSpawnFailSafe">
            <summary>
                Prevents bad spawn situations in online multiplayer for hero characters. Runs
                periodic checks to ensure proper spawn state when not hosting.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetGunPosition(System.Single,System.Single)">
            <summary>
                Positions the gun sprite relative to the character with specified offsets. Sets gun
                transform position and ensures consistent scale (1,1,1) while maintaining proper
                rendering depth (-0.001f on Z-axis).
            </summary>
            <param name="xOffset">Horizontal offset for gun positioning relative to character</param>
            <param name="yOffset">Vertical offset for gun positioning relative to character</param>
        </member>
        <member name="M:TestVanDammeAnim.SetRenderers(System.Boolean)">
            <summary>
                Toggles all child MeshRenderer components on or off. Finds all MeshRenderers in
                children including inactive ones and sets their enabled state.
            </summary>
            <param name="enabled">Whether to enable or disable the renderers</param>
        </member>
        <member name="M:TestVanDammeAnim.StopPlayerBubbles">
            <summary>
                Deactivates all player indicator UI bubbles including player number bubbles (1-4)
                and the high-five interaction bubble. Only runs for player-controlled characters and
                calls StopBubble on each active bubble to hide them.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TryAssignHeroThatKilledMe(UnityEngine.MonoBehaviour)">
            <summary>
                Tracks which hero killed this unit for statistics and scoring purposes. Only assigns
                if not already set, extracts the player number from the damage sender, and stores
                the death position for kill tracking statistics.
            </summary>
            <param name="damageSender">The MonoBehaviour (typically a hero) that killed this unit</param>
        </member>
        <member name="M:TestVanDammeAnim.UnpackState(UnityStream)">
            <summary>
                Deserializes network state and applies it to the character. Unpacks all data from
                PackState with special handling for BoondockBro and Desperabro. Sets up hero if
                alive or deactivates gun if dead.
            </summary>
            <param name="stream">The network stream to read data from</param>
            <returns>The stream after reading data</returns>
        </member>
        <!-- Helper & Utility Properties -->
        <member name="P:TestVanDammeAnim.HalfWidth">
            <summary>
                Gets the half-width of the character's collision bounds. This value is used for
                collision detection and positioning calculations.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.SyncParent">
            <summary>
                Gets or sets the parent Transform for network synchronization. This property enables
                synchronized parenting across multiplayer clients.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.SyncParentedPosition">
            <summary>
                Gets or sets the position relative to a parent Transform for network
                synchronization. This property manages both position and parent relationship in
                multiplayer scenarios.
            </summary>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:TestVanDammeAnim._counter">
            <summary>
                General purpose time counter field. Currently has no specific usage in
                TestVanDammeAnim base implementation. Available for derived classes to use for
                custom timing needs or animation sequences.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._spawnFailSafeTimer">
            <summary>
                Network synchronization failsafe timer for spawn validation. Counts up for 2 seconds
                after spawning to detect position mismatches in multiplayer. If position remains at
                origin after timeout, triggers forced position sync to resolve spawn failures.
            </summary>
        </member>
        <!-- Character Setup & Configuration Methods -->
        <member name="M:TestVanDammeAnim.AttachToHeli">
            <summary>
                Virtual method for attaching TestVanDammeAnim to helicopter. Currently empty
                implementation that can be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetUpHero(System.Int32,HeroType,System.Boolean)">
            <summary>
                Configures TestVanDammeAnim as a hero character with specified player number and
                hero type. Optionally registers with HeroController and creates hero indicator
                effects based on game state conditions.
            </summary>
            <param name="PlayerNum">The player number to assign to this hero (0-3)</param>
            <param name="heroTypeEnum">The type of hero this character represents</param>
            <param name="registerHero">Whether to register this hero with the HeroController system</param>
        </member>
        <member name="M:TestVanDammeAnim.ShowStartBubble">
            <summary>
                Displays the starting bubble UI for heroes when HUDs are enabled and character is
                alive. Restarts bubble animation and flashes avatar.
            </summary>
        </member>
        <!-- Character Setup & Configuration Fields -->
        <member name="F:TestVanDammeAnim.disarmedGunMaterial">
            <summary>
                Material applied to gun sprite to indicate disarmed state during reward phase. Only
                applied to non-winning players in multiplayer matches. Provides visual feedback that
                the character's weapon is disabled.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.faderSpritePrefab">
            <summary>
                Prefab reference for creating fade effect sprites. Used to access FaderSprite
                component for visual fade transitions. Enables smooth visual transitions for various
                game states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heroType">
            <summary>
                Identifies which specific hero character this instance represents (e.g., Rambro,
                Brominator). Set during hero setup and used for death statistics, special behaviors,
                and network serialization. Critical for hero registration and ability configuration.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.player">
            <summary>
                Reference to the Player object that controls this hero. Core reference for input
                handling, player-specific settings, and multiplayer identification. Essential for
                connecting character actions to player input.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.spawnPositionHasBeenSet">
            <summary>
                Flag indicating the unit's spawn position has been properly initialized. Set to true
                after spawn setup completes. Prevents duplicate spawn initialization and ensures
                spawn-related effects only trigger once.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usePrimaryAvatar">
            <summary>
                Determines whether to display the primary or secondary avatar image in the HUD.
                Default true shows primary avatar. Passed to all avatar state methods to control
                which character portrait is displayed. Can be toggled for alternate character
                representations.
            </summary>
        </member>
        <!-- Alien Infection System Methods -->
        <member name="M:TestVanDammeAnim.BurstChest">
            <summary>
                Executes alien chest bursting sequence. Disconnects face hugger, spawns alien
                xenomorph (only for local player or local insemination), targets nearest player,
                triggers alien growth, gibs character, and plays sound effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateInseminationFrame">
            <summary>
                Calculates the sprite frame for insemination animation based on infection
                progression. Returns frames 0-7 based on inseminated counter timing.
            </summary>
            <returns>Animation frame index for insemination state</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanInseminate(System.Single,System.Single)">
            <summary>
                Checks if character can be inseminated by alien face huggers. Requires no existing
                inseminator, positive health, and health below 1000.
            </summary>
            <param name="xI">X force component (unused in logic)</param>
            <param name="yI">Y force component (unused in logic)</param>
            <returns>True if character can be inseminated, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.DisConnectFaceHugger">
            <summary>
                Removes attached face hugger from character. Handles face hugger positioning,
                disconnection, and UI cleanup.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.HasFaceHugger">
            <summary>
                Checks if character currently has a face hugger attached.
            </summary>
            <returns>True if face hugger is attached, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.Inseminate(AlienFaceHugger,System.Single,System.Single)">
            <summary>
                Initiates alien insemination process via RPC for network synchronization. Called by
                face hugger units to begin infection.
            </summary>
            <param name="unit">The alien face hugger performing the insemination</param>
            <param name="xForce">X force component for insemination</param>
            <param name="yForce">Y force component for insemination</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:TestVanDammeAnim.InseminateRPC(AlienFaceHugger,System.Single,System.Single)">
            <summary>
                RPC method that executes alien insemination process. Sets up face hugger attachment,
                initializes infection counters, updates UI, and plays muffled scream sounds.
            </summary>
            <param name="unit">The alien face hugger performing insemination</param>
            <param name="xForce">X force component for insemination</param>
            <param name="yForce">Y force component for insemination</param>
        </member>
        <member name="M:TestVanDammeAnim.IsInseminated">
            <summary>
                Checks if character is currently in inseminated state with active alien infection.
            </summary>
            <returns>True if inseminated with alien parasite, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.RecoverFromInseminatioRPC">
            <summary>
                RPC method that executes insemination recovery. Removes face hugger, resets
                infection counters, grants invulnerability, and cleans up UI elements.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RecoverFromInsemination">
            <summary>
                Initiates recovery from alien insemination via RPC for network synchronization.
                Called to cure infection before chest bursting occurs.
            </summary>
        </member>
        <!-- Alien Infection System Fields -->
        <member name="F:TestVanDammeAnim.alienBursterPrefab">
            <summary>
                Prefab reference for the alien creature that bursts from the unit's chest after
                insemination. Spawned when inseminatedCounter reaches its threshold, creating the
                dramatic chest-bursting death sequence. The spawned alien becomes an enemy unit.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.inseminatedByLocalUnit">
            <summary>
                Tracks whether the insemination was performed by a locally-controlled unit.
                Currently not actively used in the codebase. May have been intended for network
                synchronization or scoring purposes in the alien infection system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.inseminatedCounter">
            <summary>
                Timer tracking the gestation period after successful alien insemination. Incremented
                each frame until reaching the burst threshold (typically 5-10 seconds), at which
                point an alien burster emerges from the unit's chest, killing the host.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.inseminationCounter">
            <summary>
                Timer tracking the insemination process while a face hugger is attached. Incremented
                while inseminatorUnit is attached, representing the infection progress. When it
                reaches the threshold, the unit becomes fully inseminated and the gestation phase
                begins.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.inseminationFrame">
            <summary>
                Frame counter for insemination animation or timing. Currently not actively used in
                the codebase. May have been intended for synchronizing insemination visual effects
                or for network replication of the infection state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.inseminatorUnit">
            <summary>
                Reference to the AlienFaceHugger currently attached to this unit's face. Set when a
                face hugger successfully attaches, cleared when the face hugger is destroyed or
                detaches. When set, prevents normal actions and begins the insemination process.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.reviveSource">
            <summary>
                Reference to the hero that revived this character as a zombie. When set, enables the
                reviving player to control this zombie through input copying. Checked for zombie AI
                control decisions and cleared when zombie is destroyed.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.reviveZombieCounter">
            <summary>
                Periodic counter for zombie behavior updates. Triggers zombie-specific actions at
                0.4 second intervals. Creates consistent zombie movement patterns and prevents
                continuous action spam.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.reviveZombieTime">
            <summary>
                Countdown timer before a revived zombie becomes active. Default 2 seconds,
                randomized on revival between 1.5-2.5 seconds. Prevents instant zombie activation
                after revival, creating a rising animation period.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.zombieDelay">
            <summary>
                Input delay for zombie movement control. Decremented during zombie input copying
                from controlling player. Creates intentional lag in zombie response to player
                commands for gameplay balance.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.zombieOffset">
            <summary>
                Random offset (0-1) that creates behavioral variation between zombies. Used to
                desynchronize zombie movement and actions by offsetting timing calculations. Ensures
                multiple zombies don't move in perfect lockstep, creating more organic zombie
                hordes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.zombieTimerOffset">
            <summary>
                Integer offset for zombie action timing variations. Combined with zombieOffset to
                create unique behavior patterns for each zombie. Prevents synchronized zombie
                attacks and movements, making zombie groups feel more chaotic and unpredictable.
            </summary>
        </member>
        <!-- Acid Coverage System Methods -->
        <member name="M:TestVanDammeAnim.AnimateActualDeath">
            <summary>
                Displays standard ground death animation frame and deactivates gun sprite. Used for
                normal death situations when character dies on solid ground.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateClimbingLadder">
            <summary>
                Manages comprehensive ladder climbing animation with multiple movement states.
                Handles transition animations, idle climbing with gun positioning, movement-based
                climbing with footstep sounds, and specialized climbing animations for up/down
                movement. Includes proximity detection for ladder presence and appropriate animation
                fallbacks.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateClimbingLadderTransition(System.Boolean)">
            <summary>
                Handles smooth transition animation between ladder climbing and normal movement
                states. Manages transition frame progression, frame rates, and sprite positioning
                during the 6-frame transition sequence.
            </summary>
            <param name="intoClimbing">True when transitioning into climbing mode, false when transitioning out of climbing mode</param>
        </member>
        <member name="M:TestVanDammeAnim.AnimateDancingFrames">
            <summary>
                Displays dancing animation sequence using configurable frame cycling. Deactivates
                gun and cycles through dancing frames from the specified sprite sheet position with
                consistent frame rate.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateDeath">
            <summary>
                Death animation dispatcher that selects appropriate death animation based on
                character state. Prioritizes insemination frames if infected, falling death
                animation if airborne and not impaled, or standard ground death animation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateFallen">
            <summary>
                Virtual method for fallen state animation. Empty implementation that can be
                overridden by derived classes to provide custom fallen animation behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateFallingDeath">
            <summary>
                Displays falling death animation frame for characters dying while airborne. Provides
                different visual feedback compared to ground death.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateGesture">
            <summary>
                Handles comprehensive gesture animation sequences including salute, wave, point,
                flex, thrust, knee drop, and shush gestures. Manages frame progression, timing,
                special effects (flex sounds and face hugger disconnection), and looping behavior
                for different gesture types.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateInseminationFrames">
            <summary>
                Displays alien insemination animation frames based on infection progression. Uses
                calculated insemination frame index to show appropriate sprite frame from the
                insemination animation sheet.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateWallAnticipation">
            <summary>
                Manages wall climb anticipation animation with precise knife positioning based on
                vertical movement. Calculates knife stab positioning relative to previous climb
                heights and alternates between left and right knife hands for realistic climbing
                animation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateWallClimb">
            <summary>
                Executes active wall climbing animation with realistic knife stab mechanics and
                height tracking. Manages velocity changes at specific animation frames, alternating
                knife hands, sound effects, and precise tracking of climbing progress relative to
                previous stab positions. Includes collision detection for wall interaction events.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateWallDrag">
            <summary>
                Handles wall sliding animation with knife-based climbing mechanics. Manages
                alternating knife hand positions, velocity-based frame selection, sound effects, and
                visual particle effects. Supports both new knife climbing frames and legacy
                animation systems.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ApplyWallClimbingGravity">
            <summary>
                Applies specialized gravity calculations during wall climbing and dragging states.
                Provides reduced gravity during active climbing phases and maintains upward velocity
                during certain animation frames to create realistic wall climbing physics.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ChangeFrame">
            <summary>
                Core animation frame dispatcher that routes to appropriate animation methods based
                on character state and action. Handles priority-based animation selection including
                frozen state, special unit states (on back, strung up, impaled), and action
                state-specific animations (idle, running, jumping, climbing, death). Also manages
                gun activation, sprite offsets, and frame counters for various animation systems.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckAirDash">
            <summary>
                Evaluates conditions for air dash availability and triggers dash if conditions are
                met. Checks for horizontal air dash availability, ground proximity for dash
                continuation, and downward air dash when moving straight down.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CoverInAcid">
            <summary>
                Covers TestVanDammeAnim in acid if not invulnerable and eligible. Sends RPC to all
                clients to apply acid coverage.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CoverInAcidRPC">
            <summary>
                RPC method that applies acid coverage effects. Changes materials, handles
                alien-specific reactions, and initiates acid damage systems.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ForceChangeFrame">
            <summary>
                Forces an immediate frame change by calling the ChangeFrame method. Provides public
                access to trigger frame updates outside of the normal animation cycle.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.HasBeenCoveredInAcid">
            <summary>
                Checks if TestVanDammeAnim is currently covered in acid.
            </summary>
            <returns>True if covered in acid, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.IncreaseFrame">
            <summary>
                Advances the main animation frame counter and insemination frame counter if face
                hugger is attached. This method synchronizes both animation systems to ensure proper
                frame progression during alien infection states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.IsGesturing">
            <summary>
                Checks if character is currently performing any gesture animation by verifying the
                current gesture state is not None.
            </summary>
            <returns>True if character is performing a gesture, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlayFootStepSound">
            <summary>
                Plays surface-appropriate footstep sounds with default volume and pitch settings
                (0.4 volume, 1.0 pitch).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayFootStepSound(System.Single,System.Single)">
            <summary>
                Plays surface-specific footstep sounds based on current environment and character
                state. Automatically selects appropriate sound arrays for quicksand, ladder
                climbing, or ground surface types (Dirt, Stone, Metal, Wood, Grass, Slime). Also
                triggers long grass sound effects when applicable.
            </summary>
            <param name="v">Volume level for the footstep sound</param>
            <param name="p">Pitch level for the footstep sound</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayLongGrassSound(System.Boolean)">
            <summary>
                Plays environment-specific footstep sounds for grass and blood surfaces with timing
                control. Checks for jiggle doodads on the current block to determine sound type,
                playing blood sounds at reduced volume for blood doodads or grass sounds for other
                doodads.
            </summary>
            <param name="checkTimer">Whether to respect the grass delay timer to prevent audio spam. If false, plays sound immediately regardless of timer</param>
            <returns>True if a sound was played, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.RemoveAcid">
            <summary>
                Removes acid coverage from TestVanDammeAnim by sending RPC to all clients if
                conditions are met.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RemoveAcidRPC">
            <summary>
                RPC method that removes acid coverage. Restores default material, enables gun
                sprite, and creates slime particle effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunCoveredInAcid">
            <summary>
                Handles ongoing acid coverage effects including cage busting damage, checkpoint
                recovery, melting animations, and acid particle generation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunStepOnWalls">
            <summary>
                Triggers step-on events for wall surfaces during climbing or dragging. Performs
                raycasting to detect wall colliders and sends step messages for interaction with
                climbable surfaces.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetGestureAnimation(GestureElement.Gestures)">
            <summary>
                Sets and manages gesture animation state with frame reset and multiplayer
                achievement tracking. Blocks movement during gesture animation and awards
                achievement when all 4 players perform gestures simultaneously.
            </summary>
            <param name="gesture">The gesture type to animate (None, Salute, Wave, Point, Flex, Thrust, KneeDrop, Shhh)</param>
        </member>
        <member name="M:TestVanDammeAnim.StartDashing">
            <summary>
                Initiates dashing movement with speed multipliers and visual effects. Manages dash
                availability based on air state, applies speed modifiers with diminishing returns
                for successive dashes, and creates appropriate dash effects. Handles both ground and
                air dash scenarios.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TriggerFlexEvent">
            <summary>
                Triggers perk system flex event for muscle flexing gestures. Activates associated
                perks and bonuses when character performs flex animation.
            </summary>
        </member>
        <!-- Acid Coverage System Fields -->
        <member name="F:TestVanDammeAnim.acidMeltTimer">
            <summary>
                Controls the melting process timing. Initialized to 1 second when acid is applied
                and can be extended by 0.3 seconds with additional acid damage. When it reaches 0,
                triggers the Melt method.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.acidParticleTimer">
            <summary>
                Controls timing of acid particle effect spawning. Decrements each frame while
                covered in acid and resets to 0.1 seconds, triggering green slime particle creation
                at regular intervals.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hasBeenCoverInAcid">
            <summary>
                Tracks whether unit is currently covered in acid. Blocks certain actions while true
                and triggers acid particle effects and melting process. Reset when recovering from
                acid effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hasMelted">
            <summary>
                Indicates if unit has completed the melting process from acid damage. One-way flag
                that is never reset once set. Prevents particle spawning after melting is complete.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastRecoveredFromAcidTime">
            <summary>
                Timestamp tracking when unit last recovered from acid effects. Enforces minimum 1.5
                second delay between recoveries for player-controlled units only.
            </summary>
        </member>
        <!-- High-Five System Methods -->
        <member name="M:TestVanDammeAnim.CheckHighFive">
            <summary>
                Checks for nearby characters available for high-five interactions and manages
                high-five initiation timing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CreateHighFiveEffects">
            <summary>
                Creates visual and audio effects for successful high-five interactions including
                particles and screen effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.HighFiveBoost(System.Boolean)">
            <summary>
                Applies high-five boost effects including speed enhancement and visual effects.
            </summary>
            <param name="activeHighFiveCharacter">Whether this character initiated the high-five</param>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseHighFive">
            <summary>
                Handles releasing the high-five gesture. Updates animation frame, sets appropriate
                state flags, triggers frame change, and dismisses the high-five bubble if present.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StartHighFive">
            <summary>
                Initializes the high-five gesture action. Resets related timers and flags, sets
                holding high-five state to true, resets the animation frame, and triggers a frame
                update.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TryConnectHighFive">
            <summary>
                Attempts to connect with nearby character for high-five interaction. Returns success
                status for networking.
            </summary>
            <returns>True if high-five connection successful, false otherwise</returns>
        </member>
        <!-- High-Five System Fields -->
        <member name="F:TestVanDammeAnim.high5Bubble">
            <summary>
                Special reaction bubble specifically for high-five interactions. Displays prompts
                when players are close enough to perform a high-five. Shows button prompts and
                timing windows for successful high-five execution between players.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFive">
            <summary>
                Current frame's high-five input state from player controls. When pressed, triggers
                high-five gesture attempts with nearby players.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFiveBoost">
            <summary>
                Indicates if the high-five speed boost is currently active. When true, character
                movement speed is increased by the highFiveBoostM multiplier.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFiveBoostM">
            <summary>
                Speed multiplier applied during high-five boost. Default value of 1.4 provides a 40%
                speed increase. Applied by dividing movement calculations by this value.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFiveBoostTime">
            <summary>
                Remaining duration of the high-five boost effect in seconds. Counts down each frame
                while the boost is active.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFiveNoBoost">
            <summary>
                Temporary state that prevents high-five boosts from being applied. Used to prevent
                boost stacking or rapid re-triggering of boosts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFiveNoBoostTime">
            <summary>
                Duration of high-five boost prevention in seconds. Typically set to 0.2 seconds
                after certain actions. When this timer expires, highFiveNoBoost is automatically
                cleared.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highfiveHoldTime">
            <summary>
                Tracks the duration the high-five gesture has been held. Increments during the
                high-five animation and resets to -1.5 after 0.5 seconds to create a cooldown period
                between high-fives.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdingHighFive">
            <summary>
                Indicates that the character is currently initiating a high-five gesture. Set to
                true when starting a high-five and prevents air dashing while active. Automatically
                cleared after frame 2 of the high-five animation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ignoreHighFivePressTime">
            <summary>
                Cooldown timer that prevents rapid high-five or special ability triggering. Set to
                0.1 seconds after certain actions and prevents new high-five attempts while greater
                than zero.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.player1Bubble">
            <summary>
                Reaction bubble UI element for player 1. Displays context-sensitive prompts like
                "PRESS X TO HIGH FIVE" or AFK indicators. Positioned above the character and
                shown/hidden based on game state and player proximity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.player2Bubble">
            <summary>
                Reaction bubble UI element for player 2. Functions identically to player1Bubble but
                for the second player. Enables multiplayer interaction prompts and status indicators
                specific to player 2's perspective.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.player3Bubble">
            <summary>
                Reaction bubble UI element for player 3. Displays context-sensitive prompts and
                status indicators above the third player's character in 4-player local multiplayer.
                Functions identically to player1Bubble and player2Bubble but for the third player
                slot.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.player4Bubble">
            <summary>
                Reaction bubble UI element for player 4. Displays context-sensitive prompts and
                status indicators above the fourth player's character in 4-player local multiplayer.
                Completes the set of player bubbles for full 4-player support.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.releasingHighFive">
            <summary>
                Tracks when the high-five input has been released. Set when the player releases the
                high-five button and used to control the end of the high-five animation state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.showHighFiveAfterMeleeTimer">
            <summary>
                Timer that delays high-five prompt display after melee attacks. Incremented after
                successful melee, triggers prompt at 1.5 seconds. Reset when melee is activated.
                Encourages cooperative play by prompting celebratory interactions after combat.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.successfulHighFive">
            <summary>
                Indicates that a high-five has successfully connected with another player. When true
                and animation reaches frame 4, triggers high-five boost effects. Automatically
                cleared after the animation completes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.successfulHighFiveActiveBro">
            <summary>
                Identifies whether this character was the initiator of a successful high-five. Used
                to determine which player receives the high-five boost effect.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasHighFive">
            <summary>
                Previous frame's high-five input state. Used for edge detection to determine when
                the high-five button is first pressed rather than held.
            </summary>
        </member>
        <!-- Kick System Methods -->
        <member name="M:TestVanDammeAnim.CheckForKick">
            <summary>
                Checks proximity to other players and handles kick interactions. Shows kick bubble
                when eligible, changes bubble material based on proximity, and executes kicks when
                conditions are met.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Kick">
            <summary>
                Initiates player kick process by sending RPC to all clients if character hasn't been
                kicked yet.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.KickRPC">
            <summary>
                RPC method that executes the kick sequence. Shows kick bubble, starts kick routine,
                and marks character as kicked.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.KickRoutine">
            <summary>
                Coroutine that handles the visual kick countdown sequence. Flashes kick bubble
                materials with decreasing intervals, then gibs character and creates explosion
                effects.
            </summary>
            <returns>IEnumerator for coroutine execution</returns>
        </member>
        <member name="M:TestVanDammeAnim.ShowKickBubble">
            <summary>
                Creates and displays the kick player bubble UI above the character. Sets up bubble
                parenting and restarts bubble animation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopKickBubble">
            <summary>
                Stops the kick player bubble animation if it exists.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:TriggerManager.Awake">
            <summary>
                Unity Awake callback that initializes the TriggerManager singleton. Sets up the
                instance reference and initializes all collections including activeActions, triggers
                dictionary, bombardments list, and trigger variables.
            </summary>
        </member>
        <member name="M:TriggerManager.Update">
            <summary>
                Main update loop for the trigger system. Evaluates all enabled triggers, processes
                active actions based on their time offsets, updates camera control states, and
                manages repeating bombardments. Handles special timing for offscreen player
                destruction and blocks unit movement when needed.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Properties -->
        <member name="P:TriggerManager.Instance">
            <summary>
                Gets the singleton instance of the TriggerManager. Used to access the trigger system
                from anywhere in the game.
            </summary>
        </member>
        <!-- Trigger System Core Methods -->
        <member name="M:TriggerManager.ActivateTrigger(System.String)">
            <summary>
                Activates a trigger by name, enabling it and resetting its state to allow it to be
                triggered again. Searches through all triggers in the system for a case-insensitive
                name match. Used by level scripts to dynamically enable triggers during gameplay.
            </summary>
            <param name="p">The name of the trigger to activate (case-insensitive)</param>
        </member>
        <member name="M:TriggerManager.CheckAndTriggerLevelEndTriggers">
            <summary>
                Checks for and executes any level completion triggers (success or failure) based on
                the current game state. Iterates through all enabled triggers looking for LevelFail
                or LevelSuccess types that match the current level result.
            </summary>
            <returns>True if a level end trigger was found and executed, false otherwise</returns>
        </member>
        <member name="M:TriggerManager.ClearAlreadyTriggeredTriggerOnceTriggers">
            <summary>
                Clears the list of triggers that have been marked as "trigger once" and already
                fired. This allows one-time triggers to be reset, typically used when restarting
                levels or resetting game state.
            </summary>
        </member>
        <member name="M:TriggerManager.DeactivateTrigger(System.String)">
            <summary>
                Deactivates a trigger by name, preventing it from being evaluated or executed.
                Searches through all triggers for a case-insensitive name match. Used to disable
                triggers that should no longer fire based on game state or player actions.
            </summary>
            <param name="p">The name of the trigger to deactivate (case-insensitive)</param>
        </member>
        <member name="M:TriggerManager.ExecuteTrigger_Local(Trigger)">
            <summary>
                Executes a trigger locally on this client, marking it as triggered and activating
                all its associated actions. For one-time triggers, adds them to the persistent
                tracking list. Only adds spawn actions if this is the host client to prevent
                duplicate spawns.
            </summary>
            <param name="trigger">The trigger to execute</param>
        </member>
        <member name="M:TriggerManager.ExecuteTrigger_Networked(Trigger)">
            <summary>
                Executes a trigger across all connected clients by sending an RPC to execute the
                trigger locally on each client. This ensures synchronized trigger execution in
                multiplayer games.
            </summary>
            <param name="trigger">The trigger to execute on all clients</param>
        </member>
        <member name="M:TriggerManager.GetDeterministicUniqueTriggerName(TriggerInfo)">
            <summary>
                Generates a unique identifier string for a trigger based on its properties. Combines
                the trigger's name, type, and position data to create a deterministic key used for
                tracking one-time trigger execution across game sessions.
            </summary>
            <param name="trig">The trigger information to generate a unique name for</param>
            <returns>A unique string identifier combining trigger properties</returns>
        </member>
        <member name="M:TriggerManager.LoadTriggers(System.Collections.Generic.List{TriggerInfo})">
            <summary>
                Loads and initializes all triggers for the current level from trigger info data.
                Clears existing triggers, creates new trigger instances with deterministic IDs, and
                restores previously triggered states for one-time triggers. Also resets the
                PauseCameraMovements flag.
            </summary>
            <param name="triggerInfos">List of trigger information objects defining the triggers to create for the level</param>
        </member>
        <member name="M:TriggerManager.RegisterEntityTrigger(TriggerInfo)">
            <summary>
                Registers a new entity-based trigger at runtime, typically used for dynamically
                spawned objects that need trigger functionality. Allocates a deterministic network
                ID and adds the trigger to the active triggers dictionary.
            </summary>
            <param name="info">The trigger information defining the trigger's properties and behavior</param>
            <returns>The newly created and registered Trigger instance, or null if TriggerManager instance doesn't exist</returns>
        </member>
        <member name="M:TriggerManager.Reset">
            <summary>
                Resets all triggers in the current level by iterating through the triggers
                dictionary and calling Reset() on each trigger. This prepares triggers to be
                evaluated and fired again, typically used when restarting a level or checkpoint.
            </summary>
        </member>
        <!-- Trigger System Core Fields -->
        <member name="F:TriggerManager.alreadyTriggeredTriggerOnceTriggers">
            <summary>
                Static list tracking unique identifiers of one-time triggers that have already been
                executed. Persists across level loads to prevent one-time triggers from firing
                multiple times in offline mode.
            </summary>
        </member>
        <member name="F:TriggerManager.instance">
            <summary>
                The singleton instance of TriggerManager. Set in Awake() and accessed through the
                Instance property to provide global access to the trigger system.
            </summary>
        </member>
        <!-- Scripted Events Methods -->
        <member name="M:TriggerManager.AddRepeatingBombardment(UnityEngine.Vector3,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Adds a repeating bombardment pattern that will continue firing projectiles at
                intervals. Used to create ongoing artillery barrages or environmental hazards in
                levels.
            </summary>
            <param name="pos">Target position for the repeating bombardment</param>
            <param name="seed">Random seed for determining bombardment timing and spread</param>
            <param name="fireBallDiagonal">True to use diagonal fireball projectiles</param>
            <param name="fireBallVertical">True to use vertical fireball projectiles</param>
            <returns>The BombardmentRepeat instance managing this repeating attack</returns>
        </member>
        <member name="M:TriggerManager.CreateAlienSpawnAttack(GridPoint,DirectionEnum,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Spawns alien enemies from a specified direction attacking a target point. Handles
                different alien types (facehuggers, melters, xenomorphs, mosquitoes) and spawn
                behaviors based on direction. Can spawn enemies offscreen and set up their initial
                AI behaviors.
            </summary>
            <param name="targetPoint">The grid point that spawned aliens should move toward</param>
            <param name="direciton">Direction from which aliens spawn (Up, Down, Left, Right)</param>
            <param name="faceHuggers">True to spawn facehugger aliens</param>
            <param name="melters">True to spawn melter/baneling aliens</param>
            <param name="xenomorphs">True to spawn xenomorph aliens</param>
            <param name="mosquitoes">True to spawn mosquito aliens (default if others are false)</param>
            <param name="seed">Random seed for spawn patterns (currently unused in implementation)</param>
            <param name="spawnOffScreen">True to spawn aliens outside the visible screen area</param>
        </member>
        <member name="M:TriggerManager.CreateScriptedBlock(GridPoint,GroundType,System.Boolean,NID)">
            <summary>
                Creates a new block at runtime with specified properties, useful for dynamic level
                modifications. Can create the block in a disturbed state (falling/moving) and
                handles special cases like parachuting crates or cages.
            </summary>
            <param name="gridPoint">The grid position where the block should be placed</param>
            <param name="groundType">The type of block to create (e.g., brick, metal, cage)</param>
            <param name="disturbed">Whether the block should start in a disturbed/falling state</param>
            <param name="blockNID">Network ID to assign to the block for multiplayer synchronization</param>
            <returns>The created Block instance</returns>
        </member>
        <member name="M:TriggerManager.CreateScriptedBombardment(UnityEngine.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Creates a bombardment projectile attack at the specified position. Can create
                diagonal fireballs, vertical fireballs, or standard artillery shells. Optionally
                sets up repeating bombardment.
            </summary>
            <param name="pos">Target position for the bombardment</param>
            <param name="repeat">Whether this bombardment should repeat at intervals</param>
            <param name="fireBallDiagonal">True to use diagonal fireball projectiles</param>
            <param name="fireBallVertical">True to use vertical fireball projectiles</param>
            <param name="seed">Random seed for repeating bombardment patterns</param>
        </member>
        <member name="M:TriggerManager.CreateScriptedBurn(UnityEngine.Vector3)">
            <summary>
                Sets a block on fire at the specified location by sending a Fire damage message to
                the block. Used for scripted fire spreading or burning sequences in levels.
            </summary>
            <param name="location">World position where the fire should start</param>
        </member>
        <member name="M:TriggerManager.CreateScriptedCollapse(UnityEngine.Vector3)">
            <summary>
                Triggers a block collapse at the specified location by sending an InstaGib damage
                RPC to the block at that position. Used to create scripted terrain destruction
                sequences.
            </summary>
            <param name="location">World position where the block collapse should occur</param>
        </member>
        <member name="M:TriggerManager.CreateScriptedExplosion(UnityEngine.Vector3,System.Int32)">
            <summary>
                Creates an explosion at the specified location with customizable damage.
                Instantiates a HiddenExplosives prefab and immediately triggers its explosion,
                useful for scripted explosive sequences in levels.
            </summary>
            <param name="location">World position where the explosion should occur</param>
            <param name="damage">The damage value for the explosion</param>
        </member>
        <!-- Scripted Events Fields -->
        <member name="F:TriggerManager.bombardments">
            <summary>
                Static list of active repeating bombardment patterns. Each bombardment fires
                projectiles at timed intervals when visible on screen. Updated in Update() to
                countdown and spawn projectiles with random spread.
            </summary>
        </member>
        <!-- Trigger Actions Methods -->
        <member name="M:TriggerManager.AddCountdownAction(System.Single)">
            <summary>
                Adds a countdown timer action to the active actions queue. Creates a system action
                that will start the level countdown after the specified delay.
            </summary>
            <param name="offset">Time in seconds to wait before starting the countdown</param>
        </member>
        <member name="M:TriggerManager.AddExplosionRunSwoopAction">
            <summary>
                Creates a dramatic camera sequence that starts at the nearest checkpoint then swoops
                to the starting position. Used for explosion run game modes to show the level before
                the action begins.
            </summary>
        </member>
        <member name="M:TriggerManager.AddPlayerIntroAction(Player,System.Single)">
            <summary>
                Creates a player introduction sequence with camera movements and UI elements. Adds
                multiple timed actions including camera zoom/pan to the player, player highlighting,
                and hero name display. Each player gets staggered timing for multiplayer intros.
            </summary>
            <param name="player">The player to introduce</param>
            <param name="timeOffset">Additional time offset to add to the introduction sequence timing</param>
        </member>
        <member name="M:TriggerManager.ClearActions">
            <summary>
                Clears all active trigger actions and releases camera control back to normal
                gameplay. Called when actions need to be cancelled or when transitioning between
                game states.
            </summary>
        </member>
        <member name="M:TriggerManager.ClearActiveCameraActions">
            <summary>
                Marks all active camera movement actions as done without clearing other action
                types. Used when camera control needs to be returned to the player while other
                actions continue.
            </summary>
        </member>
        <member name="M:TriggerManager.GetActiveActions(TriggerActionType)">
            <summary>
                Retrieves all currently active trigger actions of a specific type. Used to query
                what actions are running, particularly for camera control and UI systems.
            </summary>
            <param name="type">The type of trigger actions to retrieve</param>
            <returns>List of active actions matching the specified type, or null if no matches found</returns>
        </member>
        <member name="M:TriggerManager.StartActionRPC(TriggerAction)">
            <summary>
                Protected method that starts a trigger action if it's in the waiting state or set to
                repeat. Called via RPC to ensure synchronized action execution across clients.
            </summary>
            <param name="action">The trigger action to start</param>
        </member>
        <member name="M:TriggerManager.StopTriggerAction(System.String)">
            <summary>
                Stops all active trigger actions with the specified name by marking them as done.
                Only affects actions currently in the Busy state. Used to interrupt ongoing
                sequences based on game events.
            </summary>
            <param name="action">The name of the action(s) to stop</param>
        </member>
        <!-- Trigger Actions Fields -->
        <member name="F:TriggerManager.activeActions">
            <summary>
                List of all currently active or pending trigger actions. Updated each frame in
                Update() to process waiting actions, execute busy actions, and remove completed
                ones. Initialized in Awake().
            </summary>
        </member>
        <!-- Trigger Variables Methods -->
        <member name="M:TriggerManager.GetVariableValue(System.String)">
            <summary>
                Retrieves the current value of a named trigger variable used for level scripting
                logic. Variables can track counts, states, or other numeric values that triggers can
                evaluate.
            </summary>
            <param name="variableName">The name of the variable to retrieve</param>
            <returns>The current value of the variable, or -1 if the variable doesn't exist</returns>
        </member>
        <member name="M:TriggerManager.HasVariable(System.String)">
            <summary>
                Checks whether a trigger variable exists in the system. Used by triggers and actions
                to verify variable existence before attempting to read or modify values.
            </summary>
            <param name="variableName">The name of the variable to check for</param>
            <returns>True if the variable exists in the trigger variables dictionary</returns>
        </member>
        <member name="M:TriggerManager.IncrementVariable(System.String,System.Single)">
            <summary>
                Increments a trigger variable by the specified amount, creating it if it doesn't
                exist. Fires the OnTriggerVariableChanged event after modification to notify
                listeners of the change.
            </summary>
            <param name="variableName">The name of the variable to increment</param>
            <param name="amount">The amount to add to the variable's current value (can be negative)</param>
        </member>
        <member name="M:TriggerManager.SetVariable(System.String,System.Single)">
            <summary>
                Sets a trigger variable to a specific value, creating it if it doesn't exist. Fires
                the OnTriggerVariableChanged event after modification to notify listeners of the
                change.
            </summary>
            <param name="variableName">The name of the variable to set</param>
            <param name="amount">The new value for the variable</param>
        </member>
        <!-- Trigger Variables Fields -->
        <member name="F:TriggerManager.OnTriggerVariableChanged">
            <summary>
                Event delegate fired whenever a trigger variable is modified through SetVariable or
                IncrementVariable. Allows systems to react to variable changes for UI updates or
                game logic.
            </summary>
        </member>
        <!-- Camera Control Properties -->
        <member name="P:TriggerManager.PauseCameraMovements">
            <summary>
                Gets or sets whether camera movement actions should be paused. When true, prevents
                camera move trigger actions from executing, allowing manual camera control during
                cutscenes or special sequences.
            </summary>
        </member>
        <!-- Player Management Properties -->
        <member name="P:TriggerManager.DestroyOffscreenPlayers">
            <summary>
                Gets or sets whether players should be destroyed when they go offscreen. When set to
                true, initiates a 0.1 second delay before the setting automatically reverts to
                false. Used for special level sequences where offscreen players should be
                eliminated.
            </summary>
        </member>
        <!-- Player Management Fields -->
        <member name="F:TriggerManager.blockingUnitMovement">
            <summary>
                Flag that temporarily blocks all unit movement when set to true. Reset to false at
                the start of each Update() cycle. Used by trigger actions to freeze gameplay during
                scripted sequences.
            </summary>
        </member>
        <member name="F:TriggerManager.destroyOffscreenFlipDelay">
            <summary>
                Countdown timer for the destroy offscreen players feature. When
                DestroyOffscreenPlayers is set to true, this timer counts down from 0.1 seconds
                before automatically disabling the feature.
            </summary>
        </member>
        <member name="F:TriggerManager.destroyOffscreenPlayers">
            <summary>
                Static backing field for the DestroyOffscreenPlayers property. When true, causes
                offscreen players to be destroyed. Automatically reverts to false after the flip
                delay expires.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:Unit.Awake">
            <summary>
                Unity's Awake method that initializes the unit by caching AI components. Searches
                for PolymorphicAI components both on the unit itself and recursively through its
                parent/child hierarchy.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:Unit.BurnInternal(System.Int32,System.Int32)">
            <summary>
                Handles internal burn damage to the unit. Base implementation is empty. Override in
                derived classes to implement burn damage effects and animations.
            </summary>
            <param name="damage">The amount of burn damage to apply.</param>
            <param name="direction">The direction of the burn effect (-1 for left, 1 for right).</param>
        </member>
        <member name="M:Unit.CreateGibEffects(DamageType,System.Single,System.Single)">
            <summary>
                Creates visual gib effects when the unit is destroyed. Base implementation is empty.
                Override in derived classes to spawn gib particles and effects.
            </summary>
            <param name="damageType">The type of damage that caused the gibbing.</param>
            <param name="xI">The horizontal force for gib particles.</param>
            <param name="yI">The vertical force for gib particles.</param>
        </member>
        <member name="M:Unit.Damage(System.Int32,DamageType,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour,System.Single,System.Single)">
            <summary>
                Handles damage dealt to the unit. Base implementation is empty. Override in derived
                classes to implement damage processing, health reduction, and death handling.
            </summary>
            <param name="damage">The amount of damage to deal.</param>
            <param name="damageType">The type of damage being dealt.</param>
            <param name="xI">The X impulse force from the damage.</param>
            <param name="yI">The Y impulse force from the damage.</param>
            <param name="direction">The direction the damage came from (-1 for left, 1 for right).</param>
            <param name="damageSender">The MonoBehaviour that caused the damage.</param>
            <param name="hitX">The X coordinate where the damage hit.</param>
            <param name="hitY">The Y coordinate where the damage hit.</param>
        </member>
        <member name="M:Unit.Death(System.Single,System.Single,DamageObject)">
            <summary>
                Handles the unit's death, hiding attachments and setting the action state to Dead.
                Sends death notification via RPC if the unit is owned by the local player or is not
                a hero. Special handling for MookArmouredGuy with SelfEsteem damage.
            </summary>
            <param name="xI">The horizontal force applied at death.</param>
            <param name="yI">The vertical force applied at death.</param>
            <param name="damage">The damage object containing information about what killed the unit.</param>
        </member>
        <member name="M:Unit.DeathRPC(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Remote procedure call for synchronizing death across the network. Sets the unit's
                position and triggers the Death method if the unit isn't already dead.
            </summary>
            <param name="xI">The horizontal force applied at death.</param>
            <param name="yI">The vertical force applied at death.</param>
            <param name="_x">The X position where death occurred.</param>
            <param name="_y">The Y position where death occurred.</param>
        </member>
        <member name="M:Unit.Gib(DamageType,System.Single,System.Single)">
            <summary>
                Protected method for gibbing the unit into pieces. Base implementation is empty.
                Override in derived classes to implement gibbing mechanics.
            </summary>
            <param name="damageType">The type of damage that caused the gibbing.</param>
            <param name="xI">The horizontal force of the gibbing.</param>
            <param name="yI">The vertical force of the gibbing.</param>
        </member>
        <member name="M:Unit.GibNow(DamageType,System.Single,System.Single)">
            <summary>
                Immediately gibs (explodes into pieces) the unit. Public wrapper that calls the
                protected Gib method.
            </summary>
            <param name="damageType">The type of damage that caused the gibbing.</param>
            <param name="xI">The horizontal force of the gibbing.</param>
            <param name="yI">The vertical force of the gibbing.</param>
        </member>
        <member name="M:Unit.HeadShot(System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Single,System.Single,UnityEngine.MonoBehaviour)">
            <summary>
                Handles headshot damage to the unit. Simply delegates to the regular Damage method
                with the same parameters. Override in derived classes to implement special headshot
                behavior.
            </summary>
            <param name="damage">The amount of damage to deal.</param>
            <param name="damageType">The type of damage being dealt.</param>
            <param name="xI">The X impulse force from the damage.</param>
            <param name="yI">The Y impulse force from the damage.</param>
            <param name="direction">The direction the damage came from (-1 for left, 1 for right).</param>
            <param name="xHit">The X coordinate where the headshot hit.</param>
            <param name="yHit">The Y coordinate where the headshot hit.</param>
            <param name="damageSender">The MonoBehaviour that caused the damage.</param>
        </member>
        <member name="M:Unit.Impale(UnityEngine.Transform,UnityEngine.Vector3,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Impales the unit on an object, attaching it to the specified transform. Base
                implementation is empty. Override in derived classes to implement impalement
                mechanics.
            </summary>
            <param name="impaleTransform">The transform to attach the impaled unit to.</param>
            <param name="direction">The direction vector of the impalement.</param>
            <param name="damage">The damage dealt by the impalement.</param>
            <param name="xI">The horizontal velocity imparted by the impalement.</param>
            <param name="yI">The vertical velocity imparted by the impalement.</param>
            <param name="xOffset">The horizontal offset from the impale transform.</param>
            <param name="yOffset">The vertical offset from the impale transform.</param>
        </member>
        <member name="M:Unit.Knock(DamageType,System.Single,System.Single,System.Boolean)">
            <summary>
                Applies knockback force to the unit. Base implementation is empty. Override in
                derived classes to implement knockback physics and animations.
            </summary>
            <param name="damageType">The type of damage causing the knockback.</param>
            <param name="xI">The X knockback force.</param>
            <param name="yI">The Y knockback force.</param>
            <param name="forceTumble">Whether to force the unit into a tumbling state.</param>
        </member>
        <member name="M:Unit.KnockSimple(DamageObject)">
            <summary>
                Simplified knockback method that processes knockback from a DamageObject. Base
                implementation is empty. Override in derived classes to extract knockback parameters
                from the damage object.
            </summary>
            <param name="damageObject">The damage object containing knockback information.</param>
        </member>
        <member name="M:Unit.QuietDeath">
            <summary>
                Kills the unit quietly without visual or audio effects. Sets health to 0, action
                state to Dead, and sends RPC notification if not already sent.
            </summary>
        </member>
        <member name="M:Unit.QuietDeathRPC(System.Single,System.Single)">
            <summary>
                Remote procedure call for synchronizing quiet death across the network. Sets the
                unit's position and triggers QuietDeath if the unit isn't already dead.
            </summary>
            <param name="_x">The X position where death occurred.</param>
            <param name="_y">The Y position where death occurred.</param>
        </member>
        <member name="M:Unit.ReduceDeathTimer(System.Int32,System.Single)">
            <summary>
                Reduces the unit's death timer, potentially used for revival mechanics. Base
                implementation is empty. Override in derived classes to implement death timer
                reduction.
            </summary>
            <param name="playerNum">The player number requesting the timer reduction.</param>
            <param name="newTime">The new death timer value.</param>
        </member>
        <member name="M:Unit.SetDeathType(DamageType,System.Int32)">
            <summary>
                Determines the death animation type based on damage type and remaining health. If
                health is below -10, sets to Gibbed (or Explode for Unholy/Explosion damage).
                Otherwise selects appropriate death type: Fire damage causes fire death, explosions
                cause bullet death, melee/knife causes knife death, falls cause fall death, etc.
            </summary>
            <param name="damageType">The type of damage that killed the unit.</param>
            <param name="health">The unit's health at time of death.</param>
        </member>
        <member name="M:Unit.SetVelocity(DamageType,System.Single,System.Single,System.Single)">
            <summary>
                Sets the unit's velocity from damage or explosion effects. Base implementation is
                empty. Override in derived classes to apply velocity changes.
            </summary>
            <param name="damageType">The type of damage causing the velocity change.</param>
            <param name="xI">The base X velocity.</param>
            <param name="xIBlast">The additional X blast velocity.</param>
            <param name="yIBlast">The Y blast velocity.</param>
        </member>
        <member name="M:Unit.SilentDeath">
            <summary>
                Alias for QuietDeath that kills the unit without visual or audio effects. Simply
                calls QuietDeath internally.
            </summary>
        </member>
        <member name="M:Unit.Unimpale(System.Int32,DamageType,System.Single,System.Single,UnityEngine.MonoBehaviour)">
            <summary>
                Removes the unit from an impaled state and applies damage. Reduces the knockback
                velocity by 20% and applies damage at the unit's position with an 8 unit vertical
                offset.
            </summary>
            <param name="damage">The damage to apply when unimpaling.</param>
            <param name="damageType">The type of damage to apply.</param>
            <param name="xI">The horizontal knockback force.</param>
            <param name="yI">The vertical knockback force.</param>
            <param name="firedBy">The MonoBehaviour that caused the unimpalement.</param>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:Unit._diedFromOOB">
            <summary>
                Protected flag indicating whether this unit died from going out of bounds. Set
                during death processing to track boundary-related deaths.
            </summary>
        </member>
        <member name="F:Unit.burnCounter">
            <summary>
                Protected timer that tracks when to apply the next burn damage tick. Counts down
                between damage applications.
            </summary>
        </member>
        <member name="F:Unit.burnDamage">
            <summary>
                Protected value specifying the amount of damage dealt per burn tick. Applied
                periodically while the unit is burning.
            </summary>
        </member>
        <member name="F:Unit.burnTime">
            <summary>
                The total duration in seconds that the unit will burn when set on fire. Hidden in
                Unity Inspector. Controls how long burn damage is applied.
            </summary>
        </member>
        <member name="F:Unit.deathNotificationSent">
            <summary>
                Public flag tracking whether death has been synchronized across the network.
                Prevents duplicate death RPCs in multiplayer.
            </summary>
        </member>
        <member name="F:Unit.deathTime">
            <summary>
                Protected timestamp recording when the unit died. Used for death animation timing
                and cleanup scheduling.
            </summary>
        </member>
        <member name="F:Unit.deathType">
            <summary>
                Protected enum storing how this unit died (Bullet, Explode, Fire, etc.). Used to
                select appropriate death animations and effects. Set by SetDeathType method.
            </summary>
        </member>
        <member name="F:Unit.hasNotifiedDeathType">
            <summary>
                Protected flag indicating whether the death type has been reported for achievements
                or statistics. Ensures deaths are only counted once.
            </summary>
        </member>
        <member name="F:Unit.hasReportedKill">
            <summary>
                Protected flag tracking whether kill credit has been given to the player who killed
                this unit. Prevents duplicate kill scoring.
            </summary>
        </member>
        <member name="F:Unit.plasmaCounter">
            <summary>
                Protected timer that tracks when to apply the next plasma damage tick. Counts down
                between damage applications.
            </summary>
        </member>
        <member name="F:Unit.plasmaDamage">
            <summary>
                Protected value specifying the amount of damage dealt per plasma damage tick.
                Applied periodically while affected by plasma.
            </summary>
        </member>
        <member name="F:Unit.projectile">
            <summary>
                Reference to a projectile this unit has caught or is holding. Used by units that can
                catch and redirect projectiles. Null when not holding anything.
            </summary>
        </member>
        <member name="F:Unit.shockCounter">
            <summary>
                Protected timer that tracks when to apply the next shock damage tick. Counts down
                between damage applications.
            </summary>
        </member>
        <member name="F:Unit.shockDamage">
            <summary>
                Protected value specifying the amount of damage dealt per electrical shock tick.
                Applied periodically while being shocked.
            </summary>
        </member>
        <member name="F:Unit.timesKickedByVanDammeSinceLanding">
            <summary>
                Tracks the number of consecutive kicks received from Van Damme (JCVD) characters
                since the unit last touched the ground. Used for multi-kick combo tracking and
                special animations. Hidden in Unity Inspector.
            </summary>
        </member>
        <!-- Special Abilities Methods -->
        <member name="M:Unit.CatchFriendlyBullets">
            <summary>
                Determines whether this unit can catch and neutralize friendly projectiles. Base
                implementation returns false. Override in units with bullet-catching abilities.
            </summary>
            <returns>True if the unit can catch friendly bullets, false otherwise.</returns>
        </member>
        <member name="M:Unit.GetSpecialAmmo">
            <summary>
                Returns the current amount of special ammunition for this unit. Base implementation
                returns 0. Override in units with special weapons to return actual ammo count.
            </summary>
            <returns>The amount of special ammunition available.</returns>
        </member>
        <member name="M:Unit.IsFlexing">
            <summary>
                Checks whether the unit is currently performing a flex animation or pose. Base
                implementation returns false. Override in units with flex animations to return
                actual state.
            </summary>
            <returns>True if flexing, false otherwise.</returns>
        </member>
        <member name="M:Unit.IsInStealthMode">
            <summary>
                Checks whether the unit is currently in stealth mode. Base implementation returns
                false. Override in stealth-capable units to return actual stealth state.
            </summary>
            <returns>True if in stealth mode, false otherwise.</returns>
        </member>
        <member name="M:Unit.PlayingSummoningAnimation">
            <summary>
                Checks whether the unit is currently playing any part of a summoning animation. Base
                implementation returns false. Override in summoning units to return actual animation
                state.
            </summary>
            <returns>True if playing any summoning animation, false otherwise.</returns>
        </member>
        <member name="M:Unit.PlayingSummoningAnimationIntro">
            <summary>
                Checks whether the unit is currently playing the intro portion of a summoning
                animation. Base implementation returns false. Override in summoning units to track
                animation state.
            </summary>
            <returns>True if playing summoning intro animation, false otherwise.</returns>
        </member>
        <member name="M:Unit.ShowFuelGauge">
            <summary>
                Determines whether this unit should display a fuel gauge in the UI. Base
                implementation returns false. Override in fuel-consuming units to enable fuel gauge
                display.
            </summary>
            <returns>True if fuel gauge should be shown, false otherwise.</returns>
        </member>
        <member name="M:Unit.StartSummoningAnimation">
            <summary>
                Begins playing a summoning animation sequence. Base implementation is empty.
                Override in units with summoning abilities to trigger the animation.
            </summary>
        </member>
        <member name="M:Unit.StopSummoningAnimation">
            <summary>
                Stops the currently playing summoning animation. Base implementation is empty.
                Override in units with summoning abilities to handle animation cleanup.
            </summary>
        </member>
        <member name="M:Unit.UsingJetpack">
            <summary>
                Checks whether the unit is currently using a jetpack. Base implementation returns
                false. Override in jetpack-equipped units to return actual jetpack usage state.
            </summary>
            <returns>True if using jetpack, false otherwise.</returns>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:Unit.BackSomersault(System.Boolean)">
            <summary>
                Performs a backward somersault animation or movement. Base implementation is empty.
                Override in acrobatic units to implement backflip mechanics.
            </summary>
            <param name="forceTumble">Whether to force the unit into a tumbling state.</param>
        </member>
        <member name="M:Unit.CanDisableOffGround">
            <summary>
                Determines whether this unit can be disabled when not touching the ground. Base
                implementation always returns false. Override in derived classes to allow air
                disabling.
            </summary>
            <returns>True if the unit can be disabled while airborne, false otherwise.</returns>
        </member>
        <member name="M:Unit.ForceFaceDirection(System.Int32)">
            <summary>
                Forces the unit to face a specific direction by flipping its transform scale.
                Negative values face left (X scale -1), positive values face right (X scale 1), and
                zero does nothing.
            </summary>
            <param name="direction">The direction to face (-1 for left, 1 for right, 0 for no change).</param>
        </member>
        <member name="M:Unit.FrontSomersault">
            <summary>
                Performs a forward somersault animation or movement. Base implementation is empty.
                Override in acrobatic units to implement frontflip mechanics.
            </summary>
        </member>
        <member name="M:Unit.IsInQuicksand">
            <summary>
                Checks whether the unit is currently in quicksand. Base implementation always
                returns false. Override in derived classes to implement quicksand detection.
            </summary>
            <returns>True if the unit is in quicksand, false otherwise.</returns>
        </member>
        <member name="M:Unit.IsNearGround(System.Single)">
            <summary>
                Checks whether the unit is within a specified distance from the ground. Base
                implementation always returns true regardless of the offset parameter. Override in
                derived classes for actual distance checking.
            </summary>
            <param name="maxOffset">The maximum distance from ground to check.</param>
            <returns>True if within maxOffset distance from ground, false otherwise.</returns>
        </member>
        <member name="M:Unit.IsOnGround">
            <summary>
                Checks whether the unit is currently on the ground. Base implementation always
                returns true. Override in derived classes to implement ground detection logic.
            </summary>
            <returns>True if the unit is on ground, false otherwise.</returns>
        </member>
        <member name="M:Unit.SetPosition">
            <summary>
                Updates the unit's world position using the X and Y coordinates with Z offset
                adjustments. If the unit is submerged in a blood pool, adds an additional 8 units to
                the Z offset to create a visual depth effect.
            </summary>
        </member>
        <member name="M:Unit.SetPositionAndVelocity(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets both the position and velocity of the unit in one operation. Base
                implementation is empty. Override in derived classes to handle synchronized position
                and velocity updates.
            </summary>
            <param name="X">The X coordinate to set.</param>
            <param name="Y">The Y coordinate to set.</param>
            <param name="xi">The X velocity to set.</param>
            <param name="yi">The Y velocity to set.</param>
        </member>
        <member name="M:Unit.SetSpeed(System.Single,System.Single)">
            <summary>
                Sets the unit's horizontal and vertical velocity components. Overrides the base
                implementation to directly assign both velocity values.
            </summary>
            <param name="xi">The horizontal velocity to set.</param>
            <param name="yi">The vertical velocity to set.</param>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:Unit.IsParachuteActive">
            <summary>
                Gets or sets whether the unit's parachute is currently active. Base implementation
                always returns true for the getter and does nothing for the setter. Override in
                derived classes to implement actual parachute logic.
            </summary>
        </member>
        <member name="P:Unit.TheCollider">
            <summary>
                Gets the cached Collider component for this unit. Lazy-loads and caches the
                component on first access for efficient physics interactions.
            </summary>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:Unit.attachedToZipline">
            <summary>
                Reference to the ZipLine object this unit is currently attached to. Null when not on
                a zipline. Set by AttachToZipline method.
            </summary>
        </member>
        <member name="F:Unit.collider_">
            <summary>
                Private cached reference to the unit's Collider component. Used by the TheCollider
                property to avoid repeated GetComponent calls.
            </summary>
        </member>
        <member name="F:Unit.collumn">
            <summary>
                The grid column position of this unit. Used for grid-based positioning systems in
                certain game modes or enemy formations. Note: Field name is misspelled.
            </summary>
        </member>
        <member name="F:Unit.headHeight">
            <summary>
                The height of the unit's head hitbox for headshot detection in game units. Defaults
                to 15 units. Hidden in Unity Inspector.
            </summary>
        </member>
        <member name="F:Unit.height">
            <summary>
                The height of the unit's collision bounds in game units. Defaults to 8 units. Used
                for physics collision detection and spatial calculations.
            </summary>
        </member>
        <member name="F:Unit.lastWallAttachDirection">
            <summary>
                Protected storage of the previous wall attachment direction. Used to detect
                direction changes during wall climbing transitions.
            </summary>
        </member>
        <member name="F:Unit.rope">
            <summary>
                Protected reference to a PredabroRope object for general rope interactions.
                Different from strungUpBy which specifically handles trap suspension. Used for
                climbing or other rope mechanics.
            </summary>
        </member>
        <member name="F:Unit.row">
            <summary>
                The grid row position of this unit. Used for grid-based positioning systems in
                certain game modes or enemy formations.
            </summary>
        </member>
        <member name="F:Unit.slidingOnZipline">
            <summary>
                Flag indicating whether the unit is actively sliding along a zipline. True during
                zipline traversal, false when stationary or not on zipline.
            </summary>
        </member>
        <member name="F:Unit.strungUpBy">
            <summary>
                Reference to the PredabroRope that has trapped and suspended this unit. Used by
                Predator-style rope trap mechanics. Null when not trapped.
            </summary>
        </member>
        <member name="F:Unit.strungUpX">
            <summary>
                The X coordinate where this unit is suspended when caught in a rope trap. Used with
                Predator-style rope trap mechanics. Hidden in Unity Inspector.
            </summary>
        </member>
        <member name="F:Unit.strungUpY">
            <summary>
                The Y coordinate where this unit is suspended when caught in a rope trap. Paired
                with strungUpX for complete position storage during rope suspension. Hidden in Unity
                Inspector.
            </summary>
        </member>
        <member name="F:Unit.suspendFromRope">
            <summary>
                Flag indicating whether this unit should be suspended from a rope trap. Controls
                whether the SuspendFromRope method will create a rope trap for this unit.
            </summary>
        </member>
        <member name="F:Unit.t">
            <summary>
                Protected time value used for frame-independent calculations. Defaults to 0.1f. When
                set to 0, the T property returns clamped delta time instead of this value.
            </summary>
        </member>
        <member name="F:Unit.wallAttachDirection">
            <summary>
                The current direction this unit is attached to a wall. Uses DirectionEnum (Up, Down,
                Left, Right, Any) to track wall climbing orientation.
            </summary>
        </member>
        <member name="F:Unit.width">
            <summary>
                The width of the unit's collision bounds in game units. Defaults to 8 units. Used
                for physics collision detection and spatial calculations.
            </summary>
        </member>
        <member name="F:Unit.zOffset">
            <summary>
                The Z-axis offset for this unit's position. Used for depth sorting and visual
                layering. Modified when submerged in blood pools or for special effects.
            </summary>
        </member>
        <!-- Character State & Effects Properties -->
        <member name="P:Unit.CanDisembowel">
            <summary>
                Gets whether this unit can be disemboweled for gruesome death animations. Returns
                true if the canDisembowel field is set. Special handling for MookRiotShield units
                which also checks if their shield is not present.
            </summary>
        </member>
        <member name="P:Unit.CanHear">
            <summary>
                Gets or sets whether this unit can detect sounds and noise from other units. Only
                returns true if both the internal canHear flag is true AND the GameObject is active
                in the hierarchy. Used for AI awareness and detection systems.
            </summary>
        </member>
        <member name="P:Unit.CanHearFriendlies">
            <summary>
                Gets whether this unit can hear sounds from friendly units. Base implementation
                always returns false, but can be overridden in derived classes to allow friendly
                unit detection.
            </summary>
        </member>
        <member name="P:Unit.T">
            <summary>
                Gets the frame-independent time value used for animations and movement calculations.
                If the internal time field is 0, returns the current delta time clamped to a maximum
                of 0.03334f (30 FPS). Otherwise returns the stored time value.
            </summary>
        </member>
        <member name="P:Unit.actionState">
            <summary>
                Gets or sets the current action state of the unit, such as Dead or other states that
                define what the unit is currently doing.
            </summary>
        </member>
        <member name="P:Unit.frame">
            <summary>
                Gets or sets the current animation frame number for this unit. Used to track which
                frame of animation is currently being displayed.
            </summary>
        </member>
        <member name="P:Unit.invulnerable">
            <summary>
                Gets or sets whether the unit is invulnerable to damage. Returns true if the
                Invulnerable field is set, the GameObject is inactive, or if force invulnerability
                is enabled and the unit is a hero. Setting this property directly modifies the
                Invulnerable field.
            </summary>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:Unit.Invulnerable">
            <summary>
                Private backing field for the invulnerable property. Controls whether the unit can
                take damage. Used in conjunction with other invulnerability conditions.
            </summary>
        </member>
        <member name="F:Unit._actionState">
            <summary>
                Public backing field for the actionState property. Stores the current action state
                (e.g., Dead, Idle) of the unit. Part of the main state machine system.
            </summary>
        </member>
        <member name="F:Unit._frame">
            <summary>
                Protected backing field for the frame property. Stores the current animation frame
                number for this unit.
            </summary>
        </member>
        <member name="F:Unit.bloodColor">
            <summary>
                The color of blood particles emitted when this unit takes damage. Enum values
                include Red (default), Green (alien), Oil (mechanical), Ash (fire), and Blue_Flash
                (special).
            </summary>
        </member>
        <member name="F:Unit.canDisembowel">
            <summary>
                Flag determining whether this unit can be disemboweled for gruesome death
                animations. Used by the CanDisembowel property which adds special handling for
                shielded units.
            </summary>
        </member>
        <member name="F:Unit.flash">
            <summary>
                Controls whether the unit should flash white when taking damage. Used for visual
                feedback to indicate the unit has been hit.
            </summary>
        </member>
        <member name="F:Unit.isHellEnemy">
            <summary>
                Flag marking this unit as a Hell-themed enemy. Affects enemy behavior, scoring
                systems, and potentially damage resistances or special abilities.
            </summary>
        </member>
        <member name="F:Unit.isZombie">
            <summary>
                Protected flag indicating whether this unit is an undead/zombie type. Affects AI
                behavior and potentially damage resistance or animation sets.
            </summary>
        </member>
        <member name="F:Unit.skinnedPrefab">
            <summary>
                Reference to an alternate "skinned" version of this unit prefab. Used to spawn a
                flayed variant when the unit dies from specific damage types or conditions.
            </summary>
        </member>
        <member name="F:Unit.useImpaledFrames">
            <summary>
                Determines whether the unit should use special impaled animation frames when impaled
                on spikes or other objects. Enables death-specific animations.
            </summary>
        </member>
        <!-- Input & Control Methods -->
        <member name="M:Unit.AnyInput">
            <summary>
                Checks whether the unit is receiving any input from a controller or AI. Base
                implementation always returns false. Override in derived classes to detect input.
            </summary>
            <returns>True if any input is detected, false otherwise.</returns>
        </member>
        <member name="M:Unit.IsPressingDown">
            <summary>
                Checks whether the unit is pressing the down input direction. Base implementation
                returns false. Override in controllable units to check actual input state.
            </summary>
            <returns>True if pressing down, false otherwise.</returns>
        </member>
        <member name="M:Unit.IsPressingLeftOrRight">
            <summary>
                Checks whether the unit is pressing left or right directional input. Base
                implementation returns false. Override in controllable units to check actual
                horizontal input state.
            </summary>
            <returns>True if pressing left or right, false otherwise.</returns>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:Unit.AttachToZipline(ZipLine)">
            <summary>
                Attaches the unit to a zipline for traversal. Sets the attachedToZipline field to
                the provided zipline reference.
            </summary>
            <param name="zipLine">The zipline to attach to.</param>
        </member>
        <member name="M:Unit.IsSubmergedInPool">
            <summary>
                Checks whether the unit is currently standing in a blood pool. Returns true if the
                block the unit is standing on has a blood pool above it.
            </summary>
            <returns>True if submerged in a blood pool, false otherwise.</returns>
        </member>
        <member name="M:Unit.RollOnto(System.Int32)">
            <summary>
                Handles the unit being rolled onto by another object. Base implementation is empty.
                Override in derived classes to implement crushing or rolling interactions.
            </summary>
            <param name="direction">The direction of the rolling object (-1 for left, 1 for right).</param>
        </member>
        <member name="M:Unit.SuspendFromRope">
            <summary>
                Suspends the unit from a rope by instantiating a PredabroRope object from the Map's
                prefab and setting it up with this unit.
            </summary>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:Unit.barbedWireWithin">
            <summary>
                Protected reference to barbed wire (Spikes object) that the unit is currently in
                contact with. Used for environmental damage and movement restriction from barbed
                wire hazards.
            </summary>
        </member>
        <member name="F:Unit.blockCurrentlyStandingOn">
            <summary>
                Reference to the terrain Block that this unit is currently standing on. Used for
                ground detection and environmental hazard checks like blood pools.
            </summary>
        </member>
        <member name="F:Unit.submergedInPool">
            <summary>
                Protected flag tracking whether the unit is currently standing in a blood pool. Set
                based on the block the unit is standing on having a blood pool above it.
            </summary>
        </member>
        <member name="F:Unit.submergedOffset">
            <summary>
                The Z-axis offset applied when the unit is submerged in a blood pool. Defaults to 8
                units. Creates a visual depth effect by adjusting the unit's rendering layer.
            </summary>
        </member>
        <!-- Status Effects Methods -->
        <member name="M:Unit.Blind(System.Single)">
            <summary>
                Applies a blind status effect to the unit for the specified duration. Base
                implementation is empty. Override in derived classes to implement vision impairment
                effects.
            </summary>
            <param name="time">The duration of the blind effect in seconds.</param>
        </member>
        <member name="M:Unit.Blind">
            <summary>
                Applies a blind status effect to the unit with a default duration. Base
                implementation is empty. Override in derived classes to implement vision impairment
                effects.
            </summary>
        </member>
        <member name="M:Unit.CanFreeze">
            <summary>
                Checks whether this unit can be affected by freeze effects. Base implementation
                returns false, providing freeze immunity by default. Override to allow freezing.
            </summary>
            <returns>True if the unit can be frozen, false otherwise.</returns>
        </member>
        <member name="M:Unit.Dance(System.Single)">
            <summary>
                Forces the unit to dance for the specified duration as a crowd control effect. Base
                implementation is empty. Override in derived classes to implement dancing animations
                and behavior.
            </summary>
            <param name="time">The duration of the dance effect in seconds.</param>
        </member>
        <member name="M:Unit.Freeze(System.Single)">
            <summary>
                Applies a freeze status effect to the unit for the specified duration. Base
                implementation is empty. Override in derived classes to implement freezing mechanics
                and visuals.
            </summary>
            <param name="time">The duration of the freeze effect in seconds.</param>
        </member>
        <member name="M:Unit.IsBlind">
            <summary>
                Checks whether the unit is currently affected by a blind status effect. Base
                implementation always returns false. Override in derived classes to return actual
                blind state.
            </summary>
            <returns>True if the unit is blinded, false otherwise.</returns>
        </member>
        <member name="M:Unit.IsIncapacitated">
            <summary>
                Checks whether the unit is currently incapacitated and unable to act. Base
                implementation always returns false. Override in derived classes to implement
                incapacitation logic.
            </summary>
            <returns>True if incapacitated, false otherwise.</returns>
        </member>
        <member name="M:Unit.Panic(System.Boolean)">
            <summary>
                Causes the unit to panic, affecting its AI behavior. Base implementation is empty.
                Override in derived classes to implement panic behavior.
            </summary>
            <param name="forgetPlayer">Whether the unit should forget its current target player.</param>
        </member>
        <member name="M:Unit.Panic(System.Single,System.Boolean)">
            <summary>
                Causes the unit to panic for a specified duration. Base implementation is empty.
                Override in derived classes to implement timed panic behavior.
            </summary>
            <param name="time">The duration of the panic effect in seconds.</param>
            <param name="forgetPlayer">Whether the unit should forget its current target player.</param>
        </member>
        <member name="M:Unit.Panic(System.Int32,System.Single,System.Boolean)">
            <summary>
                Causes the unit to panic in a specific direction for a specified duration. Base
                implementation is empty. Override in derived classes to implement directional panic
                behavior.
            </summary>
            <param name="direction">The direction to panic in (-1 for left, 1 for right).</param>
            <param name="time">The duration of the panic effect in seconds.</param>
            <param name="forgetPlayer">Whether the unit should forget its current target player.</param>
        </member>
        <member name="M:Unit.RecoverFromInsemination">
            <summary>
                Allows the unit to recover from alien insemination status. Base implementation is
                empty. Override in units that can be inseminated to implement recovery logic.
            </summary>
        </member>
        <member name="M:Unit.Stun(System.Single)">
            <summary>
                Applies a stun status effect to the unit for the specified duration, preventing
                actions. Base implementation is empty. Override in derived classes to implement stun
                behavior.
            </summary>
            <param name="time">The duration of the stun effect in seconds.</param>
        </member>
        <member name="M:Unit.Stun">
            <summary>
                Applies a stun status effect to the unit with a default duration. Base
                implementation is empty. Override in derived classes to implement stun behavior.
            </summary>
        </member>
        <member name="M:Unit.TearGas(System.Single)">
            <summary>
                Applies a tear gas status effect to the unit for the specified duration. Base
                implementation is empty. Override in derived classes to implement tear gas effects
                like impaired vision and movement.
            </summary>
            <param name="time">The duration of the tear gas effect in seconds.</param>
        </member>
        <member name="M:Unit.Terrify">
            <summary>
                Applies a terrify effect to the unit, likely more intense than panic. Base
                implementation is empty. Override in derived classes to implement terror behavior.
            </summary>
        </member>
        <!-- Unit Management Methods -->
        <member name="M:Unit.Activate">
            <summary>
                Activates the unit, enabling its functionality. Base implementation always returns
                true indicating success. Override to implement activation logic.
            </summary>
            <returns>True if activation was successful, false otherwise.</returns>
        </member>
        <member name="M:Unit.CanBeThrown">
            <summary>
                Determines whether this unit can be thrown by other units. Returns the inverse of
                IsHeavy() - units that are not heavy can be thrown.
            </summary>
            <returns>True if the unit can be thrown, false if too heavy.</returns>
        </member>
        <member name="M:Unit.CanHeadShot">
            <summary>
                Determines whether this unit can receive headshot damage. Base implementation
                returns true. Override to disable headshot vulnerability for specific units.
            </summary>
            <returns>True if the unit can be headshot, false otherwise.</returns>
        </member>
        <member name="M:Unit.CanPilotUnit(System.Int32)">
            <summary>
                Determines whether this unit can pilot another unit (such as vehicles or mechs).
                Base implementation returns false. Override in units capable of piloting to
                implement eligibility checks.
            </summary>
            <param name="newPlayerNum">The player number attempting to pilot.</param>
            <returns>True if this unit can pilot other units, false otherwise.</returns>
        </member>
        <member name="M:Unit.CheckDestroyed">
            <summary>
                Checks whether the unit should be destroyed or removed from the game. Base
                implementation is empty. Override in derived classes to implement destruction
                conditions.
            </summary>
        </member>
        <member name="M:Unit.Deactivate">
            <summary>
                Deactivates the unit, disabling its functionality. Base implementation always
                returns true indicating success. Override to implement deactivation logic.
            </summary>
            <returns>True if deactivation was successful, false otherwise.</returns>
        </member>
        <member name="M:Unit.DestroyCharacter">
            <summary>
                Destroys this unit's game object, removing it from the game. Can be overridden to
                implement custom destruction behavior or cleanup.
            </summary>
        </member>
        <member name="M:Unit.DischargePilotingUnit(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Ejects the pilot from this unit at the specified position and velocity. Base
                implementation is empty. Override in pilotable units to implement pilot ejection
                mechanics.
            </summary>
            <param name="x">The X position where the pilot should be ejected.</param>
            <param name="y">The Y position where the pilot should be ejected.</param>
            <param name="xI">The horizontal velocity to apply to the ejected pilot.</param>
            <param name="yI">The vertical velocity to apply to the ejected pilot.</param>
            <param name="stunUnit">Whether to stun the pilot upon ejection.</param>
        </member>
        <member name="M:Unit.GetFuel">
            <summary>
                Returns the current fuel level of the unit. Base implementation returns 0. Override
                in fuel-consuming units like vehicles or jetpack units to return actual fuel amount.
            </summary>
            <returns>The current fuel level as a float value.</returns>
        </member>
        <member name="M:Unit.GetFuelWarning">
            <summary>
                Checks whether the unit's fuel is low enough to display a warning. Base
                implementation returns false. Override in fuel-consuming units to implement low fuel
                detection.
            </summary>
            <returns>True if fuel is critically low, false otherwise.</returns>
        </member>
        <member name="M:Unit.GetMookType">
            <summary>
                Returns the type of mook (enemy) this unit represents. Base implementation returns
                MookType.None. Override in enemy units to return specific mook type.
            </summary>
            <returns>The MookType enum value for this unit.</returns>
        </member>
        <member name="M:Unit.GetPilottedUnit">
            <summary>
                Returns the unit currently being piloted by this unit. Base implementation returns
                null. Override in pilot-capable units to return the actual piloted unit reference.
            </summary>
            <returns>The piloted unit, or null if not piloting anything.</returns>
        </member>
        <member name="M:Unit.IsDecapitated">
            <summary>
                Checks whether the unit has been decapitated (head removed). Base implementation
                returns false. Override in units that can be decapitated to track headless state.
            </summary>
            <returns>True if decapitated, false otherwise.</returns>
        </member>
        <member name="M:Unit.IsEvil">
            <summary>
                Determines whether this unit is an evil/enemy character. Base implementation returns
                false. Override in enemy units to return true.
            </summary>
            <returns>True if the unit is evil, false otherwise.</returns>
        </member>
        <member name="M:Unit.IsHeavy">
            <summary>
                Determines whether this unit is too heavy for certain interactions like throwing.
                Base implementation returns false. Override in heavy units to return true.
            </summary>
            <returns>True if the unit is heavy, false otherwise.</returns>
        </member>
        <member name="M:Unit.OpenParachute">
            <summary>
                Opens the unit's parachute for controlled descent. Base implementation is empty.
                Override in derived classes to implement parachute deployment.
            </summary>
        </member>
        <member name="M:Unit.PilotUnit(Unit)">
            <summary>
                Initiates the piloting of this unit by another unit. Only processes if the piloting
                unit belongs to the local player and sends RPC to synchronize the piloting state
                across all players.
            </summary>
            <param name="pilotUnit">The unit that will pilot this unit.</param>
        </member>
        <member name="M:Unit.PilotUnitRPC(Unit)">
            <summary>
                Remote procedure call handler for synchronizing pilot unit changes across the
                network. Base implementation is empty. Override in pilotable units to handle the
                pilot assignment.
            </summary>
            <param name="newPilotUnit">The new pilot unit to assign.</param>
        </member>
        <member name="M:Unit.Revive(System.Int32,System.Boolean,TestVanDammeAnim)">
            <summary>
                Attempts to revive this unit from death or incapacitation. Base implementation
                returns false. Override in revivable units to implement revival mechanics.
            </summary>
            <param name="playerNum">The player number who will control the revived unit.</param>
            <param name="isUnderPlayerControl">Whether the revived unit will be under player control.</param>
            <param name="reviveSource">The unit performing the revival.</param>
            <returns>True if revival was successful, false otherwise.</returns>
        </member>
        <member name="M:Unit.ReviveRPC(System.Int32,System.Boolean,TestVanDammeAnim)">
            <summary>
                Remote procedure call for synchronizing unit revival across the network. Calls the
                local Revive method with the provided parameters.
            </summary>
            <param name="playerNum">The player number who will control the revived unit.</param>
            <param name="isUnderPlayerControl">Whether the revived unit will be under player control.</param>
            <param name="reviveSource">The unit performing the revival.</param>
        </member>
        <member name="M:Unit.SetCanParachute">
            <summary>
                Enables the unit's ability to use a parachute. Calls SetCanParachute(true)
                internally.
            </summary>
        </member>
        <member name="M:Unit.SetCanParachute(System.Boolean)">
            <summary>
                Sets whether the unit can use a parachute. Base implementation is empty. Override in
                derived classes to implement parachute capability toggling.
            </summary>
            <param name="canParachute">True to enable parachute capability, false to disable.</param>
        </member>
        <member name="M:Unit.SetFriendlyExplosion">
            <summary>
                Marks explosions created by this unit as friendly, preventing them from damaging
                allies. Base implementation is empty. Override to implement friendly fire
                prevention.
            </summary>
        </member>
        <member name="M:Unit.SetImmuneToOutOfBounds">
            <summary>
                Makes the unit immune to out-of-bounds death. Base implementation is empty. Override
                to implement immunity to boundary-based destruction.
            </summary>
        </member>
        <member name="M:Unit.StartPilotingUnit(Unit)">
            <summary>
                Called when this unit begins piloting another unit. Base implementation is empty.
                Override in units that can pilot to implement pilot initialization logic.
            </summary>
            <param name="pilottedUnit">The unit that this unit is starting to pilot.</param>
        </member>
        <member name="M:Unit.TryConnectHighFive">
            <summary>
                Attempts to connect a high-five with another unit. Base implementation always
                returns false. Override in player units to enable high-five connections.
            </summary>
            <returns>True if high-five was successful, false otherwise.</returns>
        </member>
        <member name="M:Unit.WhereDidIDie">
            <summary>
                Returns the position where this unit died. Base implementation returns the current
                transform position. Override to return a stored death location if needed.
            </summary>
            <returns>The 3D position where the unit died.</returns>
        </member>
        <!-- Unit Management Properties -->
        <member name="P:Unit.IsNotReplicantHero">
            <summary>
                Gets whether this unit is not a replicated hero from another player. Returns true if
                the unit belongs to the local player or if it's not a hero unit. Used for network
                replication logic.
            </summary>
        </member>
        <!-- Unit Management Fields -->
        <member name="F:Unit.beingControlledByTriggerAction">
            <summary>
                Flag indicating this unit is under scripted control from a trigger action. When
                true, normal AI behavior is suspended.
            </summary>
        </member>
        <member name="F:Unit.controllingTriggerAction">
            <summary>
                Reference to the CharacterAction that is currently controlling this unit through
                scripted sequences. Null when under normal AI control.
            </summary>
        </member>
        <!-- AI Awareness Methods -->
        <member name="M:Unit.Alert(System.Single,System.Single)">
            <summary>
                Alerts the unit to activity at specific coordinates, raising its awareness level.
                Base implementation is empty. Override in derived classes to implement alert
                behavior.
            </summary>
            <param name="alertX">The X coordinate of the alert source.</param>
            <param name="alertY">The Y coordinate of the alert source.</param>
        </member>
        <member name="M:Unit.Attract(System.Single,System.Single)">
            <summary>
                Attracts the unit's attention to specific coordinates, affecting AI targeting and
                movement. Base implementation is empty. Override in derived classes to implement
                attraction behavior.
            </summary>
            <param name="xTarget">The X coordinate to be attracted to.</param>
            <param name="yTarget">The Y coordinate to be attracted to.</param>
        </member>
        <member name="M:Unit.FetchObject(UnityEngine.Transform)">
            <summary>
                Allows the unit to fetch or pick up an object. Base implementation is empty.
                Override in derived classes to implement object fetching behavior.
            </summary>
            <param name="fetchObject">The transform of the object to fetch.</param>
        </member>
        <member name="M:Unit.ForgetPlayer(System.Int32)">
            <summary>
                Removes a dead player from the unit's memory and targeting system. Base
                implementation is empty. Override in derived classes to implement AI memory
                management.
            </summary>
            <param name="deadPlayerNum">The player number to forget.</param>
        </member>
        <member name="M:Unit.FullyAlert(System.Single,System.Single,System.Int32)">
            <summary>
                Fully alerts the unit to a specific player's presence at given coordinates,
                maximizing awareness. Base implementation is empty. Override in derived classes to
                implement full alert behavior.
            </summary>
            <param name="x">The X coordinate of the player.</param>
            <param name="y">The Y coordinate of the player.</param>
            <param name="playerNum">The player number that triggered the full alert.</param>
        </member>
        <member name="M:Unit.HearSound(System.Single,System.Single)">
            <summary>
                Allows the unit to respond to sounds at specific coordinates. Base implementation is
                empty. Override in derived classes to implement sound-based AI awareness.
            </summary>
            <param name="alertX">The X coordinate of the sound source.</param>
            <param name="alertY">The Y coordinate of the sound source.</param>
        </member>
        <member name="M:Unit.RunWarning(System.Single,System.Single)">
            <summary>
                Provides warning to the unit about an incoming explosion. Base implementation is
                empty. Override in derived classes to implement evasion or protective behavior.
            </summary>
            <param name="t">The current time or progress value.</param>
            <param name="explosionTime">The time until the explosion occurs.</param>
        </member>
        <member name="M:Unit.SetTargetPlayerNum(System.Int32,UnityEngine.Vector3)">
            <summary>
                Sets the target player number and position for AI targeting. Base implementation is
                empty. Override in AI-controlled units to implement targeting behavior.
            </summary>
            <param name="pN">The player number to target.</param>
            <param name="TargetPosition">The 3D position of the target.</param>
        </member>
        <!-- AI Awareness Fields -->
        <member name="F:Unit.canHear">
            <summary>
                Master toggle for the unit's hearing ability. Defaults to true. When false, the unit
                ignores all sound-based alerts regardless of range.
            </summary>
        </member>
        <member name="F:Unit.hearingRangeX">
            <summary>
                The horizontal range in game units within which this unit can hear sounds and become
                alerted. Defaults to 300 units. Used by the AI detection system.
            </summary>
        </member>
        <member name="F:Unit.hearingRangeY">
            <summary>
                The vertical range in game units within which this unit can hear sounds and become
                alerted. Defaults to 200 units. Used by the AI detection system.
            </summary>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:Unit.showDebugInfoForThisEnemy">
            <summary>
                Controls whether debug information is displayed for this specific unit. Defaults to
                true. Useful for debugging individual unit behavior.
            </summary>
        </member>
        <!-- Alien Infection System Methods -->
        <member name="M:Unit.CanInseminate(System.Single,System.Single)">
            <summary>
                Checks whether this unit can be inseminated by an alien facehugger at the given
                velocity. Base implementation returns false. Override in units that can be infected
                to implement eligibility checks.
            </summary>
            <param name="xI">The horizontal velocity of the insemination attempt.</param>
            <param name="yI">The vertical velocity of the insemination attempt.</param>
            <returns>True if the unit can be inseminated, false otherwise.</returns>
        </member>
        <member name="M:Unit.Inseminate(AlienFaceHugger,System.Single,System.Single)">
            <summary>
                Attempts to inseminate this unit with an alien facehugger. Base implementation
                returns false. Override in units that can be infected to implement insemination
                mechanics.
            </summary>
            <param name="unit">The AlienFaceHugger attempting to inseminate.</param>
            <param name="xForce">The horizontal force applied during insemination.</param>
            <param name="yForce">The vertical force applied during insemination.</param>
            <returns>True if insemination was successful, false otherwise.</returns>
        </member>
        <!-- Acid Coverage System Methods -->
        <member name="M:Unit.HasBeenCoveredInAcid">
            <summary>
                Checks whether the unit has been covered in acid and has the acid status effect.
                Base implementation returns false. Override in units that can be affected by acid.
            </summary>
            <returns>True if covered in acid, false otherwise.</returns>
        </member>
        <member name="M:Unit.RemoveAcid">
            <summary>
                Removes the acid status effect from the unit. Base implementation is empty. Override
                in units that can be affected by acid to implement acid removal logic.
            </summary>
        </member>
    </members>
</doc>