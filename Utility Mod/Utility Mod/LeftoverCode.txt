/*    [HarmonyPatch(typeof(PauseMenu), "TransitionIn")]
    static class PauseMenu_TransitionIn_Patch
    {
        static bool Prefix(PauseMenu __instance)
        {
            
            Main.mod.Logger.Log("In transition");
            //if (!Main.enabled)
            return true;

            //Main.mod.Logger.Log("denied transition");

            //return false;
        }
    }*/

/*    [HarmonyPatch(typeof(Player), "GetInput")]
    static class Player_GetInput_Patch
    {
        public static void Postfix(Player __instance, ref bool buttonGesture)
        {
            if (!Main.enabled)
                return;

            //Main.mod.Logger.Log("Hello world");
            if (buttonGesture)
            {
                UnityModManager.Start();
                Main.mod.Logger.Log("Toggled");
                UnityModManager.UI.Instance.ToggleWindow();

            }

        }

    }*/

	/*    [HarmonyPatch(typeof(PauseGameConfirmationPopup), "ConfirmReturnToMenu")]
    static class PauseGameConfirmationPopup_ConfirmReturnToMenu_Patch
    {
        static bool Prefix(GameModeController __instance)
        {
            //return true;
            Main.mod.Logger.Log("CONFIRM RETURN TO MENU false");
            Main.pauseMenuInstance.CloseMenu();
            return false;
        }
    }

    [HarmonyPatch(typeof(PauseGameConfirmationPopup), "ConfirmRestartLevel")]
    static class PauseGameConfirmationPopup_ConfirmRestartLevel_Patch
    {
        static bool Prefix(GameModeController __instance)
        {
            return true;
            //Main.mod.Logger.Log("CONFIRM RESTART LEVEL false");
            //Main.pauseMenuInstance.CloseMenu();
            *//*__instance.m_HeaderObject.SetActive(false);
            __instance.MenuActive = false;
            __instance.SetInvokeMethod(null);
            __instance.highlightIndex = 0;*//*
            //PauseController.pauseStatus = PauseStatus.UnPaused;
            MethodInfo dynMethod = __instance.GetType().GetMethod("CloseConfirmPopup", BindingFlags.NonPublic | BindingFlags.Instance);
            dynMethod.Invoke(__instance, null);

            

            return true;
        }
    }*/


 /*   [HarmonyPatch(typeof(GameModeController), "LoadNextScene")]
    static class GameModeController_LoadNextScene_Patch
    {
        static void Prefix(GameModeController __instance, ref GameState sceneAndGameState)
        {
            Main.mod.Logger.Log("scene being loaded: " + GameState.Instance.sceneToLoad);
        }

    }
*/
/*    [HarmonyPatch(typeof(GameModeController), "RestartLevel")]
    static class GameModeController_RestartLevel_Patch
    {
        static bool Prefix(GameModeController __instance)
        {
            if (!Main.enabled)
                return true;

            return true;

            //Traverse GameModeControllerTraverse = Traverse.Create(typeof(GameModeController));

            //GameModeController instance = GameModeControllerTraverse.Field("instance").GetValue() as GameModeController;


*//*            if (instance != null)
            //if (true)
            {
                if (Connect.IsHost)
                {
                    Main.mod.Logger.Log("is host passed");


                    Main.mod.Logger.Log("Destroying UI");
                    UnityModManager.UI.Destroy(UnityModManager.UI.Instance);
                    

                    //SceneManager.GetActiveScene().name;
                    Traverse GameModeControllerTraverseNonstatic = Traverse.Create(instance);

                    GameModeControllerTraverseNonstatic.Field("nextScene").SetValue(UnityEngine.SceneManagement.SceneManager.GetActiveScene().name);
                    Main.mod.Logger.Log("next scene: " + UnityEngine.SceneManagement.SceneManager.GetActiveScene().name);

                    instance.SwitchLevel();
                    if (Map.TryingToReduceLoadingTimes())
                    {
                        Main.mod.Logger.Log("reduce loading times true");
                        //Map.ClearPersistenBlocksInstant();
                    }
                }
                else
                {
                    Main.mod.Logger.Log("NOT HOST");
                }
            }
            else
            {
                Main.mod.Logger.Log("IS NULL");
            }
            return false;*//*
        }
    }*/

	/*[HarmonyPatch(typeof(WorldMapController), "TransportArriveAt")]
    static class WorldMapController_TransportArriveAt_Patch
    {
        static void Prefix(WorldMapController __instance, ref WorldTerritory3D territory)
        {
            WorldTerritory3D[] territories = Traverse.Create(typeof(WorldMapController)).Field("territories3D").GetValue() as WorldTerritory3D[];

            for (int i = 0; i < territories.Length; i++)
            {
                WorldTerritory3D territoryObject = territories[i];
                if (territoryObject.properties.campaignName == territory.properties.campaignName)
                {
                    Main.mod.Logger.Log("Landed at: " + territory.properties.campaignName + "  in list at " + i);
                }
            }
        }
    }*/

    /*     
     [HarmonyPatch(typeof(WorldMapController), "ProcessNextAction")]
     static class WorldMapController_ProcessNextAction_Patch
     {
         static bool Prefix(WorldMapController __instance)
         {
             if (!Main.enabled)
                 return true;

             //Main.mod.Logger.Log("HELLO WORLD");
             Traverse actionQueueTraverse = Traverse.Create(__instance);
             List<WorldMapController.QueuedAction> actionQueue = actionQueueTraverse.Field("actionQueue").GetValue() as List<WorldMapController.QueuedAction>;
             *//*for (int i = 0; i < actionQueue.Count; i++)
             {
                 Main.mod.Logger.Log(actionQueue[i].ToString());
             }
             if (actionQueue.Count == 0 || actionQueue == null)
             {
                 Main.mod.Logger.Log("NO ACTIONS");
             }*//*

             if (actionQueue.Count > 0)
             {
                 //if (!Main.settings.cameraShake)
                 //{
                     PlayerOptions.Instance.cameraShakeAmount = 0f;
                 //}
                 WorldMapController.QueuedAction queuedAction = actionQueue[0];
                 switch (queuedAction.actionType)
                 {
                     case WorldMapController.QueuedActions.Helicopter:
                         WorldCamera.instance.MoveToHelicopter(0f);
                         break;
                     case WorldMapController.QueuedActions.Terrorist:
                         queuedAction.territory.BecomeEnemyBase();
                         //WorldMapController.RestTransport(queuedAction.territory);
                         //WorldMapController.EnterMission(queuedAction.territory.GetCampaignName(), queuedAction.territory.properties.loadingText, queuedAction.territory.properties);
                         break;
                     case WorldMapController.QueuedActions.Alien:
                         queuedAction.territory.SetState(TerritoryState.Infested);
                         //WorldMapController.RestTransport(queuedAction.territory);
                         //WorldMapController.EnterMission(queuedAction.territory.GetCampaignName(), queuedAction.territory.properties.loadingText, queuedAction.territory.properties);
                         break;
                     case WorldMapController.QueuedActions.Burning:
                         queuedAction.territory.SetState(TerritoryState.TerroristBurning);
                         //WorldMapController.RestTransport(queuedAction.territory);
                         //WorldMapController.EnterMission(queuedAction.territory.GetCampaignName(), queuedAction.territory.properties.loadingText, queuedAction.territory.properties);
                         break;
                     case WorldMapController.QueuedActions.Liberated:
                         queuedAction.territory.SetState(TerritoryState.Liberated);
                         break;
                     case WorldMapController.QueuedActions.Hell:
                         queuedAction.territory.SetState(TerritoryState.Hell);
                         //WorldMapController.RestTransport(queuedAction.territory);
                         //WorldMapController.EnterMission(queuedAction.territory.GetCampaignName(), queuedAction.territory.properties.loadingText, queuedAction.territory.properties);
                         break;
                     case WorldMapController.QueuedActions.Secret:
                         queuedAction.territory.SetState(TerritoryState.TerroristBase);
                         //WorldMapController.RestTransport(queuedAction.territory);
                         //WorldMapController.EnterMission(queuedAction.territory.GetCampaignName(), queuedAction.territory.properties.loadingText, queuedAction.territory.properties);
                         break;
                 }
                 actionQueue.RemoveAt(0);
                 Traverse queueCounter = Traverse.Create(__instance);
                 if (queuedAction.actionType == WorldMapController.QueuedActions.Hell)
                 {
                     //queueCounter = 5.2f;
                     queueCounter.Field("queueCounter").SetValue(0);
                 }
                 else if (queuedAction.actionType == WorldMapController.QueuedActions.Liberated)
                 {
                     //queueCounter = 2f;
                     queueCounter.Field("queueCounter").SetValue(0);
                 }
                 else if (queuedAction.actionType == WorldMapController.QueuedActions.Secret)
                 {
                     //queueCounter = 0f;
                     queueCounter.Field("queueCounter").SetValue(0);
                 }
                 else
                 {
                     //queueCounter = 1.6f;
                     queueCounter.Field("queueCounter").SetValue(0);
                 }
             }
             else if (WorldCamera.instance.CamState != WorldCamera.CameraState.FollowHelicopter && WorldCamera.instance.CamState != WorldCamera.CameraState.MoveToHelicopter)
             {
                 WorldCamera.instance.MoveToHelicopter(1f);
             }
             actionQueueTraverse.Field("actionQueue").SetValue(actionQueue);
             return false;
         }
     }*/


     /*[HarmonyPatch(typeof(WorldMapController), "EnterMission")]
    static class WorldMapController_EnterMission_Patch
    {
        static void Prefix(WorldMapController __instance, ref string campaignName, ref string campaignDescription, ref TerritoryProperties territoryProperties)
        {
            if (!Main.enabled)
                return;

            *//*Main.mod.Logger.Log("campaign name " + campaignName);
            Main.mod.Logger.Log("campaign description: " + campaignDescription);
            Main.mod.Logger.Log("properties: " + territoryProperties.campaignName);
            campaignName = "WM_Mission1(mouse)";
            territoryProperties.campaignName = "WM_Mission2 (mouse)";*//*

                //LevelSelectionController.CurrentLevelNum = 5;
                foreach (TerritoryProgress territoryProgress in WorldMapProgressController.currentProgress.territoryProgress)
            {
                //territoryProgress.startLevel = Main.levelNum;
            }
        }
    }*/

    /*switch (campaignNum.indexNumber + 1)
            {
                case 1: territoryName = "VIETMAN"; break;
                case 2: territoryName = "CAMBODIA"; break;
                case 3: territoryName = "INDONESIA"; break;
                case 4: territoryName = "HONG KONG"; break;
                case 5: territoryName = "INDIA"; break;
                case 6: territoryName = "PHILIPPINES"; break;
                case 7: territoryName = "SOUTH KOREA"; break;
                case 8: territoryName = "NEW GUINEA"; break;
                case 9: territoryName = "KAZAKHSTAN"; break;
                case 10: territoryName = "UKRAINE"; break;
                case 11: territoryName = "PANAMA"; break;
                case 12: territoryName = "DEM. REP. OF CONGO"; break;
                case 13: territoryName = "HAWAII"; break;
                case 14: territoryName = "THE AMAZON RAINFOREST"; break;
                case 15: territoryName = "UNITED STATES OF AMERICA"; break;
                case 16: territoryName = "WHITE HOUSE"; break;
                case 17: territoryName = "Alien Challenge"; break;
                case 18: territoryName = "Bombardment Challenge"; break;
                case 19: territoryName = "Ammo Challenge"; break;
                case 20: territoryName = "Dash Challenge"; break;
                case 21: territoryName = "Mech Challenge"; break;
                case 22: territoryName = "MacBrover Challenge"; break;
                case 23: territoryName = "Time Bro Challenge"; break;
            }*/

             /*switch (campaignNum.indexNumber + 1)
        {
            case 1: terrainName = "vietnamterrain"; break;
            case 2: terrainName = "cambodiaterrain"; break;
            case 3: terrainName = "indonesiaterrain"; break;
            case 4: terrainName = "hongkongterrain"; break;
            case 5: terrainName = "indiaterrain"; break;
            case 6: terrainName = "philippinesterrain"; break;
            case 7: terrainName = "southkoreaterrain"; break;
            case 8: terrainName = "newguineaterrain"; break;
            case 9: terrainName = "kazakhstanterrain"; break;
            case 10: terrainName = "ukraineterrain"; break;
            case 11: terrainName = "panamaterrain"; break;
            case 12: terrainName = "congoterrain"; break;
            case 13: terrainName = "hawaiiterrain"; break;
            case 14: terrainName = "amazonterrain"; break;
            case 15: terrainName = "hellterrain"; break;
            case 16: terrainName = "usaterrain"; break;
            case 17: terrainName = "ellenchallengeterrain"; break;
            case 18: terrainName = "bombardchallengeterrain"; break;
            case 19: terrainName = "ammochallengeterrain"; break;
            case 20: terrainName = "dashchallengeterrain"; break;
            case 21: terrainName = "mechchallengeterrain"; break;
            case 22: terrainName = "macbroverchallengeterrain"; break;
            case 23: terrainName = "timebrochallengeterrain"; break;
        }*/

        /**
                 * Num: 0  KAZAKHSTAN - campaign 9
                 * Num: 1  DEM. REP. OF CONGO - campaign 12
                 * Num: 2  INDONESIA - campaign 3
                 * Num: 3  Alien Challenge - challenge on south america
                 * Num: 4  HAWAII - campaign 13
                 * Num: 5  NEW GUINEA - campaign 8
                 * Num: 6  WHITE HOUSE - campaign end
                 * Num: 7  Bombardment Challenge
                 * Num: 8  Ammo Challenge
                   Num: 9  Dash Challenge
                   Num: 10  VIETMAN - campaign 1
                 * Num: 11  PANAMA - campaign 11
                 * Num: 12  CAMBODIA - campaign 2
                 * Num: 13  UNITED STATES OF AMERICA - campaign 15
                 * Num: 14  SOUTH KOREA - campaign 7
                 * Num: 15  UKRAINE - campaign 10
                 * Num: 16  INDIA - campaign 5
                 * Num: 17  PHILIPPINES - campaign 6
                 * Num: 18  HONG KONG - campaign 4
                 * Num: 19  Mech Challenge
                 * Num: 20  THE AMAZON RAINFOREST - campaign 14
                 * Num: 21  MacBrover Challenge
                 * Num: 22  Time Bro Challenge
                */
            /**
             * kazakhstanterrain == vietman = False
[Utility Mod] congoterrain == vietman = False
[Utility Mod] indonesiaterrain == vietman = False
[Utility Mod] ellenchallengeterrain == vietman = False
[Utility Mod] hawaiiterrain == vietman = False
[Utility Mod] newguineaterrain == vietman = False
[Utility Mod] usaterrain == vietman = False
[Utility Mod] bombardchallengeterrain == vietman = False
[Utility Mod] ammochallengeterrain == vietman = False
[Utility Mod] dashchallengeterrain == vietman = False
[Utility Mod] vietnamterrain == vietman = False
[Utility Mod] panamaterrain == vietman = False
[Utility Mod] cambodiaterrain == vietman = False
[Utility Mod] hellterrain == vietman = False
[Utility Mod] southkoreaterrain == vietman = False
[Utility Mod] ukraineterrain == vietman = False
[Utility Mod] indiaterrain == vietman = False
[Utility Mod] philippinesterrain == vietman = False
[Utility Mod] hongkongterrain == vietman = False
[Utility Mod] mechchallengeterrain == vietman = False
[Utility Mod] amazonterrain == vietman = False
[Utility Mod] macbroverchallengeterrain == vietman = False
[Utility Mod] timebrochallengeterrain == vietman = False
            */

            /**
             * Campaign 1-3 : 4 levels
             * Campaign 4-5: 3 levels
             * Campaign 6: 4 levels
             * Campaign 7: 3 levels
             * Campaign 8-10: 4 levels
             * Campaign 11: 6 levels
             * Campaign 12-14: 5 levels
             * Campaign 15: 14 levels
            **/