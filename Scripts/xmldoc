#!/bin/bash
# XML Documentation Helper - Optimized for Claude
# Usage: xmldoc <search_term>

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIBS_DIR="/mnt/c/Users/Alex/repos/BroforceMods/libs/Core Libs"

# Format XML member documentation into readable format
format_member() {
    local xml_content="$1"
    
    # Extract member signature
    echo "$xml_content" | grep -oP '(?<=name=")[^"]*' | head -1 | sed 's/^M:/Method: /; s/^T:/Type: /; s/^P:/Property: /; s/^F:/Field: /'
    
    # Extract and format summary
    local summary=$(echo "$xml_content" | grep -A1 "<summary>" | tail -1 | sed 's/^[[:space:]]*/  /')
    if [ ! -z "$summary" ]; then
        echo "  Summary:$summary"
    fi
    
    # Extract parameters
    local params=$(echo "$xml_content" | grep "<param name=" | sed 's/.*name="\([^"]*\)".*/    - \1: /' | sed 's/<[^>]*>//g')
    if [ ! -z "$params" ]; then
        echo "  Parameters:"
        echo "$params"
    fi
    
    # Extract returns
    local returns=$(echo "$xml_content" | grep "<returns>" | sed 's/<[^>]*>//g' | sed 's/^[[:space:]]*/  Returns: /')
    if [ ! -z "$returns" ]; then
        echo "$returns"
    fi
    
    echo ""
}

# Search with smart partial matching
smart_search() {
    local search_term="$1"
    local found_any=false
    
    # First try exact member search
    for xml_file in "$LIBS_DIR"/*.xml; do
        local filename=$(basename "$xml_file" .xml)
        
        # Search for the term in various member types
        local results=$(grep -B2 -A8 "name=\"[^\"]*${search_term}[^\"]*\"" "$xml_file" 2>/dev/null)
        
        if [ ! -z "$results" ]; then
            if [ "$found_any" = false ]; then
                echo "=== Results for: $search_term ==="
                echo ""
                found_any=true
            fi
            
            echo "--- From $filename ---"
            
            # Process each member separately
            echo "$results" | awk '/<member name=/{flag=1} flag{print} /<\/member>/{print "---"; flag=0}' | while IFS= read -r line; do
                if [[ "$line" == *"</member>"* ]]; then
                    echo ""
                elif [[ "$line" == *"<member name="* ]]; then
                    # Extract just the member signature
                    sig=$(echo "$line" | grep -oP '(?<=name=")[^"]*')
                    # Simplify the signature
                    simplified=$(echo "$sig" | sed 's/^.://; s/System\.//g; s/HarmonyLib\.//g')
                    echo "• $simplified"
                elif [[ "$line" == *"<summary>"* ]]; then
                    continue
                elif [[ "$line" == *"</summary>"* ]]; then
                    continue
                elif [[ "$line" == *"<param name="* ]]; then
                    param_name=$(echo "$line" | grep -oP '(?<=name=")[^"]*')
                    param_desc=$(echo "$line" | sed 's/<[^>]*>//g' | sed 's/^[[:space:]]*//')
                    echo "    [$param_name] $param_desc"
                elif [[ "$line" == *"<returns>"* ]]; then
                    returns=$(echo "$line" | sed 's/<[^>]*>//g' | sed 's/^[[:space:]]*//')
                    echo "    → $returns"
                elif [[ "$line" != "---" ]] && [[ ! -z "$(echo $line | tr -d '[:space:]')" ]]; then
                    # Summary text
                    summary=$(echo "$line" | sed 's/^[[:space:]]*//')
                    echo "  $summary"
                fi
            done
            echo ""
        fi
    done
    
    if [ "$found_any" = false ]; then
        echo "No results found for: $search_term"
        echo "Try a partial name or check spelling."
    fi
}

# Show common APIs for quick reference
show_common() {
    echo "=== Common Harmony APIs ==="
    echo ""
    echo "• Traverse.Create(object) - Create a traverse instance"
    echo "• Traverse.Method(name, args) - Move to method (doesn't invoke)"
    echo "• Traverse.GetValue(args) - Invoke method with args"
    echo "• Traverse.Field(name) - Access field"
    echo "• Traverse.Property(name) - Access property"
    echo ""
    echo "• AccessTools.Method(type, name) - Get MethodInfo"
    echo "• AccessTools.Field(type, name) - Get FieldInfo"
    echo "• AccessTools.Property(type, name) - Get PropertyInfo"
    echo ""
    echo "Use 'xmldoc <name>' for full documentation"
}

# Main execution
main() {
    case "$1" in
        --common|-c)
            show_common
            ;;
        --list|-l)
            echo "Available XML documentation files:"
            ls -1 "$LIBS_DIR"/*.xml | xargs -n1 basename | sed 's/\.xml$//'
            ;;
        --help|-h|"")
            echo "XML Documentation Search for BroforceMods"
            echo ""
            echo "Usage:"
            echo "  xmldoc <search>     Search for API documentation"
            echo "  xmldoc --common     Show common APIs"
            echo "  xmldoc --list       List available documentation"
            echo "  xmldoc --help       Show this help"
            echo ""
            echo "Examples:"
            echo "  xmldoc Traverse.Method"
            echo "  xmldoc SetRumble"
            echo "  xmldoc GetValue"
            ;;
        *)
            smart_search "$1"
            ;;
    esac
}

# Run main function with all arguments
main "$@"