<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="M:BroBase.Awake">
            <summary>
            Initializes the BroBase instance, marking it as a hero character and adding it to
            the static bros list. Sets up essential hero-specific functionality before other
            components initialize.
            </summary>
        </member>

        <member name="M:BroBase.OnDestroy">
            <summary>
            Cleans up the BroBase instance by removing it from the static bros list before
            destruction. Ensures proper cleanup of static references to prevent memory leaks.
            </summary>
        </member>

        <member name="M:BroBase.Start">
            <summary>
            Completes BroBase initialization after all objects are created. Sets up network
            syncing and jetpack state.
            </summary>
        </member>

        <member name="M:BroBase.Update">
            <summary>
            Processes BroBase-specific updates each frame including flex invulnerability,
            network synchronization, performance enhancement effects, cardio/dashing mechanics,
            jetpack functionality, and holy water revival timing. Extends base update
            functionality with hero-specific behaviors.
            </summary>
        </member>

        <member name="M:BroBase.AnimateCustomMelee">
            <summary>
            Handles animation for custom melee types. Default implementation delegates to knife
            melee animation, serving as override point for unique attack animations in derived
            bros.
            </summary>
        </member>

        <member name="M:BroBase.AnimateKnifeMelee">
            <summary>
            Animates knife attacks with context-specific sprite sequences. Uses row 1 (frames
            25-31) for standing attacks and row 6 (frames 17-23) for jumping/dashing variants.
            Triggers attack on frame 3 with extended timing for dashing strikes.
            </summary>
        </member>

        <member name="M:BroBase.AnimateMelee">
            <summary>
            Routes melee animation to type-specific methods. Directs knife attacks to knife
            animation, punches to punch animation, and all other types to custom melee
            animation. Central routing point for the 15 different melee attack types.
            </summary>
        </member>

        <member name="M:BroBase.AnimateMeleeCommon">
            <summary>
            Provides shared animation logic for melee attacks. Handles sprite resets, frame
            timing (40 FPS), melee follow-up loops, and high-five interrupts for throwing nearby
            mooks during melee combos.
            </summary>
        </member>

        <member name="M:BroBase.AnimatePunch">
            <summary>
            Animates punch attacks using sprite frames 25-33. Triggers punch attacks on frame 3,
            with extended attack window for jetpack punches (frames 4-5). Includes impact
            emphasis delays and combo loop support.
            </summary>
        </member>

        <member name="M:BroBase.CanStartMeleeFollowUp">
            <summary>
            Determines if a follow-up melee attack can begin during current animation. Returns
            true after frame 7, enabling combo chains and continuous melee sequences.
            </summary>
            <returns>True if current animation frame is greater than 7; otherwise, false.</returns>
        </member>

        <member name="M:BroBase.CanStartNewMelee">
            <summary>
            Checks if a new melee attack can interrupt the current action. Allows new attacks
            when not meleeing or after frame 3 of current melee, enabling responsive combat and
            combo potential.
            </summary>
            <returns>True if not meleeing or frame is greater than 3; otherwise, false.</returns>
        </member>

        <member name="M:BroBase.CanStartNewPunch">
            <summary>
            Validates timing for new punch attacks with slightly stricter requirements than
            general melee. Allows punches when not meleeing or after frame 4, providing balanced
            combo timing.
            </summary>
            <returns>True if not meleeing or frame is greater than 4; otherwise, false.</returns>
        </member>

        <member name="M:BroBase.CancelMelee">
            <summary>
            Cancels ongoing melee attacks and resets related state. Clears the chosen melee
            target, restores normal fall speed, and resets direction change cancellation flag.
            Ensures clean exit from melee state.
            </summary>
        </member>

        <member name="M:BroBase.KickDoors(System.Single)">
            <summary>
            Kicks doors and destructible objects within specified range. Performs raycast
            detection, excludes parachutes, sends open command with direction, and applies 500
            horizontal crush force to break barriers.
            </summary>
            <param name="range">Maximum distance to check for kickable objects.</param>
        </member>

        <member name="M:BroBase.PerformKnifeMeleeAttack(System.Boolean,System.Boolean)">
            <summary>
            Executes knife slash attacks with 14x24 unit hit box. Deals knife damage type, kicks
            doors within 24 units, applies 200 horizontal and 500 vertical knockback force.
            Creates appropriate hit effects and sounds.
            </summary>
            <param name="shouldTryHitTerrain">Whether to attempt terrain damage if no unit is hit.</param>
            <param name="playMissSound">Whether to play miss sound if attack fails to connect.</param>
        </member>

        <member name="M:BroBase.PerformOverriddenMelee">
            <summary>
            Virtual hook for derived classes to implement custom melee attacks. Empty base
            implementation allows subclasses to define unique melee behaviors without modifying
            core melee system.
            </summary>
        </member>

        <member name="M:BroBase.PerformPunchAttack(System.Boolean,System.Boolean)">
            <summary>
            Executes punch attacks with standard or jetpack-enhanced variants. Standard punches
            deal 4 damage with 250 knockback force, while jetpack punches deal 10 damage with
            600 knockback force. Creates visual effects, kicks doors, damages terrain, and adds
            upward momentum for jetpack variant.
            </summary>
            <param name="shouldTryHitTerrain">Whether to attempt terrain damage if no unit is hit.</param>
            <param name="playMissSound">Whether to play miss sound if attack fails to connect.</param>
        </member>

        <member name="M:BroBase.PerformSmashAttack">
            <summary>
            Performs crushing smash attacks with 8 unit range. Deals 10 crush damage with
            minimal horizontal knockback (20 force) but moderate vertical force (50). Uses
            alternate sound effects to differentiate from standard attacks.
            </summary>
        </member>

        <member name="M:BroBase.ResetMeleeValues">
            <summary>
            Resets melee state flags to prepare for new attacks. Clears miss sound, attack
            performed, and hit flags. Virtual method allowing subclasses to reset additional
            melee-related state.
            </summary>
        </member>

        <member name="M:BroBase.RunCustomMeleeMovement">
            <summary>
            Controls movement during custom melee attacks. Default implementation uses knife
            melee movement pattern, providing override point for specialized movement behaviors.
            </summary>
        </member>

        <member name="M:BroBase.RunJetPackPunchMovement">
            <summary>
            Manages special movement for jetpack-powered punches. Creates horizontal jetpack
            flames and applies 200 unit thrust force during frames 2-4, followed by rapid
            deceleration. Provides unique physics for aerial combat moves.
            </summary>
        </member>

        <member name="M:BroBase.RunMelee">
            <summary>
            Manages movement during melee attacks based on type. Routes knife attacks to knife
            movement, punches to punch movement, jetpack punches to special jetpack movement,
            and others to custom movement handlers.
            </summary>
        </member>

        <member name="M:BroBase.RunPunchMovement">
            <summary>
            Controls movement during punch attacks. Applies gravity for aerial punches, enables
            dash movement toward targets on frames 2-4 (up to 1.7x speed), and stops movement
            during recovery frames. Cancels if falling below ground.
            </summary>
        </member>

        <member name="M:BroBase.StartCustomMelee">
            <summary>
            Initiates custom melee attacks with combo support. Validates attack timing, enables
            dashing melee mode when grounded, applies movement velocity, and handles melee
            follow-up chains. Entry point for non-standard melee types.
            </summary>
        </member>

        <member name="M:BroBase.StartKnifeMelee">
            <summary>
            Initiates knife melee attacks with timing validation. Resets interaction timers,
            deactivates weapons, handles combo chains through melee follow-up system, and
            applies movement for dashing variants.
            </summary>
        </member>

        <member name="M:BroBase.StartMelee">
            <summary>
            Initializes melee attacks with type-specific routing. Detects special conditions
            like standing on animals (forces knife melee) and routes to appropriate start
            methods: knife, punch, or custom melee based on the current melee type.
            </summary>
        </member>

        <member name="M:BroBase.StartMeleeCommon">
            <summary>
            Common initialization for all melee attack types. Validates melee can start, resets
            state flags, deactivates weapons, records starting position, and triggers initial
            animation. Core setup for the melee system.
            </summary>
        </member>

        <member name="M:BroBase.StartPunch">
            <summary>
            Initializes punch attacks with combo support. Validates punch can start, handles
            melee follow-up for combo chains, and delegates to common melee initialization.
            Entry point for standard and combo punches.
            </summary>
        </member>

        <member name="M:BroBase.TryMeleeTerrain(System.Int32,System.Int32)">
            <summary>
            Attempts to damage terrain or destructible objects with melee attacks. Performs
            raycast detection in melee range, deals configurable damage, and creates appropriate
            hit effects. Special handling for cage objects using full health as damage.
            </summary>
            <param name="offset">Horizontal offset for the terrain check.</param>
            <param name="meleeDamage">Amount of damage to deal to terrain (default 2).</param>
            <returns>True if terrain was hit and damaged; otherwise, false.</returns>
        </member>

        <member name="F:BroBase.currentMeleeType">
            <summary>
            Active melee type being performed. Can differ from default when context changes
            (animal attacks force knife). Controls animation and damage calculations. Dynamic
            combat state.
            </summary>
        </member>

        <member name="F:BroBase.disembowelmentViscera">
            <summary>
            Sprite template for gore effects during disembowel attacks. Instantiated and
            positioned at enemy location when disembowel melee succeeds. Creates visceral
            feedback for brutal melee finishers.
            </summary>
        </member>

        <member name="F:BroBase.hasJumpedForKick">
            <summary>
            Tracks if automatic jump has occurred during kick animation. Prevents multiple jumps
            per kick. At frame 2, adds 150 upward velocity if false and grounded. Ensures
            consistent kick height.
            </summary>
        </member>

        <member name="F:BroBase.lerpToMeleeTargetPos">
            <summary>
            Interpolation value for smooth melee movement toward target. Reset at melee start.
            Enables fluid combat positioning. Animation smoothing parameter.
            </summary>
        </member>

        <member name="F:BroBase.meleeStartPos">
            <summary>
            Starting position vector when melee attack initiated. Captured in StartCustomMelee.
            Used for return positioning and movement calculations. Combat positioning anchor.
            </summary>
        </member>

        <member name="F:BroBase.meleeType">
            <summary>
            Default melee attack type for this bro character. Source value for currentMeleeType.
            Defines base combat style (knife, punch, etc). Character-specific combat identifier.
            </summary>
        </member>

        <member name="F:BroBase.performedMeleeAttack">
            <summary>
            Tracks if damage has been dealt in current melee attack. Reset in ResetMeleeValues.
            Prevents multiple damage applications per swing. Hit validation flag.
            </summary>
        </member>

        <member name="F:BroBase.splitkick">
            <summary>
            Flag for split kick attack hitting both directions simultaneously. Set when
            horizontal velocity is low during kick initiation. Enables martial arts characters
            to hit enemies on both sides.
            </summary>
        </member>

        <member name="M:BroBase.AnimatePockettedSpecial">
            <summary>
            Animates pocketed special abilities with type-specific handling. Airstrike,
            MechDrop, and AlienPheromones use custom animation (row 5, frames 17-24) with
            ability trigger at frame 4. Other types use standard special animation.
            </summary>
        </member>

        <member name="M:BroBase.GetPockettedAmmoType">
            <summary>
            Retrieves the current pocketed ammunition type to use. Returns the top item from the
            stack or None if inventory is empty, determining which special ability executes on
            use.
            </summary>
            <returns>The next pocketed ammo type to use, or None if empty.</returns>
        </member>

        <member name="M:BroBase.GetSprintValue">
            <summary>
            Determines if the bro can currently sprint. Prevents sprinting while exhausted from
            overexertion, otherwise delegates to base sprint logic.
            </summary>
            <returns>False if exhausted; otherwise, returns base sprint value.</returns>
        </member>

        <member name="M:BroBase.MustUsePockettedSpecialAmmo">
            <summary>
            Determines if pocketed ammunition must be used before default specials. Forces
            players to consume pickups before accessing their character's built-in abilities,
            ensuring pickup utility.
            </summary>
            <returns>True if any pocketed ammo exists; otherwise, false.</returns>
        </member>

        <member name="M:BroBase.PickupPockettableAmmo(PockettedSpecialAmmoType)">
            <summary>
            Adds pocketed special ammunition to inventory stack. Validates ammo type, appends to
            end of list for LIFO usage order, and updates HUD to display the newly acquired
            special ability.
            </summary>
            <param name="ammoType">The type of special ammunition being picked up.</param>
        </member>

        <member name="M:BroBase.ReducePockettedSpecialAmmo">
            <summary>
            Removes used pocketed ammunition from inventory stack. Removes from end of list
            maintaining LIFO order and updates HUD to reflect remaining ammunition or return to
            default special display.
            </summary>
        </member>

        <member name="M:BroBase.ReleaseRemoteControlCar">
            <summary>
            Deploys remote-controlled vehicle from inventory. Simple wrapper that delegates to
            base implementation for RC car spawning and control transfer mechanics.
            </summary>
        </member>

        <member name="M:BroBase.SetPlayerHUDAmmo">
            <summary>
            Updates HUD special ability display based on current inventory. Shows top pocketed
            ammo type with count of 1 if any exist, otherwise displays hero's default special
            ability with actual ammo count.
            </summary>
        </member>

        <member name="M:BroBase.StartPockettedSpecial">
            <summary>
            Initiates use of pocketed special ammunition pickups. Validates bro state (not
            acid-covered or meleeing), sets the active special type, flags special use, and
            resets animation for special ability execution.
            </summary>
        </member>

        <member name="M:BroBase.ThrowAirstrikeGrenade">
            <summary>
            Deploys airstrike grenade with stance-based trajectory. Crouching throws short (30
            velocity, 70 angle) for close targets, standing throws long (200 velocity, 150
            angle) for distant targets. Network-spawned projectile calls in aerial bombardment
            on impact.
            </summary>
        </member>

        <member name="M:BroBase.ThrowAlienPheromoneGrenade">
            <summary>
            Deploys alien pheromone grenade for biological warfare. Uses standard stance-based
            throwing mechanics to deliver pheromones that affect alien behavior. Network-spawned
            projectile with tactical deployment options.
            </summary>
        </member>

        <member name="M:BroBase.ThrowMechDropGrenade">
            <summary>
            Deploys mech drop grenade with identical mechanics to airstrike. Uses stance-based
            throwing system to mark landing zone for mech deployment. Network-synchronized
            projectile spawns combat mech on detonation.
            </summary>
        </member>

        <member name="M:BroBase.TimeSlowSpecialRPC">
            <summary>
            Executes time-slowing special ability with mode-specific targeting. Plays bass drop
            sound, applies 1.2x general time boost, and adds color shift effect. In cooperative
            modes boosts all heroes by 1.5x, in competitive modes only boosts the casting
            player.
            </summary>
        </member>

        <member name="M:BroBase.UsePockettedSpecial">
            <summary>
            Executes pocketed special abilities via type-specific RPC calls. Handles Airstrike,
            Timeslow, RemoteControlCar, MechDrop, AlienPheromones, and Steroids. Manages ammo
            consumption, HUD updates, and network synchronization for each ability type.
            </summary>
        </member>

        <member name="M:BroBase.UseSteroids">
            <summary>
            Activates 10-second performance enhancement state. Sets enhanced flag, plays flex
            sound at 0.6 volume, triggers flex gesture animation, and initializes grunt counter
            based on player number for audio variety.
            </summary>
        </member>

        <member name="M:BroBase.UseSteroidsForDuration(System.Single)">
            <summary>
            Activates performance enhancement for specified duration. Identical to standard
            steroids but with customizable timing, maintaining all visual and audio feedback
            effects.
            </summary>
            <param name="duration">Duration in seconds for the steroid effect.</param>
        </member>

        <member name="M:BroBase.UseSteroidsNetworked">
            <summary>
            Network wrapper for steroid activation across all players. Validates local ownership
            before broadcasting RPC to trigger steroid effects on all connected clients,
            ensuring synchronized performance enhancement.
            </summary>
        </member>

        <member name="M:BroBase.UseSteroidsNetworkedForDuration(System.Single)">
            <summary>
            Network wrapper for variable-duration steroid activation. Broadcasts typed RPC with
            custom duration parameter to apply performance enhancement across all players with
            specified timing.
            </summary>
            <param name="duration">Duration in seconds for the steroid effect.</param>
        </member>

        <member name="P:BroBase.SpecialAmmo">
            <summary>
            Gets or sets the special ammo count with support for pocketed special ammo. When
            getting, returns 1 if the bro has pocketed special ammo stored, otherwise returns
            the actual special ammo count.
            </summary>
            <returns>1 if has pocketed special ammo; otherwise, the base special ammo count.</returns>
        </member>

        <member name="F:BroBase.usingPockettedSpecialType">
            <summary>
            Currently active pocketed special ammo type. Set during special ability use from
            inventory. Determines animation behavior for Airstrike, MechDrop, AlienPheromones.
            Default is Standard type.
            </summary>
        </member>

        <member name="M:BroBase.AddSpeedLeft">
            <summary>
            Applies leftward movement with performance boost. When enhanced and not in
            quicksand, increases left movement to 120% speed (maintains dash multiplier if
            dashing). Base movement applied first.
            </summary>
        </member>

        <member name="M:BroBase.AddSpeedRight">
            <summary>
            Applies rightward movement with performance boost. When enhanced and not in
            quicksand, increases right movement to 120% speed (maintains dash multiplier if
            dashing). Mirrors left movement logic.
            </summary>
        </member>

        <member name="M:BroBase.AirJump">
            <summary>
            Executes air jump with fart-based mechanics. Level 1 creates smoke and sound
            effects. Level 2 creates damaging explosion with huge fart sound. Jump force scales
            0.5x-1.8x based on velocity, halves downward momentum before boost.
            </summary>
        </member>

        <member name="M:BroBase.CanUseJetpack">
            <summary>
            Validates jetpack availability for use. Requires both local jetpack availability
            flag and player having Jetpack value in ValueOrchestrator system.
            </summary>
            <returns>True if jetpack is available and player has jetpack power-up; otherwise, false.</returns>
        </member>

        <member name="M:BroBase.CreateBlastOffFlames(System.Single)">
            <summary>
            Creates flame explosion effect at specified height. Spawns visual flame wall,
            damages units in 14x10 area with fire damage, applies 50 upward force. Only executes
            for local player ownership.
            </summary>
            <param name="yPos">Vertical position for flame effect spawn.</param>
        </member>

        <member name="M:BroBase.Fart(System.Int32)">
            <summary>
            Virtual method for fart effects implementation. Empty base implementation provides
            hook for derived classes to implement custom fart behaviors based on fart level.
            </summary>
            <param name="fartLevel">Intensity level of the fart effect.</param>
        </member>

        <member name="M:BroBase.HitLeftWall">
            <summary>
            Handles left wall collisions with melee cancellation. Extends base wall hit behavior
            by canceling ongoing melee attacks if a target has already been hit, preventing
            attacks from continuing through walls.
            </summary>
        </member>

        <member name="M:BroBase.HitRightWall">
            <summary>
            Handles right wall collisions with melee cancellation. Extends base wall hit
            behavior by canceling ongoing melee attacks if a target has already been hit,
            preventing attacks from continuing through walls.
            </summary>
        </member>

        <member name="M:BroBase.Jump(System.Boolean)">
            <summary>
            Initiates jump with air ability resets. Enables flex air jumps and fart jumps based
            on available powers. Resets elbow slam and somersault states for clean jump
            execution.
            </summary>
            <param name="wallJump">Whether this is a wall jump.</param>
        </member>

        <member name="M:BroBase.Land">
            <summary>
            Handles landing mechanics with special elbow slam effects. Elbow slam creates
            shockwave explosion, damages units in 22x8 area and ground in 24 radius. Normal
            landing resets air abilities and jetpack availability.
            </summary>
        </member>

        <member name="M:BroBase.StartDashing">
            <summary>
            Initiates dashing with special "fart dash" enhancement. When specific conditions are
            met, creates smoke effects, disturbs wildlife within 100 units, plays fart sound,
            and adds 50 horizontal and 60 vertical velocity boost.
            </summary>
        </member>

        <member name="M:BroBase.StopElbowSlamming">
            <summary>
            Cancels elbow slam state and restores abilities. Resets slam flag and re-enables
            wall climbing capability. Simple state cleanup for movement system.
            </summary>
        </member>

        <member name="M:BroBase.UseJetpack">
            <summary>
            Activates jetpack thrust with context-sensitive boost. Near ground (within 20 units)
            creates blast-off flames and strong upward boost (140+ velocity). In air provides
            moderate boost (60 velocity) with -50 floor. Manages jetpack state and audio.
            </summary>
        </member>

        <member name="P:BroBase.GetSpeed">
            <summary>
            Gets movement speed with exhaustion penalty. Returns 75% speed when exhausted,
            normal speed when performance enhanced (negating exhaustion), or base speed
            otherwise.
            </summary>
            <returns>Current movement speed multiplier.</returns>
        </member>

        <member name="P:BroBase.jumpForce">
            <summary>
            Gets or sets jump force with dynamic modifiers. Applies ValueOrchestrator
            modifications when player exists, adds 10% boost when performance enhanced. Setter
            stores base value for modification calculations.
            </summary>
            <returns>Modified jump force value based on power-ups and performance state.</returns>
        </member>

        <member name="F:BroBase.cardioTime">
            <summary>
            Current sprint duration counter in seconds. Increments while dashing, decreases when
            not. Clamped 0-3 seconds. Triggers exhaustion when exceeding player's modified
            sprint time limit.
            </summary>
        </member>

        <member name="F:BroBase.fartJumpsLeftCount">
            <summary>
            Counter for remaining flatulence-based air jumps. Reset to 1 when grounded or
            acquiring flatulence power. Decremented on use. Enables comedic double-jump mechanic
            with explosive effects.
            </summary>
        </member>

        <member name="F:BroBase.fartingCounter">
            <summary>
            Timer for periodic fart explosions during flatulence. Resets every 0.07 seconds,
            triggering tiny explosions, ground damage, and velocity changes. Creates continuous
            area denial effect.
            </summary>
        </member>

        <member name="F:BroBase.fartingTime">
            <summary>
            Active duration of flatulence explosion effect. Set to 0.3 for delayed fart, 0.36
            for huge fart. While active, creates periodic explosions via fartingCounter. Comedy
            mechanic with gameplay impact.
            </summary>
        </member>

        <member name="F:BroBase.flexAirJumpsLeft">
            <summary>
            Counter for remaining flex-powered air jumps. Set to 1 when landing or acquiring
            FlexAirJump perk. Consumed during air flex abilities. Enables acrobatic aerial
            maneuvers.
            </summary>
        </member>

        <member name="F:BroBase.frontSomersaulting">
            <summary>
            Active state flag for front flip animation sequence. Set after air flex completion
            or specific actions. Enables chaining into elbow slam. Visual flourish for acrobatic
            moves.
            </summary>
        </member>

        <member name="F:BroBase.lastAirFlexJumpTime">
            <summary>
            Timestamp of last air flex jump for cooldown enforcement. Prevents air flex spam
            with 0.1 second minimum interval. Ensures balanced aerial movement.
            </summary>
        </member>

        <member name="F:BroBase.lastTeleportFlexJumpTime">
            <summary>
            Timestamp of last teleport flex use for 0.2 second cooldown. Prevents teleport
            ability spam. Works with FlexTeleport perk for tactical repositioning.
            </summary>
        </member>

        <member name="F:BroBase.maxCardioDuration">
            <summary>
            Base maximum sprint duration before exhaustion triggers. Default 2.5 seconds,
            modified by ValueOrchestrator. Compared against cardioTime to determine when stamina
            depletes.
            </summary>
        </member>

        <member name="M:BroBase.AlertNearbyMooks">
            <summary>
            Alerts nearby enemies with special pickpocket mechanic when dashing. If player has
            PickPocketMoney value, finds unalerted mooks within 8x8 range, fully alerts them,
            and triggers pickpocket perk event. Always alerts mooks normally afterward.
            </summary>
        </member>

        <member name="M:BroBase.ApplyPerformanceEnhancedFlexing">
            <summary>
            Applies flexing animation when the bro is performance enhanced and idle. Virtual
            method allowing derived bros to customize their flexing behavior.
            </summary>
        </member>

        <member name="M:BroBase.BecomeExhausted">
            <summary>
            Makes the bro exhausted from overexertion, preventing sprinting for 2.3 seconds.
            Stops any current dashing and resets cardio timer. Virtual method for subclass
            customization.
            </summary>
        </member>

        <member name="M:BroBase.BurstChest">
            <summary>
            Handles chest burst effect with flex invulnerability protection. Only processes
            chest burst if not protected by flex invulnerability, preventing alien chest bursts
            during temporary invulnerability periods.
            </summary>
        </member>

        <member name="M:BroBase.CanFreeze">
            <summary>
            Determines if this bro can be affected by freeze effects. Always returns true for
            BroBase characters, maintaining the base class behavior that heroes can be frozen.
            </summary>
            <returns>Always returns true.</returns>
        </member>

        <member name="M:BroBase.CanReduceLives">
            <summary>
            Determines if death should consume a life. Returns false if marked for revival
            (preventing life loss), otherwise uses base logic. Critical for revival mechanics
            where death is temporary.
            </summary>
            <returns>False if will revive; otherwise, base implementation result.</returns>
        </member>

        <member name="M:BroBase.Damage(System.Int32,DamageType,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour,System.Single,System.Single)">
            <summary>
            Processes incoming damage with revival and flex invulnerability checks. If marked
            for revival and damaged within 5 seconds of death, accelerates revival to 0.6
            seconds. Ignores all damage during flex invulnerability. Always cancels elbow slam
            state when damaged.
            </summary>
            <param name="damage">Amount of damage to apply.</param>
            <param name="damageType">Type of damage being inflicted.</param>
            <param name="xI">Horizontal knockback force.</param>
            <param name="yI">Vertical knockback force.</param>
            <param name="direction">Direction of the damage source.</param>
            <param name="damageSender">The object that caused the damage.</param>
            <param name="hitX">X coordinate of the hit location.</param>
            <param name="hitY">Y coordinate of the hit location.</param>
        </member>

        <member name="M:BroBase.Death(System.Single,System.Single,DamageObject)">
            <summary>
            Handles character death with special effect cleanup. Sets posthumous fart delay
            (0.9s) for max flatulence level if not reviving. Destroys active flex effect
            GameObject. Delegates core death logic to base implementation.
            </summary>
            <param name="xI">Horizontal death force/velocity.</param>
            <param name="yI">Vertical death force/velocity.</param>
            <param name="damage">The damage object that caused death.</param>
        </member>

        <member name="M:BroBase.DelayedRevive(System.Single)">
            <summary>
            Configures delayed revival after death. Sets revival timer, prevents gibbing during
            revival window, marks for revival, and resets kill reporting. Integrates with holy
            water revival system for death recovery.
            </summary>
            <param name="delay">Time in seconds before revival occurs.</param>
        </member>

        <member name="M:BroBase.HolyWaterRevive">
            <summary>
            Revives a dead bro using holy water mechanics. Restores the bro to life with 1
            health, applies temporary invulnerability, launches them upward, triggers time
            slowdown effects, and creates visual indicators.
            </summary>
        </member>

        <member name="M:BroBase.HolyWaterReviveRPC">
            <summary>
            Network RPC handler for holy water revival. Processes revival commands from other
            players in multiplayer, only executing if the bro is currently dead.
            </summary>
        </member>

        <member name="M:BroBase.IsAlive">
            <summary>
            Checks character alive status including revival state. Returns true if marked for
            revival with time remaining OR base alive check passes. Allows systems to treat
            reviving characters as semi-alive.
            </summary>
            <returns>True if reviving or health greater than 0; otherwise, false.</returns>
        </member>

        <member name="M:BroBase.PerformanceEnhancedGrunt">
            <summary>
            Creates area effects when grunting while performance enhanced. Every 4th grunt
            panics nearby units within 64 units, and in competitive modes also stuns them.
            Virtual method allowing subclass customization.
            </summary>
        </member>

        <member name="M:BroBase.SetActionstateToIdle">
            <summary>
            Transitions the character to idle state with special handling for performance
            enhancement mode. Resets animation frame to 0 when performance enhanced and not
            performing other actions.
            </summary>
        </member>

        <member name="M:BroBase.SetGestureAnimation(GestureElement.Gestures)">
            <summary>
            Complex gesture handler managing elbow slam, air flex, teleport flex, and visual
            effects. Triggers elbow slam when somersaulting+flex+down in air. Manages air flex
            with multiple validation checks. Creates flex visual effects and handles teleport
            initiation with time gates.
            </summary>
            <param name="gesture">The gesture type to animate.</param>
        </member>

        <member name="M:BroBase.TriggerFlexEvent">
            <summary>
            Executes flex power effects based on player abilities. FlexAlluring attracts mooks
            within 96 units. FlexGoldenLight spawns 8-12 projectiles in arc pattern.
            FlexInvulnerability plays sound effect. Manages audio feedback for all flex powers.
            </summary>
        </member>

        <member name="P:BroBase.IsPerformanceEnhanced">
            <summary>
            Gets whether the character is currently performance enhanced from steroids. Returns
            the value of the performanceEnhanced field which is set when using steroids for
            temporary ability boosts.
            </summary>
            <returns>True if performance enhanced; otherwise, false.</returns>
        </member>

        <member name="P:BroBase.WillReviveAlready">
            <summary>
            Gets whether this bro will automatically revive after death. Set to true when holy
            water revival is triggered, checked during update to perform the actual revival.
            </summary>
            <returns>True if the bro has a pending revival; otherwise, false.</returns>
        </member>

        <member name="F:BroBase.cannotGibTime">
            <summary>
            Temporary gibbing immunity duration to preserve body during revival. Set during
            DelayedRevive to prevent destruction. Ensures revival animations can play properly
            without body disappearing.
            </summary>
        </member>

        <member name="F:BroBase.exhaustedTime">
            <summary>
            Duration of exhaustion state after sprint overexertion in seconds. Set to 2.3 when
            cardio limit exceeded. Prevents sprinting and continues sweat effects while active.
            Core component of stamina system.
            </summary>
        </member>

        <member name="F:BroBase.fartDelay">
            <summary>
            Timer for posthumous flatulence effect. Set to 0.9 seconds on death with max
            flatulence. Creates comedic delayed explosion after death. Decrements until
            triggering fart.
            </summary>
        </member>

        <member name="F:BroBase.flexEffect">
            <summary>
            Visual effect object for active flex powers. Created for golden light or
            invulnerability effects. Destroyed on state changes or death. Provides visual
            feedback for flex abilities.
            </summary>
        </member>

        <member name="F:BroBase.flexInvulnerability">
            <summary>
            Duration timer for flex-induced invulnerability in seconds. Set to 0.25 during flex
            power activation. Prevents all damage while active. Strategic defensive window.
            </summary>
        </member>

        <member name="F:BroBase.flexSpecialFrame">
            <summary>
            Animation frame counter for flex special moves. Increments during air flex, elbow
            slam, and recovery. Controls sprite progression for special animations. Separate
            from main frame counter.
            </summary>
        </member>

        <member name="F:BroBase.gettingUpFromElbowSlam">
            <summary>
            Recovery state after elbow slam impact. Controls standup animation sequence.
            Prevents other actions during recovery. Ensures smooth transition from slam.
            </summary>
        </member>

        <member name="F:BroBase.isAirFlexing">
            <summary>
            Active state for air flex special move. Controls animation state and physics during
            aerial flex. Cleared on landing or move completion. Part of flex combo system.
            </summary>
        </member>

        <member name="F:BroBase.isElbowSlamming">
            <summary>
            Active state for downward elbow slam attack. Disables wall climbing and ladder
            interaction. Creates ground impact on landing. Aerial ground pound state.
            </summary>
        </member>

        <member name="F:BroBase.isFlatulent">
            <summary>
            Flag indicating active flatulence ability from power-ups. Set when Flatulence
            modifier greater than 0. Enables fart jumps and death effects. Core comedy mechanic
            flag.
            </summary>
        </member>

        <member name="F:BroBase.performanceEnhanced">
            <summary>
            Active state flag for performance enhancement from steroids. When true, enables
            special abilities like enhanced speed/jump, sweat particles, and area grunt effects.
            Controlled by performanceEnhancedTime duration.
            </summary>
        </member>

        <member name="F:BroBase.performanceEnhancedCounter">
            <summary>
            Frame timer for performance enhancement visual and audio effects. Triggers sweat
            particles and grunt effects every 0.0667 seconds during enhancement or exhaustion.
            Manages effect frequency.
            </summary>
        </member>

        <member name="F:BroBase.performanceEnhancedTime">
            <summary>
            Remaining duration of performance enhancement (steroid) effect in seconds. Set to 10
            seconds by default or custom duration via UseSteroidsForDuration. Decrements each
            frame until reaching zero, then disables enhancement.
            </summary>
        </member>

        <member name="F:BroBase.performanceGrunCount">
            <summary>
            Counter for performance enhancement grunt effects timing. Initialized to playerNum*4
            when steroids activate. Every 4 grunts panics nearby units, every 16 plays flex
            sound. Creates escalating intimidation effects.
            </summary>
        </member>

        <member name="F:BroBase.reviveTime">
            <summary>
            Delay in seconds before automatic revival triggers. Set by DelayedRevive method, can
            be extended by damage while dead. Compared against death time to initiate holy water
            revival sequence.
            </summary>
        </member>

        <member name="F:BroBase.willRevive">
            <summary>
            Flag indicating pending automatic revival after death. Set by DelayedRevive or holy
            water mechanics. Prevents life loss and triggers revival when reviveTime expires.
            Essential for revival system.
            </summary>
        </member>

        <member name="M:BroBase.AnimateActualIdleDuckingFrames">
            <summary>
            Handles ducking idle animation with elbow slam recovery override. Displays recovery
            animation when getting up from elbow slam, otherwise uses standard ducking idle
            frames.
            </summary>
        </member>

        <member name="M:BroBase.AnimateActualIdleFrames">
            <summary>
            Manages idle animation with priority system for special states. Prioritizes elbow
            slam recovery and air flexing animations over standard idle when hasNewAirFlexFrames
            is true. Falls back to base idle animation otherwise.
            </summary>
        </member>

        <member name="M:BroBase.AnimateActualJumpingFrames">
            <summary>
            Complex jumping animation controller managing multiple aerial states. Handles elbow
            slam (row 14), air flexing, front somersault (row 11, 12 frames), and recovery
            animations. Adjusts frame rates and gun visibility based on current action.
            </summary>
        </member>

        <member name="M:BroBase.AnimateAirFlexing">
            <summary>
            Manages air flex animation sequence on sprite row 13. Creates flex effect during
            early frames, triggers air jump at frame 3, transitions to somersault at frame 4+.
            Variable frame timing for dramatic effect.
            </summary>
        </member>

        <member name="M:BroBase.AnimateFrozen">
            <summary>
            Overrides frozen animation with empty implementation. BroBase characters do not
            display frozen animations, maintaining normal appearance even when frozen status is
            applied.
            </summary>
        </member>

        <member name="M:BroBase.AnimateGesture">
            <summary>
            Animates gestures with special flex power effects. When flexing with appropriate
            powers, grants temporary invulnerability (0.25s) and creates golden light visual
            effects. Extends base gesture animation with gameplay benefits.
            </summary>
        </member>

        <member name="M:BroBase.AnimateGettingUpFromElbowSlam">
            <summary>
            Handles 4-frame recovery animation from elbow slam on row 15. Fixed 0.07 frame rate,
            deactivates gun during animation, calls cleanup when complete to restore normal
            movement state.
            </summary>
        </member>

        <member name="M:BroBase.FrontSomersault">
            <summary>
            Initiates front somersault animation state. Sets frontSomersaulting flag to trigger
            rolling animation in the animation system.
            </summary>
        </member>

        <member name="M:BroBase.IncreaseFrame">
            <summary>
            Advances animation frames with special counter for flex animations. Increments
            flexSpecialFrame when performing air flex, elbow slam, or recovery animations,
            maintaining separate timing for special moves.
            </summary>
        </member>

        <member name="F:BroBase.hasNewAirFlexFrames">
            <summary>
            Indicates availability of enhanced animation frames for flex moves. Controls which
            sprite sequences are used. Affects elbow slam, air flex, and recovery animations.
            Animation quality flag.
            </summary>
        </member>

        <member name="M:BroBase.CheckInput">
            <summary>
            Processes gesture button input for teleport cancellation. Destroys remote teleport
            projectile when gesture button is pressed, allowing players to cancel teleport
            targeting.
            </summary>
        </member>

        <member name="M:BroBase.CheckWhetherShouldClearInput">
            <summary>
            Manages input restrictions during special animation states. Clears specific inputs
            during elbow slam (fire/highfive/special), recovery (movement unless other input
            detected), and air flexing (all except down when jumping).
            </summary>
        </member>

        <member name="M:BroBase.DestroyRemoteProjectile">
            <summary>
            Cleans up remote projectile with cooldown update. Calls base destruction logic and
            sets teleport cooldown timer to manage ability frequency.
            </summary>
        </member>

        <member name="M:BroBase.PlayBackflipGruntSound">
            <summary>
            Plays a specific grunt sound for backflip maneuvers. Uses voice pack backflip grunt
            clips at a fixed volume of 0.12. Called during chimney flips and other acrobatic
            moves.
            </summary>
        </member>

        <member name="M:BroBase.PlayChimneyFlipSound(System.Single)">
            <summary>
            Plays sound during chimney flip/wall jump maneuvers. Combines a backflip grunt sound
            with the base dash sound effect for the complete audio experience.
            </summary>
            <param name="volume">Volume level for the dash sound component.</param>
        </member>

        <member name="M:BroBase.PlayClimbSound">
            <summary>
            Plays climbing sound with voice pack support and frequency-based volume reduction.
            Reduces volume to 66% if another climb sound was played within 1.5 seconds. Uses
            random volume variation (0.23-0.28) for variety.
            </summary>
        </member>

        <member name="M:BroBase.PlayDeathSound">
            <summary>
            Plays death sound when the bro dies. Uses voice pack death clips if available at 0.3
            volume, otherwise falls back to standard hit sounds. Provides character-specific
            death audio.
            </summary>
        </member>

        <member name="M:BroBase.PlayExitLadderSound">
            <summary>
            Plays sound when exiting a ladder. Simply delegates to the jump sound system to
            provide appropriate footstep audio.
            </summary>
        </member>

        <member name="M:BroBase.PlayFlexSound(System.Single)">
            <summary>
            Plays flexing sound during flex gestures. Cycles through an array of flex sounds
            using a static index to provide variety. Each bro can have multiple unique flex
            sounds that play in sequence.
            </summary>
            <param name="volumne">Volume level for the flex sound.</param>
        </member>

        <member name="M:BroBase.PlayJetpackSound(System.Single)">
            <summary>
            Plays jetpack sound effect. Initializes and manages the jetpack sound instance for
            continuous jetpack audio during flight.
            </summary>
            <param name="volumne">Volume level for the jetpack sound.</param>
        </member>

        <member name="M:BroBase.PlayJumpSound">
            <summary>
            Plays jump sound with voice pack support and frequency-based volume reduction.
            Reduces volume to 66% if another jump sound was played within 2.5 seconds to prevent
            audio spam. Always plays footstep sounds in addition to voice.
            </summary>
        </member>

        <member name="M:BroBase.PlayPushBlockSound">
            <summary>
            Plays grunt sound when pushing blocks with voice pack support. Reduces volume by 40%
            if called within 1.7 seconds of the last push sound to prevent audio spam during
            continuous pushing.
            </summary>
        </member>

        <member name="M:BroBase.PlayRollLandSound">
            <summary>
            Plays a landing grunt sound when the bro lands from a roll. Uses voice pack fall
            grunt clips with a 2-second cooldown to prevent spam. Volume varies randomly between
            0.1-0.12.
            </summary>
        </member>

        <member name="M:BroBase.PlayThrowHeavySound(System.Single)">
            <summary>
            Plays the heavy throwing sound (typically for throwing mooks) with voice pack
            support. Uses unique bro voice if available and not bypassed, otherwise plays
            standard throw sound.
            </summary>
            <param name="v">Volume multiplier for the sound playback.</param>
        </member>

        <member name="M:BroBase.PlayThrowLightSound(System.Single)">
            <summary>
            Plays the light throwing sound (typically for grenades) with voice pack support.
            Uses unique bro voice if available and not bypassed, otherwise plays standard throw
            sound.
            </summary>
            <param name="v">Volume multiplier for the sound playback.</param>
        </member>

        <member name="M:BroBase.PlayYeahSound(System.Single,System.Single,System.Boolean)">
            <summary>
            Plays celebration/victory sound with voice pack support. Uses character-specific
            "yeah" clips if available, otherwise falls back to standard power-up sounds.
            </summary>
            <param name="volumne">Base volume level for the sound.</param>
            <param name="pitch">Pitch modification for the sound.</param>
            <param name="bypassReverb">Whether to bypass reverb effects.</param>
        </member>

        <member name="P:BroBase.BypassNewVoices">
            <summary>
            Gets whether new voice lines should be bypassed for this bro. Combines a static
            class-wide bypass flag with an instance-specific bypass flag.
            </summary>
            <returns>True if voices should be bypassed globally or for this specific bro; otherwise,
                false.</returns>
        </member>

        <member name="P:BroBase.SoundHolderVoice">
            <summary>
            Gets the voice sound holder for this bro, providing access to unique character voice
            lines. Virtual property allowing derived bros to provide different voice packs.
            </summary>
            <returns>The SoundHolderVoice instance for this bro.</returns>
        </member>

        <member name="F:BroBase.byPassNewVoices">
            <summary>
            Global static flag to disable voice pack system for all bros. When true, forces all
            BroBase instances to use standard sound effects instead of character-specific voice
            packs. Combines with instance field in BypassNewVoices property.
            </summary>
        </member>

        <member name="F:BroBase.bypassNewVoicesOnThisBro">
            <summary>
            Instance-specific flag to disable voice pack for individual bro. Public field
            allowing per-character voice configuration. Combines with static byPassNewVoices in
            BypassNewVoices property for flexible audio control.
            </summary>
        </member>

        <member name="F:BroBase.flexSoundIndex">
            <summary>
            Shared static counter for cycling through flex sound variations. Incremented each
            time any bro plays flex sound, used with modulo to select from flex sound array.
            Ensures audio variety across all characters.
            </summary>
        </member>

        <member name="F:BroBase.lastClimbSoundTime">
            <summary>
            Tracks timestamp of last climbing sound for frequency-based volume control. Reduces
            climb sound volume to 66% if played within 1.5 seconds of previous climb sound,
            preventing audio fatigue during continuous climbing.
            </summary>
        </member>

        <member name="F:BroBase.lastJumpSoundTime">
            <summary>
            Tracks timestamp of last jump sound playback for volume management. Used to reduce
            volume to 66% if jumps occur within 2.5 seconds, preventing audio spam while
            maintaining variety in repeated jump vocalizations.
            </summary>
        </member>

        <member name="F:BroBase.lastLandSoundTime">
            <summary>
            Tracks timestamp of last roll landing sound to prevent audio spam. Prevents landing
            sounds from playing if less than 2 seconds have passed since last landing, managing
            fall grunt frequency.
            </summary>
        </member>

        <member name="F:BroBase.lastPushSoundTime">
            <summary>
            Tracks timestamp of last block pushing sound for volume management. Reduces push
            grunt volume by 40% if played within 1.7 seconds, preventing repetitive audio during
            continuous block pushing.
            </summary>
        </member>

        <member name="F:BroBase.soundHolderVoice">
            <summary>
            Stores reference to the voice sound collection component containing
            character-specific voice clips. Used throughout audio methods for jump grunts, climb
            sounds, death sounds, and other vocalizations. Accessed via SoundHolderVoice
            property.
            </summary>
        </member>

        <member name="M:BroBase.IsOverLadder(System.Single@)">
            <summary>
            Checks if the bro is positioned over a ladder for climbing. Prevents ladder
            interaction during elbow slam state to maintain downward attack momentum.
            </summary>
            <param name="ladderXPos">Output parameter for the ladder's X position if found.</param>
            <returns>True if over a ladder and not elbow slamming; otherwise, false.</returns>
        </member>

        <member name="M:BroBase.IsOverLadder(System.Single,System.Single@)">
            <summary>
            Checks if the bro is over a ladder with horizontal offset consideration. Prevents
            ladder grabbing during elbow slam attacks to ensure attack completion.
            </summary>
            <param name="xOffset">Horizontal offset from bro position to check.</param>
            <param name="ladderXPos">Output parameter for the ladder's X position if found.</param>
            <returns>True if over a ladder at offset and not elbow slamming; otherwise, false.</returns>
        </member>

        <member name="M:BroBase.ReachedCheckPoint">
            <summary>
            Called when the bro reaches a checkpoint. Performs base checkpoint behavior and
            attempts to spawn a companion drone.
            </summary>
        </member>

        <member name="M:BroBase.SpawnDrone">
            <summary>
            Spawns a networked drone companion at the player's position. Creates drone 3 units
            above player, stores reference in currentDrone field for tracking. Virtual method
            allowing custom drone types in derived bros.
            </summary>
        </member>

        <member name="M:BroBase.TrySpawnDrone">
            <summary>
            Attempts to spawn a companion drone for the bro. Only spawns if no current drone
            exists. Sets tracking flag after spawning.
            </summary>
        </member>

        <member name="F:BroBase.currentDrone">
            <summary>
            Reference to active drone companion. Spawned when player has Drones modifier.
            Checked for null/alive status before spawning new drone. Persistent AI companion.
            </summary>
        </member>

        <member name="F:BroBase.droneCounter">
            <summary>
            Unused timer initialized to 1.0 for drone system. Currently has no active
            functionality. Placeholder for potential future drone mechanics.
            </summary>
        </member>

        <member name="F:BroBase.hasHadDrone">
            <summary>
            Tracks if drone has been spawned this session. Triggers initial drone spawn attempt
            when false. Set true after first successful spawn. One-time spawn flag.
            </summary>
        </member>

        <member name="M:BroBase.AirFlexJump">
            <summary>
            Executes flex-powered air jump with dynamic velocity scaling. Time-gated at 0.1s
            intervals, calculates jump boost between 0.5x-1.8x based on current velocity.
            Creates land effect and consumes flex jump charge.
            </summary>
        </member>

        <member name="M:BroBase.CreateJetpackFlames(UnityEngine.Vector3)">
            <summary>
            Creates vertical jetpack flame particles for upward thrust visualization. Generates
            dual plume effects positioned at ±2.5 units horizontally, with -70 downward velocity
            creating realistic exhaust. Particles last 0.4 seconds with 1.3x fade rate.
            </summary>
            <param name="currentJetpackDirection">Direction vector for jetpack thrust orientation.</param>
        </member>

        <member name="M:BroBase.CreateJetpackFlamesDash(UnityEngine.Vector3@)">
            <summary>
            Creates continuous flame trail during jetpack dash movements. Calculates path
            between positions, generates particles at 2 unit intervals up to 50 units maximum.
            Updates reference position for smooth trail continuity across frames.
            </summary>
            <param name="lastFlamePos">Reference to last flame position for trail calculation.</param>
        </member>

        <member name="M:BroBase.CreateJetpackFlamesHorizontal(UnityEngine.Vector3)">
            <summary>
            Creates horizontal jetpack flame particles for lateral movement. Similar to vertical
            flames but with -10 downward velocity for wider spread pattern. Provides visual
            feedback for horizontal jetpack maneuvers.
            </summary>
            <param name="currentJetpackDirection">Direction vector for jetpack thrust orientation.</param>
        </member>

        <member name="M:BroBase.CreateSweatParticle">
            <summary>
            Creates visual sweat particle effects near the bro. Generates water drip particles
            with random position offset within a unit circle, adjusted for ducking state.
            Particles inherit some of the bro's velocity for realistic movement.
            </summary>
        </member>

        <member name="M:BroBase.MustSync">
            <summary>
            Indicates whether this character requires network synchronization. Virtual method
            always returning true for BroBase, ensuring all player characters are synchronized
            in multiplayer.
            </summary>
            <returns>Always returns true.</returns>
        </member>

        <member name="M:BroBase.SetupThrownMookVelocity(System.Single@,System.Single@)">
            <summary>
            Configures the throwing velocity for captured mooks. Uses stronger throw velocity
            (360 horizontal, 120 vertical) when performance enhanced, otherwise uses standard
            velocity (210 horizontal, 120 vertical). Adds portion of current velocity to throw.
            </summary>
            <param name="XI">Output horizontal velocity for the thrown mook.</param>
            <param name="YI">Output vertical velocity for the thrown mook.</param>
        </member>

        <member name="M:BroBase.StartElbowSlam">
            <summary>
            Initiates elbow slam attack sequence with physics modifications. Disables wall
            climbing, sets animation timing (0.066f), adjusts downward velocity (minimum 210),
            and plays flex sound. Prepares for ground pound attack.
            </summary>
        </member>

        <member name="M:BroBase.StartTeleportFlexing">
            <summary>
            Initiates teleport targeting with 0.2s cooldown check. Spawns RemoteTeleportTarget
            projectile for position marking if no existing projectile and cooldown expired.
            Activates bro and manages projectile reference.
            </summary>
        </member>

        <member name="M:BroBase.TryCreateFlexEffect">
            <summary>
            Creates visual effects for flex powers when not already active. Spawns golden light
            effect for FlexGoldenLight power or invulnerability effect for FlexInvulnerability
            power. Prevents duplicate effects by checking flexEffect null state.
            </summary>
        </member>

        <member name="F:BroBase.jetPackActive">
            <summary>
            Active state flag for jetpack thrust effect. When true, provides upward velocity and
            creates flame particles. Controlled by jetPackTime duration and manages thrust
            physics.
            </summary>
        </member>

        <member name="F:BroBase.jetPackAvailable">
            <summary>
            One-time use flag for jetpack power-up availability. Set false when consumed via
            UseJetpack. Reset on landing. Gates access to jetpack ability.
            </summary>
        </member>

        <member name="F:BroBase.jetPackFlameCounter">
            <summary>
            Timer for jetpack flame particle spawning. Triggers effects every 0.0225 seconds.
            Active during jetpack use and JetpackPunch attacks. Visual effect timing control.
            </summary>
        </member>

        <member name="F:BroBase.jetPackSprite">
            <summary>
            Visual sprite component for jetpack equipment display. Activated when jetpack is
            used, deactivated when jetPackTime expires. Provides visual feedback for jetpack
            power-up state.
            </summary>
        </member>

        <member name="F:BroBase.jetPackTime">
            <summary>
            Active jetpack thrust duration timer. Set to 0.66 seconds on activation. Different
            thrust levels: extra boost above 0.36s, normal boost above 0.16s. Controls jetpack
            physics phases.
            </summary>
        </member>

        <member name="M:EffectsController.Awake">
            <summary>
            Initializes critical components on object creation. Sets up the ground layer mask
            for collision detection, initializes the oil accident ticker system, and sets a
            random initial accident timer between 10-250 seconds.
            </summary>
        </member>

        <member name="M:EffectsController.Start">
            <summary>
            Configures visual effects based on the current level's theme. Disables all fog
            objects by default, then selectively enables theme-specific effects: city fog and
            sun for City theme, hell fog for Hell theme, and fire/ash effects for BurningJungle
            theme (except in BroDown mode). Also checks for constant fireworks flag.
            </summary>
        </member>

        <member name="M:EffectsController.Update">
            <summary>
            Updates weather effect positions to follow the camera each frame. Manages rain and
            ash positioning with offset (-25, 380). Handles firework spawning when enabled and
            conditions are met (campaign mode, level finished). Increments the accident timer
            used for oil spill warning displays.
            </summary>
        </member>

        <member name="P:EffectsController.instance">
            <summary>
            Gets the singleton instance of EffectsController. Uses lazy initialization to find
            and cache the instance in the scene on first access. Provides global access to the
            effects system from any script.
            </summary>
        </member>

        <member name="F:EffectsController.inst">
            <summary>
            Private static field that caches the singleton instance used by the instance
            property getter for lazy initialization and quick access.
            </summary>
        </member>

        <member name="M:EffectsController.CreateAlienParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates alien-themed particle effects. Uses alien earth dots at 1.4x force with half
            the requested count for extraterrestrial debris or organic alien matter destruction.
            </summary>
            <param name="x">The x-coordinate of the alien debris origin</param>
            <param name="y">The y-coordinate of the alien debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateAlienScrapParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates complex alien-themed scrap particles for extraterrestrial destruction
            effects. Distributes particles across 7 different alien scrap emitters with varying
            force multipliers (1.0x to 1.6x). The second emitter uses 1.5x angular velocity for
            enhanced spinning. Includes both regular and tiny alien scrap variants for detailed
            alien material destruction.
            </summary>
            <param name="x">The x-coordinate of the alien scrap origin</param>
            <param name="y">The y-coordinate of the alien scrap origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The base rotational velocity for spinning pieces</param>
        </member>

        <member name="M:EffectsController.CreateBackgroundBloodSplat(System.Single,System.Single)">
            <summary>
            Creates a small blood splat decal at the specified position. This is a static blood
            mark that doesn't move.
            </summary>
            <param name="x">The X coordinate where the blood splat appears.</param>
            <param name="y">The Y coordinate where the blood splat appears.</param>
        </member>

        <member name="M:EffectsController.CreateBackgroundBloodSpray(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a background blood spray effect that moves with velocity. This effect
            appears behind other game elements.
            </summary>
            <param name="x">The X coordinate where the blood spray originates.</param>
            <param name="y">The Y coordinate where the blood spray originates.</param>
            <param name="xI">The horizontal velocity of the blood spray.</param>
            <param name="yI">The vertical velocity of the blood spray.</param>
        </member>

        <member name="M:EffectsController.CreateBackgroundFlameParticle(System.Single,System.Single)">
            <summary>
            Creates a background flame particle at default depth. Randomly selects from four
            flame sheet variations for visual variety. Calls the z-parameter overload with z =
            -12 for background placement.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
        </member>

        <member name="M:EffectsController.CreateBackgroundFlameParticle(System.Single,System.Single,System.Single)">
            <summary>
            Creates a background flame particle with custom z-depth. Randomly selects from four
            flame sheet particle variations (flameSheetBackgroundParticle1-4) to add visual
            variety to fire effects in the background.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
            <param name="z">The z-coordinate (depth) of the flame particle</param>
        </member>

        <member name="M:EffectsController.CreateBackgroundWoodParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates background wood shrapnel effects. Distributes particles among four different
            wood shrapnel types, with the first two types getting slightly more particles
            (count/4 + 1) than the last two (count/4). Uses CreateShrapnel internally for
            physics-based wood debris.
            </summary>
            <param name="x">The x-coordinate of the wood debris origin</param>
            <param name="y">The y-coordinate of the wood debris origin</param>
            <param name="count">The total number of wood pieces to create</param>
            <param name="offsetRadius">The spread radius for shrapnel placement</param>
            <param name="force">The force multiplier for shrapnel velocity</param>
            <param name="xI">The initial x-velocity added to all shrapnel</param>
            <param name="yI">The initial y-velocity added to all shrapnel</param>
        </member>

        <member name="M:EffectsController.CreateBarbedWireParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates barbed wire destruction particles. Combines smaller white dirt particles at
            1.6x force (half count) with grey tinting for rust/dirt, plus shiny metal particles
            (half count) for the wire segments, all with angular velocity for realistic wire
            breakage.
            </summary>
            <param name="x">The x-coordinate of the barbed wire origin</param>
            <param name="y">The y-coordinate of the barbed wire origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wire pieces</param>
        </member>

        <member name="M:EffectsController.CreateBlackPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates black smoke plume particles with customizable physics and appearance.
            Randomly selects between two black plume variations for visual variety. Supports
            life and size multipliers for different smoke intensities.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>

        <member name="M:EffectsController.CreateBloodArteryEffect(BloodColor,System.Single,System.Single,System.Int32)">
            <summary>
            Creates arterial blood spurting effects with directional spray. Randomly selects
            between two artery animation variants and rotates based on direction (-90° left, 90°
            right, 0° up). Spawns accompanying blood dot particles and plays squirt sound at 25%
            volume.
            </summary>
            <param name="color">The blood color type for the effect</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="direction">Direction of spray: negative = left, positive = right, 0 =
                upward</param>
        </member>

        <member name="M:EffectsController.CreateBloodExplosionSmall(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,Vector3)">
            <summary>
            Creates a small blood explosion effect. Randomly selects from three blood gush
            prefabs, spawns red blood particles, shakes camera, plays wet explosion sound, and
            disturbs wildlife. Similar to slime explosion but with blood visuals.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spawn radius (unused)</param>
            <param name="offsetYRadius">The vertical spawn radius (unused)</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused)</param>
            <param name="puffSpeed">The particle speed multiplier (unused)</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="shrapnelCount">Number of blood particles to create</param>
            <param name="shrapnelForce">The velocity force for blood particles</param>
            <param name="normal">The surface normal direction (unused)</param>
        </member>

        <member name="M:EffectsController.CreateBloodGushEffect(BloodColor,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Creates a comprehensive blood gush effect combining multiple elements. Randomly
            selects from 3 gush and 3 spurt variations, with optional slime and dot particles.
            Effects are flipped based on direction and particles spray opposite to impact
            direction.
            </summary>
            <param name="color">The blood color type for all effect elements</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact direction (sign determines flip)</param>
            <param name="yI">The vertical impact direction</param>
            <param name="dots">Whether to include blood dot particles</param>
            <param name="slimes">Whether to include slime particles</param>
        </member>

        <member name="M:EffectsController.CreateBloodParticles(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates blood particle effects at the specified position with z-coordinate of 1.
            This is a convenience overload that delegates to the full version with default
            z-depth for standard 2D positioning.
            </summary>
            <param name="color">The blood color type (red, green, oil, frozen)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The total number of particles to create across all sizes</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateBloodParticles(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a complete blood splatter effect using multiple particle sizes. Distributes
            particles across three different emitters: big particles (1/3 of count), small
            particles (1/2 of count + 1), and dot particles (1/2 of count + 1). Each particle
            type uses reduced spawn radius (10% of provided).
            </summary>
            <param name="color">The blood color type (red, green, oil, frozen)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The total number of particles to create across all sizes</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateBloodParticlesBig(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates large blood particle effects at the specified position with z-coordinate of
            1. This is a convenience overload that delegates to the full version with default
            z-depth.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of large particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateBloodParticlesBig(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates large blood particle effects with color-specific emitters. Selects
            appropriate particle emitter based on blood type: sewerage (poop), green, oil
            (black), or default red. Falls back to cutscene blood particles when main
            EffectsController is inactive. Each particle has randomized color brightness
            (80-100%).
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of large particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateBloodParticlesDots(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates blood dot particle effects at the specified position with z-coordinate of 1.
            This is a convenience overload that delegates to the full version with default
            z-depth and scale of 1.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>

        <member name="M:EffectsController.CreateBloodParticlesDots(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates blood dot particle effects with clustered spawning and size scaling. Uses
            color-specific emitters with 50% chance to add one extra particle. Implements
            clustering where 60% spawn near previous positions. Particles have semi-transparent
            color (70-110% alpha) and scalable size.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>

        <member name="M:EffectsController.CreateBloodParticlesDrip(System.Single,System.Single,System.Single,System.Single,System.Single,BloodColor)">
            <summary>
            Creates a blood drip particle effect at a random position within the specified
            radius. Selects color-specific drip emitter (green, oil/black, or default red) and
            spawns with zero velocity.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="scaleM">The scale multiplier for particle size</param>
            <param name="color">The blood color type (green, oil, or default red)</param>
        </member>

        <member name="M:EffectsController.CreateBloodParticlesSmall(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates small blood particle effects at the specified position with z-coordinate of
            1. This is a convenience overload that delegates to the full version with default
            z-depth.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of small particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateBloodParticlesSmall(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates small blood particle effects with clustered spawning pattern. Uses
            color-specific emitters and implements a clustering algorithm where 60% of particles
            spawn near previous positions. Particles emit with velocity based on spawn position
            plus base velocity, with color brightness varying 80-100%.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of small particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateBloodSmallSplashEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates small blood splash effects for minor impacts. Randomly selects between two
            splash variations with 25% chance each (50% chance of no effect). Used for smaller
            wounds or blood droplet impacts.
            </summary>
            <param name="color">The blood color type for the splash</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact velocity (unused in implementation)</param>
            <param name="yI">The vertical impact velocity (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateBloodSplashEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a blood splash impact effect. Randomly selects between two splash variations
            (50% chance each, with 50% chance of no effect). The blood color parameter
            determines the tint of the splash sprite.
            </summary>
            <param name="bloodColor">The blood color type for tinting the splash</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact velocity (unused in implementation)</param>
            <param name="yI">The vertical impact velocity (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateBloodSprayExplodeEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an explosive blood spray effect for violent deaths. Randomly selects between
            two spray variations and horizontally flips based on direction. Used for gibbing and
            explosive damage effects.
            </summary>
            <param name="color">The blood color type for the spray</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal force direction (sign determines flip)</param>
            <param name="yI">The vertical force direction (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateBloodTinySplashEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates tiny blood splash effects for minimal impacts. Randomly selects between two
            tiny splash variations with 25% chance each (50% chance of no effect). Used for very
            small wounds or single blood drops.
            </summary>
            <param name="color">The blood color type for the splash</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact velocity (unused in implementation)</param>
            <param name="yI">The vertical impact velocity (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateBoneParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates bone debris particles. Identical implementation to CreateGreySandParticles,
            combining bone dots at 1.4x force with small bone particles for skeletal destruction
            effects.
            </summary>
            <param name="x">The x-coordinate of the debris origin</param>
            <param name="y">The y-coordinate of the debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateBoomerangWindEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform,System.Single,System.Single)">
            <summary>
            Creates a spinning wind effect for boomerang weapons. The effect is parented to the
            projectile and rotates continuously. Sets initial rotation and spin speed for the
            visual wind trail effect.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the effect to (usually the boomerang)</param>
            <param name="rotationSpeed">The rotation speed in degrees per second</param>
            <param name="rotation">The initial rotation angle in degrees</param>
        </member>

        <member name="M:EffectsController.CreateBubbles(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Creates underwater bubble particle effects rising upward. Uses clustered spawning
            where 60% of bubbles spawn near previous positions. All bubbles emit with upward
            velocity of 10 units/second and use randomized size/lifetime from
            RedBloodParticlesSmall settings.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of bubbles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
        </member>

        <member name="M:EffectsController.CreateBulletPoofEffect(System.Single,System.Single)">
            <summary>
            Creates a small impact poof effect for bullet hits. Used when projectiles strike
            surfaces to provide visual feedback of the impact point with a small dust cloud.
            </summary>
            <param name="x">The x-coordinate of the bullet impact</param>
            <param name="y">The y-coordinate of the bullet impact</param>
        </member>

        <member name="M:EffectsController.CreateChakramTrailEffect(System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
            Creates a chakram (spinning blade) trail effect. Instantiates the chakramTrail
            prefab and initializes it with the specified color and lifetime for visual tracking
            of spinning projectiles.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="life">The lifetime of the trail in seconds</param>
            <param name="color">The color of the trail effect</param>
            <returns>The created ProjectileTrail component for further manipulation</returns>
        </member>

        <member name="M:EffectsController.CreateDepletedUraniumExplosion(UnityEngine.Vector2)">
            <summary>
            Creates a small explosion effect specifically for depleted uranium projectiles.
            Combines a tiny shader explosion visual with a small explosion sound at 60% volume
            for appropriate impact feedback.
            </summary>
            <param name="position">The 2D position where the explosion occurs</param>
        </member>

        <member name="M:EffectsController.CreateDirtParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates dirt and earth debris particles. Combines dirt dust dots at 1.4x force (half
            count) with three types of small dirt particles (one-third count each), with the
            third type using 1.1x force for varied dirt explosion effects.
            </summary>
            <param name="x">The x-coordinate of the dirt origin</param>
            <param name="y">The y-coordinate of the dirt origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateDirtWhiteParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Creates white-tinted dirt particles with two color variations. Combines dirt dots at
            1.4x force (half count), small white dirt particles (two-thirds count), and smaller
            white dirt at 1.1x force (one-third count) for snow, ash, or other light-colored
            debris.
            </summary>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color variation for the particles</param>
            <param name="color2">The second color variation for the particles</param>
        </member>

        <member name="M:EffectsController.CreateDoodadGib(SpriteSM,DoodadGibsType,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Creates environmental debris based on DoodadGibsType enum. Special handling for
            SmallMolotov type which burns ground and damages units on impact. Falls back to
            blank doodad prefab for unspecified types. Copies sprite parameters from the base
            sprite for visual consistency.
            </summary>
            <param name="baseSprite">The source sprite to copy parameters from</param>
            <param name="gibType">The type of doodad gib to create</param>
            <param name="material">The material to apply to the doodad</param>
            <param name="x">The x-coordinate of the doodad origin</param>
            <param name="y">The y-coordinate of the doodad origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>

        <member name="M:EffectsController.CreateDoodadGib(SpriteSM,DoodadPiece,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Creates environmental debris with explicit prefab specification. Copies all sprite
            parameters from the base sprite including offset, dimensions, and UV coordinates to
            maintain visual consistency when destructible objects break apart.
            </summary>
            <param name="baseSprite">The source sprite to copy parameters from</param>
            <param name="doodadGibPrefab">The doodad piece prefab to instantiate</param>
            <param name="material">The material to apply to the doodad</param>
            <param name="x">The x-coordinate of the doodad origin</param>
            <param name="y">The y-coordinate of the doodad origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>

        <member name="M:EffectsController.CreateDustParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates simple dust particles using the default dirt dots emitter. This convenience
            method forwards to the emitter-based overload for standard dust cloud effects with
            automatic dirt coloring.
            </summary>
            <param name="x">The x-coordinate of the dust origin</param>
            <param name="y">The y-coordinate of the dust origin</param>
            <param name="count">The number of dust particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateDustParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
            Creates dust particles with a specified color. This wrapper method uses the default
            dirt dots emitter but applies the provided color instead of random dirt colors for
            custom dust effects.
            </summary>
            <param name="x">The x-coordinate of the dust origin</param>
            <param name="y">The y-coordinate of the dust origin</param>
            <param name="count">The number of dust particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all dust particles</param>
        </member>

        <member name="M:EffectsController.CreateDustParticlesRow(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
            Creates dust particles in a horizontal row pattern with custom color. This wrapper
            uses the default dirt dots emitter and forwards to the emitter-based row creation
            method.
            </summary>
            <param name="x">The x-coordinate of the row center</param>
            <param name="y">The y-coordinate of the row (remains constant)</param>
            <param name="count">The number of dust particles to create</param>
            <param name="offsetRadius">The horizontal spread radius for the row</param>
            <param name="xForce">The horizontal force component</param>
            <param name="yForce">The vertical force component</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all dust particles</param>
        </member>

        <member name="M:EffectsController.CreateEggPopEffect(System.Single,System.Single,System.Single)">
            <summary>
            Creates an alien egg bursting effect at the specified 3D position. Used when alien
            eggs are destroyed or when facehuggers emerge from eggs.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreateExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates standard explosion effects with customizable parameters. Delegates to the
            full explosion method with default values for complex explosions (true), spark count
            (40), and white pop effect (true).
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal randomization radius</param>
            <param name="offsetYRadius">The vertical randomization radius</param>
            <param name="disturbRange">The radius for environmental disturbance</param>
            <param name="delayM">The delay multiplier for effect timing</param>
            <param name="puffSpeed">The expansion speed of explosion puffs</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="groundWave">Whether to create a ground shockwave effect</param>
        </member>

        <member name="M:EffectsController.CreateExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Creates comprehensive explosion effects with full parameter control. Includes shader
            explosion, optional ground wave, tree shaking, wildlife/alien disturbance, sound
            effects, and screen shake. Resets accident ticker and can spawn complex multi-part
            explosions.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal randomization radius</param>
            <param name="offsetYRadius">The vertical randomization radius</param>
            <param name="disturbRange">The radius for environmental disturbance</param>
            <param name="delayM">The delay multiplier for effect timing</param>
            <param name="puffSpeed">The expansion speed of explosion puffs</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="groundWave">Whether to create a ground shockwave effect</param>
            <param name="complexExplosion">Whether to spawn additional explosion parts</param>
            <param name="sparkCount">The number of spark particles to create</param>
            <param name="whitePop">Whether to include the white flash effect</param>
        </member>

        <member name="M:EffectsController.CreateExplosionInRectangle(Vector3,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Creates a grid of explosions within a rectangular area. Spawns explosions at 16-unit
            intervals with random position offset and delay. Each explosion has randomized
            velocity based on the provided base values. Note: Several parameters are unused in
            implementation.
            </summary>
            <param name="bottonLeft">The bottom-left corner position of the rectangle</param>
            <param name="widthInBlocks">The width in 16-unit blocks</param>
            <param name="heightInBlocks">The height in 16-unit blocks</param>
            <param name="randomOffset">The random position offset radius for each explosion</param>
            <param name="delayM">The delay multiplier (unused in implementation)</param>
            <param name="puffSpeed">The particle velocity speed multiplier</param>
            <param name="xi">The base horizontal velocity component</param>
            <param name="yi">The base vertical velocity component</param>
            <param name="shakeM">The camera shake multiplier (unused in implementation)</param>
            <param name="volume">The sound volume (unused in implementation)</param>
            <param name="groundWave">Whether to create ground waves (unused in implementation)</param>
            <param name="debugDraw">Whether to draw debug visualization (partially implemented)</param>
        </member>

        <member name="M:EffectsController.CreateExplosionParticle(UnityEngine.Vector2,System.Single,UnityEngine.Vector2)">
            <summary>
            Creates explosion particles at a fixed z-depth of 32. Currently ignores the size and
            velocity parameters in the implementation, creating standard explosion particles at
            the specified position.
            </summary>
            <param name="position">The 2D position for the explosion particles</param>
            <param name="size">The intended size parameter (currently unused)</param>
            <param name="velocity">The intended velocity parameter (currently unused)</param>
        </member>

        <member name="M:EffectsController.CreateFire(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,Vector3)">
            <summary>
            Creates multiple fire effects distributed randomly within a circular area. Each fire
            has randomized delay and velocity based on its position relative to the center. Used
            for area fire damage and spreading flames.
            </summary>
            <param name="x">The center x-coordinate in world space</param>
            <param name="y">The center y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of fires to create</param>
            <param name="range">The radius of the circular spawn area</param>
            <param name="delay">The base delay multiplier for fire spawning</param>
            <param name="force">The velocity force multiplier</param>
            <param name="velocity">The base velocity vector for all fires</param>
        </member>

        <member name="M:EffectsController.CreateFire(System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
            Creates a single fire effect with specified parameters. Randomly selects from three
            flame prefab variations (flame1, flame2, flame3) with equal probability. Returns the
            FlickerFader component for further manipulation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The spawn delay in seconds</param>
            <param name="velocity">The initial velocity vector</param>
            <returns>The created FlickerFader component for the fire effect</returns>
        </member>

        <member name="M:EffectsController.CreateFireSparks(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates fire-type spark particles for burning and welding effects. Uses the
            specialized fire spark emitter to create hot sparks that appear during fire damage,
            explosions, or metalwork.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The number of fire sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
        </member>

        <member name="M:EffectsController.CreateFireTrail(Transform,Vector3)">
            <summary>
            Creates a fire trail particle system attached to a parent transform. The trail
            follows the parent's movement and is positioned at the specified local offset. Used
            for flaming projectiles and burning objects.
            </summary>
            <param name="parent">The transform to attach the fire trail to</param>
            <param name="localOffset">The local position offset from the parent</param>
            <returns>The created ParticleSystem component for further manipulation</returns>
        </member>

        <member name="M:EffectsController.CreateFlameEffect(System.Single,System.Single,System.Single,Vector3)">
            <summary>
            Creates flame particle effects with occasional fire sparks. Always creates a flame
            particle and has 16.7% chance (2/12) to also spawn fire sparks for added visual
            variety. Used for standard fire effects.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The spawn delay for the flame particle</param>
            <param name="velocity">The initial velocity vector</param>
        </member>

        <member name="M:EffectsController.CreateFlameParticle(System.Single,System.Single)">
            <summary>
            Creates standard flame lick particles at default background depth. Calls the
            z-parameter overload with z = -12 for consistent background flame placement.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
        </member>

        <member name="M:EffectsController.CreateFlameParticle(System.Single,System.Single,System.Single)">
            <summary>
            Creates standard flame lick particles with custom z-depth. Uses the FlameLicks
            particle emitter to generate realistic fire particles. Includes null checks for both
            instance and FlameLicks emitter.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
            <param name="z">The z-coordinate (depth) of the flame particle</param>
        </member>

        <member name="M:EffectsController.CreateGib(Gib,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a single gib instance with material and flip control. Sets up the gib's
            sprite with rotation settings from the prefab and launches it based on its local
            position relative to the origin point.
            </summary>
            <param name="gibPrefab">The gib prefab to instantiate</param>
            <param name="material">The material to apply to the gib</param>
            <param name="centerX">The x-coordinate of the gib origin</param>
            <param name="centerY">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>

        <member name="M:EffectsController.CreateGib(Gib,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a single gib with hit position parameters. Currently identical to the
            simpler overload as hit position parameters are not utilized in the implementation.
            Maintained for API compatibility.
            </summary>
            <param name="gibPrefab">The gib prefab to instantiate</param>
            <param name="material">The material to apply to the gib</param>
            <param name="centerX">The x-coordinate of the gib origin</param>
            <param name="centerY">The y-coordinate of the gib origin</param>
            <param name="hitX">The x-coordinate of the impact (unused)</param>
            <param name="hitY">The y-coordinate of the impact (unused)</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>

        <member name="M:EffectsController.CreateGibs(GibHolder,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates gibs with center offset calculation for directional launching. Calculates
            launch vectors based on the difference between hit position and center position,
            creating realistic debris patterns that fly away from the impact point.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="centerX">The x-coordinate of the object center</param>
            <param name="centerY">The y-coordinate of the object center</param>
            <param name="hitX">The x-coordinate of the impact point</param>
            <param name="hitY">The y-coordinate of the impact point</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>

        <member name="M:EffectsController.CreateGibs(GibHolder,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates gibs with explicit material override. Forces all created gibs to use the
            specified material regardless of their prefab settings, useful for themed
            destruction effects or material-specific debris.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="material">The material to apply to all gibs</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>

        <member name="M:EffectsController.CreateGibs(GibHolder,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates gibs using each child's original material. The standard gib creation method
            that preserves the visual appearance defined in the prefabs while applying physics
            forces.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>

        <member name="M:EffectsController.CreateGibs(GibHolder,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a limited number of gibs with default flip direction. Allows control over
            the maximum number of gibs created, useful for performance management or specific
            visual effects.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="count">The maximum number of gibs to create</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>

        <member name="M:EffectsController.CreateGibs(GibHolder,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a limited number of gibs with flip direction control. Applies 0.8-1.2x
            random force variance to each gib for natural scatter patterns. The flip direction
            parameter controls horizontal sprite orientation.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="count">The maximum number of gibs to create</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
            <param name="flipDirection">The horizontal flip direction (-1 for left, 1 for right)</param>
        </member>

        <member name="M:EffectsController.CreateGibsFromNestedGibHolder(GibHolder,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Activates and launches pre-existing nested gib children from their parent holder.
            Iterates through all child transforms backwards, detaching and activating each gib
            before launching with scaled force (0.0625x multiplier). Preserves existing gib
            positions for authentic destruction patterns.
            </summary>
            <param name="gibs">The GibHolder containing nested gib children</param>
            <param name="hitX">The x-coordinate of the impact point</param>
            <param name="hitY">The y-coordinate of the impact point</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>

        <member name="M:EffectsController.CreateGlassShards(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates glass shattering effects with particle shards, sound, and environmental
            impact. Emits glass shard particles with random distribution, triggers camera shake,
            plays shattering sound, and disturbs nearby wildlife within the specified range.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of glass shard particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius for shards</param>
            <param name="offsetYRadius">The vertical spawn radius for shards</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="force">The force multiplier for shard velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="shakeSpeedM">The camera shake speed multiplier</param>
            <param name="volume">The sound effect volume</param>
            <param name="sizeM">The size multiplier for glass shard particles</param>
        </member>

        <member name="M:EffectsController.CreateGrenadeTrailEffect(System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
            Creates a grenade trail effect that follows projectile movement. Instantiates the
            grenadeTrail prefab and initializes it with the specified color and lifetime for
            visual tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="life">The lifetime of the trail in seconds</param>
            <param name="color">The color of the trail effect</param>
            <returns>The created ProjectileTrail component for further manipulation</returns>
        </member>

        <member name="M:EffectsController.CreateGreySandParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates grey sand or bone-like debris particles. Combines bone dots at 1.4x force
            (full count) with small bone particles at normal force (one-third count) for ashen
            or skeletal debris effects.
            </summary>
            <param name="x">The x-coordinate of the debris origin</param>
            <param name="y">The y-coordinate of the debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateGrindingSparkShower(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates grinding or friction spark shower effects. Uses shower spark emitter with
            20-40% lifetime for metal grinding, saw cutting, or heavy friction visual effects.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The number of grinding sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
        </member>

        <member name="M:EffectsController.CreateGroundWave(System.Single,System.Single,System.Single)">
            <summary>
            Creates an expanding ground shockwave effect radiating from the center point. The
            wave expands outward to the specified range, typically used with explosions to show
            ground impact effects.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
        </member>

        <member name="M:EffectsController.CreateHellPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates hell-themed smoke plume particles with reduced opacity. Uses a red-tinted
            smoke variant with 30% alpha multiplier (0.3) for a supernatural, hellish atmosphere
            effect.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>

        <member name="M:EffectsController.CreateHugeExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a comprehensive huge explosion with multiple visual and audio effects.
            Includes main explosion, extra random explosions, spark shower, camera shake, audio
            filters, wildlife disturbance, optional ground wave, and screen flash. Designed for
            major explosive events.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spread for extra explosions</param>
            <param name="offsetYRadius">The vertical spread for extra explosions</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused in implementation)</param>
            <param name="puffSpeed">The particle velocity multiplier</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="extraExplosionsCount">Number of additional explosion effects to spawn</param>
            <param name="shrapnelCount">Number of spark particles to create</param>
            <param name="shrapnelForce">The velocity force for spark particles</param>
            <param name="groundWaveDistance">The ground wave range (must be &gt; 16 to activate)</param>
            <param name="lowPassFrequencyLossM">The audio low-pass filter intensity</param>
            <param name="flashEffectM">The screen flash effect intensity</param>
        </member>

        <member name="M:EffectsController.CreateHugeShockWave(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a massive shockwave effect with optional aerial waves. The huge variant has
            greater visual impact and can optionally create waves in the air for enhanced
            effect. Returns the wave instance for customization.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
            <param name="createWavesInAir">Whether to create additional aerial wave effects</param>
            <returns>The created ExplosionGroundWave component</returns>
        </member>

        <member name="M:EffectsController.CreateLargeBloodGushEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an extra large blood gush effect for massive damage. Randomly selects from 3
            large gush variations and flips horizontally based on impact direction. Used for
            heavy weapons and boss damage.
            </summary>
            <param name="color">The blood color type for the gush effect</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact direction (sign determines flip)</param>
            <param name="yI">The vertical impact direction (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateLaserParticle(System.Single,System.Single,UnityEngine.GameObject)">
            <summary>
            Creates a laser burn effect that can attach to a GameObject. The burn effect follows
            the attached object if provided, useful for showing persistent laser damage on
            moving targets.
            </summary>
            <param name="x">The x-coordinate of the laser burn</param>
            <param name="y">The y-coordinate of the laser burn</param>
            <param name="attachedGameObject">Optional GameObject to attach the burn effect to</param>
        </member>

        <member name="M:EffectsController.CreateLeafBurst(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
            Creates foliage destruction effects with colored leaf particles. Distributes leaves
            between two prefab types as shrapnel-style particles. Used when vegetation is
            damaged or destroyed by explosions or impacts.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of leaf particles to create</param>
            <param name="range">The spawn radius for leaf distribution</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="force">The velocity force multiplier</param>
            <param name="leafColor">The color tint for the leaf particles</param>
        </member>

        <member name="M:EffectsController.CreateLeafBurst(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates foliage destruction effects with automatic leaf coloring. Delegates to the
            color-specific overload using the current map's leaf color setting. Provides
            convenient access to leaf effects without manual color specification.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of leaf particles to create</param>
            <param name="range">The spawn radius for leaf distribution</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="force">The velocity force multiplier</param>
        </member>

        <member name="M:EffectsController.CreateMassiveExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a comprehensive massive explosion with enhanced effects. Nearly identical to
            huge explosion but uses larger prefabs and sounds. Includes all the same
            multi-layered effects for maximum visual and audio impact.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spread for extra explosions</param>
            <param name="offsetYRadius">The vertical spread for extra explosions</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused in implementation)</param>
            <param name="puffSpeed">The particle velocity multiplier</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="extraExplosionsCount">Number of additional explosion effects to spawn</param>
            <param name="shrapnelCount">Number of spark particles to create</param>
            <param name="shrapnelForce">The velocity force for spark particles</param>
            <param name="groundWaveDistance">The ground wave range (must be &gt; 16 to activate)</param>
            <param name="lowPassFrequencyLossM">The audio low-pass filter intensity</param>
            <param name="flashEffectM">The screen flash effect intensity</param>
        </member>

        <member name="M:EffectsController.CreateMeleeStrikeEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a melee weapon strike effect. The effect is horizontally flipped based on
            attack direction and vertically flipped on alternating strikes for visual variety.
            Uses a static scale multiplier that alternates between 1 and -1.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal attack direction (sign determines horizontal flip)</param>
            <param name="yI">The vertical attack direction (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateMeleeStrikeLargeEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a large melee weapon strike effect for heavy attacks. Functions identically
            to standard melee strikes but uses a larger prefab. Alternates vertical scale for
            variety.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal attack direction (sign determines horizontal flip)</param>
            <param name="yI">The vertical attack direction (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates metal debris particles without rotation. Combines dirt dots at 1.4x force
            for dust effects with small metal particles at normal force for metallic debris.
            Splits the count evenly between the two particle types.
            </summary>
            <param name="x">The x-coordinate of the debris origin</param>
            <param name="y">The y-coordinate of the debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates rotating metal particle effects with uniform spread. This convenience
            overload for the rotating version calls the full method with equal x and y offset
            radii for circular patterns.
            </summary>
            <param name="x">The x-coordinate of the metal origin</param>
            <param name="y">The y-coordinate of the metal origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning metal pieces</param>
        </member>

        <member name="M:EffectsController.CreateMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates rotating metal particle effects with elliptical spread. Uses two metal
            emitters with the first getting 1 + count/2 particles at 1.2x force and the second
            getting count/2 at 1.1x force for standard metal destruction with rotation.
            </summary>
            <param name="x">The x-coordinate of the metal origin</param>
            <param name="y">The y-coordinate of the metal origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning metal pieces</param>
        </member>

        <member name="M:EffectsController.CreateMusicalShockWave(System.Single,System.Single,System.Single)">
            <summary>
            Creates a musical-themed shockwave effect with unique visuals. Likely includes note
            or sound-based visual elements. Returns the wave instance for customization.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
            <returns>The created ExplosionGroundWave component</returns>
        </member>

        <member name="M:EffectsController.CreateMuzzleFlashBigEffect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a large muzzle flash effect for heavy weapons. Instantiates both the big
            flash animation and big glow effect. Unlike smaller flashes, this is not parented to
            any transform and remains stationary.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
        </member>

        <member name="M:EffectsController.CreateMuzzleFlashEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
            Creates a standard muzzle flash effect for weapon firing. Instantiates both the main
            flash animation oriented by velocity and a separate glow effect. The main flash is
            parented to the provided transform for proper movement tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>

        <member name="M:EffectsController.CreateMuzzleFlashMediumEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
            Creates a medium-sized muzzle flash effect for intermediate weapons. Instantiates
            both the medium flash animation and standard glow effect. The main flash is parented
            to the provided transform for proper tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>

        <member name="M:EffectsController.CreateMuzzleFlashRoundEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
            Creates a round muzzle flash effect for circular barrel weapons. Instantiates both
            the round flash animation and standard glow effect. The main flash is parented to
            the provided transform for proper tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>

        <member name="M:EffectsController.CreateMuzzleFlashRoundEffectBlue(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
            Creates a blue-tinted round muzzle flash for energy weapons. Uses the specialized
            blue round flash prefab with standard glow effect. The main flash is parented to the
            provided transform for proper tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>

        <member name="M:EffectsController.CreateMuzzleFlashTankCannonEffect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a massive tank cannon muzzle flash effect. Uses the tank cannon flash prefab
            with huge glow effect. The flash is horizontally flipped based on firing direction
            (sign of xI) to ensure proper orientation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component (sign determines flip)</param>
            <param name="yI">The vertical velocity component for orientation</param>
        </member>

        <member name="M:EffectsController.CreateMuzzleFlashVomitEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
            Creates a vomit-style muzzle flash effect for acid/bile weapons. Instantiates the
            vomit flash animation oriented by velocity and parents it to the provided transform.
            Does not include a glow effect like standard muzzle flashes.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the effect to</param>
        </member>

        <member name="M:EffectsController.CreateNuclearExplosion(System.Single,System.Single,System.Single)">
            <summary>
            Creates a nuclear explosion particle effect. Instantiates the specialized nuclear
            explosion particle system at the specified position without additional effects or
            modifications.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreateOilyFlameEffect(System.Single,System.Single,System.Single,Vector3)">
            <summary>
            Creates oily flame particle effects with occasional fire sparks. Similar to standard
            flames but uses oily flame particles for darker, smokier appearance. Has 16.7%
            chance to spawn additional sparks.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The spawn delay for the flame particle</param>
            <param name="velocity">The initial velocity vector</param>
        </member>

        <member name="M:EffectsController.CreateOilyFlameParticle(System.Single,System.Single)">
            <summary>
            Creates oil-based flame particles at default background depth. These darker, smokier
            flames are used for burning oil effects. Calls the z-parameter overload with z =
            -12.
            </summary>
            <param name="x">The x-coordinate where the oily flame appears</param>
            <param name="y">The y-coordinate where the oily flame appears</param>
        </member>

        <member name="M:EffectsController.CreateOilyFlameParticle(System.Single,System.Single,System.Single)">
            <summary>
            Creates oil-based flame particles with custom z-depth. Uses the OilyFlameLicks
            particle emitter for darker, smokier fire effects typical of burning oil. Includes
            null checks for safety.
            </summary>
            <param name="x">The x-coordinate where the oily flame appears</param>
            <param name="y">The y-coordinate where the oily flame appears</param>
            <param name="z">The z-coordinate (depth) of the oily flame particle</param>
        </member>

        <member name="M:EffectsController.CreatePinkPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates pink-colored smoke plume particles with reduced opacity. Uses a pink smoke
            variant with 30% alpha multiplier (0.3) for whimsical or special effect smoke.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>

        <member name="M:EffectsController.CreatePitchBlackPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates extremely dark black smoke plume particles. Uses a pitch black variant with
            full alpha (1.0) for maximum opacity, suitable for heavy smoke or soot effects from
            intense fires.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>

        <member name="M:EffectsController.CreatePlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates standard gray smoke plume particles at z-depth 0. This is a convenience
            overload that calls the full version with default z positioning for standard smoke
            effects.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>

        <member name="M:EffectsController.CreatePlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates standard gray smoke plume particles with full control. Automatically selects
            between small and large plume variants based on size multiplier (threshold at 2).
            Randomly picks between two texture variations for each size category. Large plumes
            have their size halved for proper scaling.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses small plumes, 2+ uses large
                plumes)</param>
        </member>

        <member name="M:EffectsController.CreatePlumes(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates multiple smoke plume shrapnel effects in a circular pattern. Uses
            CreateShrapnelCircle internally to distribute smoke plumes evenly around the origin
            point, useful for large explosions or smoke grenades.
            </summary>
            <param name="x">The x-coordinate of the plume origin</param>
            <param name="y">The y-coordinate of the plume origin</param>
            <param name="count">The number of smoke plumes to create</param>
            <param name="radius">The radius of the circular spread pattern</param>
            <param name="force">The outward force applied to each plume</param>
            <param name="xI">The initial x-velocity added to all plumes</param>
            <param name="yI">The initial y-velocity added to all plumes</param>
        </member>

        <member name="M:EffectsController.CreatePredabroPlasmaPop(System.Single,System.Single)">
            <summary>
            Creates a Predator-style plasma explosion effect. Used for alien technology weapons
            and plasma-based projectile impacts with distinctive visual styling.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreatePredictionTrailEffect(System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
            Creates a prediction trail effect for trajectory visualization. Instantiates the
            predictionTrail prefab and initializes it with the specified color and lifetime for
            showing predicted paths.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="life">The lifetime of the trail in seconds</param>
            <param name="color">The color of the trail effect</param>
            <returns>The created ProjectileTrail component for further manipulation</returns>
        </member>

        <member name="M:EffectsController.CreateProjectileLargePopEffect(System.Single,System.Single)">
            <summary>
            Creates a large projectile impact effect. Combines a larger pop animation
            (projectileLargeFlickPuff) with a glowing flash effect for visual feedback when
            heavy projectiles hit surfaces or expire.
            </summary>
            <param name="x">The x-coordinate of the impact position</param>
            <param name="y">The y-coordinate of the impact position</param>
        </member>

        <member name="M:EffectsController.CreateProjectilePopEffect(System.Single,System.Single)">
            <summary>
            Creates a small projectile impact effect. Combines a pop animation
            (projectileFlickPuff) with a glowing flash effect for visual feedback when
            projectiles hit surfaces or expire.
            </summary>
            <param name="x">The x-coordinate of the impact position</param>
            <param name="y">The y-coordinate of the impact position</param>
        </member>

        <member name="M:EffectsController.CreateProjectilePopWhiteEffect(System.Single,System.Single)">
            <summary>
            Creates a white-colored projectile impact effect. Combines a white pop animation
            (projectileWhiteFlickPuff) with a glowing flash effect for visual feedback when
            energy or special projectiles hit surfaces.
            </summary>
            <param name="x">The x-coordinate of the impact position</param>
            <param name="y">The y-coordinate of the impact position</param>
        </member>

        <member name="M:EffectsController.CreateProjectilePuff(System.Single,System.Single)">
            <summary>
            Creates projectile impact effects combining a puff and glow. Spawns both a
            projectile flick puff and small muzzle flash glow at the impact position for bullet
            hits and similar projectile impacts.
            </summary>
            <param name="x">The x-coordinate of impact in world space</param>
            <param name="y">The y-coordinate of impact in world space</param>
        </member>

        <member name="M:EffectsController.CreateProjectileTimeBroPopEffect(System.Single,System.Single)">
            <summary>
            Creates a special effect for projectile time (bullet time) activation. The effect
            ignores time scale to maintain visual consistency during slow-motion gameplay.
            Combines a white flicker puff with a small muzzle flash glow distortion for dramatic
            effect.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreatePunchPopEffect(System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
            Creates a directional punch impact effect. The effect automatically orients itself
            based on the velocity vector, flipping horizontally when punching left (negative x
            velocity).
            </summary>
            <param name="x">The x-coordinate of the impact</param>
            <param name="y">The y-coordinate of the impact</param>
            <param name="velocity">The punch velocity vector used to determine effect orientation</param>
        </member>

        <member name="M:EffectsController.CreatePurplePlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates purple-colored smoke plume particles with reduced opacity. Uses a purple
            smoke variant with 30% alpha multiplier (0.3) for magical or poisonous gas effects.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>

        <member name="M:EffectsController.CreateRedWarningDiamondHuge(System.Single,System.Single,Transform)">
            <summary>
            Creates a huge diamond-shaped red warning effect. The effect is parented to the
            provided transform for movement tracking. Used for major threat indicators or boss
            attacks.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>

        <member name="M:EffectsController.CreateRedWarningDiamondLargege(System.Single,System.Single,Transform)">
            <summary>
            Creates a large diamond-shaped red warning effect. The effect is parented to the
            provided transform for movement tracking. Used for significant threat indicators.
            Note: Method name contains typo "Largege" instead of "Large".
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>

        <member name="M:EffectsController.CreateRedWarningEffect(System.Single,System.Single,Transform)">
            <summary>
            Creates a red warning pulse effect at the specified position. The effect is parented
            to the provided transform for movement tracking. Used to indicate danger zones or
            incoming attacks.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>

        <member name="M:EffectsController.CreateSandDots(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates only sand dot particles for simple sand puff effects. Uses 1.4x force
            multiplier for enhanced spread. Simpler than CreateSandParticles as it omits the
            small sand particles.
            </summary>
            <param name="x">The x-coordinate of the sand origin</param>
            <param name="y">The y-coordinate of the sand origin</param>
            <param name="count">The number of sand dots to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateSandParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates sandy debris particles for desert or beach environments. Combines sand dots
            at 1.4x force (full count) with small sand particles at normal force (one-third
            count) for a dusty sand effect.
            </summary>
            <param name="x">The x-coordinate of the sand origin</param>
            <param name="y">The y-coordinate of the sand origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateSandWhiteParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Creates white-tinted sand particles with two color variations. Uses dirt dots at
            1.4x force (full count) combined with small white dirt particles (one-third count)
            for light-colored sand or ash effects.
            </summary>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color variation for the particles</param>
            <param name="color2">The second color variation for the particles</param>
        </member>

        <member name="M:EffectsController.CreateScrapParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates complex scrap metal destruction effects. The most detailed metal particle
            effect, combining: 5 scrap emitters with varying counts and forces, grey dirt dots
            at 1.4x force, 2 tiny scrap emitters at 1.6x force, and 2 metal emitters at 1.6x
            force. Second scrap emitter uses 1.5x angular velocity for varied rotation speeds.
            </summary>
            <param name="x">The x-coordinate of the scrap origin</param>
            <param name="y">The y-coordinate of the scrap origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The base rotational velocity for spinning pieces</param>
        </member>

        <member name="M:EffectsController.CreateSemenParticles(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates semen particle effects using two particle sizes. Distributes particles
            between small particles (1/2 of count + 1) and dot particles (1/2 of count + 1).
            Each particle type uses reduced spawn radius (10% of provided). Note: The BloodColor
            parameter appears unused.
            </summary>
            <param name="color">The blood color type (parameter appears unused in implementation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The total number of particles to create across both sizes</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateSemenParticlesDots(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates semen dot particle effects at the specified position with z-coordinate of 1.
            This method delegates to CreateBloodParticlesDots, effectively treating semen dots
            as blood dot particles.
            </summary>
            <param name="color">The blood color type (used for blood particle creation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>

        <member name="M:EffectsController.CreateSemenParticlesDots(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates semen dot particle effects with clustered spawning and size scaling. Uses
            dedicated semen dot emitter (or cutscene blood dots as fallback) with 50% chance to
            add extra particle. Implements clustering where 60% spawn near previous positions
            with semi-transparent color (70-110% alpha).
            </summary>
            <param name="color">The blood color type (parameter appears unused in implementation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>

        <member name="M:EffectsController.CreateSemenParticlesSmall(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates small semen particle effects at the specified position with z-coordinate of
            1. This method delegates to CreateBloodParticlesSmall, effectively treating semen as
            a blood particle type.
            </summary>
            <param name="color">The blood color type (used for blood particle creation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateSemenParticlesSmall(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates small semen particle effects with clustered spawning pattern. Uses dedicated
            semen particle emitter and implements clustering where 60% of particles spawn near
            previous positions. Particles emit with velocity based on spawn position plus base
            velocity, with brightness varying 80-100%.
            </summary>
            <param name="color">The blood color type (parameter appears unused in implementation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateShaderExplosion(EffectsController.ExplosionSize,Vector3,System.Single)">
            <summary>
            Creates shader-based particle explosions of specified size. Supports various
            explosion scales from Tiny to Massive, with optional white flash suppression
            (LargeNoWhite). All particle systems respect the delay parameter for synchronized
            effects.
            </summary>
            <param name="size">The explosion size enum (Tiny, Small, Medium, Large, Massive,
                LargeNoWhite)</param>
            <param name="position">The world position for the explosion center</param>
            <param name="delay">The delay in seconds before particles start emitting</param>
        </member>

        <member name="M:EffectsController.CreateShellSpeedTrail(System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
            Creates speed trail effects for fast-moving projectiles like shells. The trail is
            oriented using the angleZ parameter to match projectile rotation. Returns the Puff
            component for attachment to moving objects.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="angleZ">The rotation angle in degrees for trail orientation</param>
            <param name="velocity">The initial velocity vector</param>
            <returns>The created Puff component for the speed trail</returns>
        </member>

        <member name="M:EffectsController.CreateShinyMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates shiny metallic particle effects with rotation. Uses two shiny metal
            emitters, each receiving 1 + count/2 particles at 1.2x force for polished metal
            destruction effects with realistic spinning.
            </summary>
            <param name="x">The x-coordinate of the metal origin</param>
            <param name="y">The y-coordinate of the metal origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning metal pieces</param>
        </member>

        <member name="M:EffectsController.CreateShockWave(System.Single,System.Single,System.Single)">
            <summary>
            Creates a standard shockwave effect with visual distortion. Returns the wave
            instance for additional customization. Used for medium-scale explosions and impacts.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
            <returns>The created ExplosionGroundWave component</returns>
        </member>

        <member name="M:EffectsController.CreateShrapnel(Shrapnel,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates shrapnel debris with initial velocity inheritance. This basic overload
            creates white-colored shrapnel pieces that spread randomly within the radius and
            inherit the specified initial velocity.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
        </member>

        <member name="M:EffectsController.CreateShrapnel(Shrapnel,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
            Creates colored shrapnel debris with initial velocity inheritance. Spreads pieces
            randomly within the radius, applies the specified color tint (if not white), and
            launches with force proportional to distance from origin plus the inherited
            velocity.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
            <param name="shrapnelColor">The color tint to apply to the shrapnel pieces</param>
        </member>

        <member name="M:EffectsController.CreateShrapnel(Shrapnel,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates shrapnel debris with a custom material override. Spreads pieces randomly
            within the radius and applies the specified shared material to each piece's renderer
            before launching.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="sharedMaterial">The material to apply to all shrapnel pieces</param>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
        </member>

        <member name="M:EffectsController.CreateShrapnelBlindStar(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Transform)">
            <summary>
            Creates stunning star effects that attach to and follow a unit. Uses PuffTwoLayer
            effects cycling through 3 star variants. Each star is parented to the unit transform
            so it moves with the stunned character. Increments the global stunned stars counter
            for effect management.
            </summary>
            <param name="x">The x-coordinate for star creation (before parenting)</param>
            <param name="y">The y-coordinate for star creation (before parenting)</param>
            <param name="radius">The spread radius for star positioning</param>
            <param name="force">The initial force for star movement (before parenting)</param>
            <param name="count">The number of star effects to create</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="unitTransform">The transform to parent the stars to (usually the stunned
                unit)</param>
        </member>

        <member name="M:EffectsController.CreateShrapnelCircle(Shrapnel,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates shrapnel debris in a circular arc pattern. Distributes pieces evenly along
            an arc (size based on count), launching each outward from its position on the
            circle. Arc size ranges from 0.1 to 2π radians.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="x">The x-coordinate of the circle center</param>
            <param name="y">The y-coordinate of the circle center</param>
            <param name="radius">The radius of the circular pattern</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create along the arc</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
        </member>

        <member name="M:EffectsController.CreateSlimeExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,Vector3,BloodColor)">
            <summary>
            Creates a full-scale slime or blood explosion based on color. Includes main
            explosion, extra blood gushes, slime particles, camera shake, sound, wildlife
            disturbance, screen flash, 360-degree blood spray, and muzzle flash glow. The most
            comprehensive organic explosion effect.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spread for extra effects</param>
            <param name="offsetYRadius">The vertical spread for extra effects</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused)</param>
            <param name="puffSpeed">The particle speed multiplier (unused)</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="extraExplosionsCount">Number of additional blood gush effects</param>
            <param name="shrapnelCount">Number of slime particles to create</param>
            <param name="shrapnelForce">The velocity force for particles</param>
            <param name="flashEffectM">The screen flash effect intensity</param>
            <param name="normal">The surface normal direction (unused)</param>
            <param name="bloodColor">The blood color type (Green or Red supported)</param>
        </member>

        <member name="M:EffectsController.CreateSlimeExplosionSmall(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,Vector3)">
            <summary>
            Creates a small slime/organic explosion effect. Spawns green slime particles,
            creates visual splatter, shakes camera, plays wet explosion sound, and disturbs
            nearby wildlife. The normal parameter is accepted but not used in the current
            implementation.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spawn radius (unused)</param>
            <param name="offsetYRadius">The vertical spawn radius (unused)</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused)</param>
            <param name="puffSpeed">The particle speed multiplier (unused)</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="shrapnelCount">Number of slime particles to create</param>
            <param name="shrapnelForce">The velocity force for slime particles</param>
            <param name="normal">The surface normal direction (unused)</param>
        </member>

        <member name="M:EffectsController.CreateSlimeParticles(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates slime particle effects with the specified color and parameters. Delegates to
            the color-based overload after converting the BloodColor enum to its corresponding
            Unity Color, reducing the particle count by half.
            </summary>
            <param name="color">The blood color type to use for slime particles</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of particles to create (will be halved internally)</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateSlimeParticles(Color,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates slime particle effects with a specific Unity Color. Uses a clustered
            spawning pattern where 60% of particles spawn near previous positions to create more
            organic slime trails. Particles emit with velocity based on their spawn position
            relative to the center plus base velocity components.
            </summary>
            <param name="color">The Unity Color for the slime particles</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>

        <member name="M:EffectsController.CreateSmallExplosion(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates small-scale explosion effects with shader particles and optional flames.
            Uses random shader explosion size (Small, Medium, or Large) and spawns 0-3 flame
            effects in various patterns. Includes camera shake, sound, and accident ticker
            reset.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
        </member>

        <member name="M:EffectsController.CreateSmallFireTrail(Transform,Vector3)">
            <summary>
            Creates a smaller fire trail particle system attached to a parent transform. Similar
            to standard fire trail but with reduced particle count and size. Used for smaller
            burning projectiles or effects.
            </summary>
            <param name="parent">The transform to attach the fire trail to</param>
            <param name="localOffset">The local position offset from the parent</param>
            <returns>The created ParticleSystem component for further manipulation</returns>
        </member>

        <member name="M:EffectsController.CreateSmallWhiteParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Creates small white particles with two color variations. Combines smaller white
            particles (one-quarter count) with dirt dots at 1.1x force (three-quarters count)
            for fine powder or dust effects.
            </summary>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color variation for the particles</param>
            <param name="color2">The second color variation for the particles</param>
        </member>

        <member name="M:EffectsController.CreateSparkParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a single spark particle with default lifetime. Color interpolates from
            yellow (1,1,0.3) to red (1,0,0) based on the redM parameter for temperature-based
            coloring.
            </summary>
            <param name="x">The x-coordinate for the spark</param>
            <param name="y">The y-coordinate for the spark</param>
            <param name="z">The z-coordinate for the spark</param>
            <param name="offsetRadius">The random position offset radius</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
        </member>

        <member name="M:EffectsController.CreateSparkParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a single spark particle with custom lifetime multiplier. Allows control over
            how long the spark remains visible while maintaining temperature-based color
            interpolation.
            </summary>
            <param name="x">The x-coordinate for the spark</param>
            <param name="y">The y-coordinate for the spark</param>
            <param name="z">The z-coordinate for the spark</param>
            <param name="offsetRadius">The random position offset radius</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for the spark</param>
        </member>

        <member name="M:EffectsController.CreateSparkParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single)">
            <summary>
            Creates a single spark particle with explicit color and lifetime control. Bypasses
            temperature interpolation for direct color specification, useful for non-fire spark
            effects.
            </summary>
            <param name="x">The x-coordinate for the spark</param>
            <param name="y">The y-coordinate for the spark</param>
            <param name="z">The z-coordinate for the spark</param>
            <param name="offsetRadius">The random position offset radius</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="color">The explicit color for the spark</param>
            <param name="lifeM">The lifetime multiplier for the spark</param>
        </member>

        <member name="M:EffectsController.CreateSparkParticles(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates multiple spark particles with 3D positioning and lifetime control. Each
            spark gets temperature-based coloring and the specified lifetime multiplier.
            </summary>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="z">The z-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for all sparks</param>
        </member>

        <member name="M:EffectsController.CreateSparkParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates multiple spark particles at z=0 with lifetime control. This 2D convenience
            method forwards to the 3D version for standard spark effects on the main gameplay
            plane.
            </summary>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for all sparks</param>
        </member>

        <member name="M:EffectsController.CreateSparkParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates spark particles using a specific emitter with default lifetime. Allows
            customization of the spark type while maintaining standard spark behavior and
            coloring.
            </summary>
            <param name="emitter">The particle emitter to use for sparks</param>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
        </member>

        <member name="M:EffectsController.CreateSparkParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates spark particles using a specific emitter with lifetime control. Provides
            full control over spark type, duration, and temperature-based coloring for
            specialized spark effects.
            </summary>
            <param name="emitter">The particle emitter to use for sparks</param>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for all sparks</param>
        </member>

        <member name="M:EffectsController.CreateSparkShower(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a mixed spark shower with both shower and floating particles. The
            particlesFloatM parameter controls the ratio between shower sparks (falling) and
            floating sparks (drifting), allowing for customized spark behavior combinations.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The total number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
            <param name="particlesFloatM">The ratio of floating particles (0=all shower, 1=all
                float)</param>
        </member>

        <member name="M:EffectsController.CreateStoneShrapnel(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates multiple stone debris pieces that fly outward from an impact point. Each
            piece is randomly positioned within the specified radius and launched with velocity
            proportional to its distance from center.
            </summary>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="count">The number of stone shrapnel pieces to create</param>
        </member>

        <member name="M:EffectsController.CreateSuddenSparkShower(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a sudden burst of short-lived floating spark particles. Uses floating spark
            emitter with 20-40% lifetime for quick burst effects like impacts, electrical
            shorts, or sudden friction.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The number of sparks in the burst</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
        </member>

        <member name="M:EffectsController.CreateSummonMagicParticle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates magical summoning particles with initial velocity. Used for spell casting
            and magical summoning effects, allowing the particles to move in a specified
            direction upon creation.
            </summary>
            <param name="x">The x-coordinate where the magic particle appears</param>
            <param name="y">The y-coordinate where the magic particle appears</param>
            <param name="xI">The initial x-velocity of the particle</param>
            <param name="yI">The initial y-velocity of the particle</param>
        </member>

        <member name="M:EffectsController.CreateTimeBroMuzzleFlashEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
            Creates a time-manipulation muzzle flash that ignores time scaling. Used for Time
            Bro's weapons to ensure effects play at normal speed during slow motion. Creates
            both flash and glow effects with ignoreTimeScale enabled.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>

        <member name="M:EffectsController.CreateTravellingExplosion(System.Single,System.Single,System.Single,Vector2,System.Single)">
            <summary>
            Placeholder for creating moving explosion effects. Currently not implemented and
            performs no action. Parameters are accepted but unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="velocity">The intended movement velocity</param>
            <param name="life">The intended lifetime</param>
        </member>

        <member name="M:EffectsController.CreateWaterDrip(System.Single,System.Single,System.Single,System.Single,System.Single,BloodColor)">
            <summary>
            Creates a water drip particle effect at the specified position. The particle emits
            with zero velocity and randomized size/lifetime. Note: All offset and color
            parameters appear unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal offset (unused in implementation)</param>
            <param name="offsetYRadius">The vertical offset (unused in implementation)</param>
            <param name="scaleM">The scale multiplier for particle size</param>
            <param name="color">The blood color (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateWaterDrip(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,BloodColor)">
            <summary>
            Creates a water drip particle effect with position offset and initial velocity.
            Spawns particle at a random position within the offset radius with specified
            velocity and scaled size/lifetime.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="xI">The initial horizontal velocity</param>
            <param name="yI">The initial vertical velocity</param>
            <param name="scaleM">The scale multiplier for particle size</param>
            <param name="color">The blood color (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateWhiteFlashPop(System.Single,System.Single)">
            <summary>
            Creates a bright white flash explosion effect. Used for energy-based explosions and
            special weapon impacts that need a clean, bright visual burst.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreateWhiteFlashPopSmall(System.Single,System.Single)">
            <summary>
            Creates a smaller version of the white flash explosion effect. Used for minor energy
            impacts and smaller special weapon effects that need a bright but less prominent
            visual burst.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreateWoodDarkParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates dark wood particle effects with uniform spread radius. This convenience
            overload calls the full version with equal x and y offset radii for circular spread
            patterns.
            </summary>
            <param name="x">The x-coordinate of the dark wood origin</param>
            <param name="y">The y-coordinate of the dark wood origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>

        <member name="M:EffectsController.CreateWoodDarkParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates dark wood particle effects with elliptical spread. Uses four dark wood
            emitters with counts of half, half, third, and third of the total, with varying
            forces (1.2x, 1.1x, 1.0x, 1.0x) for burnt or aged wood destruction effects.
            </summary>
            <param name="x">The x-coordinate of the dark wood origin</param>
            <param name="y">The y-coordinate of the dark wood origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>

        <member name="M:EffectsController.CreateWoodParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates rotating wood particle effects with uniform spread radius. This convenience
            overload calls the full version with equal x and y offset radii for circular spread
            patterns.
            </summary>
            <param name="x">The x-coordinate of the wood debris origin</param>
            <param name="y">The y-coordinate of the wood debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>

        <member name="M:EffectsController.CreateWoodParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates rotating wood particle effects with elliptical spread. Uses three wood
            particle emitters with varying forces (1.2x, 1.1x, 1.0x) plus wood dots at high
            force (40 + 1.6x). Wood dots use random wood colors from the theme for realistic
            variety.
            </summary>
            <param name="x">The x-coordinate of the wood debris origin</param>
            <param name="y">The y-coordinate of the wood debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>

        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector2,System.Single,System.Boolean)">
            <summary>
            Spawns an explosion effect at the specified 2D position using the ExplosionSpawner
            system.
            </summary>
            <param name="position">The 2D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or
                secondary explosions.</param>
        </member>

        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Spawns an explosion effect at the specified 3D position using the ExplosionSpawner
            system.
            </summary>
            <param name="position">The 3D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or
                secondary explosions.</param>
        </member>

        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector2,System.Single,System.Boolean,UnityEngine.Vector3[]@,System.Single[]@)">
            <summary>
            Spawns an explosion effect at the specified 2D position and returns information
            about the explosion components created.
            </summary>
            <param name="position">The 2D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or
                secondary explosions.</param>
            <param name="positions">Output array containing the positions of all explosion
                components created.</param>
            <param name="sizes">Output array containing the sizes of all explosion components
                created.</param>
        </member>

        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector3,System.Single,System.Boolean,UnityEngine.Vector3[]@,System.Single[]@)">
            <summary>
            Spawns an explosion effect at the specified 3D position and returns information
            about the explosion components created.
            </summary>
            <param name="position">The 3D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or
                secondary explosions.</param>
            <param name="positions">Output array containing the positions of all explosion
                components created.</param>
            <param name="sizes">Output array containing the sizes of all explosion components
                created.</param>
        </member>

        <member name="M:EffectsController.SprayBlood(BloodColor,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sprays blood onto surrounding terrain using raycasts. Casts rays in a circular
            pattern and applies blood to any blocks hit within range. Red blood additionally
            bloodies nearby doodads. Used to create persistent blood decals on the environment.
            </summary>
            <param name="bloodColor">The type of blood to spray</param>
            <param name="rays">The number of raycast directions to check</param>
            <param name="x">The x-coordinate of spray origin</param>
            <param name="y">The y-coordinate of spray origin</param>
            <param name="range">The maximum spray distance</param>
        </member>

        <member name="F:EffectsController.ExplodeParticle">
            <summary>
            Particle system for general explosion particle effects.
            </summary>
        </member>

        <member name="F:EffectsController.Explosion">
            <summary>
            Particle system for standard-sized explosion effects, the default explosion size.
            </summary>
        </member>

        <member name="F:EffectsController.ExplosionLarge">
            <summary>
            Particle system for large explosion effects, used for powerful explosives.
            </summary>
        </member>

        <member name="F:EffectsController.ExplosionLargeNoWhite">
            <summary>
            Particle system for large explosions without white flash, for darker explosion
            visuals.
            </summary>
        </member>

        <member name="F:EffectsController.ExplosionMassive">
            <summary>
            Particle system for massive explosion effects, used for extreme destructive blasts.
            </summary>
        </member>

        <member name="F:EffectsController.ExplosionNuclear">
            <summary>
            Particle system for nuclear-scale explosion effects, the largest explosion type.
            </summary>
        </member>

        <member name="F:EffectsController.ExplosionSmall">
            <summary>
            Particle system for small explosion effects, standard grenade-sized blasts.
            </summary>
        </member>

        <member name="F:EffectsController.ExplosionSpawner">
            <summary>
            Main explosion prefab (Explosion) used by all SpawnExplosion() methods as the
            template for creating explosions of various sizes and types throughout the game.
            </summary>
        </member>

        <member name="F:EffectsController.ExplosionTiny">
            <summary>
            Particle system for tiny explosion effects, used for very small blasts and impacts.
            </summary>
        </member>

        <member name="F:EffectsController.ExplosionTravelling">
            <summary>
            Particle system for travelling explosion effects that move through space.
            </summary>
        </member>

        <member name="F:EffectsController.FireTrail">
            <summary>
            Particle system for standard fire trail effects following projectiles or movement.
            </summary>
        </member>

        <member name="F:EffectsController.FireTrailSmall">
            <summary>
            Particle system for small fire trail effects for lighter projectiles.
            </summary>
        </member>

        <member name="F:EffectsController.FlameLicks">
            <summary>
            Particle system for standard flame licking effects on burning objects.
            </summary>
        </member>

        <member name="F:EffectsController.OilyFlameLicks">
            <summary>
            Particle system for oily flame effects with different visual properties than
            standard flames.
            </summary>
        </member>

        <member name="F:EffectsController.SmokeTrail">
            <summary>
            Particle system for smoke trail effects from rockets or smoking objects.
            </summary>
        </member>

        <member name="F:EffectsController.acidMeltBigDog">
            <summary>
            Melting animation prefab instantiated when living big dog mook units dissolve from
            acid damage after their acid melt timer expires, sized for large canines.
            </summary>
        </member>

        <member name="F:EffectsController.acidMeltDeadBigDog">
            <summary>
            Melting animation prefab instantiated when dead big dog mook units dissolve from
            acid damage, creating a dissolving effect for large canine corpses.
            </summary>
        </member>

        <member name="F:EffectsController.acidMeltDeadDog">
            <summary>
            Melting animation prefab instantiated when dead dog mook units dissolve from acid
            damage, creating a dissolving effect for canine corpses.
            </summary>
        </member>

        <member name="F:EffectsController.acidMeltDog">
            <summary>
            Melting animation prefab instantiated when living dog mook units dissolve from acid
            damage after their acid melt timer expires, creating a canine-specific dissolving
            effect.
            </summary>
        </member>

        <member name="F:EffectsController.acidMeltGrenadier">
            <summary>
            Melting animation prefab instantiated when living grenadier units dissolve from acid
            damage after their acid melt timer expires, creating a grenadier-specific dissolving
            effect.
            </summary>
        </member>

        <member name="F:EffectsController.backgroundBloodSprayPrefab">
            <summary>
            Background blood spray prefab (BackgroundBloodSpray) used by
            CreateBackgroundBloodSpray() to generate animated blood spray effects with velocity,
            creating dynamic blood visuals on background surfaces.
            </summary>
        </member>

        <member name="F:EffectsController.bigDogSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when living big dog mook
            units are covered in acid, creating an exposed skeleton appearance for large
            canines.
            </summary>
        </member>

        <member name="F:EffectsController.bigMookMeltingPrefab">
            <summary>
            Melting animation prefab instantiated when living big mook units dissolve from acid
            damage after their acid melt timer expires, sized for larger units.
            </summary>
        </member>

        <member name="F:EffectsController.bigMookSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when living big mook units
            are covered in acid, creating an exposed skeleton appearance specific to their
            larger size.
            </summary>
        </member>

        <member name="F:EffectsController.blankDoodadGibPrefab">
            <summary>
            Blank doodad piece prefab template for creating custom environmental debris.
            </summary>
        </member>

        <member name="F:EffectsController.blankGibPrefab">
            <summary>
            Blank gib prefab template for creating custom body part debris.
            </summary>
        </member>

        <member name="F:EffectsController.bloodArtery1Prefab">
            <summary>
            First arterial blood spray effect prefab, creates directional pulsing blood stream
            for severe wounds.
            </summary>
        </member>

        <member name="F:EffectsController.bloodArtery2Prefab">
            <summary>
            Second arterial blood spray effect prefab variant, creates alternative pulsing blood
            stream for arterial wounds.
            </summary>
        </member>

        <member name="F:EffectsController.bloodBlockOverlayPrefabs">
            <summary>
            Array of blood overlay sprite prefabs (SpriteSM) used to randomly select and apply
            blood splatter overlays to blocks, creating variety in blood-covered surface
            appearances.
            </summary>
        </member>

        <member name="F:EffectsController.bloodExplosion">
            <summary>
            Blood explosion effect prefab that creates red blood burst for extreme gore effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodGush1Prefab">
            <summary>
            First blood gush effect prefab, creates a medium blood spray when units are severely
            damaged.
            </summary>
        </member>

        <member name="F:EffectsController.bloodGush2Prefab">
            <summary>
            Second blood gush effect prefab variant for medium blood spray effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodGush3Prefab">
            <summary>
            Third blood gush effect prefab variant, adds variety to medium blood spray visuals.
            </summary>
        </member>

        <member name="F:EffectsController.bloodGushGreen1Prefab">
            <summary>
            First green blood gush effect prefab for alien blood effects. Not currently used but
            available for green-blooded enemies.
            </summary>
        </member>

        <member name="F:EffectsController.bloodGushGreen2Prefab">
            <summary>
            Second green blood gush effect prefab variant for alien blood. Not currently used
            but available for variety.
            </summary>
        </member>

        <member name="F:EffectsController.bloodGushGreen3Prefab">
            <summary>
            Third green blood gush effect prefab variant for alien blood variety. Not currently
            used but available for effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodLargeGush1Prefab">
            <summary>
            First large blood gush effect prefab, creates massive blood spray for extreme damage
            or large units.
            </summary>
        </member>

        <member name="F:EffectsController.bloodLargeGush2Prefab">
            <summary>
            Second large blood gush effect prefab variant for massive blood spray effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodLargeGush3Prefab">
            <summary>
            Third large blood gush effect prefab variant, adds variety to extreme blood effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodSmallSplash1Prefab">
            <summary>
            First small blood splash effect prefab, used for minor damage or smaller units.
            </summary>
        </member>

        <member name="F:EffectsController.bloodSmallSplash2Prefab">
            <summary>
            Second small blood splash effect prefab variant for minor blood effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodSplash1Prefab">
            <summary>
            First blood splash effect prefab variant, creates standard blood splatter when units
            take damage.
            </summary>
        </member>

        <member name="F:EffectsController.bloodSplash2Prefab">
            <summary>
            Second blood splash effect prefab variant, provides visual variety for blood
            splatter effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodSplatDecalSmallPrefab">
            <summary>
            Small blood splat decal prefab used by CreateBackgroundBloodSplat() to place
            stationary blood splatter effects on surfaces, creating persistent blood visuals
            from damage.
            </summary>
        </member>

        <member name="F:EffectsController.bloodSprayExplode1Prefab">
            <summary>
            First blood spray explosion effect prefab, creates radial blood burst from explosive
            damage.
            </summary>
        </member>

        <member name="F:EffectsController.bloodSprayExplode2Prefab">
            <summary>
            Second blood spray explosion effect prefab variant for explosive blood burst
            effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodSpurt1Prefab">
            <summary>
            First blood spurt effect prefab, creates directional blood jets accompanying gush
            effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodSpurt2Prefab">
            <summary>
            Second blood spurt effect prefab variant for directional blood jet effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodSpurt3Prefab">
            <summary>
            Third blood spurt effect prefab variant, provides variety for blood spurt visuals.
            </summary>
        </member>

        <member name="F:EffectsController.bloodTinySplash1Prefab">
            <summary>
            First tiny blood splash effect prefab, used for minimal damage or very small blood
            droplets.
            </summary>
        </member>

        <member name="F:EffectsController.bloodTinySplash2Prefab">
            <summary>
            Second tiny blood splash effect prefab variant for minimal blood effects.
            </summary>
        </member>

        <member name="F:EffectsController.blueMuzzleFlashRoundPrefab">
            <summary>
            Blue-colored round muzzle flash puff effect for energy weapons.
            </summary>
        </member>

        <member name="F:EffectsController.boulderRollPoof">
            <summary>
            Cached instance of the boulder rolling poof effect, created from
            boulderRollPoofPrefab when needed.
            </summary>
        </member>

        <member name="F:EffectsController.boulderRollPoofPrefab">
            <summary>
            Reference to the boulder rolling poof effect prefab, loaded on demand for rolling
            boulder dust trails.
            </summary>
        </member>

        <member name="F:EffectsController.bulletPoofPrefab">
            <summary>
            Bullet impact poof effect that creates small dust cloud when bullets hit surfaces.
            </summary>
        </member>

        <member name="F:EffectsController.chakramTrail">
            <summary>
            Projectile trail prefab for chakram weapons, creating a spinning visual trail effect
            behind thrown chakrams.
            </summary>
        </member>

        <member name="F:EffectsController.corpseSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when dead regular units are
            covered in acid, creating an exposed skeleton appearance on corpses.
            </summary>
        </member>

        <member name="F:EffectsController.deadBigDogSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when dead big dog mook units
            are covered in acid, creating an exposed skeleton appearance on large canine
            corpses.
            </summary>
        </member>

        <member name="F:EffectsController.deadBigMookSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when dead big mook units are
            covered in acid, creating an exposed skeleton appearance on large corpses.
            </summary>
        </member>

        <member name="F:EffectsController.deadDogSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when dead dog mook units are
            covered in acid, creating an exposed skeleton appearance on canine corpses.
            </summary>
        </member>

        <member name="F:EffectsController.deadGrenadierSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when dead grenadier mook
            units are covered in acid, creating an exposed skeleton appearance on grenadier
            corpses.
            </summary>
        </member>

        <member name="F:EffectsController.dogSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when living dog mook units
            are covered in acid, creating an exposed skeleton appearance specific to canine
            units.
            </summary>
        </member>

        <member name="F:EffectsController.explosion">
            <summary>
            Generic explosion puff effect used in various explosion methods for creating blast
            visuals.
            </summary>
        </member>

        <member name="F:EffectsController.explosionBig">
            <summary>
            Big explosion puff effect prefab for larger blast visuals. Not currently used but
            available for medium-sized explosions.
            </summary>
        </member>

        <member name="F:EffectsController.explosionGroundWavePrefab">
            <summary>
            Ground wave explosion effect prefab for terrain-following blast waves. Not currently
            used but available for ground impacts.
            </summary>
        </member>

        <member name="F:EffectsController.explosionHuge">
            <summary>
            Huge explosion puff effect prefab for massive blast visuals. Not currently used but
            available for large explosions.
            </summary>
        </member>

        <member name="F:EffectsController.explosionMassive">
            <summary>
            Massive explosion puff effect prefab for extreme blast visuals. Not currently used
            but available for devastating explosions.
            </summary>
        </member>

        <member name="F:EffectsController.explosionMusicalShockWavePrefab">
            <summary>
            Musical shockwave explosion effect prefab for special sound-based attacks. Not
            currently used but available for sonic weapons.
            </summary>
        </member>

        <member name="F:EffectsController.explosionRangePrefab">
            <summary>
            Prefab for the explosion range indicator effect that shows the area of effect for
            explosions.
            </summary>
        </member>

        <member name="F:EffectsController.explosionShockWaveHugePrefab">
            <summary>
            Huge shockwave explosion effect prefab for massive radial blasts. Not currently used
            but available for extreme explosions.
            </summary>
        </member>

        <member name="F:EffectsController.explosionShockWavePrefab">
            <summary>
            Shockwave explosion effect prefab for radial blast waves. Not currently used but
            available for concussive blasts.
            </summary>
        </member>

        <member name="F:EffectsController.explosionSparkShrapnel">
            <summary>
            Spark shrapnel prefab for explosion effects. Also used by CutsceneEffectsController
            for cinematic explosions.
            </summary>
        </member>

        <member name="F:EffectsController.fileCabinetGibPrefab">
            <summary>
            File cabinet debris piece for office environment destruction effects.
            </summary>
        </member>

        <member name="F:EffectsController.flameSheetBackgroundParticle1">
            <summary>
            First background flame sheet particle emitter for large area fire effects.
            </summary>
        </member>

        <member name="F:EffectsController.flameSheetBackgroundParticle2">
            <summary>
            Second background flame sheet particle variant for visual diversity in fires.
            </summary>
        </member>

        <member name="F:EffectsController.flameSheetBackgroundParticle3">
            <summary>
            Third background flame sheet particle variant for complex fire visual effects.
            </summary>
        </member>

        <member name="F:EffectsController.flameSheetBackgroundParticle4">
            <summary>
            Fourth background flame sheet particle variant for maximum fire effect variety.
            </summary>
        </member>

        <member name="F:EffectsController.freezeDamageEffect">
            <summary>
            Freeze damage visual effect prefab that shows ice crystals and freezing on damaged
            units.
            </summary>
        </member>

        <member name="F:EffectsController.grenadeTrail">
            <summary>
            Projectile trail prefab for grenades, creating a visible path that follows grenade
            projectiles through the air.
            </summary>
        </member>

        <member name="F:EffectsController.grenadierSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when living grenadier mook
            units are covered in acid, creating an exposed skeleton appearance specific to
            grenadiers.
            </summary>
        </member>

        <member name="F:EffectsController.groundExplodePoofPrefab">
            <summary>
            Ground explosion poof effect for terrain-based explosions, used by
            CreateGroundExplodePoofEffect method.
            </summary>
        </member>

        <member name="F:EffectsController.laserBurnSprite">
            <summary>
            Laser burn mark puff effect for laser weapon impact visuals.
            </summary>
        </member>

        <member name="F:EffectsController.liftOffBlastFlameWall">
            <summary>
            Flame wall explosion prefab (FlameWallExplosion) used by various units (BroBase,
            BroshipTrooper, DoubleBroSeven, MookArmouredGuy) when performing lift-off moves,
            creating fiery blast effects during aerial maneuvers.
            </summary>
        </member>

        <member name="F:EffectsController.lostSoulSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when HellLostSoul units are
            covered in acid, creating an exposed skeleton appearance for demonic entities.
            </summary>
        </member>

        <member name="F:EffectsController.meleeStrikePrefab1">
            <summary>
            Standard melee strike impact effect prefab, creates visual feedback when melee
            attacks connect.
            </summary>
        </member>

        <member name="F:EffectsController.meleeStrikePrefabLarge">
            <summary>
            Large melee strike impact effect prefab for heavy melee attacks or powered strikes.
            </summary>
        </member>

        <member name="F:EffectsController.meleeStrikeYScale">
            <summary>
            Protected static Y-scale multiplier (default 1) used to alternate the vertical
            orientation of melee strike effects, flipping between 1 and -1 after each strike to
            create visual variety.
            </summary>
        </member>

        <member name="F:EffectsController.meltingBigMookCorpsePrefab">
            <summary>
            Melting animation prefab instantiated when dead big mook units dissolve from acid
            damage, creating a dissolving effect for large corpses.
            </summary>
        </member>

        <member name="F:EffectsController.meltingCorpsePrefab">
            <summary>
            Melting animation prefab instantiated when dead regular units dissolve from acid
            damage, creating a dissolving effect for corpses.
            </summary>
        </member>

        <member name="F:EffectsController.meltingGrenadierCorpsePrefab">
            <summary>
            Melting animation prefab instantiated when dead grenadier units dissolve from acid
            damage, creating a dissolving effect for grenadier corpses.
            </summary>
        </member>

        <member name="F:EffectsController.metalDoodadGibPrefab">
            <summary>
            Metal debris piece for metallic object destruction effects.
            </summary>
        </member>

        <member name="F:EffectsController.muzzleFlashBigGlowPrefab">
            <summary>
            Large distortion glow effect prefab for heavy weapon muzzle flashes, creating a more
            intense heat distortion visual.
            </summary>
        </member>

        <member name="F:EffectsController.muzzleFlashBigPrefab">
            <summary>
            Large muzzle flash puff effect for heavy weapons.
            </summary>
        </member>

        <member name="F:EffectsController.muzzleFlashGlowPrefab">
            <summary>
            Standard distortion glow effect prefab that accompanies muzzle flashes from small
            firearms, creating a heat distortion visual.
            </summary>
        </member>

        <member name="F:EffectsController.muzzleFlashHugeGlowPrefab">
            <summary>
            Massive distortion glow effect prefab for tank cannons and extreme weapons, creating
            maximum heat distortion.
            </summary>
        </member>

        <member name="F:EffectsController.muzzleFlashMediumPrefab">
            <summary>
            Medium-sized muzzle flash puff effect for larger weapons.
            </summary>
        </member>

        <member name="F:EffectsController.muzzleFlashPrefab">
            <summary>
            Standard muzzle flash puff effect for small firearms.
            </summary>
        </member>

        <member name="F:EffectsController.muzzleFlashRoundPrefab">
            <summary>
            Round-shaped muzzle flash puff effect for specific weapon types.
            </summary>
        </member>

        <member name="F:EffectsController.muzzleFlashSmallGlowPrefab">
            <summary>
            Small distortion glow effect prefab for light weapons and pistols, creating subtle
            heat distortion.
            </summary>
        </member>

        <member name="F:EffectsController.muzzleFlashTankCannonPrefab">
            <summary>
            Tank cannon muzzle flash puff effect for vehicle weaponry.
            </summary>
        </member>

        <member name="F:EffectsController.muzzleFlashVomitPrefab">
            <summary>
            Vomit-style muzzle flash puff effect for acid or bile weapons.
            </summary>
        </member>

        <member name="F:EffectsController.particlesGlassShards">
            <summary>
            Particle emitter for glass shard effects when windows or glass objects break.
            </summary>
        </member>

        <member name="F:EffectsController.predabroPlasmaPop">
            <summary>
            Plasma pop effect prefab specifically for Predabro plasma weapon impacts, creates
            energy burst visual.
            </summary>
        </member>

        <member name="F:EffectsController.predictionTrail">
            <summary>
            Projectile trail prefab for trajectory prediction, used to show predicted paths for
            projectiles.
            </summary>
        </member>

        <member name="F:EffectsController.projectileFlickPuff">
            <summary>
            Standard projectile impact flicker effect prefab. Not currently used but available
            for bullet hits.
            </summary>
        </member>

        <member name="F:EffectsController.projectileLargeFlickPuff">
            <summary>
            Large projectile impact flicker effect prefab for heavy weapon impacts and
            explosions.
            </summary>
        </member>

        <member name="F:EffectsController.projectileWhiteFlickPuff">
            <summary>
            White projectile impact flicker effect prefab. Not currently used but available for
            energy weapon hits.
            </summary>
        </member>

        <member name="F:EffectsController.redWarningDiamondHugePrefab">
            <summary>
            Huge red diamond warning indicator prefab for extreme danger warnings, used by
            CreateRedWarningDiamondHuge method.
            </summary>
        </member>

        <member name="F:EffectsController.redWarningDiamondLargePrefab">
            <summary>
            Large red diamond warning indicator prefab for major threats, used by
            CreateRedWarningDiamondLarge method.
            </summary>
        </member>

        <member name="F:EffectsController.redWarningPulsePrefab">
            <summary>
            Red warning pulse effect prefab for danger indicators, used by
            CreateRedWarningEffect method.
            </summary>
        </member>

        <member name="F:EffectsController.shellSpeedTrailPrefab">
            <summary>
            Speed trail puff effect prefab (Puff) used to create motion blur trail effects
            behind fast-moving projectiles like shells and bullets, enhancing the visual sense
            of speed.
            </summary>
        </member>

        <member name="F:EffectsController.shockWaveExplodePoofPrefab">
            <summary>
            Shockwave explosion poof effect for radial blast visuals. Not currently used but
            available for shockwave effects.
            </summary>
        </member>

        <member name="F:EffectsController.shrapnelStonePrefab">
            <summary>
            Prefab for stone shrapnel particles created by explosions or impacts on stone
            surfaces.
            </summary>
        </member>

        <member name="F:EffectsController.slimeExplosion">
            <summary>
            Slime explosion effect prefab that creates green slime burst visuals for alien or
            acid explosions.
            </summary>
        </member>

        <member name="F:EffectsController.slimeExplosionSmall">
            <summary>
            Small slime explosion effect prefab for minor alien or acid burst visuals.
            </summary>
        </member>

        <member name="F:EffectsController.smokeSmall1Prefab">
            <summary>
            First small smoke puff effect variant, used for minor smoke effects from impacts or
            fires.
            </summary>
        </member>

        <member name="F:EffectsController.smokeSmall2Prefab">
            <summary>
            Second small smoke puff effect variant, provides visual variety for smoke effects.
            </summary>
        </member>

        <member name="F:EffectsController.smokeSmall3Prefab">
            <summary>
            Third small smoke puff effect variant, adds additional variety to smoke visuals.
            </summary>
        </member>

        <member name="F:EffectsController.sparkParticleFire">
            <summary>
            Particle emitter for fire sparks used in CreateFireSparks method for burning
            effects.
            </summary>
        </member>

        <member name="F:EffectsController.sparkParticleFloat">
            <summary>
            Particle emitter for floating spark effects that drift through the air.
            </summary>
        </member>

        <member name="F:EffectsController.sparkParticleShower">
            <summary>
            Particle emitter for sudden spark shower effects from impacts or explosions.
            </summary>
        </member>

        <member name="F:EffectsController.tinyPopPrefab">
            <summary>
            Tiny pop effect prefab used for minimal visual feedback on light impacts or small
            events.
            </summary>
        </member>

        <member name="F:EffectsController.unitMeltingPrefab">
            <summary>
            Melting animation prefab instantiated when regular units dissolve from acid damage
            after their acid melt timer expires, creating a dissolving visual effect.
            </summary>
        </member>

        <member name="F:EffectsController.unitSkeletonPrefab">
            <summary>
            Skeleton visual effect prefab (GibHolder) instantiated when regular units are
            covered in acid, creating an exposed skeleton appearance while the unit melts.
            </summary>
        </member>

        <member name="F:EffectsController.whiteFlashPopPrefab">
            <summary>
            White flash pop effect prefab for bright impact flashes, used by CreateWhiteFlashPop
            method.
            </summary>
        </member>

        <member name="F:EffectsController.whiteFlashPopSmallPrefab">
            <summary>
            Small white flash pop effect prefab for subtle bright flashes, used by
            CreateWhiteFlashPopSmall method.
            </summary>
        </member>

        <member name="F:EffectsController.woodDoodadGibPiece">
            <summary>
            Wood debris piece for wooden object destruction effects.
            </summary>
        </member>

        <member name="M:EffectsController.CreateAirDashPoofEffect(System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
            Creates an air dash trail effect with automatic orientation based on dash direction.
            Flips horizontally for left/right dashes and rotates 90 degrees for vertical dashes
            to match the movement direction.
            </summary>
            <param name="x">The x-coordinate where the dash effect appears</param>
            <param name="y">The y-coordinate where the dash effect appears</param>
            <param name="velocity">The dash velocity used to determine effect orientation</param>
        </member>

        <member name="M:EffectsController.CreateBoulderRollPoof_Local(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a dust poof effect for rolling boulders or heavy objects. The effect
            orientation is based on the rolling direction, flipping horizontally when rolling
            left. Uses the BoulderRollPoof prefab cached property.
            </summary>
            <param name="x">The x-coordinate where the boulder poof appears</param>
            <param name="y">The y-coordinate where the boulder poof appears</param>
            <param name="direction">The rolling direction (-1 for left, 1 for right)</param>
        </member>

        <member name="M:EffectsController.CreateDashPoofEffect_Local(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a local dash poof effect visible only on the current client. Used internally
            by the networked version or directly for local-only effects. The effect is
            horizontally flipped when dashing left (direction less than 0).
            </summary>
            <param name="x">The x-coordinate where the dash effect appears</param>
            <param name="y">The y-coordinate where the dash effect appears</param>
            <param name="direction">The facing direction (-1 for left, 1 for right) that determines
                effect orientation</param>
        </member>

        <member name="M:EffectsController.CreateDashPoofEffect_Networked(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a dash poof effect synchronized across all network clients. This networked
            version ensures all players see the same dash visual effect when a character
            performs a dash move. Internally uses RPC to call CreateDashPoofEffect_Local on all
            clients.
            </summary>
            <param name="x">The x-coordinate where the dash effect appears</param>
            <param name="y">The y-coordinate where the dash effect appears</param>
            <param name="direction">The facing direction (-1 for left, 1 for right) that determines
                effect orientation</param>
        </member>

        <member name="M:EffectsController.CreateFallPoofEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
            Creates a dust trail effect when a character is falling or wall-sliding. Randomly
            selects between two fall poof variations and orients based on direction. Used for
            visual feedback during aerial movement and wall interactions.
            </summary>
            <param name="x">The x-coordinate of the effect</param>
            <param name="y">The y-coordinate of the effect</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The effect color type (default is None for regular dust)</param>
        </member>

        <member name="M:EffectsController.CreateFootPoofEffect(System.Single,System.Single,System.Single,UnityEngine.Vector3,BloodColor)">
            <summary>
            Creates dust or blood effects from footsteps during movement. Randomly selects from
            three foot poof variations for visual variety. Supports different colored effects
            for walking through blood or other liquids.
            </summary>
            <param name="x">The x-coordinate of the footstep</param>
            <param name="y">The y-coordinate of the footstep</param>
            <param name="delay">The delay before the effect appears</param>
            <param name="velocity">The movement velocity (currently unused but part of signature)</param>
            <param name="bloodColor">The color type for bloody footprints (default is None for dust)</param>
        </member>

        <member name="M:EffectsController.CreateGroundExplodePoofEffect(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a ground explosion poof effect using the default ground explode prefab. This
            is a convenience overload that calls the prefab-specific version with the standard
            ground explosion effect.
            </summary>
            <param name="x">The x-coordinate of the ground explosion</param>
            <param name="y">The y-coordinate of the ground explosion</param>
            <param name="direction">The explosion direction (-1 for left, 1 for right)</param>
        </member>

        <member name="M:EffectsController.CreateGroundExplodePoofEffect(Puff,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a ground explosion poof effect with a custom puff prefab. Allows specifying
            different puff types for varied ground explosion visuals. Returns the created Puff
            instance for additional customization.
            </summary>
            <param name="poofPrefab">The custom puff prefab to use for the explosion</param>
            <param name="x">The x-coordinate of the ground explosion</param>
            <param name="y">The y-coordinate of the ground explosion</param>
            <param name="direction">The explosion direction (-1 for left, 1 for right)</param>
            <returns>The created Puff instance for further configuration</returns>
        </member>

        <member name="M:EffectsController.CreateJumpPoofEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
            Creates a dust cloud effect when a character jumps. Randomly selects between two
            jump poof variations and flips the effect based on the character's facing direction.
            Supports colored effects for jumping from bloody or liquid surfaces.
            </summary>
            <param name="x">The x-coordinate of the jump origin</param>
            <param name="y">The y-coordinate of the jump origin</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The effect color type (default is None for regular dust)</param>
        </member>

        <member name="M:EffectsController.CreateLandPoofEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
            Creates a dust cloud impact effect when a character lands on solid ground. Randomly
            selects between two landing variations and orients based on direction. The effect
            scales with landing force for more dramatic impacts from higher falls.
            </summary>
            <param name="x">The x-coordinate of the landing point</param>
            <param name="y">The y-coordinate of the landing point</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The effect color type (default is None for regular dust)</param>
        </member>

        <member name="M:EffectsController.CreateLandSplashEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
            Creates a liquid splash effect when a character lands in water or other liquids.
            Randomly selects between two splash variations and orients based on direction. The
            blood color parameter allows for different liquid types (water, blood, oil).
            </summary>
            <param name="x">The x-coordinate of the splash point</param>
            <param name="y">The y-coordinate of the splash point</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The liquid type color (None for water, or specific blood colors)</param>
        </member>

        <member name="F:EffectsController.airDashPoofPrefab">
            <summary>
            Air dash poof effect prefab that creates cloud effect when performing aerial dash
            moves.
            </summary>
        </member>

        <member name="F:EffectsController.dashPoof1Prefab">
            <summary>
            Dash movement poof effect that creates dust cloud during rapid dash movements.
            </summary>
        </member>

        <member name="F:EffectsController.fallPoof1Prefab">
            <summary>
            First falling poof effect, creates air disturbance visuals during falls.
            </summary>
        </member>

        <member name="F:EffectsController.fallPoof2Prefab">
            <summary>
            Second falling poof effect variant for variety in fall visuals.
            </summary>
        </member>

        <member name="F:EffectsController.footPoof1Prefab">
            <summary>
            First footstep poof effect variant, creates dust clouds when characters run or walk.
            </summary>
        </member>

        <member name="F:EffectsController.footPoof2Prefab">
            <summary>
            Second footstep poof effect variant, provides visual variety for movement dust.
            </summary>
        </member>

        <member name="F:EffectsController.footPoof3Prefab">
            <summary>
            Third footstep poof effect variant, adds additional variety to footstep effects.
            </summary>
        </member>

        <member name="F:EffectsController.jumpPoof1Prefab">
            <summary>
            First jump takeoff poof effect, creates dust cloud when characters jump.
            </summary>
        </member>

        <member name="F:EffectsController.jumpPoof2Prefab">
            <summary>
            Second jump takeoff poof effect variant for visual variety when jumping.
            </summary>
        </member>

        <member name="F:EffectsController.landPoof1Prefab">
            <summary>
            First landing poof effect, creates dust cloud when characters land from jumps.
            </summary>
        </member>

        <member name="F:EffectsController.landPoof2Prefab">
            <summary>
            Second landing poof effect variant for landing impact variety.
            </summary>
        </member>

        <member name="F:EffectsController.landSplash1Prefab">
            <summary>
            First water landing splash effect when landing in water or liquid surfaces.
            </summary>
        </member>

        <member name="F:EffectsController.landSplash2Prefab">
            <summary>
            Second water landing splash effect variant for liquid impact variety.
            </summary>
        </member>

        <member name="F:EffectsController.whitePunchPopPrefab">
            <summary>
            White punch pop effect prefab for powerful punch impacts, creates bright flash on
            contact.
            </summary>
        </member>

        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single)">
            <summary>
            Creates a basic FlickerFader effect at the specified 2D position. This is the
            simplest effect creation method for FlickerFader-based visual effects with default
            z-depth of 0.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Int32,System.Int32,BloodColor)">
            <summary>
            Creates a scaled Puff effect with optional blood coloring. Supports different blood
            types (red, green, oil, frozen, quicksand) and allows independent x/y scaling for
            stretched effects. Returns the created Puff instance for additional customization.
            </summary>
            <param name="puffPrefab">The Puff effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xScale">The horizontal scale factor (1 for normal, -1 for flipped)</param>
            <param name="yScale">The vertical scale factor</param>
            <param name="bloodColor">The blood color type to apply (None for no coloring)</param>
            <returns>The created Puff instance for further configuration</returns>
        </member>

        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,UnityEngine.Vector3)">
            <summary>
            Creates a delayed Puff effect with initial velocity and scaling. The effect appears
            after the specified delay and moves according to the velocity vector. Useful for
            timed or physics-based particle effects.
            </summary>
            <param name="puffPrefab">The Puff effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay in seconds before the effect appears</param>
            <param name="xScale">The horizontal scale factor</param>
            <param name="yScale">The vertical scale factor</param>
            <param name="velocity">The initial velocity vector for the effect</param>
        </member>

        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,UnityEngine.Vector3)">
            <summary>
            Creates a delayed FlickerFader effect with initial velocity and scaling. Similar to
            the Puff version but for FlickerFader-type effects. The effect appears after the
            delay and moves with the specified velocity.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay in seconds before the effect appears</param>
            <param name="xScale">The horizontal scale factor</param>
            <param name="yScale">The vertical scale factor</param>
            <param name="velocity">The initial velocity vector for the effect</param>
        </member>

        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single)">
            <summary>
            Creates a FlickerFader effect at a specific 3D position. Provides full control over
            the z-depth for layering effects in the scene. Returns the created instance for
            additional configuration.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <returns>The created FlickerFader instance for further customization</returns>
        </member>

        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single,Vector3)">
            <summary>
            Creates a FlickerFader effect at the specified position. This is a convenience
            overload that delegates to the full version with z-coordinate of 0 for standard 2D
            positioning.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The delay before the effect starts</param>
            <param name="velocity">The initial velocity vector for the effect</param>
            <returns>The created FlickerFader component</returns>
        </member>

        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
            Creates a FlickerFader effect with full 3D positioning. Instantiates the prefab and
            configures its delay and velocity settings. FlickerFader effects are used for
            various fading animations throughout the game.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the effect starts</param>
            <param name="velocity">The initial velocity vector for the effect</param>
            <returns>The created FlickerFader component</returns>
        </member>

        <member name="M:EffectsController.CreateEffect(DistortionGrow,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a DistortionGrow effect for visual distortion animations. Instantiates the
            distortion prefab and sets its delay. Used for heat haze, explosion distortions, and
            other warping visual effects.
            </summary>
            <param name="distortionPrefab">The DistortionGrow prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The delay before the distortion starts</param>
            <param name="z">The z-coordinate in world space (default 0)</param>
            <returns>The created DistortionGrow component</returns>
        </member>

        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Single,Vector3,BloodColor)">
            <summary>
            Creates a Puff effect with blood color tinting and scale variations. Supports
            horizontal flipping for xScale parameter values and applies blood coloring.
            Configures delay and velocity for the puff animation.
            </summary>
            <param name="puffPrefab">The Puff prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the puff starts (converted to xScale if not 0)</param>
            <param name="velocity">The initial velocity (y component used as yScale if delay is not
                0)</param>
            <param name="bloodColor">The blood color for tinting the effect</param>
            <returns>The created Puff component</returns>
        </member>

        <member name="M:EffectsController.CreateEffect(PuffTwoLayer,System.Single,System.Single,System.Single,Vector3,BloodColor)">
            <summary>
            Creates a two-layer Puff effect with blood color support. Instantiates the prefab
            and applies blood coloring to both layers. Used for more complex puff animations
            with foreground and background elements.
            </summary>
            <param name="puffPrefab">The PuffTwoLayer prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The delay before the effect starts (interpreted as xScale)</param>
            <param name="velocity">The initial velocity (y component used as yScale)</param>
            <param name="bloodColor">The blood color for tinting both layers</param>
            <returns>The created PuffTwoLayer component</returns>
        </member>

        <member name="M:EffectsController.CreateEffect(FaderSprite,System.Single,System.Single,System.Single)">
            <summary>
            Creates a FaderSprite effect at the specified position. Simple instantiation method
            for fading sprite effects without additional configuration. Used for basic fade-out
            animations.
            </summary>
            <param name="prefab">The FaderSprite prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <returns>The created FaderSprite component</returns>
        </member>

        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Single,Vector3,Transform)">
            <summary>
            Creates a Puff effect with optional parent transform attachment. Configures scale
            based on delay parameter and can parent the effect to a moving object. Used for
            effects that need to follow characters or projectiles.
            </summary>
            <param name="puffPrefab">The Puff prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay (used as xScale when not 0)</param>
            <param name="velocity">The velocity (y component used as yScale when delay is not 0)</param>
            <param name="parentTransform">Optional transform to parent the effect to</param>
            <returns>The created Puff component</returns>
        </member>

        <member name="M:EffectsController.CreateEffect(PuffLaserBurn,System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
            Creates a laser burn Puff effect with specialized behavior. Instantiates the laser
            burn prefab and configures its timing and scale properties. Used for scorching and
            burning visual effects from laser weapons.
            </summary>
            <param name="puffPrefab">The PuffLaserBurn prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the burn effect starts</param>
            <param name="velocity">The initial velocity vector</param>
            <returns>The created PuffLaserBurn component</returns>
        </member>

        <member name="M:EffectsController.CreateFlexEffectAir(UnityEngine.Transform)">
            <summary>
            Creates an air flex effect that follows the specified transform. This visual effect
            indicates air/wind-based status from muscle temple power-ups.
            </summary>
            <param name="followTransform">The transform that the flex effect should follow and be
                parented to.</param>
            <returns>The created MuscleTempleFlexEffect instance attached to the transform.</returns>
        </member>

        <member name="M:EffectsController.CreateFlexEffectGolden(UnityEngine.Transform)">
            <summary>
            Creates a golden flex effect that follows the specified transform. This visual
            effect indicates golden/powered-up status from muscle temple power-ups.
            </summary>
            <param name="followTransform">The transform that the flex effect should follow and be
                parented to.</param>
            <returns>The created MuscleTempleFlexEffect instance attached to the transform.</returns>
        </member>

        <member name="M:EffectsController.CreateFlexEffectInvulnerable(UnityEngine.Transform)">
            <summary>
            Creates an invulnerability flex effect that follows the specified transform. This
            visual effect indicates invulnerability status from muscle temple power-ups.
            </summary>
            <param name="followTransform">The transform that the flex effect should follow and be
                parented to.</param>
            <returns>The created MuscleTempleFlexEffect instance attached to the transform.</returns>
        </member>

        <member name="M:EffectsController.CreateSmoke(System.Single,System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
            Creates a smoke particle effect with random variation. Randomly selects from three
            different smoke prefabs to add visual variety. The smoke can be delayed and given
            initial velocity for dynamic smoke trails.
            </summary>
            <param name="x">The x-coordinate where smoke originates</param>
            <param name="y">The y-coordinate where smoke originates</param>
            <param name="delay">The delay before smoke appears</param>
            <param name="velocity">The initial velocity for smoke movement</param>
        </member>

        <member name="M:EffectsController.CreateTeleportFlexExplosion(UnityEngine.Vector3)">
            <summary>
            Creates a teleportation explosion effect at the specified position. This animated
            effect plays when teleporting with muscle temple powers.
            </summary>
            <param name="pos">The position where the teleport explosion effect should appear.</param>
            <returns>The created AnimatedTexture effect instance.</returns>
        </member>

        <member name="M:EffectsController.CreateTeleportFlexOut(UnityEngine.Vector3)">
            <summary>
            Creates a teleportation exit effect at the specified position. This animated effect
            plays at the destination when teleporting with muscle temple powers.
            </summary>
            <param name="pos">The position where the teleport exit effect should appear.</param>
            <returns>The created AnimatedTexture effect instance.</returns>
        </member>

        <member name="M:EffectsController.SpawnMuscleTempleAvatar(UnityEngine.Vector3)">
            <summary>
            Spawns the muscle temple avatar effect at the specified position. This is an
            animated visual effect related to the muscle temple power-up system.
            </summary>
            <param name="position">The position where the avatar effect should appear.</param>
        </member>

        <member name="M:EffectsController.SpawnSparklePuff(UnityEngine.Vector3,System.Single)">
            <summary>
            Creates a sparkle puff effect that moves outward from the spawn position with random
            direction.
            </summary>
            <param name="position">The position where the sparkle puff originates.</param>
            <param name="speed">The speed at which the sparkle particles move outward in random
                directions.</param>
        </member>

        <member name="F:EffectsController.boomerangWindPrefab">
            <summary>
            Wind trail puff effect for boomerang weapon movement visuals.
            </summary>
        </member>

        <member name="F:EffectsController.electricity1Prefab">
            <summary>
            First electricity spark puff effect variant for electrical damage visuals.
            </summary>
        </member>

        <member name="F:EffectsController.electricity2Prefab">
            <summary>
            Second electricity spark puff effect variant for visual diversity in electrical
            effects.
            </summary>
        </member>

        <member name="F:EffectsController.electricity3Prefab">
            <summary>
            Third electricity spark puff effect used in CreateElectricityEffect method.
            </summary>
        </member>

        <member name="F:EffectsController.fireSpark1Prefab">
            <summary>
            First fire spark shrapnel prefab that creates sparks ejected from fires and
            explosions.
            </summary>
        </member>

        <member name="F:EffectsController.fireSpark2Prefab">
            <summary>
            Second fire spark shrapnel prefab variant for varied spark effects from fires.
            </summary>
        </member>

        <member name="F:EffectsController.flame1Prefab">
            <summary>
            First flame effect prefab variant used for fire and burning visual effects.
            </summary>
        </member>

        <member name="F:EffectsController.flame2Prefab">
            <summary>
            Second flame effect prefab variant used for fire and burning visual effects.
            </summary>
        </member>

        <member name="F:EffectsController.flame3Prefab">
            <summary>
            Third flame effect prefab variant used for fire and burning visual effects.
            </summary>
        </member>

        <member name="F:EffectsController.flameCandle1Prefab">
            <summary>
            First candle flame puff effect prefab for small persistent fire effects.
            </summary>
        </member>

        <member name="F:EffectsController.flameCandle2Prefab">
            <summary>
            Second candle flame puff effect variant for visual variety in small fires.
            </summary>
        </member>

        <member name="F:EffectsController.flameCandle3Prefab">
            <summary>
            Third candle flame puff effect variant for diverse small fire visuals.
            </summary>
        </member>

        <member name="F:EffectsController.flameCandle4Prefab">
            <summary>
            Fourth candle flame puff effect variant for maximum variety in small fire effects.
            </summary>
        </member>

        <member name="F:EffectsController.leaf1Prefab">
            <summary>
            First leaf shrapnel prefab used in CreateLeafBurst for foliage destruction effects.
            </summary>
        </member>

        <member name="F:EffectsController.leaf2Prefab">
            <summary>
            Second leaf shrapnel prefab variant for varied foliage destruction effects.
            </summary>
        </member>

        <member name="F:EffectsController.puffDisappearPrefab">
            <summary>
            Standard disappearing puff effect for object removal or teleportation.
            </summary>
        </member>

        <member name="F:EffectsController.puffDisappearRingPrefab">
            <summary>
            Ring-shaped disappearing puff effect for enhanced teleportation visuals.
            </summary>
        </member>

        <member name="F:EffectsController.puffNinjaSmokePrefab">
            <summary>
            Ninja smoke puff effect for stealth abilities and smoke bomb visuals.
            </summary>
        </member>

        <member name="F:EffectsController.puffPeckShinePrefab">
            <summary>
            Peck shine puff effect for impact or special ability visual feedback.
            </summary>
        </member>

        <member name="F:EffectsController.sparkleDisappearPrefab">
            <summary>
            Sparkle effect for magical or special disappearing animations.
            </summary>
        </member>

        <member name="M:EffectsController.CreateAmmoBubble(System.Single,System.Single)">
            <summary>
            Displays an ammunition indicator bubble at the specified position. Reuses the
            singleton bubble instance by restarting and repositioning it. Shown when players
            collect special ammunition.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreateBloodTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates blood trail particle effects at z-depth 0. This convenience overload calls
            the full 3D version with default z positioning for standard blood trail effects.
            </summary>
            <param name="x">The x-coordinate where the blood trail originates</param>
            <param name="y">The y-coordinate where the blood trail originates</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses 2 variants, 2+ uses 3 variants)</param>
        </member>

        <member name="M:EffectsController.CreateBloodTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates blood trail particle effects with full control. Uses identical logic to
            slime trails but with blood-specific particle emitters. Small particles use 2
            variations, large particles use 3 variations with size halving for proper scaling.
            </summary>
            <param name="x">The x-coordinate where the blood trail originates</param>
            <param name="y">The y-coordinate where the blood trail originates</param>
            <param name="z">The z-coordinate (depth) of the particle</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses small variants, 2+ uses large
                variants)</param>
        </member>

        <member name="M:EffectsController.CreateEvilFloatParticle(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a single dark floating particle for evil or supernatural effects. Randomly
            selects from four dark color variations ranging from pure black to dark gray (0.231,
            0.231, 0.231). Uses special evil float particles for ominous atmospheric effects.
            </summary>
            <param name="x">The x-coordinate where the particle appears</param>
            <param name="y">The y-coordinate where the particle appears</param>
            <param name="force">The force applied to the floating particle</param>
            <param name="xI">The initial x-velocity of the particle</param>
            <param name="yI">The initial y-velocity of the particle</param>
        </member>

        <member name="M:EffectsController.CreateFleshParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a complex mix of flesh particle effects for gore and gibbing. Combines
            multiple particle types: flesh dust dots at 1.4x force, medium flesh chunks at
            reduced force and offset, and three types of small flesh particles with the third
            type using 1.1x force. The most detailed gore effect available.
            </summary>
            <param name="x">The x-coordinate of the flesh origin</param>
            <param name="y">The y-coordinate of the flesh origin</param>
            <param name="count">The total number of particles to distribute among types</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateFreeLifeBubble(System.Single,System.Single)">
            <summary>
            Displays a free life indicator bubble at the specified position. Reuses the
            singleton bubble instance by restarting and repositioning it. Shown when players
            collect extra life pickups.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreateHeroIndicator(Unit)">
            <summary>
            Creates a colored visual indicator above a unit to identify the player. The
            indicator is colored based on the unit's player number and follows the unit's
            position.
            </summary>
            <param name="unit">The unit to attach the hero indicator to. The indicator will be
                parented to this unit's transform.</param>
        </member>

        <member name="M:EffectsController.CreateKickPlayerBubble(System.Single,System.Single)">
            <summary>
            Creates a new kick player reaction bubble at the specified position. Unlike other
            bubbles, this creates a new instance each time rather than reusing a singleton.
            Returns the bubble for further configuration.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <returns>The created ReactionBubble instance for additional customization</returns>
        </member>

        <member name="M:EffectsController.CreatePromotedBubble(System.Single,System.Single)">
            <summary>
            Displays a promotion indicator bubble at the specified position. Reuses the
            singleton bubble instance by restarting and repositioning it. Shown when players
            achieve promotion milestones.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreateSlimeDrip">
            <summary>
            Creates a slime drip particle spawner effect. Instantiates a new spawner from the
            prefab that can be configured to emit slime droplet particles. Returns null if the
            effects controller instance is not available.
            </summary>
            <returns>A ParticleSpawner configured for slime drips, or null if creation fails</returns>
        </member>

        <member name="M:EffectsController.CreateSlimeParticles(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates clustered slime particles with drift behavior. Complex positioning algorithm
            with 60% chance to create new cluster and 40% to continue from previous position.
            Particles drift inward based on force parameter. Creates half the requested count
            plus one, with 0.1x multiplier on offset radii for tighter clustering.
            </summary>
            <param name="color">The blood color type for the slime</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The base count (actual is count/2 + 1)</param>
            <param name="offsetXRadius">The horizontal spread (multiplied by 0.1)</param>
            <param name="offsetYRadius">The vertical spread (multiplied by 0.1)</param>
            <param name="force">The inward drift force</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
        </member>

        <member name="M:EffectsController.CreateSlimeParticlesSpray(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a directional spray of slime particles based on blood color type. Particles
            emit in a circular pattern with force variance controlling the spread angle.
            Converts BloodColor enum to appropriate color before creating the spray effect.
            </summary>
            <param name="color">The blood color type for the slime</param>
            <param name="x">The x-coordinate of the spray origin</param>
            <param name="y">The y-coordinate of the spray origin</param>
            <param name="z">The z-coordinate of the spray origin</param>
            <param name="count">The number of slime particles to spray</param>
            <param name="offsetXRadius">The horizontal offset for spray origin</param>
            <param name="offsetYRadius">The vertical offset for spray origin</param>
            <param name="force">The base force for particle velocity</param>
            <param name="xI">The initial x-velocity direction</param>
            <param name="yI">The initial y-velocity direction</param>
            <param name="forceVariance">The spread control (1.0 = full variance)</param>
        </member>

        <member name="M:EffectsController.CreateSlimeParticlesSpray(UnityEngine.Color,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a directional spray of slime particles with explicit color. Emits particles
            in a circular pattern using Math.Point3OnCircle for even distribution. Force
            variance parameter controls how much the particles spread from the main direction.
            </summary>
            <param name="color">The explicit color for the slime particles</param>
            <param name="x">The x-coordinate of the spray origin</param>
            <param name="y">The y-coordinate of the spray origin</param>
            <param name="z">The z-coordinate of the spray origin</param>
            <param name="count">The number of slime particles to spray</param>
            <param name="offsetXRadius">The horizontal offset for spray origin</param>
            <param name="offsetYRadius">The vertical offset for spray origin</param>
            <param name="force">The base force for particle velocity</param>
            <param name="xI">The initial x-velocity direction</param>
            <param name="yI">The initial y-velocity direction</param>
            <param name="forceVariance">The spread control (1.0 = full variance)</param>
        </member>

        <member name="M:EffectsController.CreateSlimeTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates slime trail particle effects at z-depth 0. This convenience overload calls
            the full 3D version with default z positioning for standard slime trail effects.
            </summary>
            <param name="x">The x-coordinate where the slime trail originates</param>
            <param name="y">The y-coordinate where the slime trail originates</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses 2 variants, 2+ uses 3 variants)</param>
        </member>

        <member name="M:EffectsController.CreateSlimeTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates slime trail particle effects with full control. Automatically selects
            between small and large variants based on size multiplier (threshold at 2). Small
            particles randomly pick from 2 variations, large particles from 3 variations. Large
            particles have their size halved for proper scaling.
            </summary>
            <param name="x">The x-coordinate where the slime trail originates</param>
            <param name="y">The y-coordinate where the slime trail originates</param>
            <param name="z">The z-coordinate (depth) of the particle</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses small variants, 2+ uses large
                variants)</param>
        </member>

        <member name="M:EffectsController.CreateWaterDrip">
            <summary>
            Creates a water drip particle spawner effect. Instantiates a new spawner from the
            prefab that can be configured to emit water droplet particles. Returns null if the
            effects controller instance is not available.
            </summary>
            <returns>A ParticleSpawner configured for water drips, or null if creation fails</returns>
        </member>

        <member name="M:EffectsController.GetBloodColor(BloodColor)">
            <summary>
            Converts a BloodColor enum value to its corresponding Unity Color. Returns preset
            color values for different blood types: red (default), green (alien), oil
            (mechanical), or frozen (ice blue).
            </summary>
            <param name="color">The blood color type to convert</param>
            <returns>The Unity Color corresponding to the specified blood type</returns>
        </member>

        <member name="F:EffectsController.AlienEggPop">
            <summary>
            Alien egg hatching animation effect used when alien eggs burst open to release
            facehuggers.
            </summary>
        </member>

        <member name="F:EffectsController.BlackBloodParticlesBig">
            <summary>
            Large black blood particle emitter for major oil or mechanical fluid splatter.
            </summary>
        </member>

        <member name="F:EffectsController.BlackBloodParticlesDots">
            <summary>
            Dot-sized black blood particle emitter used when BloodColor is Oil.
            </summary>
        </member>

        <member name="F:EffectsController.BlackBloodParticlesSmall">
            <summary>
            Small black blood particle emitter for minor oil or mechanical leaks.
            </summary>
        </member>

        <member name="F:EffectsController.FrozenBloodColor">
            <summary>
            The color used for frozen or ice blood effects. Default is light blue (0.19, 0.7,
            1.0).
            </summary>
        </member>

        <member name="F:EffectsController.GreenBloodColor">
            <summary>
            The color used for alien or acid blood effects. Default is pure green.
            </summary>
        </member>

        <member name="F:EffectsController.GreenBloodParticlesBig">
            <summary>
            Large green blood particle emitter for major alien blood splatter effects.
            </summary>
        </member>

        <member name="F:EffectsController.GreenBloodParticlesDots">
            <summary>
            Dot-sized green blood particle emitter used when BloodColor is Green.
            </summary>
        </member>

        <member name="F:EffectsController.GreenBloodParticlesSmall">
            <summary>
            Small green blood particle emitter for minor alien blood effects.
            </summary>
        </member>

        <member name="F:EffectsController.OilBloodColor">
            <summary>
            The color used for oil or mechanical blood effects. Default is dark gray (0.1, 0.1,
            0.1).
            </summary>
        </member>

        <member name="F:EffectsController.PoopBloodParticlesDots">
            <summary>
            Dot-sized sewerage particle emitter used when BloodColor is Sewerage.
            </summary>
        </member>

        <member name="F:EffectsController.PoopParticlesBig">
            <summary>
            Large sewerage particle emitter for major waste splatter effects.
            </summary>
        </member>

        <member name="F:EffectsController.PoopParticlesSmall">
            <summary>
            Small sewerage particle emitter for minor waste effects.
            </summary>
        </member>

        <member name="F:EffectsController.QuicksandBloodColor">
            <summary>
            The color used for sand or dust blood effects. Default is a brown/tan color (0.7,
            0.5, 0.3).
            </summary>
        </member>

        <member name="F:EffectsController.RedBloodColor">
            <summary>
            The color used for standard red blood effects. Default is pure red.
            </summary>
        </member>

        <member name="F:EffectsController.RedBloodParticlesBig">
            <summary>
            Large red blood particle emitter for major blood splatter effects from standard
            enemies.
            </summary>
        </member>

        <member name="F:EffectsController.RedBloodParticlesDots">
            <summary>
            Dot-sized red blood particle emitter used when BloodColor is Red or unspecified.
            </summary>
        </member>

        <member name="F:EffectsController.RedBloodParticlesSmall">
            <summary>
            Small red blood particle emitter for minor blood effects and wounds.
            </summary>
        </member>

        <member name="F:EffectsController.ammoBubble">
            <summary>
            Ammunition reaction bubble effect shown when players collect ammo. Not currently
            used in codebase.
            </summary>
        </member>

        <member name="F:EffectsController.bloodParticlesDripsBlack">
            <summary>
            Black blood drip particle emitter for oil leaking effects from mechanical units.
            </summary>
        </member>

        <member name="F:EffectsController.bloodParticlesDripsGreen">
            <summary>
            Green blood drip particle emitter for alien bleeding effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodParticlesDripsRed">
            <summary>
            Red blood drip particle emitter for continuous bleeding effects from wounds.
            </summary>
        </member>

        <member name="F:EffectsController.broCoveredInAcidMaterial">
            <summary>
            Material applied to bros when they are covered in acid damage effects. Not currently
            used in codebase.
            </summary>
        </member>

        <member name="F:EffectsController.bubbleParticles">
            <summary>
            Particle emitter for underwater bubble effects, emits rising bubbles with varying
            sizes.
            </summary>
        </member>

        <member name="F:EffectsController.freeLifeBubble">
            <summary>
            Free life reaction bubble effect shown when players gain extra lives. Not currently
            used in codebase.
            </summary>
        </member>

        <member name="F:EffectsController.heroIndicator">
            <summary>
            Hero indicator sprite prefab (SpriteSM) used by CreateHeroIndicator() to display
            player-colored visual indicators above hero units for identification.
            </summary>
        </member>

        <member name="F:EffectsController.kickBubble">
            <summary>
            Kick reaction bubble template used to create kick indicator bubbles above players.
            </summary>
        </member>

        <member name="F:EffectsController.kickConfirmMaterial">
            <summary>
            Material for kick indicator bubbles during confirmation phase. Not currently used in
            codebase.
            </summary>
        </member>

        <member name="F:EffectsController.kickConfirmedMaterial">
            <summary>
            Material for kick indicator bubbles when kick is confirmed, used by TestVanDammeAnim
            for visual feedback.
            </summary>
        </member>

        <member name="F:EffectsController.kickdDefaultMaterial">
            <summary>
            Default material for kick indicator bubbles in normal state. Not currently used in
            codebase.
            </summary>
        </member>

        <member name="F:EffectsController.mookCoveredInAcidMaterial">
            <summary>
            Material applied to mooks when they are covered in acid damage effects. Not
            currently used in codebase.
            </summary>
        </member>

        <member name="F:EffectsController.muscleTempleAvatarEffect">
            <summary>
            Animated texture prefab used by CreateMuscleTempleAvatar() to create visual effects
            related to muscle temple power-ups and avatar transformations.
            </summary>
        </member>

        <member name="F:EffectsController.muscleTempleFlexEffectAir">
            <summary>
            Air flex visual effect prefab (MuscleTempleFlexEffect) that follows units with
            air/floating muscle temple power-ups, indicating enhanced aerial abilities.
            </summary>
        </member>

        <member name="F:EffectsController.muscleTempleFlexEffectGolden">
            <summary>
            Golden flex visual effect prefab (MuscleTempleFlexEffect) that follows units with
            golden muscle temple power-ups, creating a golden aura around powered-up characters.
            </summary>
        </member>

        <member name="F:EffectsController.muscleTempleFlexEffectInvulnerable">
            <summary>
            Invulnerability flex visual effect prefab (MuscleTempleFlexEffect) that follows
            units with invulnerability muscle temple power-ups, indicating temporary damage
            immunity.
            </summary>
        </member>

        <member name="F:EffectsController.muscleTempleFlexTeleportExplosion">
            <summary>
            Animated texture prefab for the explosion effect that plays when a unit arrives at
            their destination after muscle temple teleportation.
            </summary>
        </member>

        <member name="F:EffectsController.muscleTempleFlexTeleportOut">
            <summary>
            Animated texture prefab for the departure effect that plays when a unit begins
            muscle temple teleportation, indicating the start of the teleport sequence.
            </summary>
        </member>

        <member name="F:EffectsController.promotedBubble">
            <summary>
            Promotion reaction bubble effect shown when players are promoted or level up.
            </summary>
        </member>

        <member name="F:EffectsController.semenParticlesDots">
            <summary>
            Dot-sized particle emitter for specialized white fluid effects.
            </summary>
        </member>

        <member name="F:EffectsController.semenParticlesSmall">
            <summary>
            Small particle emitter for specialized white fluid spray effects.
            </summary>
        </member>

        <member name="F:EffectsController.sparklePuff">
            <summary>
            Sparkle particle effect prefab (Puff) used by CreateSparklePuff() to generate
            sparkle effects with customizable lifetime for various magical or special visual
            feedback.
            </summary>
        </member>

        <member name="F:EffectsController.waterParticlesDrip">
            <summary>
            Water drip particle emitter for water leaking and dripping effects.
            </summary>
        </member>

        <member name="M:EffectsController.CreateSlimeCover(System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a slime cover on nearby terrain surfaces within a specified radius. Casts
            rays from the center point to grid positions and adds slime to surfaces hit.
            </summary>
            <param name="damage">The damage value or intensity of the slime cover to apply.</param>
            <param name="x">The X coordinate of the center position for slime coverage.</param>
            <param name="y">The Y coordinate of the center position for slime coverage.</param>
            <param name="radius">The radius from the center point to check for surfaces to cover
                with slime.</param>
            <param name="onlyDownward">If true, only applies slime to surfaces below the center Y
                position. Default is false.</param>
        </member>

        <member name="M:EffectsController.DeregisterTickingBillboard(OilAccidentTicker)">
            <summary>
            Removes an oil accident ticker billboard from the tracking system. Typically called
            when the billboard is destroyed or no longer needs updates.
            </summary>
            <param name="ticker">The oil accident ticker billboard to deregister</param>
        </member>

        <member name="M:EffectsController.RegisterTickingBillboard(OilAccidentTicker)">
            <summary>
            Registers an oil accident ticker billboard to the tracking system. Sets the ticker's
            initial counter value to match the current accident timer. Used for "days since last
            accident" warning signs that reset when explosions occur nearby.
            </summary>
            <param name="ticker">The oil accident ticker billboard to register</param>
        </member>

        <member name="M:EffectsController.ResetAccidentTicker">
            <summary>
            Resets the global accident timer to zero and updates all registered oil accident
            ticker displays. Called when an explosion or accident occurs to reset all "days
            since last accident" counters in the level.
            </summary>
        </member>

        <member name="M:EffectsController.StartRainAndLightning">
            <summary>
            Activates weather effects including rain particles and lightning. Enables the
            LightningController component, activates rain visual effects that follow the camera,
            and adjusts fog positioning based on level theme (City/America or Hell) and game
            mode. In deathmatch modes, raises fog to y=70 for better visibility.
            </summary>
        </member>

        <member name="P:EffectsController.BoulderRollPoof">
            <summary>
            Gets the puff effect used when boulders roll. Lazy-loads the Puff component from the
            prefab reference on first access and caches it for subsequent use. Used for
            dust/debris effects from rolling objects.
            </summary>
        </member>

        <member name="F:EffectsController._oilAccidentTickers">
            <summary>
            Private list tracking all registered OilAccidentTicker objects in the scene, used to
            update oil accident counter displays when accidents occur.
            </summary>
        </member>

        <member name="F:EffectsController._timeSinceAccident">
            <summary>
            Private timer tracking elapsed time since the last oil-related accident, incremented
            in Update() and reset to zero when ResetAccidentTicker() is called.
            </summary>
        </member>

        <member name="F:EffectsController.ashHolder">
            <summary>
            Transform container for ash particle effects that follows the camera in burning
            environments.
            </summary>
        </member>

        <member name="F:EffectsController.backgroundWoodShrapnel1">
            <summary>
            First wood shrapnel variant for background wooden object destruction effects.
            </summary>
        </member>

        <member name="F:EffectsController.backgroundWoodShrapnel2">
            <summary>
            Second wood shrapnel variant for background wooden object destruction variety.
            </summary>
        </member>

        <member name="F:EffectsController.backgroundWoodShrapnel3">
            <summary>
            Third wood shrapnel variant for background wooden object destruction diversity.
            </summary>
        </member>

        <member name="F:EffectsController.backgroundWoodShrapnel4">
            <summary>
            Fourth wood shrapnel variant for background wooden object destruction effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodTrailPuffBigParticle1">
            <summary>
            First large blood trail particle emitter for heavy bleeding effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodTrailPuffBigParticle2">
            <summary>
            Second large blood trail particle variant for major blood splatter trails.
            </summary>
        </member>

        <member name="F:EffectsController.bloodTrailPuffBigParticle3">
            <summary>
            Third large blood trail particle variant for extreme bleeding visual effects.
            </summary>
        </member>

        <member name="F:EffectsController.bloodTrailPuffParticle1">
            <summary>
            First blood trail particle emitter used randomly for blood trail variety.
            </summary>
        </member>

        <member name="F:EffectsController.bloodTrailPuffParticle2">
            <summary>
            Second blood trail particle emitter alternated with first for visual diversity.
            </summary>
        </member>

        <member name="F:EffectsController.dustParticles">
            <summary>
            Particle emitter for dust cloud effects from impacts, falls, and environmental
            disturbances.
            </summary>
        </member>

        <member name="F:EffectsController.evilFloatParticles">
            <summary>
            Particle emitter for evil floating ambient particles in dark environments.
            </summary>
        </member>

        <member name="F:EffectsController.fireAndAsh">
            <summary>
            Flag indicating whether fire and ash environmental effects are active, used in
            BurningJungle theme.
            </summary>
        </member>

        <member name="F:EffectsController.fireWorks">
            <summary>
            Array of victory firework effect prefabs launched when levels are completed in
            campaign mode.
            </summary>
        </member>

        <member name="F:EffectsController.fireWorksCount">
            <summary>
            Counter tracking number of fireworks launched, used to vary launch positions and
            prefab selection.
            </summary>
        </member>

        <member name="F:EffectsController.fireWorksCounter">
            <summary>
            Timer that controls the interval between launching victory fireworks.
            </summary>
        </member>

        <member name="F:EffectsController.fireworksOn">
            <summary>
            Static flag controlling whether victory fireworks should be displayed on level
            completion.
            </summary>
        </member>

        <member name="F:EffectsController.flashEffect">
            <summary>
            Full screen flash effect component for bright flashes from explosions and other
            intense effects.
            </summary>
        </member>

        <member name="F:EffectsController.fogObject">
            <summary>
            Transform for standard fog visual effect used in City and America themes.
            </summary>
        </member>

        <member name="F:EffectsController.forceFireworksOn">
            <summary>
            Instance flag to force fireworks display regardless of game state, useful for
            testing or special events.
            </summary>
        </member>

        <member name="F:EffectsController.gustFrequency">
            <summary>
            Frequency value that determines how often wind gusts occur, used by the wind system
            to create periodic wind variations on affected objects.
            </summary>
        </member>

        <member name="F:EffectsController.gustM">
            <summary>
            Gust magnitude multiplier that controls the intensity of individual wind gusts when
            they occur, amplifying the wind effect during gust periods.
            </summary>
        </member>

        <member name="F:EffectsController.hellFogObject">
            <summary>
            Transform for hell-themed red fog effect used in Hell levels.
            </summary>
        </member>

        <member name="F:EffectsController.lightObject">
            <summary>
            GameObject reference for global lighting control in the scene.
            </summary>
        </member>

        <member name="F:EffectsController.lightningController">
            <summary>
            Component that manages lightning strike effects during rain weather conditions.
            </summary>
        </member>

        <member name="F:EffectsController.offsetM">
            <summary>
            Position offset multiplier (default 1.0) used in wind calculations to determine
            spatial variations in wind effects across different positions.
            </summary>
        </member>

        <member name="F:EffectsController.oilParticleParent">
            <summary>
            Parent transform used by oil-related objects (OilTankBlock, DoodadOilParticle,
            DoodadOilSpawner) to organize and manage oil particle effects in the scene
            hierarchy.
            </summary>
        </member>

        <member name="F:EffectsController.plumePuffBigParticle1">
            <summary>
            First large smoke plume particle emitter for bigger explosion dust effects.
            </summary>
        </member>

        <member name="F:EffectsController.plumePuffBigParticle2">
            <summary>
            Second large smoke plume particle variant for massive dust clouds.
            </summary>
        </member>

        <member name="F:EffectsController.plumePuffParticle1">
            <summary>
            First smoke plume particle emitter for dust and smoke puff effects.
            </summary>
        </member>

        <member name="F:EffectsController.plumePuffParticle2">
            <summary>
            Second smoke plume particle variant for visual variety in dust clouds.
            </summary>
        </member>

        <member name="F:EffectsController.plumePuffParticleBlack1">
            <summary>
            First black smoke plume particle emitter for dark smoke effects.
            </summary>
        </member>

        <member name="F:EffectsController.plumePuffParticleBlack2">
            <summary>
            Second black smoke plume particle variant for visual diversity.
            </summary>
        </member>

        <member name="F:EffectsController.plumePuffParticleHell">
            <summary>
            Hell-themed smoke plume particle emitter for infernal visual effects.
            </summary>
        </member>

        <member name="F:EffectsController.plumePuffParticlePink">
            <summary>
            Pink smoke plume particle emitter for special visual effects.
            </summary>
        </member>

        <member name="F:EffectsController.plumePuffParticlePitchBlack">
            <summary>
            Pitch black smoke plume particle emitter for the darkest smoke effects.
            </summary>
        </member>

        <member name="F:EffectsController.plumePuffParticlePurple">
            <summary>
            Purple smoke plume particle emitter for magical or alien effects.
            </summary>
        </member>

        <member name="F:EffectsController.plumeShrapnelPrefab">
            <summary>
            Shrapnel prefab for smoke plume particle effects from explosions.
            </summary>
        </member>

        <member name="F:EffectsController.rainAndLightning">
            <summary>
            Flag indicating whether rain and lightning weather effects are currently active.
            </summary>
        </member>

        <member name="F:EffectsController.rainFollowTransform">
            <summary>
            Cached transform reference for camera following used by rain and ash effects.
            </summary>
        </member>

        <member name="F:EffectsController.rainHolder">
            <summary>
            Transform container for rain particle effects that follows the camera position.
            </summary>
        </member>

        <member name="F:EffectsController.slimeCoverPrefab">
            <summary>
            Slime ground cover prefab for upward-facing surfaces, used in CreateSlimeCover
            method.
            </summary>
        </member>

        <member name="F:EffectsController.slimeCoverSidesPrefab">
            <summary>
            Slime ground cover prefab for side surfaces (walls), used in CreateSlimeCover
            method.
            </summary>
        </member>

        <member name="F:EffectsController.slimeDripSpawner">
            <summary>
            Particle spawner prefab (ParticleSpawner) used by CreateSlimeDrip() to generate
            slime dripping particle effects from surfaces, creating environmental slime
            interactions.
            </summary>
        </member>

        <member name="F:EffectsController.slimeParticles">
            <summary>
            Particle emitter for slime-related environmental effects and acid splashes.
            </summary>
        </member>

        <member name="F:EffectsController.slimeTrailPuffBigParticle1">
            <summary>
            First large slime trail particle emitter for heavy slime disturbance effects.
            </summary>
        </member>

        <member name="F:EffectsController.slimeTrailPuffBigParticle2">
            <summary>
            Second large slime trail particle variant for major slime impacts.
            </summary>
        </member>

        <member name="F:EffectsController.slimeTrailPuffBigParticle3">
            <summary>
            Third large slime trail particle variant for maximum visual variety in slime
            effects.
            </summary>
        </member>

        <member name="F:EffectsController.slimeTrailPuffParticle1">
            <summary>
            First slime trail particle emitter for movement through slime effects.
            </summary>
        </member>

        <member name="F:EffectsController.slimeTrailPuffParticle2">
            <summary>
            Second slime trail particle variant for diverse slime movement visuals.
            </summary>
        </member>

        <member name="F:EffectsController.summonMagicParticle">
            <summary>
            Particle emitter for magical summoning effects used by warlock portals.
            </summary>
        </member>

        <member name="F:EffectsController.sunObject">
            <summary>
            Transform for sun lighting effect object used in City theme environments.
            </summary>
        </member>

        <member name="F:EffectsController.thickFogObject">
            <summary>
            Transform for thick fog visual effect for enhanced atmospheric density.
            </summary>
        </member>

        <member name="F:EffectsController.waterDripSpawner">
            <summary>
            Particle spawner prefab (ParticleSpawner) used by CreateWaterDrip() to generate
            water dripping particle effects from surfaces, creating environmental water
            interactions.
            </summary>
        </member>

        <member name="F:EffectsController.windGustPattern">
            <summary>
            Animation curve that defines the wind gust intensity pattern over time, used by the
            wind system to create realistic non-linear wind variations.
            </summary>
        </member>

        <member name="F:EffectsController.windStrength">
            <summary>
            Overall wind intensity multiplier that controls the strength of wind effects applied
            to physics-enabled objects like JigglyBit components.
            </summary>
        </member>

        <member name="M:EffectsController.CreateBlindedEffect(System.Single,System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
            Creates rotating star effects for stunned or blinded units. Uses a cycling counter
            to alternate between three different star prefab variations for visual variety. Each
            call increments the global stunned stars counter to ensure variation across multiple
            uses.
            </summary>
            <param name="x">The x-coordinate for the stars</param>
            <param name="y">The y-coordinate for the stars</param>
            <param name="delay">The delay before stars appear</param>
            <param name="velocity">The velocity parameter (currently unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateCreateTinyPop(System.Single,System.Single)">
            <summary>
            Creates a tiny popping effect for minor impacts or UI feedback. Produces a small
            burst animation at the specified position. Note: Method name contains redundant
            "Create".
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>

        <member name="M:EffectsController.CreateDistortionHeatWaveEffect(System.Single,System.Single,System.Single)">
            <summary>
            Creates a heat wave distortion effect and returns the DistortionGrow component for
            custom configuration. Allows fine-tuning of the distortion parameters after creation
            for specific heat shimmer effects.
            </summary>
            <param name="x">The x-coordinate of the heat source</param>
            <param name="y">The y-coordinate of the heat source</param>
            <param name="z">The z-coordinate (depth) of the effect</param>
            <returns>The DistortionGrow component for additional configuration</returns>
        </member>

        <member name="M:EffectsController.CreateDistortionWobbleLargeRingEffect(System.Single,System.Single,System.Single)">
            <summary>
            Creates a large heat distortion ring effect. Used for major explosions and intense
            heat sources to create dramatic expanding air ripples visible across a wide area.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>

        <member name="M:EffectsController.CreateDistortionWobbleLargeRingFullScreenEffect(System.Single,System.Single,System.Single)">
            <summary>
            Creates a massive screen-filling distortion effect with extreme parameters. Sets
            alpha to 9 for maximum intensity, growth rate to 1355 for rapid expansion, and
            growth lerp decrease to 0.1. Used for nuclear explosions or other catastrophic
            events that affect the entire screen.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>

        <member name="M:EffectsController.CreateDistortionWobblePinchEffect(System.Single,System.Single,System.Single)">
            <summary>
            Creates a pinch-style distortion effect that pulls inward rather than expanding.
            Used for implosion effects, black holes, or vacuum-based attacks where the visual
            effect should appear to suck inward.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>

        <member name="M:EffectsController.CreateDistortionWobbleRingEffect(System.Single,System.Single,System.Single)">
            <summary>
            Creates a medium-sized heat distortion ring effect. Used for standard explosions and
            moderate heat effects to create visible air ripples that expand from the impact
            point.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>

        <member name="M:EffectsController.CreateDistortionWobbleSmallRingEffect(System.Single,System.Single,System.Single)">
            <summary>
            Creates a small heat distortion ring effect. Used for minor explosions and
            heat-based attacks to create a rippling air distortion that expands outward from the
            origin point.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>

        <member name="M:EffectsController.CreateElectricShock(System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
            Creates electrical shock visual effects with random variations. Randomly selects
            from three electricity prefabs with equal probability. Used for electrical damage,
            stun effects, and power-related visuals.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the shock effect starts</param>
            <param name="velocity">The initial velocity vector for the effect</param>
            <returns>The created Puff component for the electrical effect</returns>
        </member>

        <member name="M:EffectsController.CreateExplosionRangePop(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an explosion range indicator that expands to show blast radius. Instantiates
            the range pop prefab and sets its size based on the explosion range. Also resets the
            accident ticker for oil spill signs.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="range">The explosion radius to visualize</param>
            <returns>The created ExplosionRangePop component for further manipulation</returns>
        </member>

        <member name="M:EffectsController.CreateFreezeDamageEffect(System.Single,System.Single,UnityEngine.Transform)">
            <summary>
            Creates a freeze damage visual effect that can optionally attach to a parent
            transform. Used to show ice crystals or frost effects on frozen units. The effect is
            created at z-depth -10 for proper layering.
            </summary>
            <param name="x">The x-coordinate of the freeze effect</param>
            <param name="y">The y-coordinate of the freeze effect</param>
            <param name="parentTransform">Optional transform to parent the effect to (null for world
                space)</param>
        </member>

        <member name="M:EffectsController.CreateNinjaSmokeEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a ninja smoke bomb effect for stealth abilities. Produces a cloud of smoke
            at the specified position. Note: Velocity parameters are accepted but unused in the
            current implementation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreatePuffDisappearEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a disappearance puff effect with accompanying ring. Spawns both a main puff
            cloud and a ring effect with 0.25 unit vertical offset. Used for teleportation and
            vanishing abilities.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreatePuffDisappearRingEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates just the ring portion of a disappearance effect. Returns the Puff component
            for further manipulation. Note: Velocity parameters are accepted but unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
            <returns>The created Puff component for the ring effect</returns>
        </member>

        <member name="M:EffectsController.CreatePuffPeckShineEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a shining effect typically used for peck attacks or impacts. Returns the
            Puff component for further manipulation. Note: Velocity parameters are accepted but
            unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
            <returns>The created Puff component for the shine effect</returns>
        </member>

        <member name="M:EffectsController.CreateReviveZombieEffect(System.Single,System.Single,Transform)">
            <summary>
            Creates a zombie revival effect at the specified position. The effect is parented to
            the provided transform to follow the reviving unit. Used when necromancer abilities
            raise the undead.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>

        <member name="M:EffectsController.CreateRevivedZombiePassiveEffect(System.Single,System.Single,System.Single,Transform)">
            <summary>
            Creates a persistent effect for revived zombie units. The effect is parented to the
            zombie transform to provide continuous visual indication of undead status. Typically
            shows as a subtle aura or particle effect.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>

        <member name="M:EffectsController.CreateSparkleDisappearEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a sparkly disappearance effect for magical vanishing. Produces a glittering
            particle effect at the specified position. Note: Velocity parameters are accepted
            but unused in the current implementation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
        </member>

        <member name="M:EffectsController.CreateUndeadSelfReviveEffect(System.Single,System.Single,System.Single)">
            <summary>
            Creates a self-revival effect for undead units coming back to life. Unlike other
            revival effects, this is not parented and plays as a one-shot animation at the
            revival location.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
        </member>

        <member name="F:EffectsController.bigDogCoveredInAcidMaterial">
            <summary>
            Material applied to big dog mook units (mega MookDog) when they are covered in acid,
            creating a visual acid effect on their sprite renderer.
            </summary>
        </member>

        <member name="F:EffectsController.bigMookCoveredInAcidMaterial">
            <summary>
            Material applied to big mook units (MookBigGuy and large MookSuicide) when they are
            covered in acid, creating a visual acid effect on their sprite renderer.
            </summary>
        </member>

        <member name="F:EffectsController.distortionHeatWavePrefab">
            <summary>
            Heat wave distortion effect prefab for thermal shimmer effects. Not currently used
            but available for heat-based visuals.
            </summary>
        </member>

        <member name="F:EffectsController.distortionPinchGrowPrefab">
            <summary>
            Pinching distortion effect prefab that creates a warping pinch visual, used by
            CreateDistortionPinch method.
            </summary>
        </member>

        <member name="F:EffectsController.distortionWobbleGrowPrefab">
            <summary>
            Standard wobbling distortion effect prefab for medium reality distortion visuals,
            used by CreateDistortionWobble method.
            </summary>
        </member>

        <member name="F:EffectsController.distortionWobbleLargeGrowPrefab">
            <summary>
            Large wobbling distortion effect prefab for major reality warping, used by
            CreateDistortionWobbleLarge and extreme distortion methods.
            </summary>
        </member>

        <member name="F:EffectsController.distortionWobbleSmallGrowPrefab">
            <summary>
            Small wobbling distortion effect prefab for minor reality warping visuals, used by
            CreateDistortionWobbleSmall method.
            </summary>
        </member>

        <member name="F:EffectsController.dogCoveredInAcidMaterial">
            <summary>
            Material applied to regular dog mook units (MookDog) when they are covered in acid,
            creating a visual acid effect on their sprite renderer.
            </summary>
        </member>

        <member name="F:EffectsController.grenadierMookCoveredInAcidMaterial">
            <summary>
            Material applied to grenadier mook units (MookGrenadier) when they are covered in
            acid, creating a visual acid effect on their sprite renderer.
            </summary>
        </member>

        <member name="F:EffectsController.hellBoomerCoveredInAcidMaterial">
            <summary>
            Material applied to hell boomer mook units (MookHellBoomer) when they are covered in
            acid, creating a visual acid effect on their sprite renderer.
            </summary>
        </member>

        <member name="F:EffectsController.reviveZombiePrefab">
            <summary>
            Zombie revival effect prefab for necromancy or undead resurrection visuals, used by
            CreateReviveZombieEffect method.
            </summary>
        </member>

        <member name="F:EffectsController.revivedZombiePassivePrefab">
            <summary>
            Passive effect prefab for active revived zombies, used by
            CreateRevivedZombiePassiveEffect method.
            </summary>
        </member>

        <member name="F:EffectsController.stunnedStars1Prefab">
            <summary>
            First stunned stars effect variant, rotating stars shown above stunned units.
            </summary>
        </member>

        <member name="F:EffectsController.stunnedStars2Prefab">
            <summary>
            Second stunned stars effect variant, provides visual variety for stun effects.
            </summary>
        </member>

        <member name="F:EffectsController.stunnedStars3Prefab">
            <summary>
            Third stunned stars effect variant, adds additional variety to stun visuals.
            </summary>
        </member>

        <member name="F:EffectsController.stunnedStarsCount">
            <summary>
            Static counter used to cycle through stunned star variants for visual variety.
            </summary>
        </member>

        <member name="F:EffectsController.undeadSelfRevivePrefab">
            <summary>
            Undead self-revival effect prefab that creates visual feedback when undead units
            resurrect themselves.
            </summary>
        </member>

        <member name="M:EffectsController.PlayBloodSquirtSound(System.Single,System.Single,System.Single)">
            <summary>
            Plays blood squirt sound effect from the effort sounds collection. Protected method
            for blood spray and arterial bleeding audio. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>

        <member name="M:EffectsController.PlayExplosionHugeSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Plays huge explosion sound effect from the death sounds collection. Protected method
            used for major explosive events. Returns the AudioSource for further audio
            processing.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>

        <member name="M:EffectsController.PlayExplosionMassiveSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Plays massive explosion sound effect from the death sounds collection. Protected
            method for the largest explosive events. Returns the AudioSource for audio
            manipulation.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>

        <member name="M:EffectsController.PlayExplosionSound(System.Single,System.Single,System.Single)">
            <summary>
            Plays standard explosion sound effect from the death sounds collection. Protected
            method for regular explosive audio feedback. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>

        <member name="M:EffectsController.PlayGlassShatterSound(System.Single,System.Single,System.Single)">
            <summary>
            Plays glass shattering sound effect from the death sounds collection. Protected
            method for glass breaking audio feedback. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>

        <member name="M:EffectsController.PlaySlimeExplosionSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Plays slime explosion sound effect from the death sounds collection. Protected
            method that returns the AudioSource for further manipulation. Used for wet, organic
            explosion audio feedback.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>

        <member name="M:EffectsController.PlaySmallExplosionSound(System.Single,System.Single,System.Single)">
            <summary>
            Plays small explosion sound using attack2 sounds collection. Protected method for
            minor explosive effects. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>

        <member name="M:EffectsController.PlaySmallSlimeExplosionSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Plays small slime explosion sound using greeting sounds at 0.7 pitch. Protected
            method that creates a lower-pitched variant for smaller slime effects. Returns the
            AudioSource for manipulation.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>

        <member name="F:EffectsController.bloodSoundHolder">
            <summary>
            Sound holder containing blood-related audio effects played when blood effects are
            created.
            </summary>
        </member>

        <member name="F:EffectsController.explosionHugeSoundHolder">
            <summary>
            Sound holder containing huge explosion audio effects for massive blast sounds.
            </summary>
        </member>

        <member name="F:EffectsController.explosionMassiveSoundHolder">
            <summary>
            Sound holder containing massive explosion audio effects for extreme blast sounds.
            </summary>
        </member>

        <member name="F:EffectsController.explosionSlimeSoundHolder">
            <summary>
            Sound holder containing slime explosion audio effects for alien/acid burst sounds.
            </summary>
        </member>

        <member name="F:EffectsController.explosionSoundHolder">
            <summary>
            Sound holder containing standard explosion audio effects for blast sounds.
            </summary>
        </member>

        <member name="F:EffectsController.glassSoundHolder">
            <summary>
            Sound holder containing glass breaking sound effects played when glass shatters.
            </summary>
        </member>

        <member name="M:EffectsController.AttachLight(Unit)">
            <summary>
            Attaches a light source to a unit for illumination effects. Creates the light object
            6 units above the unit's position and parents it for movement tracking. Used for
            character lighting or special effects.
            </summary>
            <param name="unit">The unit to attach the light to</param>
        </member>

        <member name="M:EffectsController.CreateBoneParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates bone-colored particles using a specified emitter. Randomly selects bone
            colors from the theme for skeletal or ashen debris effects with appropriate pale
            color variations.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateDustParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates dirt-colored dust particles using a specified emitter. Randomly selects dirt
            colors from the theme for each particle. Uses the same distribution pattern as flesh
            dust but with theme-appropriate dirt coloring.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateDustParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
            Creates dust particles with a specified color using a custom emitter. Overrides the
            emitter's default coloring to apply the provided color uniformly to all created
            particles.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
        </member>

        <member name="M:EffectsController.CreateDustParticlesRow(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
            Creates particles in a horizontal row pattern using a specified emitter. Particles
            are distributed only along the x-axis while maintaining a constant y-position,
            creating a line effect. Supports separate x and y force components for directional
            control.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the row center</param>
            <param name="y">The y-coordinate of the row (remains constant)</param>
            <param name="count">The number of particles to create in the row</param>
            <param name="offsetXRadius">The horizontal spread radius for the row</param>
            <param name="xForce">The horizontal force component for particles</param>
            <param name="yForce">The vertical force component for particles</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
        </member>

        <member name="M:EffectsController.CreateFleshDustParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates flesh-colored dust particles using a specified emitter. Randomly selects
            flesh colors from the theme for each particle. Distributes particles within the
            offset radius with randomized size and energy values between the emitter's
            configured minimums and maximums.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single)">
            <summary>
            Creates a single particle at the specified 3D position. The most basic particle
            creation method that simply emits one particle at the exact coordinates provided.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
        </member>

        <member name="M:EffectsController.CreateParticle(ParticleSystem,System.Single,System.Single,System.Single)">
            <summary>
            Creates a single particle using the modern ParticleSystem. This wrapper converts
            coordinates to a Vector3 and calls the vector-based overload for ParticleSystem
            compatibility.
            </summary>
            <param name="emitter">The ParticleSystem to emit from</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
        </member>

        <member name="M:EffectsController.CreateParticle(ParticleSystem,UnityEngine.Vector3)">
            <summary>
            Creates a single particle using ParticleSystem at a vector position. Uses EmitParams
            for modern particle system control with default parameters.
            </summary>
            <param name="emitter">The ParticleSystem to emit from</param>
            <param name="position">The 3D position for the particle</param>
        </member>

        <member name="M:EffectsController.CreateParticle(ParticleSystem,UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
            <summary>
            Creates a single particle with position randomization and initial velocity. The
            particle appears randomly within the specified radius of the position and launches
            with the given velocity.
            </summary>
            <param name="emitter">The ParticleSystem to emit from</param>
            <param name="position">The center position for particle placement</param>
            <param name="radius">The randomization radius around the position</param>
            <param name="velocity">The initial velocity vector for the particle</param>
        </member>

        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
            Creates a single colored particle at the specified position. Temporarily overrides
            the emitter's renderer color to apply the specified color to the emitted particle.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
            <param name="color">The color to apply to the particle</param>
        </member>

        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a single particle with force-based random velocity. The particle's initial
            velocity is randomized within a unit circle and scaled by the force parameter, then
            combined with the specified initial velocity components.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
        </member>

        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
            Creates a single colored particle with force-based velocity. Combines color override
            with velocity randomization for colored particles with dynamic movement.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="color">The color to apply to the particle</param>
        </member>

        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a particle with life and size multipliers at z=1. This wrapper adds default
            z-position and zero z-velocity, calling the full 3D version for particles with
            customized lifetime and size.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="lifeM">Lifetime multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>

        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a particle with custom z-position, life, and size multipliers. Adds zero
            z-velocity as a default, forwarding to the full implementation with complete 3D
            control.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="lifeM">Lifetime multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>

        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a fully customized particle with 3D position and velocity. The most
            comprehensive single particle creation method, supporting custom lifetime and size
            multipliers along with full 3D velocity control including z-axis movement.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="zI">The initial z-velocity to add</param>
            <param name="lifeM">Lifetime multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>

        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates white particles using a specified emitter. The generic particle creation
            method that uses white color for all particles. Provides the base implementation for
            themed particle methods.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Creates multiple rotating particles with uniform spread. This wrapper uses equal x
            and y offset radii for circular distribution patterns when creating spinning
            particles.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particles</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
            <param name="angularVelocityMin">The minimum rotation speed</param>
            <param name="angularVelocityMax">The maximum rotation speed</param>
        </member>

        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Creates multiple rotating particles at z=0 with elliptical spread. This wrapper adds
            default z-position for 2D particle effects with rotation and custom distribution
            patterns.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius</param>
            <param name="yOffsetRadius">The vertical spread radius</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
            <param name="angularVelocityMin">The minimum rotation speed</param>
            <param name="angularVelocityMax">The maximum rotation speed</param>
        </member>

        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Creates multiple rotating particles with full 3D control. The comprehensive particle
            creation method supporting elliptical distribution, custom colors, and randomized
            angular velocity for realistic spinning debris effects. Each particle gets a random
            rotation speed between min and max.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="z">The z-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius</param>
            <param name="yOffsetRadius">The vertical spread radius</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
            <param name="angularVelocityMin">The minimum rotation speed for particles</param>
            <param name="angularVelocityMax">The maximum rotation speed for particles</param>
        </member>

        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Creates multiple particles with color interpolation between two colors. Each
            particle gets a random color between color1 and color2, creating gradient effects.
            Supports full 3D positioning, elliptical distribution, and randomized angular
            velocity for realistic multi-colored particle effects.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="z">The z-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius</param>
            <param name="yOffsetRadius">The vertical spread radius</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color for interpolation</param>
            <param name="color2">The second color for interpolation</param>
            <param name="angularVelocityMin">The minimum rotation speed for particles</param>
            <param name="angularVelocityMax">The maximum rotation speed for particles</param>
        </member>

        <member name="M:EffectsController.CreateSandParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates sand-colored particles using a specified emitter. Randomly selects sand
            colors from the theme for desert or beach-appropriate particle effects with natural
            sand color variations.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>

        <member name="M:EffectsController.GetBloodOverlay">
            <summary>
            Returns a random blood overlay sprite for terrain decoration. Selects randomly from
            the bloodBlockOverlayPrefabs array and instantiates it. Used to add blood decals to
            blocks and surfaces.
            </summary>
            <returns>The transform of the instantiated blood overlay sprite</returns>
        </member>

        <member name="M:EffectsController.InstantiateEffect(UnityEngine.Object)">
            <summary>
            Instantiates an effect object at the origin with default rotation. Supports object
            pooling for IPoolableEffect types.
            </summary>
            <param name="prefab">The effect prefab to instantiate. Can be any Unity Object type.</param>
            <returns>The instantiated effect object, either from the pool or newly created.</returns>
        </member>

        <member name="M:EffectsController.InstantiateEffect(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiates an effect object at the specified position and rotation. Supports
            object pooling for IPoolableEffect types to improve performance.
            </summary>
            <param name="prefab">The effect prefab to instantiate. Can be any Unity Object type.</param>
            <param name="pos">The position where the effect should be instantiated.</param>
            <param name="rot">The rotation of the instantiated effect.</param>
            <returns>The instantiated effect object, either from the pool or newly created.</returns>
        </member>

        <member name="M:EffectsController.OnDestroy">
            <summary>
            Unity lifecycle method called when the EffectsController is destroyed. Clears the
            static instance reference.
            </summary>
        </member>

        <member name="F:EffectsController.groundLayer">
            <summary>
            Static layer mask used for ground collision detection in various effect placement
            calculations.
            </summary>
        </member>

        <member name="F:EffectsController.tempOffset">
            <summary>
            Protected static temporary Vector3 storage used internally by shrapnel creation
            methods to calculate random or circular offset positions without allocating new
            Vector3 objects each time.
            </summary>
        </member>

        <member name="M:Grenade.Awake">
            <summary>
            Initializes the grenade when the GameObject is created. Sets up the fragile
            collision layer for detecting breakable objects and initializes the bounce tracking
            list if needed.
            </summary>
        </member>

        <member name="M:Grenade.RegisterGrenade">
            <summary>
            Registers this grenade with the Map's tracking systems. If the grenade is marked as
            shootable, it's added to the shootable grenades list for AI targeting. All grenades
            are added to the general grenade tracking list.
            </summary>
        </member>

        <member name="M:Grenade.SetToDisable(System.Boolean)">
            <summary>
            Sets whether this grenade should start in a disabled state. Used for pre-placed
            grenades in levels that shouldn't be active immediately.
            </summary>
            <param name="disabledAtStart">True to start disabled, false for normal behavior</param>
        </member>

        <member name="M:Grenade.SetupGrenade(System.Int32,System.Int32,UnityEngine.MonoBehaviour)">
            <summary>
            Initializes grenade ownership and visual properties. Sets the player number, random
            seed, and who fired the grenade. Configures trail renderer colors based on the
            player number, using player-specific colors for players 0-3 and red/yellow for
            others.
            </summary>
            <param name="newSeed">Random seed for consistent behavior</param>
            <param name="pNum">Player number who owns this grenade</param>
            <param name="_FiredBy">The unit that launched this grenade</param>
        </member>

        <member name="M:Grenade.Start">
            <summary>
            Completes grenade initialization after all Awake calls. Caches the main material,
            sets up the ground collision layer, registers the grenade with game systems, and
            handles special disabled spawn states for pre-placed grenades.
            </summary>
        </member>

        <member name="F:Grenade.disabledAtStart">
            <summary>
            When true, the grenade starts in a disabled state. Used for pre-placed grenades in
            levels that shouldn't be active until triggered. Set via SetToDisable method.
            </summary>
        </member>

        <member name="M:Grenade.Death">
            <summary>
            Handles the grenade explosion. Damages terrain, creates visual effects, and damages
            units within the blast radius. Only the local player's grenades calculate unit
            damage to prevent networking issues. Awards achievements for special kills and
            triggers explosion effects.
            </summary>
        </member>

        <member name="M:Grenade.DestroyGrenade">
            <summary>
            Removes the grenade from all tracking systems and destroys the GameObject. Called
            after the explosion effects have been created.
            </summary>
        </member>

        <member name="M:Grenade.Knock(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Applies knockback force to the grenade from explosions or other impacts. Adjusts
            velocity based on the impact force and grenade weight, adds rotational spin, and
            plays a defend sound.
            </summary>
            <param name="xDiff">Horizontal position difference from impact source</param>
            <param name="yDiff">Vertical position difference from impact source</param>
            <param name="xI">Incoming horizontal velocity of the impact</param>
            <param name="yI">Incoming vertical velocity of the impact</param>
        </member>

        <member name="F:Grenade.blastForce">
            <summary>
            Physics knockback force applied to units caught in the explosion. Determines how far
            units are pushed away from the blast center. Defaults to 50 force units.
            </summary>
        </member>

        <member name="F:Grenade.damage">
            <summary>
            Base explosion damage dealt to units, terrain, and destructibles. Applied through
            various multipliers for different explosion zones. Defaults to 5 damage.
            </summary>
        </member>

        <member name="F:Grenade.damageType">
            <summary>
            Type of damage this grenade inflicts, determining how units resist or react to the
            explosion. Also used when damaging fragile objects during flight.
            </summary>
        </member>

        <member name="F:Grenade.firedBy">
            <summary>
            Reference to the unit that launched this grenade. Used for damage attribution,
            achievement tracking, and determining local ownership for networking. Set during
            initialization.
            </summary>
        </member>

        <member name="F:Grenade.friendlyFire">
            <summary>
            Determines if this grenade damages units on the same team as the thrower. When true,
            explosion damages all units. When false, only damages enemies. Defaults to true.
            </summary>
        </member>

        <member name="F:Grenade.panicCounter">
            <summary>
            Timer controlling when to trigger panic in nearby AI units. Decrements each frame
            when life is below 0.5 seconds, triggering Map.PanicUnits every 0.045 seconds to
            make enemies flee.
            </summary>
        </member>

        <member name="F:Grenade.playerNum">
            <summary>
            Identifies which player threw this grenade for damage attribution and scoring. Also
            determines trail color for players 0-3. Defaults to -1 for non-player grenades.
            </summary>
        </member>

        <member name="F:Grenade.range">
            <summary>
            Explosion radius in world units. Controls the area of effect for damage to units,
            terrain, and doodads. Also scales visual explosion effects. Defaults to 48 units.
            </summary>
        </member>

        <member name="F:Grenade.shootable">
            <summary>
            When true, this grenade can be targeted and detonated by projectiles. Registers with
            Map.RegisterShootableGrenade for AI targeting systems.
            </summary>
        </member>

        <member name="M:Grenade.GiveBrotatoAchievementOnKill">
            <summary>
            Marks this grenade to award the Hot Brotato achievement if it kills a mook. Called
            by special abilities or power-ups that enable achievement-granting grenades.
            </summary>
        </member>

        <member name="F:Grenade.giveBrotatoAwardIfIKillAMook">
            <summary>
            When true, awards the Hot Brotato achievement if this grenade kills a mook enemy.
            Checked during explosion damage and enemy bounce kills. Set via
            GiveBrotatoAchievementOnKill method by special abilities or power-ups.
            </summary>
        </member>

        <member name="F:Grenade.giveMartiniAchievement">
            <summary>
            When true, awards the Martini achievement when this grenade kills enemies by
            bouncing off them. Only triggers during successful enemy bounce kills, not regular
            explosions.
            </summary>
        </member>

        <member name="M:Grenade.Bounce(System.Boolean,System.Boolean)">
            <summary>
            Handles physics response when the grenade hits surfaces. Reduces velocities, applies
            angular friction for realistic rolling, interacts with doors, triggers ground
            effects like mines, and plays impact sounds based on collision force.
            </summary>
            <param name="bounceX">True if bouncing on the X axis (hit vertical surface)</param>
            <param name="bounceY">True if bouncing on the Y axis (hit horizontal surface)</param>
        </member>

        <member name="M:Grenade.BounceOffEnemies">
            <summary>
            Processes bouncing off enemy units when the grenade hits them from above. Checks if
            the grenade has sufficient downward velocity, then attempts to hit units below.
            Supports both single and multiple bounce modes. Applies upward velocity based on
            weight and reduces horizontal speed. Awards achievements for special bounce kills.
            </summary>
        </member>

        <member name="M:Grenade.CanBounceOnEnemies">
            <summary>
            Determines if the grenade has sufficient downward velocity to bounce off enemies.
            Prevents slow-moving grenades from triggering enemy bounces.
            </summary>
            <returns>True if downward velocity exceeds 120 units/second</returns>
        </member>

        <member name="M:Grenade.HitFragile">
            <summary>
            Detects and damages fragile objects in the grenade's path during flight. Uses
            velocity direction to check ahead for breakable objects on the fragile layer.
            Creates visual puff effects on impact and either bounces off doors or sends damage
            messages to other fragile objects like glass.
            </summary>
        </member>

        <member name="M:Grenade.Launch(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Primary method for spawning and launching grenades into the world. Handles complex
            wall collision detection to prevent grenades from spawning inside terrain. Registers
            the grenade as a fetchable object for AI awareness and initializes trail tracking.
            </summary>
            <param name="newX">Initial X position</param>
            <param name="newY">Initial Y position</param>
            <param name="xI">Initial horizontal velocity</param>
            <param name="yI">Initial vertical velocity</param>
        </member>

        <member name="M:Grenade.ReduceLife(System.Single)">
            <summary>
            Multiplies the grenade's remaining fuse time by the specified factor. Used to create
            shorter fuses for special grenade types or launch methods. Ensures a minimum life of
            0.01 seconds to prevent instant detonation.
            </summary>
            <param name="launchLifeM">Multiplier for the remaining life (0-1 reduces, &gt;1 extends)</param>
        </member>

        <member name="M:Grenade.RunMovement">
            <summary>
            Updates grenade physics each frame. Checks for collisions with fragile objects,
            handles bouncing off enemies if enabled, and processes base movement physics.
            </summary>
        </member>

        <member name="M:Grenade.SetMinLife(System.Single)">
            <summary>
            Ensures the grenade has at least the specified fuse time remaining. Used to prevent
            instant explosions when grenades are thrown or knocked.
            </summary>
            <param name="amount">Minimum life time in seconds</param>
        </member>

        <member name="M:Grenade.SetPosition">
            <summary>
            Updates the grenade's transform position. Simple override that calls the base
            implementation to maintain position synchronization.
            </summary>
        </member>

        <member name="M:Grenade.ThrowGrenade(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Launches a grenade that was previously held by a unit. Unparents the grenade, sets
            its position and velocity, resets visual effects, and ensures a minimum fuse time of
            0.7 seconds.
            </summary>
            <param name="XI">Horizontal throw velocity</param>
            <param name="YI">Vertical throw velocity</param>
            <param name="newX">Release X position</param>
            <param name="newY">Release Y position</param>
            <param name="_playerNum">Player number who threw the grenade</param>
        </member>

        <member name="P:Grenade.ShouldTimeslice">
            <summary>
            Indicates that grenades should not participate in time-slicing optimization. Always
            returns false to ensure grenades update every frame for accurate physics and timing.
            </summary>
        </member>

        <member name="F:Grenade.alreadyBouncedOffUnits">
            <summary>
            Tracks units this grenade has bounced off when bounceOffEnemiesMultiple is false.
            Prevents the same unit from being hit multiple times. List is populated during
            BounceOffEnemies calls.
            </summary>
        </member>

        <member name="F:Grenade.angularFrictionM">
            <summary>
            Multiplier for angular velocity calculations when useAngularFriction is enabled.
            Higher values create more spin from movement and impacts. Defaults to 1.0.
            </summary>
        </member>

        <member name="F:Grenade.bounceOffEnemies">
            <summary>
            Enables the grenade to bounce off enemy units when falling from above. Checked each
            frame during movement updates to trigger bounce detection.
            </summary>
        </member>

        <member name="F:Grenade.bounceOffEnemiesMultiple">
            <summary>
            When true, allows bouncing off the same enemy multiple times. When false, uses
            alreadyBouncedOffUnits list to track and prevent repeated bounces.
            </summary>
        </member>

        <member name="F:Grenade.bounceYOffset">
            <summary>
            Vertical offset applied during enemy bounce detection. Adjusts the collision check
            position relative to the grenade center. Defaults to 2 units upward.
            </summary>
        </member>

        <member name="F:Grenade.fragileLayer">
            <summary>
            Layer mask for detecting breakable objects like glass during flight. Set to
            "DirtyHippie" layer during initialization. Used by HitFragile method for collision
            detection.
            </summary>
        </member>

        <member name="F:Grenade.useAngularFriction">
            <summary>
            Enables realistic rotation physics when bouncing. When true, horizontal movement
            creates rotation and impacts affect spin based on the angularFrictionM multiplier.
            </summary>
        </member>

        <member name="F:Grenade.weight">
            <summary>
            Mass factor affecting physics calculations. Higher weight reduces knockback effects
            and bounce height. Used in velocity calculations for both throwing and impact
            responses. Defaults to 1.0.
            </summary>
        </member>

        <member name="M:Grenade.CreateWarningEffect">
            <summary>
            Spawns a red warning diamond effect at the grenade's position. Creates either a
            normal or large warning indicator based on the largeWarning flag setting.
            </summary>
        </member>

        <member name="M:Grenade.MakeEffects">
            <summary>
            Creates explosion visual and audio effects when the grenade detonates. Spawns either
            a huge or normal explosion based on the hugeExplosion flag, plays the death sound,
            and damages nearby destructible doodads.
            </summary>
        </member>

        <member name="M:Grenade.ResetTrail">
            <summary>
            Resets trail effect tracking to the current position. Prevents visual artifacts when
            the grenade is teleported or initially thrown by clearing the trail history.
            </summary>
        </member>

        <member name="M:Grenade.RunTrail">
            <summary>
            Updates the grenade's visual trail effect each frame. Supports two trail types:
            FireTrail creates spark particles along the path, while ColorTrail creates a colored
            line based on the throwing player's color and grenade velocity. Includes
            optimization to prevent excessive trail length.
            </summary>
        </member>

        <member name="M:Grenade.RunWarnings">
            <summary>
            Creates visual and audio warnings before explosion. Increases warning intensity as
            the fuse burns down, with faster flickering and higher pitch beeps when life drops
            below 0.5 seconds. Alternates grenade material and creates warning diamonds. Also
            triggers AI unit panic reactions.
            </summary>
        </member>

        <member name="F:Grenade.createdTrail">
            <summary>
            Reference to the active ProjectileTrail effect instance. Created when the grenade
            has sufficient velocity and destroyed when velocity drops too low. Used for
            ColorTrail type.
            </summary>
        </member>

        <member name="F:Grenade.dontMakeEffects">
            <summary>
            When true, skips creating visual explosion effects in the Death method. Used for
            silent explosions or when effects are handled externally.
            </summary>
        </member>

        <member name="F:Grenade.explosion">
            <summary>
            Standard explosion visual effect component. Assigned in Unity Inspector and likely
            triggered during the Death method for normal-sized explosions.
            </summary>
        </member>

        <member name="F:Grenade.explosionBig">
            <summary>
            Large explosion visual effect component. Assigned in Unity Inspector and likely
            triggered for grenades with enhanced explosion visuals.
            </summary>
        </member>

        <member name="F:Grenade.fire1">
            <summary>
            Visual fire effect component slot 1. Assigned in Unity Inspector for grenades with
            burning or fire trail effects. Controlled by FlickerFader component behavior.
            </summary>
        </member>

        <member name="F:Grenade.fire2">
            <summary>
            Visual fire effect component slot 2. Assigned in Unity Inspector for grenades with
            burning or fire trail effects. Controlled by FlickerFader component behavior.
            </summary>
        </member>

        <member name="F:Grenade.fire3">
            <summary>
            Visual fire effect component slot 3. Assigned in Unity Inspector for grenades with
            burning or fire trail effects. Controlled by FlickerFader component behavior.
            </summary>
        </member>

        <member name="F:Grenade.flickerCounter">
            <summary>
            Timer controlling the material swap rate for warning flashes. Increments each frame
            and triggers flashes at 0.0667 second intervals when life is below 0.5 seconds, or
            0.133 second intervals otherwise.
            </summary>
        </member>

        <member name="F:Grenade.hasHeroTrail">
            <summary>
            Flag indicating this grenade should display a hero-colored trail. Currently unused
            in base class but available for derived grenade types.
            </summary>
        </member>

        <member name="F:Grenade.hugeExplosion">
            <summary>
            When true, creates an enhanced explosion effect with additional visual elements and
            low-pass audio filtering. Used for special high-powered grenades.
            </summary>
        </member>

        <member name="F:Grenade.hugeExplosionLowPassM">
            <summary>
            Audio low-pass filter multiplier applied to huge explosion sound effects. Lower
            values create more muffled, bass-heavy explosion sounds. Used when hugeExplosion is
            true. Defaults to 0.1 for deep, rumbling explosions.
            </summary>
        </member>

        <member name="F:Grenade.largeWarning">
            <summary>
            When true, displays a larger warning diamond effect during countdown. Used for
            grenades with larger blast radius or special importance. Standard grenades use the
            normal size.
            </summary>
        </member>

        <member name="F:Grenade.lastTrailAlphaM">
            <summary>
            Alpha transparency multiplier for trail effects. Set to 0.5 when trail is reset,
            though current implementation doesn't actively use this value. Defaults to 0.1.
            Reserved for future trail fading effects.
            </summary>
        </member>

        <member name="F:Grenade.lastTrailX">
            <summary>
            Stores the X coordinate where the last trail segment was drawn. Used to calculate
            distance between trail points and prevent excessive trail length. Updated
            continuously during trail rendering.
            </summary>
        </member>

        <member name="F:Grenade.lastTrailY">
            <summary>
            Stores the Y coordinate where the last trail segment was drawn. Works with
            lastTrailX to track trail continuity and calculate segment distances for
            optimization.
            </summary>
        </member>

        <member name="F:Grenade.mainMaterial">
            <summary>
            The grenade's default visual material cached from the renderer at startup. Used for
            material swapping during warning flashes before explosion.
            </summary>
        </member>

        <member name="F:Grenade.mainMaterialShowing">
            <summary>
            Tracks which material is currently displayed during warning flashes. Toggles between
            true (main material) and false (other material) to create the flickering countdown
            effect before explosion. Defaults to true.
            </summary>
        </member>

        <member name="F:Grenade.otherMaterial">
            <summary>
            Alternate material for visual warning effects. Swapped with mainMaterial during the
            countdown phase to create a flashing warning effect before detonation.
            </summary>
        </member>

        <member name="F:Grenade.pulseCount">
            <summary>
            Counts the number of warning flashes during countdown. Used to trigger warning
            effects and beep sounds on odd-numbered pulses, creating a rhythmic warning pattern.
            </summary>
        </member>

        <member name="F:Grenade.shrapnel">
            <summary>
            Reference to shrapnel projectile prefab. Assigned in Unity Inspector for grenades
            that spawn shrapnel on explosion. Used by derived grenade types.
            </summary>
        </member>

        <member name="F:Grenade.smoke1">
            <summary>
            Smoke visual effect component slot 1. Assigned in Unity Inspector for smoke trails
            or explosion smoke. Likely triggered on explosion or during flight.
            </summary>
        </member>

        <member name="F:Grenade.smoke2">
            <summary>
            Smoke visual effect component slot 2. Assigned in Unity Inspector for smoke trails
            or explosion smoke. Likely triggered on explosion or during flight.
            </summary>
        </member>

        <member name="F:Grenade.trailDrawDelay">
            <summary>
            Frame counter that delays trail drawing after launch. Set to 2 frames on launch to
            prevent trail artifacts at spawn point. Decrements each frame until reaching 0.
            </summary>
        </member>

        <member name="F:Grenade.trailRenderer">
            <summary>
            Line renderer component for drawing colored trails. Configured in SetupGrenade to
            match the throwing player's color. Null for grenades without colored trails.
            </summary>
        </member>

        <member name="F:Grenade.trailType">
            <summary>
            Determines the visual trail style for this grenade. FireTrail creates spark
            particles along the flight path, while ColorTrail creates a colored line based on
            the throwing player.
            </summary>
        </member>

        <member name="M:Grenade.PlayDeathSound">
            <summary>
            Plays the grenade explosion sound effect at the default volume of 0.7.
            </summary>
        </member>

        <member name="M:Grenade.PlayDeathSound(System.Single)">
            <summary>
            Plays the grenade explosion sound effect at the specified volume level.
            </summary>
            <param name="v">Volume level for the explosion sound (0.0 to 1.0)</param>
        </member>

        <member name="M:Grenade.PlaySpecialSound(System.Single)">
            <summary>
            Plays special grenade sound effects positioned between the grenade and camera for
            better audibility. Used for unique grenade effects like cluster bomb separations.
            </summary>
            <param name="v">Volume level for the special sound (0.0 to 1.0)</param>
        </member>

        <member name="F:Grenade.maxVelocityBounceVolume">
            <summary>
            Impact velocity at which bounce sounds reach maximum volume. Used to scale volume
            between minimum and maximum based on impact force. Defaults to 210 units per second.
            </summary>
        </member>

        <member name="F:Grenade.minVelocityBounceSound">
            <summary>
            Minimum impact velocity required to play bounce sound effects. Prevents sounds from
            playing on gentle contacts. Defaults to 33 units per second.
            </summary>
        </member>

        <member name="F:Grenade.sound">
            <summary>
            Cached reference to the global Sound instance. Lazily initialized when first playing
            death sounds to avoid repeated GetInstance() calls. Used for performance
            optimization when playing explosion audio.
            </summary>
        </member>

        <member name="F:Grenade.soundHolder">
            <summary>
            Container for all grenade-related sound effects including defend sounds (knockback),
            hit sounds (bouncing), death sounds (explosion), special sounds, and greeting sounds
            (countdown beeps). Central audio management for the grenade.
            </summary>
        </member>

        <member name="M:Grenade.PackState(UnityStream)">
            <summary>
            Serializes the grenade's network state for synchronization. Packs the X/Y position
            and enabled state into the stream, then calls base packing for additional data.
            </summary>
            <param name="stream">The network stream to write state data to</param>
            <returns>The stream with serialized grenade state</returns>
        </member>

        <member name="M:Grenade.UnpackState(UnityStream)">
            <summary>
            Deserializes the grenade's network state from a stream. Reads position and enabled
            state, applies them to the grenade, then calls base unpacking for additional data.
            </summary>
            <param name="stream">The network stream to read state data from</param>
            <returns>The stream after reading grenade state</returns>
        </member>

        <member name="P:Grenade.FiredLocally">
            <summary>
            Determines if this grenade was fired by the local player rather than a remote
            networked player. Uses lazy evaluation to check if the firedBy unit is owned
            locally, falling back to the grenade's own ownership. Critical for preventing
            duplicate damage calculations in multiplayer.
            </summary>
        </member>

        <member name="M:Grenade.RunUpdate">
            <summary>
            Allows external code to force an immediate update cycle. Simply calls the Update
            method to process physics and effects outside the normal update loop.
            </summary>
        </member>

        <member name="M:Grenade.Update">
            <summary>
            Main update loop called each frame. Processes base physics updates, runs warning
            effects when the fuse is below 1 second, and updates the visual trail.
            </summary>
            <returns>Always returns true to continue updating</returns>
        </member>

        <member name="M:HeroController.Awake">
            <summary>
            Unity Awake method that initializes the HeroController singleton. Sets up the
            instance reference, registers network event handlers for player drops and
            disconnections, and initializes hero tracking collections. Also sets the initial
            spawn point if one exists in the scene.
            </summary>
        </member>

        <member name="M:HeroController.OnDestroy">
            <summary>
            Unity OnDestroy cleanup method. Unregisters network event handlers, clears the
            singleton instance reference, and disposes of all tracking collections to prevent
            memory leaks and ensure clean shutdown.
            </summary>
        </member>

        <member name="M:HeroController.Start">
            <summary>
            Unity Start method that initializes the HeroController. Sets up game state, loads
            input settings from PlayerPrefs, finds the spawn point, initializes perks system,
            spawns joined players, and begins the game sequence. Core initialization point for
            multiplayer hero management.
            </summary>
        </member>

        <member name="M:HeroController.Update">
            <summary>
            Main update loop for HeroController. Handles debug inputs, processes player drops,
            manages join messages, runs hero respawn logic, checks level completion, monitors
            player drop-ins, and updates time boost effects each frame.
            </summary>
        </member>

        <member name="P:HeroController.Instance">
            <summary>
            Gets the singleton instance of HeroController, creating it if necessary. Provides
            global access to the hero controller for managing player spawning and game state.
            Uses lazy initialization with FindObjectOfType if the instance is null.
            </summary>
            <returns>The singleton HeroController instance.</returns>
        </member>

        <member name="P:HeroController.InstanceExists">
            <summary>
            Gets whether a HeroController instance currently exists in the scene. Used to check
            availability before accessing the singleton instance to avoid unnecessary creation.
            </summary>
            <returns>True if an instance exists; otherwise, false.</returns>
        </member>

        <member name="F:HeroController.inst">
            <summary>
            Private static instance reference for the singleton pattern. Stores the single
            HeroController instance to ensure only one exists. Accessed through the public
            Instance property with lazy initialization.
            </summary>
        </member>

        <member name="F:HeroController.playerPrefabReference">
            <summary>
            Reference to the Player prefab GameObject used for instantiating new players.
            Contains the template for creating networked player instances when players join the
            game session.
            </summary>
        </member>

        <member name="F:HeroController.players">
            <summary>
            Static array holding all four possible Player instances. Central storage for player
            data, character references, and game state. Indexed by player number (0-3) for
            direct access to player information.
            </summary>
        </member>

        <member name="M:HeroController.AllBrosUseSteroids">
            <summary>
            Activates steroid power-up for all living players simultaneously. Applies different
            time boost behavior based on game mode (competitive vs cooperative). Includes global
            time slow and color shift effects for dramatic impact.
            </summary>
        </member>

        <member name="M:HeroController.GetCorpseExplosionChance">
            <summary>
            Gets the chance for corpses to explode from any playing player's upgrades. Returns
            the exploding corpse chance value from the first playing player found. Used for
            applying consistent corpse explosion mechanics across all players.
            </summary>
            <returns>The corpse explosion chance (0.0-1.0) or -1 if no players playing.</returns>
        </member>

        <member name="M:HeroController.GetPrimaryFireLevel(System.Int32)">
            <summary>
            Gets the primary fire upgrade level for a specific player. Retrieves the modified
            value from the player's inventory value orchestrator. Returns 0 for invalid player
            numbers or if no upgrades are active.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>The primary fire level (0 or higher).</returns>
        </member>

        <member name="M:HeroController.GetSecondaryFireLevel(System.Int32)">
            <summary>
            Gets the secondary fire (special ability) upgrade level for a specific player.
            Retrieves the modified value from the player's inventory value orchestrator. Returns
            0 for invalid player numbers or if no upgrades are active.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>The secondary fire level (0 or higher).</returns>
        </member>

        <member name="M:HeroController.OneBroUseSteroids(System.Int32)">
            <summary>
            Activates steroid power-up for a single player with default settings. Applies
            networked steroid effect, Time Bro boost for 0.5 seconds, global time slow, and
            color shift visual effect. Standard quick steroid activation.
            </summary>
            <param name="playerNum">The player number to apply steroids to.</param>
        </member>

        <member name="M:HeroController.OneBroUseSteroids(System.Int32,System.Single,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Activates steroid power-up for a single player with customizable parameters. Allows
            control over duration, visual effects, and whether to use high-five or standard time
            slow mechanics. Advanced steroid activation method.
            </summary>
            <param name="playerNum">The player number to apply steroids to.</param>
            <param name="duration">Duration of the steroid effect in seconds.</param>
            <param name="timeSlowColors">Whether to apply time slow color shift effect.</param>
            <param name="highFiveSlowDown">Use high-five time slow instead of standard.</param>
            <param name="timeSlowDuration">Duration of the time slow effect.</param>
        </member>

        <member name="M:HeroController.SetHeroInvulnerable(System.Int32,System.Single)">
            <summary>
            Sets a specific hero to invulnerable state for the specified duration. Validates the
            player number and checks that the player has a character instance before applying
            the invulnerability effect without showing halo or other visual indicators.
            </summary>
            <param name="playerNum">The player number to set invulnerable.</param>
            <param name="duration">Duration in seconds for the invulnerability effect.</param>
        </member>

        <member name="M:HeroController.SetHeroesWillComebackToLife(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets heroes within range to resurrect after death for the specified duration. This
            effect allows heroes to automatically respawn at their death location after being
            killed, useful for special game modes or power-ups.
            </summary>
            <param name="x">X coordinate of the center position.</param>
            <param name="y">Y coordinate of the center position.</param>
            <param name="range">Radius of the effect area.</param>
            <param name="duration">Duration in seconds for the resurrection effect.</param>
        </member>

        <member name="M:HeroController.SetHerosInvulnerable(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Sets all heroes within a specified range of a position to invulnerable state. Checks
            each player's distance from the center point and applies invulnerability if they are
            within the circular range. Optionally shows a visual halo effect.
            </summary>
            <param name="x">X coordinate of the center position.</param>
            <param name="y">Y coordinate of the center position.</param>
            <param name="range">Radius of the effect area.</param>
            <param name="duration">Duration in seconds for the invulnerability effect.</param>
            <param name="showHalo">Whether to display a visual halo effect on affected heroes.</param>
        </member>

        <member name="M:HeroController.SetOffscreenHeroesInvulnerable(System.Single)">
            <summary>
            Sets all offscreen heroes to invulnerable state for the specified duration. Loops
            through all players and applies invulnerability to characters that are not visible
            on screen. Also resets their teleport counter to -2 to prevent immediate
            teleportation.
            </summary>
            <param name="duration">Duration in seconds for the invulnerability effect.</param>
        </member>

        <member name="F:HeroController.timeBoostTime">
            <summary>
            Remaining duration of time manipulation effects. Tracks how long time dilation from
            Time Bro abilities or power-ups should continue. Decrements each frame and restores
            normal time when it reaches zero.
            </summary>
        </member>

        <member name="F:HeroController.ultraHealthyHeroes">
            <summary>
            Flag indicating if heroes have enhanced health. When true, heroes may have
            additional hit points or damage resistance. Used for special game modes or
            difficulty modifiers.
            </summary>
        </member>

        <member name="M:HeroController.SetAllControllerRumble(System.Single)">
            <summary>
            Sets controller vibration/rumble for all connected players simultaneously. Used for
            major events that should provide feedback to everyone, such as large explosions or
            environmental effects.
            </summary>
            <param name="amount">The intensity of the rumble effect (0-1 range) for all controllers.</param>
        </member>

        <member name="M:HeroController.SetControllerRumble(System.Int32,System.Single)">
            <summary>
            Sets controller vibration/rumble for a specific player. Provides haptic feedback
            through the controller to enhance game feel for explosions, impacts, or other
            significant events.
            </summary>
            <param name="playerNum">The player number whose controller should rumble.</param>
            <param name="amount">The intensity of the rumble effect (0-1 range).</param>
        </member>

        <member name="M:HeroController.AddHeroToAlreadyChosenHeroes(HeroType)">
            <summary>
            Adds a hero type to the list of already chosen heroes. Prevents duplicate entries
            and maintains the history of selected heroes for game modes that cycle through
            available characters.
            </summary>
            <param name="currentType">The hero type to add to the chosen list.</param>
        </member>

        <member name="M:HeroController.AddLife(System.Int32)">
            <summary>
            Adds one life to a specific player. Validates that the player exists and is actively
            playing before calling the player's AddLife method. Used for life pickups, rewards,
            or game mechanics that grant extra lives.
            </summary>
            <param name="playerNum">The player number to add a life to.</param>
        </member>

        <member name="M:HeroController.AddLocalPlayer(System.Int32,System.Int32)">
            <summary>
            Adds a new local player to the game session. Validates the controller isn't already
            in use, gets the player's username from the platform, and sends a join request to
            the server. Marks countdown as finished upon joining.
            </summary>
            <param name="playernum">The player slot to add to (-1 for next available).</param>
            <param name="controllerID">The controller ID for the new player.</param>
        </member>

        <member name="M:HeroController.AddPlayer(System.Int32,System.Int32,PID)">
            <summary>
            RPC method that adds a new player to the game. For local players, instantiates the
            player prefab with network buffering. For remote players, resets ping sampling. Also
            ensures enough bros are unlocked for all joined players.
            </summary>
            <param name="playerNum">The slot number for the new player.</param>
            <param name="controllerNum">The controller ID for the new player.</param>
            <param name="playerPID">The network player ID.</param>
        </member>

        <member name="M:HeroController.AssignPlayerCharacter(System.Int32,TestVanDammeAnim)">
            <summary>
            Assigns a character instance to a player who is not currently alive. Used during
            respawn operations to link the new character to the player's data structure. Only
            works if the player isn't already alive.
            </summary>
            <param name="playerNum">The player number to assign the character to.</param>
            <param name="character">The TestVanDammeAnim character instance to assign.</param>
        </member>

        <member name="M:HeroController.AttachHeroToHelicopter(UnityEngine.Vector3,System.Single,TestVanDammeAnim,Helicopter,System.Boolean)">
            <summary>
            Attaches a hero to a helicopter for extraction or transport. Disables the hero's
            normal functionality, parents them to the helicopter transform, and positions them
            appropriately. Handles special cases for different hero types.
            </summary>
            <param name="localPosition">Local position relative to helicopter for attachment.</param>
            <param name="direction">Direction the hero should face (-1 or 1).</param>
            <param name="hero">The hero character to attach to the helicopter.</param>
            <param name="heli">The helicopter to attach the hero to.</param>
            <param name="startExplosions">Whether to trigger explosion effects on attachment.</param>
        </member>

        <member name="M:HeroController.AutoJoinLocalHost">
            <summary>
            Automatically joins the primary user as the host player. Gets the primary controller
            from the platform, uses the player name from options, and directly calls the join
            game request for immediate hosting.
            </summary>
        </member>

        <member name="M:HeroController.ChangeBro(System.Int32,HeroType)">
            <summary>
            Changes a player's hero type mid-game. Creates a new hero of the specified type at
            the current position, transfers ownership, and destroys the old hero. Handles
            special cases for vehicles and maintains game state consistency.
            </summary>
            <param name="playerNum">The player number to change heroes for.</param>
            <param name="newHeroType">The new hero type to switch to.</param>
        </member>

        <member name="M:HeroController.DecreaseAmmo">
            <summary>
            Resets ammunition tracking for all players to -1. Called during game state
            transitions to clear previous ammo counts before respawning or starting new rounds.
            </summary>
        </member>

        <member name="M:HeroController.DeregisterPlayer(PID)">
            <summary>
            Removes a player from the game by their PID. Searches through all player slots to
            find the matching PID and calls DropoutRPC to remove them.
            </summary>
            <param name="pid">The PID of the player to deregister.</param>
        </member>

        <member name="M:HeroController.DetachHeroFromHelicopter(TestVanDammeAnim)">
            <summary>
            Detaches a hero from a helicopter and restores normal functionality. Re-enables
            physics, unparents from helicopter, and allows the hero to resume normal gameplay.
            Updates the player's helicopter status accordingly.
            </summary>
            <param name="hero">The hero character to detach from the helicopter.</param>
        </member>

        <member name="M:HeroController.Dropout(System.Int32,System.Boolean)">
            <summary>
            Main dropout logic for removing a player from the game. Handles pause menu cleanup
            if the player was pausing, and optionally sends an RPC to notify all other players
            of the dropout.
            </summary>
            <param name="playerNum">The player number to drop out.</param>
            <param name="sendRPC">Whether to send network notification of the dropout.</param>
        </member>

        <member name="M:HeroController.DropoutRPC(System.Int32)">
            <summary>
            RPC method that performs the actual player removal. Destroys the player's
            GameObject, resets controller colors for local players, clears all player data,
            removes from death order, and marks local players as dropped out.
            </summary>
            <param name="playerNum">The player number to remove from the game.</param>
        </member>

        <member name="M:HeroController.FindAndFlashNextSpawnDoor(System.Int32)">
            <summary>
            Finds and highlights the next spawn door for a player in Suicide Horde mode.
            Randomly selects from available mook doors that are visible and not destroyed,
            ensuring no duplicate assignments. Flashes the door with the player's color.
            </summary>
            <param name="playerNum">The player number to find a spawn door for.</param>
        </member>

        <member name="M:HeroController.FlagPlayerToDrop(System.Int32)">
            <summary>
            Flags a player for removal during the next update cycle. Adds the player number to a
            pending drop list, preventing duplicate entries. Used for deferred player removal to
            avoid mid-frame state issues.
            </summary>
            <param name="playerNum">The player number to flag for dropping.</param>
        </member>

        <member name="M:HeroController.FlashSpecialAmmo(System.Int32)">
            <summary>
            Triggers a visual flash effect on the special ammunition display in the player's
            HUD. Used to draw attention to ammo changes or special events.
            </summary>
            <param name="playerNum">The player number whose ammo display should flash.</param>
        </member>

        <member name="M:HeroController.GetCurrentHeroType(System.Int32)">
            <summary>
            Gets the current hero type for a specific player. Returns None if the player doesn't
            exist or has no hero type assigned.
            </summary>
            <param name="playerNum">The player number to get hero type for.</param>
            <returns>The current HeroType or HeroType.None if not found.</returns>
        </member>

        <member name="M:HeroController.GetDefaultPlayerName(System.Int32)">
            <summary>
            Generates a default player name based on the player ID. Returns names in the format
            "P1", "P2", etc. for players who haven't set custom names.
            </summary>
            <param name="playerID">The zero-based index of the player.</param>
            <returns>A default name string like "P1" for player 0.</returns>
        </member>

        <member name="M:HeroController.GetFireKeyDown(System.Int32@)">
            <summary>
            Detects if any controller is pressing the join game button (fire key). Excludes
            input from the DaisyWheel controller to prevent menu conflicts. Updates the
            controllerNum reference with the pressing controller's ID.
            </summary>
            <param name="controllerNum">Output parameter that receives the controller number
                pressing fire.</param>
            <returns>True if a valid controller pressed the join button; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.GetHeroColor(System.Int32)">
            <summary>
            Gets the color associated with a specific player number. Returns predefined colors
            for players 0-3 with additional colors available. Uses a switch with offset to
            provide unique colors for each player slot. Colors: Blue, Red, Orange, Purple.
            </summary>
            <param name="playerNum">The player number to get color for (0-3).</param>
            <returns>The Color associated with the player number.</returns>
        </member>

        <member name="M:HeroController.GetHeroColorName(System.String)">
            <summary>
            Gets the localized color name for a specific player number. Returns translated
            strings for "Blue", "Red", "Orange", and "Purple" based on player index. Falls back
            to "WHITE" for invalid player numbers.
            </summary>
            <param name="playerNum">The player number to get color name for.</param>
            <returns>The localized color name string.</returns>
        </member>

        <member name="M:HeroController.GetHeroName(HeroType)">
            <summary>
            Converts a HeroType enum value to its display name string. Provides proper
            formatting and spacing for hero names like "B.A. Broracus", "Bro Hard", etc. Falls
            back to the enum's ToString() for unhandled types.
            </summary>
            <param name="type">The HeroType to get the display name for.</param>
            <returns>The formatted display name of the hero.</returns>
        </member>

        <member name="M:HeroController.GetHeroPrefab(HeroType)">
            <summary>
            Retrieves the prefab for a specific hero type from the theme's hero collection.
            Returns the TestVanDammeAnim prefab that can be instantiated to create the hero
            character.
            </summary>
            <param name="heroType">The hero type to get the prefab for.</param>
            <returns>The hero prefab or null if not found.</returns>
        </member>

        <member name="M:HeroController.GetHeroType(System.Int32,System.Collections.Generic.List{HeroType},System.Collections.Generic.List{HeroType},System.Boolean)">
            <summary>
            Determines the next hero type for a player based on game mode and availability.
            Handles forced hero mode, random selection, elimination mode cycling, and
            yet-to-be-seen hero prioritization. Complex logic for fair hero distribution.
            </summary>
            <param name="playerNum">The player requesting a hero.</param>
            <param name="unlockedBros">List of all unlocked hero types.</param>
            <param name="yetToBeSeenUnlockedHereos">Heroes unlocked but not yet played.</param>
            <param name="ignoreYetToBeSeenHeroes">Whether to skip unseen hero prioritization.</param>
            <returns>The selected HeroType for the player.</returns>
        </member>

        <member name="M:HeroController.GetLastSpecialAmmo(System.Int32)">
            <summary>
            Gets the last recorded special ammunition count for a player. Returns the stored
            value or 0 if no ammo count was previously recorded.
            </summary>
            <param name="playerNum">The player number to get ammo for.</param>
            <returns>The last special ammo count or 0 if none recorded.</returns>
        </member>

        <member name="M:HeroController.GetMostRightHero">
            <summary>
            Finds and returns the hero character that is positioned furthest to the right. Only
            considers alive heroes and compares their X positions to find the rightmost one.
            </summary>
            <returns>The TestVanDammeAnim hero furthest right, or null if none alive.</returns>
        </member>

        <member name="M:HeroController.GetNextUnusedPlayerNumber">
            <summary>
            Finds the first available player slot that is not currently in use. Scans through
            all four slots and returns the index of the first one where playersPlaying is false.
            Used when adding new players to find where to place them.
            </summary>
            <returns>The first available player slot (0-3) or -1 if all slots are full.</returns>
        </member>

        <member name="M:HeroController.GetNthAvailableSlot(System.Int32)">
            <summary>
            Finds the Nth available player slot that is not currently occupied. Scans through
            all four player slots and counts empty slots until reaching the requested index.
            Used for assigning new players to available positions.
            </summary>
            <param name="n">The zero-based index of the available slot to find.</param>
            <returns>Player slot number (0-3) or -1 if not enough slots available.</returns>
        </member>

        <member name="M:HeroController.GetNthLocalPlayerPlaying(System.Int32)">
            <summary>
            Gets the player number of the Nth local player who is actively playing. Counts only
            local players (IsMine) who have joined the game. Used for split-screen and local
            co-op player management.
            </summary>
            <param name="n">The zero-based index of the local player to find.</param>
            <returns>Player number (0-3) of the Nth local player or -1 if not found.</returns>
        </member>

        <member name="M:HeroController.GetPidFromControl(System.Int32)">
            <summary>
            Maps a controller ID to its corresponding network Player ID (PID). Used to identify
            which network player corresponds to a given local controller input for proper
            multiplayer synchronization.
            </summary>
            <param name="controlID">The local controller ID to map.</param>
            <returns>The PID enum value for the controller, or PID.NoID if not found.</returns>
        </member>

        <member name="M:HeroController.GetPlayerName(System.Int32)">
            <summary>
            Retrieves the name of a specific player. Returns either the custom name set via
            SetPlayerName or the default name if none was set.
            </summary>
            <param name="index">The player index to get the name for.</param>
            <returns>The player's name string.</returns>
        </member>

        <member name="M:HeroController.GetPlayerNumForControllerID(System.Int32)">
            <summary>
            Gets the player number associated with a specific controller ID. Only checks local
            players (IsMine) and returns -1 if the controller is not assigned to any player.
            Used for mapping controller input to the correct player.
            </summary>
            <param name="controllerID">The controller ID to look up.</param>
            <returns>Player number (0-3) or -1 if not found.</returns>
        </member>

        <member name="M:HeroController.GetPlayerUsingController(System.Int32)">
            <summary>
            Finds the Player instance that is using a specific controller ID. Only returns local
            players (IsMine) that match the controller number. Used for mapping controller input
            to the correct player object.
            </summary>
            <param name="controllerID">The controller ID to search for.</param>
            <returns>The Player using the controller or null if not found.</returns>
        </member>

        <member name="M:HeroController.GetSpecialAmmo(System.Int32,System.Int32)">
            <summary>
            Gets the appropriate special ammunition count for a player, choosing between the
            current count and the last recorded count based on which is higher. Used to maintain
            ammo across respawns.
            </summary>
            <param name="playerNum">The player number to get ammo for.</param>
            <param name="currentSpecialAmmo">The current special ammo count.</param>
            <returns>The maximum of current and last recorded ammo counts.</returns>
        </member>

        <member name="M:HeroController.GiveAllLifelessPlayersALife">
            <summary>
            Gives one life to all players who are currently at zero lives. Loops through all
            playing players and grants a life to those who have no lives remaining, preventing
            complete elimination from the game.
            </summary>
        </member>

        <member name="M:HeroController.HaveAllHerosBeenInstantiated">
            <summary>
            Checks whether all active players have had their hero characters instantiated. Used
            as a readiness check before starting gameplay to ensure all players have spawned
            characters in the scene.
            </summary>
            <returns>True if all playing players have character instances; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsControIdRegisteredToPID(System.Int32,PID)">
            <summary>
            Checks if a controller ID is already registered to a specific network player ID.
            Prevents the same controller-PID combination from joining multiple times, ensuring
            each network player has only one slot.
            </summary>
            <param name="controlId">The controller ID to check.</param>
            <param name="pid">The player network ID to check against.</param>
            <returns>True if this controller-PID combination is already registered; otherwise,
                false.</returns>
        </member>

        <member name="M:HeroController.IsControllerIDUsed(System.Int32)">
            <summary>
            Checks if a controller ID is already assigned to an active player. Used internally
            to prevent duplicate controller assignments when players join the game.
            </summary>
            <param name="controllerID">The controller ID to check.</param>
            <returns>True if the controller is already in use; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerActiveForControllerID(System.Int32)">
            <summary>
            Checks if the player using a specific controller is active and alive with lives
            remaining. More comprehensive than just checking if the controller is in use, this
            ensures the player can actually participate in gameplay.
            </summary>
            <param name="controllerID">The controller ID to check.</param>
            <returns>True if the player is active, alive, and has lives; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerPlaying(System.Int32)">
            <summary>
            Checks whether a specific player is currently active in the game. Used to determine
            which player slots are occupied for spawning and input handling.
            </summary>
            <param name="index">The player index to check.</param>
            <returns>True if the player at the given index is playing; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsTypeInUse(HeroType)">
            <summary>
            Checks if a specific hero type is currently being used by any player. Iterates
            through all playing players to see if any have the specified hero type assigned.
            Used to prevent duplicate hero selection.
            </summary>
            <param name="typeTocheck">The HeroType to check for usage.</param>
            <returns>True if the hero type is in use; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.KickPlayersIfHeHasNotJoined(PID)">
            <summary>
            Initiates a timeout check for a player who is expected to join. Starts a coroutine
            that will kick the player if they haven't joined within the timeout period (2
            seconds).
            </summary>
            <param name="playerPid">The PID of the player to monitor for joining.</param>
        </member>

        <member name="M:HeroController.KickPlayersIfHeHasNotJoinedRoutine(PID)">
            <summary>
            Coroutine that waits 2 seconds then checks if a player has joined. If the player's
            PID is not found in the active players list, sends a kick command to remove them
            from the session.
            </summary>
            <param name="playerPid">The PID of the player to check and potentially kick.</param>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>

        <member name="M:HeroController.MonitorPlayerDropin(System.Int32)">
            <summary>
            Monitors a potential player slot for controller input to join the game. Checks for
            fire button press from a logged-in controller and initiates the join process if
            valid input is detected.
            </summary>
            <param name="playernum">The player slot number to monitor for drop-in.</param>
        </member>

        <member name="M:HeroController.PlayerExists(System.Int32)">
            <summary>
            Checks if a player exists and has valid data at the specified player number.
            Verifies both that the player object is not null and that it reports existing
            through its Exists() method.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player exists with valid data; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.RecieveHeroTypeFromMaster(HeroType,System.Int32,HeroType[],Ack)">
            <summary>
            Client-side RPC that receives the hero type assignment from the master. Updates the
            local hero type, synchronizes the already-chosen heroes list, and triggers the spawn
            process for the assigned hero.
            </summary>
            <param name="nextHeroTypeRecieved">The hero type assigned by the master.</param>
            <param name="playerNum">The player number receiving the assignment.</param>
            <param name="updatedHeroAlreadyChosenTypes">Updated list of heroes already chosen.</param>
            <param name="ackResponse">Network acknowledgment response.</param>
        </member>

        <member name="M:HeroController.RegisterHeroToPlayer(TestVanDammeAnim,System.Int32,HeroType)">
            <summary>
            Registers a spawned hero character to a specific player slot. Links the hero
            instance to the player data, activates the HUD, sets the hero type, and handles
            rescue bro visibility. Core method for establishing the player-hero connection.
            </summary>
            <param name="hero">The TestVanDammeAnim hero instance to register.</param>
            <param name="playerNum">The player number to register the hero to.</param>
            <param name="heroTypeEnum">The type of hero being registered.</param>
        </member>

        <member name="M:HeroController.RequestAllPlayerData(PID,System.Boolean)">
            <summary>
            RPC method that sends complete player data to a specific network target. Broadcasts
            all player slots' information including playing status, lives (optionally), and
            special ammo counts. Used when players join to synchronize game state.
            </summary>
            <param name="targetId">The network PID to send the data to.</param>
            <param name="requestLives">Whether to include life counts in the synchronization.</param>
        </member>

        <member name="M:HeroController.RequestHeroTypeFromMaster(System.Int32,System.Boolean)">
            <summary>
            Client-side method to request a hero type assignment from the master/host. Sends
            available hero types and preferences to the master who will assign an appropriate
            hero based on game rules and availability.
            </summary>
            <param name="PlayerNum">The player number requesting a hero.</param>
            <param name="ignoreYetToBeSeenHeroes">Whether to ignore heroes the player hasn't
                unlocked yet.</param>
        </member>

        <member name="M:HeroController.RequestHeroTypeFromMasterRPC(PID,System.Int32,HeroType[],HeroType,HeroType[],Ack,System.Boolean)">
            <summary>
            Server-side RPC that processes hero type requests from clients. Determines the
            appropriate hero based on game mode, availability, and player preferences, then
            sends the assignment back to the requesting client.
            </summary>
            <param name="Requestee">The PID of the requesting player.</param>
            <param name="PlayerNum">The player slot number.</param>
            <param name="unlockedTypes">Array of heroes the player has unlocked.</param>
            <param name="preferedNextHero">The player's preferred hero choice.</param>
            <param name="yetToBeSeenUnlockedHereos">Heroes unlocked but not yet seen by player.</param>
            <param name="ackRequest">Network acknowledgment request.</param>
            <param name="ignoreYetToBeSeenHeroes">Whether to skip unseen heroes.</param>
        </member>

        <member name="M:HeroController.RequestJoinGame(System.Int32,PID,System.String)">
            <summary>
            Processes a request to join the game from a client. Host-only method that validates
            the request, assigns an available player slot, broadcasts the addition to all
            players, and requests player data synchronization. Prevents duplicate joins and
            handles full games.
            </summary>
            <param name="controllerNum">The controller number of the joining player.</param>
            <param name="requesteeID">The network PID of the requesting player.</param>
            <param name="playerName">The display name of the joining player.</param>
        </member>

        <member name="M:HeroController.RestartAllHeroesBubbles">
            <summary>
            Shows the start bubble animation for all living heroes. Creates visual feedback at
            level start or after checkpoints to indicate player positions and readiness.
            </summary>
        </member>

        <member name="M:HeroController.SetAllHeroesImmuneToOutOfBounds">
            <summary>
            Makes all living heroes immune to out-of-bounds death. Prevents heroes from dying
            when they go outside level boundaries, used during transitions or special sequences.
            </summary>
        </member>

        <member name="M:HeroController.SetAllHeroesInvulnerable(System.Single)">
            <summary>
            Sets all living heroes to invulnerable state for the specified duration. Loops
            through all player slots and applies invulnerability to each active character. Used
            for level transitions or special events.
            </summary>
            <param name="duration">Duration in seconds for the invulnerability effect.</param>
        </member>

        <member name="M:HeroController.SetIsPlaying(System.Int32,System.Boolean)">
            <summary>
            Updates a player's playing status. Synchronizes with the platform controller,
            updates network room information, and manages player state. Handles both joining and
            leaving players with proper platform integration.
            </summary>
            <param name="index">The player index to update.</param>
            <param name="isPlaying">True if the player is joining; false if leaving.</param>
        </member>

        <member name="M:HeroController.SetLives(System.Int32,System.Int32)">
            <summary>
            Sets the number of lives for one or all players. Can target a specific player or set
            lives for all players when playerNum is -1. Updates both the lives count and any
            powerups that track lives.
            </summary>
            <param name="playerNum">The player to set lives for, or -1 for all players.</param>
            <param name="livesCount">The number of lives to set.</param>
        </member>

        <member name="M:HeroController.SetOriginalSpecialAmmoCount(System.Int32,System.Int32)">
            <summary>
            Sets the original special ammunition count displayed in the HUD. Updates the player
            HUD's tracking of the base ammo count for display purposes, separate from the actual
            current ammo.
            </summary>
            <param name="playerNum">The player number to update HUD for.</param>
            <param name="count">The original ammo count to display.</param>
        </member>

        <member name="M:HeroController.SetPlayerCharacter(System.Int32,TestVanDammeAnim)">
            <summary>
            Assigns a character instance to a specific player slot. Links the spawned
            TestVanDammeAnim character to the player's data for tracking and control.
            </summary>
            <param name="index">The player index to assign the character to.</param>
            <param name="character">The TestVanDammeAnim character instance to assign.</param>
        </member>

        <member name="M:HeroController.SetPlayerName(System.Int32,System.String)">
            <summary>
            Sets a custom name for a specific player. Overwrites the default "P1" style names
            with player-chosen or platform-provided names.
            </summary>
            <param name="index">The player index to set the name for.</param>
            <param name="pName">The custom name to assign to the player.</param>
        </member>

        <member name="M:HeroController.SetSpecialAmmo(System.Int32,System.Int32)">
            <summary>
            Sets the special ammunition count for a specific player. Updates the ammo tracking
            array if the count is non-negative, used for restoring ammo counts after respawn or
            power-ups.
            </summary>
            <param name="playerNum">The player number to set ammo for.</param>
            <param name="specialAmmo">The special ammo count to set.</param>
        </member>

        <member name="M:HeroController.SpawnJoinedPlayers">
            <summary>
            Spawns hero characters for all joined players who haven't been spawned yet. Handles
            different game modes (BroDown, SuicideHorde, etc.) with appropriate spawn behavior.
            Uses RPC calls to synchronize player addition across the network.
            </summary>
        </member>

        <member name="M:HeroController.SpawnSuicideBro(System.Int32)">
            <summary>
            Spawns a player in Suicide Horde mode. Calls the player's RespawnBro method without
            checkpoint and clears any associated spawn door reference. Used specifically for the
            Suicide Horde game mode's unique spawning system.
            </summary>
            <param name="playerNum">The player number to spawn as suicide bro.</param>
        </member>

        <member name="M:HeroController.UpdatePlayerData(System.Int32,System.Boolean,PID,System.String,System.Int32)">
            <summary>
            RPC method that updates all player data for a specific slot. Synchronizes player
            information across the network including playing status, network ID, name, and
            controller assignment. Core method for keeping player data consistent.
            </summary>
            <param name="index">The player slot index to update.</param>
            <param name="isPlaying">Whether the player is actively playing.</param>
            <param name="pid">The network player ID.</param>
            <param name="playerName">The player's display name.</param>
            <param name="controller">The controller ID assigned to this player.</param>
        </member>

        <member name="M:HeroController.UpdatePlayerUserData(System.Int32,System.Int32,System.String)">
            <summary>
            Updates a player's controller and name information and broadcasts the change to
            other players. Also updates the primary user ID for single-player scenarios. Used
            when players change controllers or update their names mid-game.
            </summary>
            <param name="playerNum">The player number to update.</param>
            <param name="controllerNum">The new controller ID.</param>
            <param name="playerName">The new player name.</param>
        </member>

        <member name="F:HeroController.BotBrainLeader">
            <summary>
            Specifies which player number the bot brain should follow. When using AI control,
            bots will follow and assist the specified player. Initialized to -1 (no leader) for
            each slot.
            </summary>
        </member>

        <member name="F:HeroController.PIDS">
            <summary>
            Network Player IDs for each player slot. Maps local player indices to network
            identities for multiplayer synchronization. Initialized to NoID and updated when
            players join. Critical for network communication.
            </summary>
        </member>

        <member name="F:HeroController.UseBotBrain">
            <summary>
            Tracks whether each player slot is using AI bot brain control. When true, the player
            is controlled by AI instead of human input. Used for bot players in single player or
            when players disconnect.
            </summary>
        </member>

        <member name="F:HeroController.ammoCounts">
            <summary>
            Tracks current special ammunition counts for each player. Initialized to -1 to
            indicate no ammo data. Used for maintaining ammo state across respawns and for HUD
            display. Array indexed by player number.
            </summary>
        </member>

        <member name="F:HeroController.lastAmmoCounts">
            <summary>
            Stores the last known special ammunition count for each player. Used to restore ammo
            after respawn or to track ammo changes. Helps maintain ammo persistence across
            death/respawn cycles.
            </summary>
        </member>

        <member name="F:HeroController.playerControllerIDs">
            <summary>
            Maps player slots to physical controller IDs. Tracks which gamepad or input device
            controls each player. Initialized to -1 (no controller) and updated when players
            join with their controller ID.
            </summary>
        </member>

        <member name="F:HeroController.playerNames">
            <summary>
            Stores display names for each player slot. Can be custom names from platform
            profiles or default names like "P1". Initialized as empty strings and updated when
            players join or change names.
            </summary>
        </member>

        <member name="F:HeroController.playersPlaying">
            <summary>
            Private array tracking which player slots are actively in the game. True indicates
            the slot is occupied by a joined player, false means empty. Core state for player
            management.
            </summary>
        </member>

        <member name="M:HeroController.AreAllHerosDead">
            <summary>
            Checks if all player heroes are currently dead. Used to determine game over
            conditions or trigger respawn sequences when no players remain alive.
            </summary>
            <returns>True if no players are alive; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.AreAllOtherHerosDead(System.Int32)">
            <summary>
            Checks if all heroes except the specified player are dead. Note: Current
            implementation has a bug and always returns false due to misplaced return statement.
            Intended to check if only one player remains alive.
            </summary>
            <param name="playerNum">The player number to exclude from the death check.</param>
            <returns>Always returns false due to implementation bug.</returns>
        </member>

        <member name="M:HeroController.AtLeastOnePlayerStillHasALife">
            <summary>
            Checks if any playing player has at least one life remaining. Used to determine if
            the game should continue or trigger game over. Returns true as long as any player
            can still respawn.
            </summary>
            <returns>True if at least one player has lives remaining; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.GetFirstHeroAlive">
            <summary>
            Finds the first player who has a living hero character. Scans through all player
            slots in order and returns the index of the first one with an alive character.
            Defaults to 0 if no living heroes found.
            </summary>
            <returns>The player number of the first living hero, or 0 if none alive.</returns>
        </member>

        <member name="M:HeroController.GetFirstPlayerPosition(System.Int32)">
            <summary>
            Gets the position of the first living player other than the specified one. Used for
            finding ally positions for AI or camera logic. Falls back to checkpoint position if
            no other living players exist.
            </summary>
            <param name="ignorePlayerNum">The player number to exclude from the search.</param>
            <returns>Vector2 position of the first other living player or checkpoint position.</returns>
        </member>

        <member name="M:HeroController.GetLocalPlayerCount">
            <summary>
            Gets the count of local players (non-network players) in the game. Checks the IsMine
            property of each player's PID to identify local vs remote players. Used for
            split-screen and local co-op scenarios.
            </summary>
            <returns>The number of local players (0-4).</returns>
        </member>

        <member name="M:HeroController.GetPlayerLives(System.Int32)">
            <summary>
            Gets the number of lives remaining for a specific player. Returns 0 if the player
            doesn't exist or isn't playing.
            </summary>
            <param name="playerNum">The player number to get lives for.</param>
            <returns>The number of lives remaining for the player.</returns>
        </member>

        <member name="M:HeroController.GetPlayersAliveCount">
            <summary>
            Counts the number of players who are currently alive. Checks each playing player to
            see if they have a character instance that is alive. Used for gameplay logic that
            depends on active player count.
            </summary>
            <returns>The number of players with living characters.</returns>
        </member>

        <member name="M:HeroController.GetPlayersOnHelicopterAmount">
            <summary>
            Counts players who are both alive and currently on the extraction helicopter. Used
            for level completion checks to ensure all players have reached the extraction point
            before ending the level.
            </summary>
            <returns>The number of living players on the helicopter.</returns>
        </member>

        <member name="M:HeroController.GetPlayersPlayingCount">
            <summary>
            Gets the total number of players currently marked as playing. Counts all players
            with isPlaying flag set to true, regardless of whether they are alive or have
            spawned characters.
            </summary>
            <returns>The count of players currently in the game.</returns>
        </member>

        <member name="M:HeroController.GetTotalLives">
            <summary>
            Calculates the total remaining lives across all playing players. Sums up the Lives
            count for each active player to determine overall lives pool for game over
            conditions.
            </summary>
            <returns>The total number of lives remaining for all players.</returns>
        </member>

        <member name="M:HeroController.HasJustStarted">
            <summary>
            Checks if the game has just started by testing if input is still delayed. Returns
            true during the initial game startup period before player input is enabled, used to
            prevent premature actions.
            </summary>
            <returns>True if the game just started and input is delayed; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.HaveAllPlayersHaveSpawned">
            <summary>
            Checks if all players have completed spawning and are no longer in first deployment
            state. Game mode aware, checking only the expected number of players for BroDown or
            SuicideHorde modes.
            </summary>
            <returns>True if all expected players have spawned; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.HaveAllPlayersJoined">
            <summary>
            Checks if all players who are supposed to be playing have joined the game. Considers
            different game modes (BroDown, SuicideHorde) to determine expected player count.
            Sets AllPlayersHaveJoined field when all expected players join.
            </summary>
            <returns>True if all expected players have joined; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsAnyHeroDead">
            <summary>
            Checks if any playing hero is currently dead. Only considers players who are
            actively playing, ignoring empty slots. Used for respawn timing logic.
            </summary>
            <returns>True if any playing player is dead; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsAnyPlayerDead">
            <summary>
            Checks if any active player is currently dead. Only considers players who are marked
            as playing, ignoring empty slots. Used for game logic that triggers when at least
            one player needs respawning.
            </summary>
            <returns>True if any playing player is dead; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsDead(System.Int32)">
            <summary>
            Protected method that checks if a specific player is dead. Returns true if the
            player exists but has no living character instance, indicating they are awaiting
            respawn.
            </summary>
            <param name="playerNum">The player number to check death status for.</param>
            <returns>True if the player is dead; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlaying(System.Int32)">
            <summary>
            Checks if a specific player slot is active and playing. Simple accessor for the
            player's isPlaying flag without additional validation.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player is marked as playing; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.NumberOfPlayers">
            <summary>
            Counts the total number of players currently in the game. Includes both local and
            remote players who have joined but may not necessarily be alive. Used for game logic
            that depends on participant count.
            </summary>
            <returns>The total number of players marked as playing (0-4).</returns>
        </member>

        <member name="M:HeroController.NumberOfPlayersOnThisPC">
            <summary>
            Counts only local players on this machine. Checks each player's PID to determine if
            they belong to the local client. Used for split-screen management and local input
            handling.
            </summary>
            <returns>The number of local players (0-4).</returns>
        </member>

        <member name="M:HeroController.PlayerHasALife(System.Int32)">
            <summary>
            Checks if a specific player has any lives remaining. Used to determine if a player
            can still respawn after death.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player has at least one life; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.PlayerHasDied(System.Int32)">
            <summary>
            Public entry point for handling player death. Manages the complete death process
            including life deduction, death order tracking, game over checks, avatar updates,
            and network synchronization through RPC calls.
            </summary>
            <param name="playerNum">The player number who died.</param>
        </member>

        <member name="M:HeroController.PlayerHasDiedRPC(System.Int32)">
            <summary>
            RPC method that notifies all clients when a player dies. Updates death tracking,
            manages lives, handles game over conditions, and coordinates the death state across
            the network. Only processes on non-host clients.
            </summary>
            <param name="playerNum">The player number who died.</param>
        </member>

        <member name="M:HeroController.PlayerIsAlive(System.Int32)">
            <summary>
            Simple check to determine if a player is currently alive. Verifies the player is
            playing and has a living character instance in the game world.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player has a living character; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.PlayerIsBeingRescuedOrRespawned(System.Int32)">
            <summary>
            Checks if a player is currently in the process of being rescued or respawned. Used
            to prevent interference with ongoing rescue operations and to track player state
            during transitions.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player is being rescued or respawned; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.PlayerIsInvulnerable(System.Int32)">
            <summary>
            Checks if a specific player is currently invulnerable. Returns true only if the
            player is alive and their character's invulnerable property is set.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player is alive and invulnerable; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.PlayerIsNotInStealth(System.Int32)">
            <summary>
            Checks if a player exists and is not currently in stealth mode. Used by AI and
            detection systems to determine if a player should be visible to enemies.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player exists and is not stealthed; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.PlayerIsOnHelicopter(System.Int32)">
            <summary>
            Checks if a specific player is currently on the extraction helicopter. Used for
            level completion checks to ensure all players have reached extraction.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <returns>True if the player is alive and on the helicopter; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.ResetPlayersPlaying">
            <summary>
            Resets all player states to not playing. Clears the isPlaying flag for all four
            player slots, used when returning to menus or resetting the game session.
            </summary>
        </member>

        <member name="M:HeroController.UpdateDeathOrder(System.Int32[])">
            <summary>
            Updates the local death order array to match the authoritative version from the
            host. Ensures all clients maintain consistent death ordering for respawn priority
            and other death-related mechanics.
            </summary>
            <param name="latestDeathOrder">The authoritative death order array from the host.</param>
        </member>

        <member name="M:HeroController.CanSeePlayer(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Int32@)">
            <summary>
            Performs a line of sight check for players in a specific direction. Uses raycasting
            to ensure no obstacles block the view. Checks both players and their owned units
            (like SnakeBroskin's grenade hologram).
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="xRange">Maximum horizontal distance for line of sight.</param>
            <param name="yRange">Maximum vertical distance for line of sight.</param>
            <param name="seenPlayerNum">Output parameter for the player number if seen.</param>
            <returns>True if a player is visible in the specified direction; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.CanSeePlayer(System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32@)">
            <summary>
            Line of sight check with both X and Y direction constraints. Most restrictive
            visibility check that requires the target to be in the correct quadrant and have an
            unobstructed line of sight.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Horizontal direction (-1 for left, 1 for right).</param>
            <param name="yDirection">Vertical direction (-1 for down, 1 for up).</param>
            <param name="xRange">Maximum horizontal distance for line of sight.</param>
            <param name="yRange">Maximum vertical distance for line of sight.</param>
            <param name="seenPlayerNum">Output parameter for the player number if seen.</param>
            <returns>True if a player is visible in the specified quadrant; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.CanSeePlayer(System.Int32,System.Single,System.Single)">
            <summary>
            Checks if a specific player is visible from a given position. Uses raycasting to
            verify line of sight is not blocked by terrain or obstacles. Considers stealth mode
            - returns false if the player is in stealth.
            </summary>
            <param name="lookForPlayerNum">The specific player number to look for.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <returns>True if the specified player is visible and not in stealth; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.CanSeePlayer(System.Single,System.Single,System.Single,System.Single,System.Int32@)">
            <summary>
            Omnidirectional line of sight check for any player within range. Checks all living
            players and their units for visibility without direction constraints. Respects
            stealth mode and uses raycasting for obstacle detection.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xRange">Maximum horizontal distance for line of sight.</param>
            <param name="yRange">Maximum vertical distance for line of sight.</param>
            <param name="seenPlayerNum">Output parameter for the nearest visible player number.</param>
            <returns>True if any player is visible within range; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.GetActualNearestPlayer(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Finds the truly nearest player using combined X and Y distance. More accurate than
            GetNearestPlayer for finding the closest player as it uses actual distance rather
            than treating X and Y separately.
            </summary>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <param name="xRange">Maximum horizontal distance to search.</param>
            <param name="yRange">Maximum vertical distance to search.</param>
            <returns>Player index (0-3) of nearest player or -1 if none in range.</returns>
        </member>

        <member name="M:HeroController.GetNearestPlayer(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Finds the nearest player within a specified rectangular range. Returns the player
            index of the closest player within the range or -1 if no players are found. Uses
            Manhattan distance for range checking.
            </summary>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <param name="xRange">Maximum horizontal distance to search.</param>
            <param name="yRange">Maximum vertical distance to search.</param>
            <returns>Player index (0-3) of nearest player or -1 if none in range.</returns>
        </member>

        <member name="M:HeroController.GetNearestPlayer(System.Single,System.Single,System.Single,System.Single,System.Int32@)">
            <summary>
            Finds the nearest player within range and updates the current nearest reference.
            Returns true if a closer player was found than the current nearest. Used for
            iterative searches to find the closest among multiple candidates.
            </summary>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <param name="xRange">Maximum horizontal distance to search.</param>
            <param name="yRange">Maximum vertical distance to search.</param>
            <param name="currentNearest">Reference to current nearest player, updated if closer
                found.</param>
            <returns>True if a closer player was found; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.GetNearestPlayerPos(System.Single,System.Single)">
            <summary>
            Finds the position of the nearest living player to the specified coordinates.
            Returns the player's position as a Vector3 or a far-away position (1000, 1000, 0) if
            no players are alive.
            </summary>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <returns>Vector3 position of the nearest player or (1000, 1000, 0) if none found.</returns>
        </member>

        <member name="M:HeroController.GetNearestPlayerPos(System.Single,System.Single,System.Int32@)">
            <summary>
            Finds the position of the nearest living player and returns their player number.
            Uses squared distance for efficiency and updates the playerNum reference with the
            nearest player's index.
            </summary>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <param name="playerNum">Output parameter for the nearest player's number.</param>
            <returns>Vector3 position of the nearest player or (1000, 1000, 0) if none found.</returns>
        </member>

        <member name="M:HeroController.GetPlayerPos(System.Int32,System.Single@,System.Single@)">
            <summary>
            Gets the position of a specific player through reference parameters. If the player
            doesn't exist or isn't alive, returns (-1000, -1000) as an invalid position marker.
            </summary>
            <param name="playerNum">The player number to get position for.</param>
            <param name="xPos">Output parameter that receives the player's X position.</param>
            <param name="yPos">Output parameter that receives the player's Y position.</param>
        </member>

        <member name="M:HeroController.GetPlayerPos(System.Int32)">
            <summary>
            Gets the position of a specific player as a Vector3. Returns the player's current
            position or (-1000, -1000, 0) if the player doesn't exist or isn't alive.
            </summary>
            <param name="playerNum">The player number to get position for.</param>
            <returns>Vector3 position of the player or (-1000, -1000, 0) if invalid.</returns>
        </member>

        <member name="M:HeroController.GetPlayerPosition(System.Int32)">
            <summary>
            Gets the position of a specific player as a Vector3. Returns the player's current
            world position or Vector3.zero if the player doesn't exist or has no character
            instance.
            </summary>
            <param name="playerNum">The player number to get position for.</param>
            <returns>Vector3 position of the player or Vector3.zero if invalid.</returns>
        </member>

        <member name="M:HeroController.GetPlayerTransform(System.Int32)">
            <summary>
            Gets the Transform component of a specific player's character. Returns null if the
            player doesn't exist, isn't playing, or has no character instance.
            </summary>
            <param name="playerNum">The player number to get the transform for.</param>
            <returns>The player's character Transform or null if unavailable.</returns>
        </member>

        <member name="M:HeroController.GetRandomPlayerPlaying">
            <summary>
            Gets the player number of a random living player. Useful for AI that needs to target
            a random player rather than the nearest one. Returns -1 if no players are alive.
            </summary>
            <returns>Player number (0-3) of a random living player or -1 if none.</returns>
        </member>

        <member name="M:HeroController.GetRandomPlayerPos(System.Single@,System.Single@,System.Int32@)">
            <summary>
            Gets the position of a random living player through reference parameters. Randomly
            selects from all alive players and returns their position and player number. Returns
            false if no players are alive.
            </summary>
            <param name="xPos">Output parameter for the selected player's X position.</param>
            <param name="yPos">Output parameter for the selected player's Y position.</param>
            <param name="playerNum">Output parameter for the selected player's number.</param>
            <returns>True if a living player was found; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.GetRandomPlayerPos">
            <summary>
            Gets the position of a random living player as a Vector3. Returns a far-away
            position (1000, 1000, 0) if no players are alive. Used for AI targeting when any
            player target is acceptable.
            </summary>
            <returns>Vector3 position of a random living player or (1000, 1000, 0) if none.</returns>
        </member>

        <member name="M:HeroController.IsAnotherPlayerNearby(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Checks if any player other than the specified player is within range. Used for co-op
            mechanics, friendly fire detection, and ensuring players don't interact with their
            own detection zones.
            </summary>
            <param name="currentPlayerNum">Player number to exclude from the search.</param>
            <param name="x">X coordinate to search from.</param>
            <param name="y">Y coordinate to search from.</param>
            <param name="xRange">Maximum horizontal distance to search.</param>
            <param name="yRange">Maximum vertical distance to search.</param>
            <returns>True if another player is found within range; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerNearby(System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Int32@)">
            <summary>
            Checks if any player is within the specified range and returns their position.
            Updates reference parameters with the nearest player's coordinates and player
            number. Used for AI targeting and interaction systems.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xRange">Horizontal detection range.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="playerX">Output parameter for found player's X position.</param>
            <param name="playerY">Output parameter for found player's Y position.</param>
            <param name="seenPlayer">Output parameter for found player's number.</param>
            <returns>True if a player is found within range; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerNearby(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single@,System.Single@,System.Int32@)">
            <summary>
            Directional player detection that checks for players in a specific direction. Only
            detects players in the direction specified by xDirection parameter and returns their
            position and player number through reference parameters.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="xRange">Horizontal detection range in the specified direction.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="playerX">Output parameter for found player's X position.</param>
            <param name="playerY">Output parameter for found player's Y position.</param>
            <param name="seenPlayerNum">Output parameter for found player's number.</param>
            <returns>True if a player is found in the specified direction; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerNearby(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Basic proximity check to determine if any player is within the specified rectangular
            range. Simple boolean check without returning player information.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xRange">Horizontal detection range.</param>
            <param name="yRange">Vertical detection range.</param>
            <returns>True if any player is within range; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerNearby(System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Directional proximity check that only detects players in the specified direction.
            Used for directional attacks, line of sight checks, and facing-dependent
            interactions.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="xRange">Horizontal detection range in the specified direction.</param>
            <param name="yRange">Vertical detection range.</param>
            <returns>True if a player is found in the specified direction; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerNearby(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Int32@)">
            <summary>
            Directional player detection that finds players in a specific direction and returns
            their player number. Only detects players whose position relative to the check point
            matches the specified direction.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="xRange">Horizontal detection range in the specified direction.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="seenPlayerNum">Output parameter for found player's number.</param>
            <returns>True if a player is found in the specified direction; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerNearby(System.Int32,System.Single,System.Single,System.Int32,System.Single@,System.Single,System.Single@,System.Single@)">
            <summary>
            Checks if a specific player is nearby in a given direction and returns their
            position. Updates the xRange parameter and target position references if the player
            is found within the directional constraints.
            </summary>
            <param name="playerNum">The specific player number to check for.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="xRange">Reference to horizontal range, updated based on player distance.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="targetX">Output parameter for the player's X position if found.</param>
            <param name="targetY">Output parameter for the player's Y position if found.</param>
            <returns>True if the specified player is found in range and direction; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerNearby(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single@,System.Single,System.Single@,System.Single@)">
            <summary>
            Checks if a specific player is nearby with both X and Y direction constraints. Most
            restrictive proximity check that requires the player to be in the correct quadrant
            relative to the check position.
            </summary>
            <param name="playerNum">The specific player number to check for.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Horizontal direction (-1 for left, 1 for right).</param>
            <param name="yDirection">Vertical direction (-1 for down, 1 for up).</param>
            <param name="xRange">Reference to horizontal range, updated based on player distance.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="targetX">Output parameter for the player's X position if found.</param>
            <param name="targetY">Output parameter for the player's Y position if found.</param>
            <returns>True if the player is found in the specified quadrant; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerNearby(System.Int32,System.Single,System.Single,System.Single@,System.Single,System.Single@,System.Single@)">
            <summary>
            Checks if a specific player is within range without direction constraints. Updates
            the xRange parameter and returns the player's position through reference parameters
            if found.
            </summary>
            <param name="playerNum">The specific player number to check for.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xRange">Reference to horizontal range, updated based on player distance.</param>
            <param name="yRange">Vertical detection range.</param>
            <param name="targetX">Output parameter for the player's X position if found.</param>
            <param name="targetY">Output parameter for the player's Y position if found.</param>
            <returns>True if the specified player is within range; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerThisWay(System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Checks if a specific player is positioned in the given direction from a point. Used
            for directional AI decisions and determining relative player positions.
            </summary>
            <param name="playerNum">The player number to check.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <returns>True if the player is in the specified direction; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerThisWay(System.Single,System.Single,System.Int32)">
            <summary>
            Checks if any player is positioned in the given direction from a point. Searches all
            playing players to find if any are in the specified direction. Used for AI
            directional awareness without caring which specific player.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <returns>True if any player is in the specified direction; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.IsPlayerThisWay(System.Single,System.Single,System.Int32,System.Int32@)">
            <summary>
            Checks if any player is in the given direction and returns the nearest one. Finds
            the closest player in the specified direction based on absolute X distance and
            updates the seenPlayerNum reference with their index.
            </summary>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="xDirection">Direction to check (-1 for left, 1 for right).</param>
            <param name="seenPlayerNum">Output parameter for the nearest player's number in that
                direction.</param>
            <returns>True if a player is found in the direction; otherwise, false.</returns>
        </member>

        <member name="F:HeroController.fragileLayer">
            <summary>
            Layer mask for fragile/destructible terrain detection. Used to identify breakable
            surfaces that might affect spawn positions or require special handling during
            physics checks.
            </summary>
        </member>

        <member name="F:HeroController.groundLayer">
            <summary>
            Layer mask for ground collision detection. Used in raycasting operations to detect
            solid ground for spawn position validation, line of sight checks, and movement
            calculations.
            </summary>
        </member>

        <member name="F:HeroController.rayCastHit">
            <summary>
            Shared RaycastHit structure for physics queries. Reused across multiple raycast
            operations to avoid allocation overhead. Stores hit information from the most recent
            raycast operation.
            </summary>
        </member>

        <member name="M:HeroController.CheckRescueBros(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Checks for rescue bros within range of the specified position and initiates rescue
            if found. Handles the rescue animation, network RPC calls, and returns whether any
            rescue was initiated. Only the host processes the actual rescue logic.
            </summary>
            <param name="playerNum">The player number checking for rescues.</param>
            <param name="x">X coordinate to check from.</param>
            <param name="y">Y coordinate to check from.</param>
            <param name="range">Range to check for rescue bros.</param>
            <returns>True if a rescue was initiated; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.DestroyRescueBroRPC(RescueBro)">
            <summary>
            RPC method to destroy a rescue bro across all clients. Handles null checks and
            ensures proper cleanup of the rescue bro game object to prevent orphaned references
            in multiplayer games.
            </summary>
            <param name="rescueBro">The RescueBro instance to destroy.</param>
        </member>

        <member name="M:HeroController.MayIRescueThisBro(System.Int32,RescueBro,Ack)">
            <summary>
            Server-side validation method for rescue attempts. Coordinates rescue operations
            across the network to ensure only one player can rescue a bro. Handles both
            character swapping and respawning scenarios based on game state.
            </summary>
            <param name="playerNum">The player number attempting the rescue.</param>
            <param name="rescueBro">The RescueBro object being rescued.</param>
            <param name="ackRequest">Network acknowledgment for the rescue request.</param>
        </member>

        <member name="M:HeroController.RespawnBro(System.Int32,RescueBro,System.Int32[],Ack)">
            <summary>
            RPC method that respawns a dead player when their bro is rescued. Updates the death
            order to maintain consistency across the network and calls the player's RespawnBro
            method to create their new character at the rescue location.
            </summary>
            <param name="rescuedPlayer">The player number being respawned.</param>
            <param name="rescueBro">The RescueBro that triggered the respawn.</param>
            <param name="latestDeathOrder">Array tracking the order of player deaths.</param>
            <param name="ackResponse">Network acknowledgment for the operation.</param>
        </member>

        <member name="M:HeroController.SwapBro(System.Int32,RescueBro,System.Int32[],Ack)">
            <summary>
            RPC method that performs character swapping when rescuing a bro while alive. Swaps
            the current character with the rescued bro type, maintaining the player's position
            and state. Updates death order tracking for consistency.
            </summary>
            <param name="playerNum">The player number performing the swap.</param>
            <param name="rescueBro">The RescueBro being swapped to.</param>
            <param name="latestDeathOrder">Array tracking the order of player deaths.</param>
            <param name="ackResponse">Network acknowledgment for the operation.</param>
        </member>

        <member name="F:HeroController.nextSpawnDoor">
            <summary>
            Array tracking the assigned spawn door for each player in Suicide Horde mode. Each
            player gets a specific mook door to spawn from, preventing spawn conflicts and
            providing visual indicators of where players will appear.
            </summary>
        </member>

        <member name="M:HeroController.DoCountDown">
            <summary>
            Coroutine that manages the pre-game countdown sequence. Handles different countdown
            behaviors for various game modes, displays countdown numbers and announcements,
            manages encouragement messages for struggling players, and triggers game start when
            countdown completes. Special handling for edit mode, test runs, and DeathMatch.
            </summary>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>

        <member name="M:HeroController.GetCheckPointOffset(System.Int32)">
            <summary>
            Calculates the spawn offset for a player at a checkpoint based on their player
            number. Players 0-1 spawn 8 units apart, players 2-3 spawn 12 units apart, creating
            a staggered formation to prevent spawn overlapping.
            </summary>
            <param name="playerNum">The player number to get offset for.</param>
            <returns>Vector2 offset to apply to the checkpoint position.</returns>
        </member>

        <member name="M:HeroController.GetCheckPointPosition(System.Int32,System.Boolean)">
            <summary>
            Calculates the final spawn position for a player at the current checkpoint. For
            airdrop spawns, positions the player high above the screen. For ground spawns,
            applies the player-specific offset to prevent overlapping.
            </summary>
            <param name="playerNum">The player number to get spawn position for.</param>
            <param name="spawnViaAirDrop">Whether the player should spawn via airdrop from above.</param>
            <returns>Vector3 world position where the player should spawn.</returns>
        </member>

        <member name="M:HeroController.GetCurrentCheckPointID">
            <summary>
            Gets the ID of the current checkpoint. Used to track progression through the level
            and determine respawn locations. Returns -1 if no checkpoint has been activated.
            </summary>
            <returns>The current checkpoint ID or -1 if none set.</returns>
        </member>

        <member name="M:HeroController.NotifyBrosReleased">
            <summary>
            RPC method that sets the BrosReleased flag to true. Used to synchronize the game
            start state across all players, indicating that players can begin moving and
            playing.
            </summary>
        </member>

        <member name="M:HeroController.NumberOfConnectedMachines">
            <summary>
            Counts the number of remote machines connected to the game session. Iterates through
            all PIDs checking for non-local connections. Used for network game management and
            connection tracking.
            </summary>
            <returns>The count of connected remote machines.</returns>
        </member>

        <member name="M:HeroController.PlayerDelay(System.Int32)">
            <summary>
            Sets a delay timer for a specific player, preventing immediate actions after certain
            events. Uses the configured playerDelayTime from the HeroController instance to set
            the delay duration.
            </summary>
            <param name="playerNum">The player number to apply the delay to.</param>
        </member>

        <member name="M:HeroController.RegisterHiddenExplosives(HiddenExplosives)">
            <summary>
            Registers a hidden explosive object for tracking. Creates the hiddenExplosives list
            if it doesn't exist and adds the explosive to it. Used to manage triggered
            explosives that are revealed during gameplay.
            </summary>
            <param name="hiddenExplosive">The HiddenExplosives instance to register.</param>
        </member>

        <member name="M:HeroController.RemoveHiddenExplosives(HiddenExplosives)">
            <summary>
            Removes a hidden explosive from the tracking list. Called when an explosive is
            triggered or destroyed to clean up references.
            </summary>
            <param name="hiddenExplosive">The HiddenExplosives instance to remove.</param>
        </member>

        <member name="M:HeroController.RequestCheckpointSet(UnityEngine.Vector2,System.Int32)">
            <summary>
            Server-side RPC handler for checkpoint requests. Broadcasts the checkpoint update to
            all connected players to ensure everyone has the same checkpoint data. Only
            processed by the host/server.
            </summary>
            <param name="checkPointPos">The world position of the checkpoint.</param>
            <param name="checkPointID">The unique ID of the checkpoint.</param>
        </member>

        <member name="M:HeroController.ResetLossCounter">
            <summary>
            Resets the game over countdown timer if all players are dead. Checks each player's
            death state and if all are dead with remaining time, resets the loss timer and stops
            any active fade effects. Prevents premature game over transitions.
            </summary>
        </member>

        <member name="M:HeroController.SetCheckPoint(UnityEngine.Vector2,System.Int32)">
            <summary>
            Sets a new checkpoint position and ID. Updates the local checkpoint data and sends
            an RPC to the server to synchronize the checkpoint across all players. Primary
            public interface for checkpoint management.
            </summary>
            <param name="checkPointPos">The world position of the new checkpoint.</param>
            <param name="checkPointID">The unique ID of the checkpoint.</param>
        </member>

        <member name="M:HeroController.SetCheckPointInternal(UnityEngine.Vector2,System.Int32)">
            <summary>
            Internal method that actually updates the checkpoint data. Sets the checkpoint start
            position, ID, and resets the checkPointSet flag. Called via RPC to ensure all
            clients have synchronized checkpoint data.
            </summary>
            <param name="checkPointPos">The world position of the checkpoint.</param>
            <param name="checkPointID">The unique ID of the checkpoint.</param>
        </member>

        <member name="P:HeroController.BrosReleased">
            <summary>
            Gets or sets whether the bros (players) have been released to start playing. When
            set to true by the host, sends an RPC to notify all other players. Network-aware
            property that synchronizes game start state across multiplayer sessions.
            </summary>
            <returns>True if bros have been released; otherwise, false.</returns>
        </member>

        <member name="P:HeroController.isCountdownFinished">
            <summary>
            Gets or sets whether the game countdown has completed. Used to track the pre-game
            countdown state and determine when players can begin playing.
            </summary>
            <returns>True if the countdown is finished; otherwise, false.</returns>
        </member>

        <member name="F:HeroController.AllPlayersHaveJoined">
            <summary>
            Indicates whether all expected players have joined the game session. Used to delay
            game start or enable certain features only after everyone is ready. Set by join
            detection logic.
            </summary>
        </member>

        <member name="F:HeroController.IDroppedOutThisRound">
            <summary>
            Tracks whether the local player has dropped out during the current round. Used to
            manage rejoin behavior and prevent duplicate dropout processing. Reset at the start
            of each new round.
            </summary>
        </member>

        <member name="F:HeroController.WaitForAllPlayersToSpawnBeforeStarting">
            <summary>
            When true, delays game start until all joined players have spawned their characters.
            Ensures synchronized starts in multiplayer. Hidden in inspector as it's typically
            set programmatically based on game mode.
            </summary>
        </member>

        <member name="F:HeroController._cameraHoldAfterLastHeroDeathTime">
            <summary>
            Time in seconds to hold the camera position after the last hero dies. Prevents
            immediate camera transitions on death, giving players time to see what happened
            before respawn or game over.
            </summary>
        </member>

        <member name="F:HeroController._connectRegistered">
            <summary>
            Indicates whether network connection event handlers have been registered. Prevents
            duplicate registration of OnDisconnect handlers which could cause multiple
            executions of cleanup code.
            </summary>
        </member>

        <member name="F:HeroController._curJoinMessageIndex">
            <summary>
            Tracks the current index for cycling through join notification messages. Used to
            display varied messages when players join the game, preventing repetitive
            notifications.
            </summary>
        </member>

        <member name="F:HeroController._isCountdownFinished">
            <summary>
            Private backing field for the isCountdownFinished property. Tracks whether the
            pre-game countdown sequence has completed. Set to true when players can begin
            playing after the 3-2-1-GO countdown.
            </summary>
        </member>

        <member name="F:HeroController.brosHaveBeenReleased">
            <summary>
            Private backing field for the BrosReleased property. Indicates whether players have
            been released to start playing. Synchronized across network to ensure all players
            start simultaneously.
            </summary>
        </member>

        <member name="F:HeroController.checkPointSet">
            <summary>
            Indicates whether a checkpoint has been explicitly set this session. Used to
            differentiate between default spawn positions and player-activated checkpoints for
            spawn logic.
            </summary>
        </member>

        <member name="F:HeroController.checkPointStart">
            <summary>
            World position of the current checkpoint spawn location. Default is (128, 196) which
            represents the typical level start position. Updated when players activate new
            checkpoints during gameplay.
            </summary>
        </member>

        <member name="F:HeroController.currentCheckPointID">
            <summary>
            ID of the currently active checkpoint. Used to track level progression and determine
            respawn locations. Set to -1 when no checkpoint is active. Static to persist across
            scene transitions.
            </summary>
        </member>

        <member name="F:HeroController.explosivesCounter">
            <summary>
            Timer for tracking explosive-related events. Used internally for managing timed
            explosive spawns, detonations, or cooldowns related to explosive game mechanics.
            </summary>
        </member>

        <member name="F:HeroController.faded">
            <summary>
            Tracks whether the screen has faded to black. Used during game over sequences, level
            transitions, or cutscenes to manage visual state and prevent duplicate fade
            operations.
            </summary>
        </member>

        <member name="F:HeroController.finishedCounter">
            <summary>
            Timer tracking time since level completion. Increments after level finish to manage
            post-completion sequences, delays before transitions, and ensure completion
            animations play fully.
            </summary>
        </member>

        <member name="F:HeroController.forceInvulnerability">
            <summary>
            Debug flag that makes all players permanently invulnerable. Used for testing,
            debugging, or special game modes where players cannot be damaged. Accessed via debug
            key commands.
            </summary>
        </member>

        <member name="F:HeroController.forceSpecificBro">
            <summary>
            Forces all players to spawn as a specific hero type when set. Used for testing,
            special game modes, or themed levels. Set to HeroType.None for normal hero selection
            behavior.
            </summary>
        </member>

        <member name="F:HeroController.heroesHaveBeenReleasedFromTransport">
            <summary>
            Indicates whether heroes have been released from the initial transport sequence.
            Used to track if the opening helicopter drop or transport animation has completed
            and players can begin normal gameplay.
            </summary>
        </member>

        <member name="F:HeroController.lossCounterTime">
            <summary>
            Maximum time allowed after all players die before game over. Set to 0.5 seconds by
            default. Gives a brief window for revival mechanics or last-second saves before
            triggering the loss condition.
            </summary>
        </member>

        <member name="F:HeroController.lossTimer">
            <summary>
            Countdown timer for game over when all players are dead. Starts at 0.5 seconds and
            counts down to trigger loss condition. Can be reset if players gain lives or special
            conditions are met.
            </summary>
        </member>

        <member name="F:HeroController.nextHeroType">
            <summary>
            Stores the next hero type to be spawned. Used for hero selection queueing and
            ensuring the correct hero spawns after death or level start. Hidden in inspector as
            it's managed programmatically.
            </summary>
        </member>

        <member name="F:HeroController.playerDelayTime">
            <summary>
            Default delay duration applied to players for various events. Set to 0.5 seconds.
            Used by PlayerDelay method to create consistent timing for player state transitions.
            </summary>
        </member>

        <member name="F:HeroController.suicideBroSpawnDelay">
            <summary>
            Array of spawn delays for each player in Suicide Horde mode. Negative values create
            staggered spawn times: -2, -2.25, -2.5, -2.75 seconds. Prevents all players spawning
            simultaneously at doors.
            </summary>
        </member>

        <member name="M:HeroController.BeginGame">
            <summary>
            Coroutine that manages the game start sequence. Waits for all players to spawn, then
            either announces "GO!" immediately or starts a countdown based on GameModeController
            settings. Handles different spawn timing for various game modes.
            </summary>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>

        <member name="M:HeroController.BoostHeroes(System.Single)">
            <summary>
            Applies a speed boost to all living player characters for the specified duration.
            Enhances movement and action speed, typically used for power-ups or special game
            events that accelerate gameplay.
            </summary>
            <param name="time">Duration in seconds for the hero speed boost.</param>
        </member>

        <member name="M:HeroController.CanSpawn(System.Int32)">
            <summary>
            Checks if a player is eligible to spawn or respawn. Returns true only if the player
            exists, has lives remaining, and is currently dead. Used internally by respawn logic
            to determine spawn eligibility.
            </summary>
            <param name="playerNum">The player number to check spawn eligibility for.</param>
            <returns>True if the player can spawn; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.CancelTimeBroBoost">
            <summary>
            Immediately cancels any active time manipulation effects from Time Bro. Restores
            normal time flow by clearing boost timers and resetting time scale if Time Bro
            effects were active.
            </summary>
        </member>

        <member name="M:HeroController.GoBackToMainMenu">
            <summary>
            Returns the game to the main menu. Performs cleanup operations including stopping
            Steam integration, clearing cutscene state, resetting time scale, and loading the
            MainMenu scene.
            </summary>
        </member>

        <member name="M:HeroController.HighFiveBoost(System.Single)">
            <summary>
            Activates high-five time dilation effect, slowing time to 50% speed for the
            specified duration. Creates a bullet-time effect that enhances the high-five moment
            between players.
            </summary>
            <param name="time">Duration in seconds for the time dilation effect.</param>
        </member>

        <member name="M:HeroController.IsPlayerNearbyActivatedCheckPoint(UnityEngine.Vector2@,System.Boolean@)">
            <summary>
            Checks if any player is near an activated checkpoint and returns the checkpoint
            data. Updates the position and airdrop flag references if a player is found near a
            checkpoint. Used for respawn location determination.
            </summary>
            <param name="pos">Reference parameter that receives the checkpoint position if found.</param>
            <param name="spawnViaAirdrop">Reference parameter that indicates if spawn should be via
                airdrop.</param>
            <returns>True if a player is near an activated checkpoint; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.OnDisconnect">
            <summary>
            Handles network disconnection events. Drops out all local players, displays a
            disconnection error notification to the user for 5 seconds, and prepares the game
            state for returning to the menu or reconnecting.
            </summary>
        </member>

        <member name="M:HeroController.ReduceBroRespawnDelay(System.Single)">
            <summary>
            Reduces the respawn delay timer by the specified time. Resets to 0.4 seconds if no
            heroes are dead, otherwise decrements the timer. Controls the pacing of automatic
            respawns.
            </summary>
            <param name="t">Time in seconds to reduce from the respawn delay.</param>
        </member>

        <member name="M:HeroController.RunHeroRespawnLogic(System.Int32)">
            <summary>
            Executes complex respawn logic for a player based on game mode. Handles Campaign
            checkpoint respawns, DeathMatch spawn queue system, and SuicideHorde spawn doors.
            Checks lives, death status, and spawn conditions before respawning.
            </summary>
            <param name="playerNum">The player number to run respawn logic for.</param>
        </member>

        <member name="M:HeroController.SetRoundBeginTimeStamp(System.Single)">
            <summary>
            Sets the synchronized timestamp for when the round should begin. Used in multiplayer
            to ensure all players start at the same time by setting a future timestamp for
            coordinated round starts.
            </summary>
            <param name="timestamp">The network time when the round should begin.</param>
        </member>

        <member name="M:HeroController.StartCountdown">
            <summary>
            Initiates the game countdown sequence. Cancels any delayed announcements and starts
            the countdown coroutine through the Announcer system. Called to begin the pre-game
            countdown before releasing players.
            </summary>
        </member>

        <member name="M:HeroController.SyncRespawnQueue(System.Int32[])">
            <summary>
            Synchronizes the deathmatch respawn queue from the network host. Converts the array
            to a list for local spawn order management in deathmatch games.
            </summary>
            <param name="_deathmatchSpawnQueue">Array of player numbers in spawn order.</param>
        </member>

        <member name="M:HeroController.TimeBroBoost(System.Single)">
            <summary>
            Activates Time Bro's time manipulation ability, slowing time to 35% speed for the
            specified duration. More extreme time dilation than high-five, specific to the Time
            Bro character's special ability.
            </summary>
            <param name="time">Duration in seconds for the time manipulation effect.</param>
        </member>

        <member name="M:HeroController.TimeBroBoostHeroes(System.Single)">
            <summary>
            Applies Time Bro's time boost effect to all living heroes for the specified
            duration. Gives all players enhanced abilities similar to Time Bro's powers, used
            for special cooperative moments.
            </summary>
            <param name="time">Duration in seconds for the Time Bro boost effect.</param>
        </member>

        <member name="F:HeroController.RoundHasBegun">
            <summary>
            Tracks whether the current round has officially started. Set to true when the
            synchronized start time is reached or countdown completes. Controls game flow state
            transitions.
            </summary>
        </member>

        <member name="F:HeroController.allDead">
            <summary>
            Tracks whether all players are currently dead. Used to trigger game over sequences,
            manage respawn timing, and control camera behavior when no living players remain.
            </summary>
        </member>

        <member name="F:HeroController.beginRoundAtTimeStamp">
            <summary>
            Network timestamp for synchronized round start. Stores the exact time when all
            players should begin the round, ensuring multiplayer synchronization across
            different network latencies.
            </summary>
        </member>

        <member name="F:HeroController.broRespawnDelay">
            <summary>
            Minimum delay between automatic respawn attempts. Set to 0.4 seconds to prevent
            respawn spam and ensure death animations complete before new spawn attempts begin.
            </summary>
        </member>

        <member name="F:HeroController.inputDelay">
            <summary>
            Delay in seconds before player input is processed after spawning. Set to 0.25
            seconds by default. Prevents accidental inputs during spawn animations and ensures
            players have time to orient themselves.
            </summary>
        </member>

        <member name="F:HeroController.timeStampSet">
            <summary>
            Indicates whether the round begin timestamp has been set. Prevents multiple
            timestamp assignments and ensures the round starts at the designated time across all
            clients.
            </summary>
        </member>

        <member name="F:HeroController.waitForPlayersTimeout">
            <summary>
            Timeout duration for waiting for all players to join or spawn. Prevents infinite
            waiting if a player fails to connect or load. Game proceeds when timeout expires
            regardless of missing players.
            </summary>
        </member>

        <member name="M:HeroController.AddTemporaryPlayerTarget(System.Int32,UnityEngine.Transform)">
            <summary>
            RPC method that adds a temporary follow target for a specific player's camera. Used
            for cutscenes or special camera focus events where the camera needs to track
            something other than the player character temporarily.
            </summary>
            <param name="playerNum">The player number whose camera should follow the target.</param>
            <param name="target">The transform for the camera to follow.</param>
        </member>

        <member name="M:HeroController.AddToExtents(UnityEngine.Vector3,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Adds a position to the camera view extents calculation. Updates the minimum and
            maximum X/Y bounds by reference to include the given position. Used internally for
            calculating camera bounds that encompass all relevant targets.
            </summary>
            <param name="pos">The position to include in the extents.</param>
            <param name="minX">Reference to minimum X bound, updated if pos.x is smaller.</param>
            <param name="maxX">Reference to maximum X bound, updated if pos.x is larger.</param>
            <param name="minY">Reference to minimum Y bound, updated if pos.y is smaller.</param>
            <param name="maxY">Reference to maximum Y bound, updated if pos.y is larger.</param>
        </member>

        <member name="M:HeroController.CanFollow(UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Determines if a position can be followed by the camera while keeping it within
            screen bounds. Calculates whether including this position would push the camera view
            beyond acceptable limits with the specified buffer.
            </summary>
            <param name="otherPosition">The position to check for followability.</param>
            <param name="minX">Current minimum X bound of the camera.</param>
            <param name="maxX">Current maximum X bound of the camera.</param>
            <param name="minY">Current minimum Y bound of the camera.</param>
            <param name="maxY">Current maximum Y bound of the camera.</param>
            <param name="requiredBuffer">Buffer distance from screen edges (default 24).</param>
            <returns>True if the position can be followed within bounds; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.CanLookForReposition">
            <summary>
            Determines if the camera can look for repositioning opportunities. Returns false if
            controlled by trigger actions, in ExplosionRun mode, within reposition delay
            cooldown, or if any player has a temporary camera target. Sets a 0.6 second cooldown
            when conditions aren't met.
            </summary>
            <returns>True if camera repositioning is allowed; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.GetGetFollowPosition(UnityEngine.Vector3@)">
            <summary>
            Calculates the optimal camera follow position based on all active players, extra
            targets, and game state. This complex method handles multiple scenarios including
            death cam, race mode, helicopter sequences, and ensures all important elements stay
            in view. Updates the position parameter by reference.
            </summary>
            <param name="pos">Reference parameter that receives the calculated follow position.</param>
            <returns>True if a valid follow position was calculated; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.RemoveTemporaryPlayerTarget(System.Int32)">
            <summary>
            RPC method that removes the temporary follow target for a player's camera, returning
            it to normal player following behavior. Called when special camera events end.
            </summary>
            <param name="playerNum">The player number to remove the temporary target from.</param>
        </member>

        <member name="M:HeroController.StopFollowing(UnityEngine.Transform)">
            <summary>
            Removes a transform from the extra camera follow positions list. Called when an
            object no longer needs camera attention, such as when it's destroyed or becomes
            irrelevant.
            </summary>
            <param name="trans">The transform to stop following.</param>
        </member>

        <member name="M:HeroController.TryFollow(UnityEngine.Transform)">
            <summary>
            Adds a transform to the list of extra camera follow positions if not already
            present. Used for dynamic camera targets like important game objects or NPCs that
            the camera should include in its view calculations.
            </summary>
            <param name="trans">The transform to add to camera following.</param>
        </member>

        <member name="F:HeroController.followingPreferredPlayer">
            <summary>
            Player number that the camera should prefer to follow. Set to -1 for no preference.
            Used to bias camera positioning toward specific players during gameplay or
            cutscenes.
            </summary>
        </member>

        <member name="F:HeroController.lastCameraFollowPos">
            <summary>
            Stores the last calculated camera follow position. Used for smooth camera
            interpolation and to track camera movement history. Updated each frame when
            calculating new follow positions.
            </summary>
        </member>

        <member name="F:HeroController.lastFollowTimeSwitch">
            <summary>
            Timestamp of the last camera follow target switch. Used to prevent rapid camera
            target changes and ensure smooth transitions between follow targets.
            </summary>
        </member>

        <member name="F:HeroController.lastFollowTimeSwitchBack">
            <summary>
            Timestamp of the last switch back to default camera following. Tracks when the
            camera returned from following special targets to prevent oscillation between
            targets.
            </summary>
        </member>

        <member name="F:HeroController.repositionDelay">
            <summary>
            Cooldown timer for camera repositioning attempts. Prevents rapid camera adjustments
            by enforcing a minimum delay between reposition checks. Set when repositioning is
            blocked to create smoother camera behavior.
            </summary>
        </member>

        <member name="F:HeroController.timeSinceFinish">
            <summary>
            Time elapsed since level completion. Used for post-level timing, delayed
            transitions, and ensuring completion sequences play out fully before moving to next
            level.
            </summary>
        </member>

        <member name="F:HeroController.wasFollowingExtra">
            <summary>
            Tracks whether the camera was previously following extra targets beyond players.
            Used to detect state changes in camera following behavior and manage transitions
            between following players only versus including additional targets.
            </summary>
        </member>

        <member name="M:HeroController.DisableHud">
            <summary>
            Disables the HUD display for all players. Loops through all player slots and calls
            DisableHud on each player instance. Used during cutscenes or special game states
            where HUD should be hidden.
            </summary>
        </member>

        <member name="M:HeroController.EnableHud">
            <summary>
            Enables the HUD display for all players. Loops through all player slots and calls
            EnableHud on each player instance. Used to restore HUD visibility after cutscenes or
            special events.
            </summary>
        </member>

        <member name="M:HeroController.FlashAvatar(System.Int32,System.Single,System.Boolean)">
            <summary>
            Triggers a flashing effect on the player's avatar for the specified duration. Used
            to draw attention to status changes, damage, or special events. The avatar will
            flash for the given time period.
            </summary>
            <param name="playerNum">The player number whose avatar should flash.</param>
            <param name="time">Duration in seconds for the flash effect.</param>
            <param name="primaryAvatar">True to flash primary avatar; false for secondary.</param>
        </member>

        <member name="M:HeroController.GetAvatarMaterial(HeroType)">
            <summary>
            Retrieves the avatar material associated with a specific hero type. Each hero can
            have a unique avatar material for special visual effects in the HUD. Returns null if
            no custom material exists for the hero type.
            </summary>
            <param name="heroType">The hero type to get avatar material for.</param>
            <returns>The avatar Material for the hero type or null if not found.</returns>
        </member>

        <member name="M:HeroController.MustShowHuds">
            <summary>
            Returns whether HUDs must be shown based on the global mustShowHUDS flag. Simple
            accessor for the HUD visibility state used by various game systems.
            </summary>
            <returns>True if HUDs must be shown; otherwise, false.</returns>
        </member>

        <member name="M:HeroController.SetAvatarAngry(System.Int32,System.Boolean)">
            <summary>
            Sets the player's avatar to the angry expression state. Updates the HUD avatar
            display to show an aggressive face, typically during combat or special actions. Can
            target either primary or secondary avatar displays.
            </summary>
            <param name="playerNum">The player number whose avatar to update.</param>
            <param name="primaryAvatar">True to update primary avatar; false for secondary.</param>
        </member>

        <member name="M:HeroController.SetAvatarBounceDown(System.Int32,System.Boolean)">
            <summary>
            Triggers a downward bounce animation on the player's avatar. Creates a visual
            feedback effect where the avatar appears to compress or bounce downward, often used
            for impact or landing effects.
            </summary>
            <param name="playerNum">The player number whose avatar should bounce down.</param>
            <param name="primaryAvatar">True to bounce primary avatar; false for secondary.</param>
        </member>

        <member name="M:HeroController.SetAvatarBounceUp(System.Int32,System.Boolean)">
            <summary>
            Triggers an upward bounce animation on the player's avatar. Creates a visual
            feedback effect where the avatar appears to stretch or bounce upward, often used for
            jump or spring effects.
            </summary>
            <param name="playerNum">The player number whose avatar should bounce up.</param>
            <param name="primaryAvatar">True to bounce primary avatar; false for secondary.</param>
        </member>

        <member name="M:HeroController.SetAvatarCalm(System.Int32,System.Boolean)">
            <summary>
            Sets the player's avatar to the calm expression state. Updates the HUD avatar
            display to show the normal, non-angry face for the specified player. Can target
            either primary or secondary avatar displays.
            </summary>
            <param name="playerNum">The player number whose avatar to update.</param>
            <param name="primaryAvatar">True to update primary avatar; false for secondary.</param>
        </member>

        <member name="M:HeroController.SetAvatarDead(System.Int32,System.Boolean)">
            <summary>
            Sets the player's avatar to the dead state. Updates the HUD to show the death
            animation or static dead frame, indicating the player has died. Can target either
            primary or secondary avatar displays.
            </summary>
            <param name="playerNum">The player number whose avatar to mark as dead.</param>
            <param name="primaryAvatar">True to update primary avatar; false for secondary.</param>
        </member>

        <member name="M:HeroController.SetAvatarFire(System.Int32,System.Boolean)">
            <summary>
            Sets the player's avatar to display fire animation. Shows the avatar with flames,
            typically used when the player is on fire or using fire-based abilities. Can target
            either primary or secondary avatar displays.
            </summary>
            <param name="playerNum">The player number whose avatar to set on fire.</param>
            <param name="primaryAvatar">True to update primary avatar; false for secondary.</param>
        </member>

        <member name="M:HeroController.SetAvatarFireFrame(System.Int32,System.Int32)">
            <summary>
            Sets a specific frame of the fire animation for the player's avatar. Allows precise
            control over which frame of the burning animation is displayed, useful for
            synchronized effects.
            </summary>
            <param name="playerNum">The player number whose avatar fire frame to set.</param>
            <param name="frame">The specific animation frame number to display.</param>
        </member>

        <member name="M:HeroController.SetAvatarFrame(System.Int32,System.Int32)">
            <summary>
            Internal method to set a specific animation frame for the player's avatar. Provides
            low-level control over avatar animation state for custom effects or specific
            animation requirements.
            </summary>
            <param name="playerNum">The player number whose avatar frame to set.</param>
            <param name="avatarFrame">The specific frame number to display.</param>
        </member>

        <member name="M:HeroController.SetAvatarMaterial(System.Int32,UnityEngine.Material)">
            <summary>
            Sets a custom material for the player's avatar display. Allows special visual
            effects by replacing the avatar's rendering material, such as for power-ups or
            status effects.
            </summary>
            <param name="playerNum">The player number whose avatar material to change.</param>
            <param name="material">The Material to apply to the avatar.</param>
        </member>

        <member name="M:HeroController.ShowHuds">
            <summary>
            Shows all player HUD displays if mustShowHUDS flag is true. Iterates through all
            players and calls Show() on each HUD component to make health, ammo, and lives
            visible.
            </summary>
        </member>

        <member name="M:HeroController.SwitchAvatarMaterial(SpriteSM,HeroType)">
            <summary>
            Switches a sprite's material to match the specified hero type's avatar material.
            Retrieves the appropriate material and applies it to the sprite if available.
            Returns whether the switch was successful.
            </summary>
            <param name="sprite">The SpriteSM to update with new material.</param>
            <param name="heroType">The hero type whose avatar material to use.</param>
            <returns>True if material was found and applied; otherwise, false.</returns>
        </member>

        <member name="F:HeroController.blankAvatar">
            <summary>
            Material used as a placeholder avatar when no hero-specific avatar is available.
            Displayed in the HUD before a hero is selected or as a fallback for missing avatar
            materials.
            </summary>
        </member>

        <member name="F:HeroController.doubleBroSevenAvatarCount">
            <summary>
            Tracks the current avatar index for Double Bro Seven. Used to cycle through
            available avatar textures, providing visual variety for this character's HUD
            representation.
            </summary>
        </member>

        <member name="F:HeroController.infoBarColor">
            <summary>
            Color used for the info bar display during countdown and announcements. Default is
            black. Can be customized per level or game mode to match the visual theme.
            </summary>
        </member>

        <member name="F:HeroController.mustShowHUDS">
            <summary>
            Global flag controlling HUD visibility. When true, all player HUDs must be shown.
            Used to force HUD display during gameplay and hide during cutscenes or menus.
            </summary>
        </member>

        <member name="F:HeroController.textureDoubleBroSevenAvatars">
            <summary>
            Array of avatar textures specifically for the Double Bro Seven character. Supports
            multiple avatar variations for this unique hero type that can cycle through
            different appearances.
            </summary>
        </member>

        <member name="M:HeroController.DeserializeForJoin(UnityStream)">
            <summary>
            Deserializes player data received during network join. Unpacks and updates the local
            arrays for playing status, controller IDs, and PIDs from the received stream data.
            </summary>
            <param name="stream">The UnityStream containing serialized player data.</param>
        </member>

        <member name="M:HeroController.OnAfterDeserialize">
            <summary>
            Unity deserialization callback that rebuilds the hero data dictionary from the
            serialized list. Handles duplicate keys by incrementing enum values to ensure data
            integrity. Part of the ISerializationCallbackReceiver interface.
            </summary>
        </member>

        <member name="M:HeroController.OnBeforeSerialize">
            <summary>
            Unity serialization callback that converts the internal hero data dictionary to a
            serializable list format. Part of the ISerializationCallbackReceiver interface
            implementation for saving game state.
            </summary>
        </member>

        <member name="M:HeroController.PackState(UnityStream)">
            <summary>
            Packs the HeroController's network state for synchronization. Includes checkpoint
            position, bros released status, round timestamps, and checkpoint ID. Overrides base
            class to add hero-specific state data.
            </summary>
            <param name="stream">The UnityStream to pack state into.</param>
            <returns>The stream with packed state data.</returns>
        </member>

        <member name="M:HeroController.SerializeForJoin(UnityStream)">
            <summary>
            Serializes essential player data for network join operations. Packs the playing
            status, controller IDs, and network PIDs into the stream for transmission to joining
            players.
            </summary>
            <param name="stream">The UnityStream to serialize data into.</param>
        </member>

        <member name="M:HeroController.UnpackState(UnityStream)">
            <summary>
            Unpacks network state data to synchronize the HeroController. Restores checkpoint
            position, bros released status, timestamps, and checkpoint ID from the stream.
            Ensures proper state synchronization across the network.
            </summary>
            <param name="stream">The UnityStream containing packed state data.</param>
            <returns>The stream after unpacking.</returns>
        </member>

        <member name="M:HeroController.DebugDraw">
            <summary>
            Comprehensive debug GUI display showing detailed player and game state information.
            Displays camera positions, player data tables including controllers, PIDs, playing
            status, hero states, positions, bot brain settings, and following relationships.
            Includes interactive controls for bot brain configuration during debug sessions.
            </summary>
        </member>

        <member name="M:HeroController.FindRemotePlayerToFollow(Player)">
            <summary>
            Finds a suitable remote player for bot brain following behavior. Prioritizes remote
            players over local ones, returning the first remote player found or the last local
            player if no remote players exist. Returns -1 if no suitable follow target is found.
            </summary>
            <param name="player">The player looking for someone to follow.</param>
            <returns>The player index to follow or -1 if none found.</returns>
        </member>

        <member name="M:HeroController.SetTestInfo(HeroType)">
            <summary>
            Sets which hero type should always be chosen for testing purposes. Overrides normal
            hero selection to force a specific character for debugging and testing.
            </summary>
            <param name="alwaysChoose">The HeroType to always select during testing.</param>
        </member>

        <member name="M:HeroController.UpdateDebugInputs">
            <summary>
            Processes debug keyboard inputs for development and testing. Handles force
            invulnerability (F8), force level finish (Ctrl+Shift+F9), HUD toggle (Ctrl+F12), and
            editor-only commands like speed boost and unlock clearing.
            </summary>
        </member>

        <member name="F:HeroController.alwaysChooseHero">
            <summary>
            Forces all players to spawn as a specific hero type when set. Used for testing
            specific heroes or creating themed gameplay experiences. Set to HeroType.None for
            normal random/sequential hero selection.
            </summary>
        </member>

        <member name="F:HeroController.HeroDefinition.avatar">
            <summary>
            Avatar material for the hero in the HeroDefinition. Used for HUD display to show the
            hero's face/portrait. Each hero has a unique avatar material for visual
            identification.
            </summary>
        </member>

        <member name="F:HeroController.HeroDefinition.characterReference">
            <summary>
            Reference to the hero character prefab in the HeroDefinition. Points to the
            TestVanDammeAnim asset that will be instantiated when this hero type is spawned.
            </summary>
        </member>

        <member name="F:HeroController.HeroDefinition.name">
            <summary>
            Display name of the hero in the HeroDefinition data structure. Used for UI display,
            announcements, and hero selection screens. Part of the hero configuration system.
            </summary>
        </member>

        <member name="F:HeroController.HeroSetupKeyPair.data">
            <summary>
            The HeroDefinition data in the key-value pair structure. Contains the actual hero
            configuration including name, prefab reference, and avatar material for the
            associated HeroType.
            </summary>
        </member>

        <member name="F:HeroController.HeroSetupKeyPair.enumName">
            <summary>
            The HeroType enum value in the key-value pair structure. Maps the enum to its
            corresponding HeroDefinition data for serialization and configuration management.
            </summary>
        </member>

        <member name="M:Map.BlindUnits(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Blinds all enemy units within range of a position. Blinded units have impaired
            vision and targeting abilities.
            </summary>
            <param name="playerNum">Player number performing the blind effect</param>
            <param name="x">X position of the blind effect center</param>
            <param name="y">Y position of the blind effect center</param>
            <param name="range">Radius of the blind effect</param>
            <param name="blindTime">Duration of the blindness in seconds (default 9)</param>
        </member>

        <member name="M:Map.BurnBlocksAround(System.Int32,System.Int32,System.Int32,System.Boolean,UnityEngine.GameObject)">
            <summary>
            Burns blocks in the four cardinal directions (up, down, left, right) from a center
            position using raycasting. Can force burn non-oily blocks or only burn oily blocks
            based on the forced parameter.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="collumn">Grid column position of the center</param>
            <param name="row">Grid row position of the center</param>
            <param name="forced">If true, burns all blocks; if false, only burns oily blocks</param>
            <param name="ignoreGameObject">Optional GameObject to ignore during raycasting</param>
            <returns>Number of blocks that were burned</returns>
        </member>

        <member name="M:Map.BurnDamageBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
            Burns and damages a block at the specified grid position, sending both Damage and
            ForceBurn messages to all objects within a 6 unit radius. Used for guaranteed fire
            spreading to blocks.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
        </member>

        <member name="M:Map.BurnLargeObjects(System.Int32,System.Int32,System.Int32)">
            <summary>
            Burns large objects at a specific grid position by sending fire damage messages to
            all objects within a 7 unit radius sphere. Commonly used for spreading fire to
            destructible scenery.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
            <returns>True if any objects were found and damaged, false otherwise</returns>
        </member>

        <member name="M:Map.BurnLargeObjects(System.Int32,System.Single,System.Single)">
            <summary>
            Burns large objects at a specific world position by sending fire damage messages to
            all objects within a 7 unit radius sphere. Overload that accepts world coordinates
            instead of grid coordinates.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="x">World X position</param>
            <param name="y">World Y position</param>
            <returns>True if any objects were found and damaged, false otherwise</returns>
        </member>

        <member name="M:Map.BurnUnitsAround_Local(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Sets units on fire within a specified range from a position. Only affects units when
            the Demonstration.enemiesSetOnFire flag is enabled. Damage can be blocked by
            non-penetrating fire hitting units. Additionally can set ground blocks on fire if
            setGroundAlight is true.
            </summary>
            <param name="firedBy">The object that caused the fire</param>
            <param name="playerNum">Player number of the fire source</param>
            <param name="damage">Burn damage to apply</param>
            <param name="range">Radius of the fire effect</param>
            <param name="x">X position of the fire center</param>
            <param name="y">Y position of the fire center</param>
            <param name="penetrates">Whether fire goes through units or is blocked by the first unit hit</param>
            <param name="setGroundAlight">Whether to also set nearby ground blocks on fire</param>
        </member>

        <member name="M:Map.CanRollOntoUnits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if a rolling object at the specified grid position can roll onto units in
            that location. Returns false if any heavy units are present that would block the
            roll.
            </summary>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
            <param name="direction">Direction of the roll (not used in current implementation)</param>
            <returns>True if the object can roll onto units at this position, false if blocked by
                heavy units</returns>
        </member>

        <member name="M:Map.CheckForCorpse(System.Single,System.Single,System.Single,System.Single,System.Single@)">
            <summary>
            Searches for the nearest corpse within the specified area. Performs line-of-sight
            checks to ensure the corpse is accessible. Used for abilities that interact with
            dead units, such as resurrection or corpse manipulation.
            </summary>
            <param name="x">The X coordinate to search from.</param>
            <param name="y">The Y coordinate to search from.</param>
            <param name="xRange">The maximum horizontal search distance.</param>
            <param name="yRange">The maximum vertical search distance.</param>
            <param name="corpseX">Output parameter that returns the X coordinate of the found corpse.</param>
            <returns>The nearest accessible corpse unit, or null if none found.</returns>
        </member>

        <member name="M:Map.CollectUnits(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
            Collects all units within range that match the specified criteria into a list. Used
            for area effects that need to process multiple units, such as chain lightning or
            area scans.
            </summary>
            <param name="damageSender">The object collecting units (used for team checks).</param>
            <param name="playerNum">The player number performing the collection, used for team filtering.</param>
            <param name="range">The square radius from the center point for detection.</param>
            <param name="x">The X coordinate of the collection center point.</param>
            <param name="y">The Y coordinate of the collection center point.</param>
            <param name="penetrates">If true, continues collecting all units; if false, stops at the first unit.</param>
            <param name="onlyLiving">If true, only collects living units; if false, includes dead units.</param>
            <param name="alreadyHitUnits">List to populate with collected units, also excludes units already in the list.</param>
            <returns>True if at least one unit was collected, false otherwise.</returns>
        </member>

        <member name="M:Map.ConstrainToBlocks(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a sphere at the specified position overlaps with any solid blocks on the
            ground layer.
            </summary>
            <param name="x">The x-coordinate of the sphere center</param>
            <param name="y">The y-coordinate of the sphere center</param>
            <param name="size">The radius of the sphere to check</param>
            <returns>True if the sphere overlaps with any blocks on the ground layer; false
                otherwise</returns>
            <remarks>
            This method uses Unity's physics system to check for collisions with blocks. It's typically used to
            determine if a position is constrained by nearby terrain, useful for movement validation or spawn checks.
            The method uses Map.groundLayer as the layer mask for the physics check.
            </remarks>
        </member>

        <member name="M:Map.CrushUnitsAgainstWalls(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Checks units within range of a crushing force and either damages them if they're
            against a wall or pushes them away from the crusher position. Used for environmental
            crushers and moving walls.
            </summary>
            <param name="damageSender">The object causing the crushing damage</param>
            <param name="x">X position of the crusher</param>
            <param name="y">Y position of the crusher</param>
            <param name="range">Range of the crushing effect</param>
            <param name="xDirection">Horizontal direction of crushing force (1 for right, -1 for left, 0 for none)</param>
            <param name="yDirection">Vertical direction of crushing force (1 for up, -1 for down, 0 for none)</param>
        </member>

        <member name="M:Map.CrushUnitsAgainstWallsHorizontal(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Crushes units horizontally against walls within a specified size range. Uses
            raycasting to detect if there's a solid wall in the crush direction before applying
            damage.
            </summary>
            <param name="damageSender">The object causing the crushing damage</param>
            <param name="x">X position of the crusher</param>
            <param name="y">Y position of the crusher</param>
            <param name="crusherSize">Half-height of the crushing area</param>
            <param name="direction">Horizontal crushing direction (1 for right, -1 for left)</param>
        </member>

        <member name="M:Map.CrushUnitsAgainstWallsVertical(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Crushes units vertically against walls within a specified size range. Checks if
            units are positioned correctly relative to the crusher and uses raycasting to verify
            wall presence before applying crush damage.
            </summary>
            <param name="damageSender">The object causing the crushing damage</param>
            <param name="x">X position of the crusher</param>
            <param name="y">Y position of the crusher</param>
            <param name="crusherSize">Half-width of the crushing area</param>
            <param name="direction">Vertical crushing direction (1 for up, -1 for down)</param>
        </member>

        <member name="M:Map.DamageBackground(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Applies damage to both foreground and background blocks within a circular radius.
            </summary>
            <param name="damageSender">The entity causing the damage (used for damage attribution).</param>
            <param name="damage">The amount of damage to apply to affected blocks.</param>
            <param name="radius">The radius of the damage area in world units.</param>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <remarks>
            Iterates through all blocks within the damage radius and applies damage using the
            DestroyBackground damage type. Both foreground and background blocks are affected.
            The damage falls off based on distance from the center point.
            </remarks>
        </member>

        <member name="M:Map.DecapitateUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Attempts to decapitate the first eligible unit found within the specified area.
            Prioritizes headshot-capable units and applies decapitation effects, used for
            special finishing moves or precision attacks.
            </summary>
            <param name="damageSender">The object that initiated the decapitation attempt.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict if decapitation occurs.</param>
            <param name="damageType">The type of damage being inflicted.</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the attack center point.</param>
            <param name="y">The Y coordinate of the attack center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="knock">Whether to apply knockback force.</param>
            <returns>The unit that was decapitated, or null if no eligible unit was found.</returns>
        </member>

        <member name="M:Map.DoLevelEndExplosions">
            <summary>
            Coroutine that continuously generates random explosions across the visible screen
            area.
            </summary>
            <returns>An IEnumerator for the coroutine execution</returns>
            <remarks>
            This infinite coroutine creates explosions at random screen positions during the level-ending sequence.
            For each explosion attempt, it converts a random screen position to world coordinates with some overflow
            (140% screen width/height, centered at 80%). It then checks if the position contains solid blocks,
            background blocks, or ladders before creating an explosion there. The coroutine waits 0.1-0.4 seconds
            between explosions, creating a dramatic ending effect. Up to 50 position attempts are made per cycle
            to find a valid explosion location.
            </remarks>
        </member>

        <member name="M:Map.ExplodeUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an explosion that damages and knocks back units within range. Units within
            killRange take full damage, while units between killRange and range are only knocked
            back. Also handles oil ignition and worm deaths.
            </summary>
            <param name="damageSender">The object causing the explosion</param>
            <param name="damage">Base damage amount</param>
            <param name="damageType">Type of damage to apply</param>
            <param name="range">Maximum range of the explosion effect</param>
            <param name="killRange">Range within which units take damage (units beyond this but within range are only knocked back)</param>
            <param name="x">X position of explosion center</param>
            <param name="y">Y position of explosion center</param>
            <param name="force">Knockback force multiplier</param>
            <param name="yI">Additional upward impulse for knockback</param>
            <param name="playerNum">Player number for damage ownership</param>
            <param name="forceTumble">Whether to force units to tumble when knocked back</param>
            <param name="knockSelf">Whether the damage sender can knock itself back</param>
            <param name="knockFriendlies">Whether to knock back friendly units</param>
            <returns>Number of units killed by the explosion</returns>
        </member>

        <member name="M:Map.FivePointPalmExplodingHeartTechnique(NetworkedUnit,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Applies the legendary Five Point Palm Exploding Heart Technique to units and certain
            destructible objects. This martial arts move plants a delayed explosion effect that
            triggers after a countdown, inspired by Kill Bill. Also affects DamageRelay objects,
            BossBlockPieces, and BossBlockRocketBatteries.
            </summary>
            <param name="damageSender">The networked unit performing the technique (must be networked for proper synchronization).</param>
            <param name="playerNum">The player number who performed the technique.</param>
            <param name="damage">The initial damage dealt by the palm strike.</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the palm strike center point.</param>
            <param name="y">The Y coordinate of the palm strike center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="penetrates">If true, the technique continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <returns>True if at least one unit or object was affected, false otherwise.</returns>
        </member>

        <member name="M:Map.FreezeUnits(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Freezes units within range of a position. Units that can be frozen will be frozen
            for the specified duration. Units that cannot be frozen will take 8 freeze damage
            instead. Returns true if any units were affected.
            </summary>
            <param name="firedBy">The object causing the freeze effect</param>
            <param name="playerNum">Player number performing the freeze</param>
            <param name="x">X position of the freeze center</param>
            <param name="y">Y position of the freeze center</param>
            <param name="range">Radius of the freeze effect</param>
            <param name="freezeTime">Duration of the freeze in seconds</param>
            <returns>True if at least one unit was frozen or damaged, false otherwise</returns>
        </member>

        <member name="M:Map.GeLivingtUnit(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the first living, non-stealthed unit within the specified rectangular area. The
            method name contains a typo (should be GetLivingUnit) but is preserved for
            compatibility. Uses slightly expanded hit detection based on unit size for more
            forgiving targeting.
            </summary>
            <param name="playerNum">The player number searching for units, used for team filtering.</param>
            <param name="xRange">The horizontal radius from the center point for detection.</param>
            <param name="yRange">The vertical radius from the center point for detection.</param>
            <param name="x">The X coordinate of the search center point.</param>
            <param name="y">The Y coordinate of the search center point.</param>
            <returns>The first eligible living unit found, or null if none found.</returns>
        </member>

        <member name="M:Map.GetFirstUnit(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
            Finds the first unit within range that matches the specified criteria. Used for
            targeted abilities that need to select a single unit, such as grappling hooks or
            homing projectiles.
            </summary>
            <param name="damageSender">The object searching for a unit (used for team checks).</param>
            <param name="playerNum">The player number performing the search, used for team filtering.</param>
            <param name="range">The square radius from the center point for detection.</param>
            <param name="x">The X coordinate of the search center point.</param>
            <param name="y">The Y coordinate of the search center point.</param>
            <param name="onlyLiving">If true, only finds living units; if false, includes dead units.</param>
            <param name="includeSuicide">If true, includes suicide bomber units even if dead.</param>
            <param name="alreadyHitUnits">List of units to exclude from the search.</param>
            <returns>The first eligible unit found, or null if none found.</returns>
        </member>

        <member name="M:Map.GetNearbyMook(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Finds the nearest enemy mook in a specified horizontal direction. Uses Manhattan
            distance and filters by direction, health status, and unit type.
            </summary>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <param name="direction">The horizontal direction to search (1 for right, -1 for left)</param>
            <param name="canBeDead">Whether to include dead mooks in the search</param>
            <returns>The nearest mook matching criteria, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearbyMookVertical(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Finds the nearest enemy mook in a specified vertical direction. Uses Manhattan
            distance and filters by direction, health status, and unit type.
            </summary>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <param name="direction">The vertical direction to search (1 for up, -1 for down)</param>
            <param name="canBeDead">Whether to include dead mooks in the search</param>
            <returns>The nearest mook matching criteria, or null if none found</returns>
        </member>

        <member name="M:Map.HeadShotUnit(UnityEngine.MonoBehaviour,Unit,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Boolean,System.Single,System.Single)">
            <summary>
            Applies headshot damage to a unit with special headshot mechanics. Checks damage
            policies before applying damage and handles knockback separately.
            </summary>
            <param name="damageSender">The object that caused the headshot</param>
            <param name="unit">The unit to headshot</param>
            <param name="damage">The amount of damage to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="direction">The direction of the hit (-1 for left, 1 for right)</param>
            <param name="knock">Whether to apply knockback to the unit</param>
            <param name="xHit">The X position where the headshot hit</param>
            <param name="yHit">The Y position where the headshot hit</param>
        </member>

        <member name="M:Map.HitAllLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Damages all living units regardless of team within a rectangular area. Used for
            environmental hazards or attacks that damage everyone, including allies, except the
            damage sender's own player number.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number who caused the damage (units with this playerNum are immune).</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitAllLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
            Damages all living units regardless of team, tracking which units have been hit.
            Allows for damage effects that need to avoid hitting the same unit multiple times
            across multiple calls.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number who caused the damage (units with this playerNum are immune).</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="alreadyHit">List of units to skip and to add newly hit units to.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitClosestUnit(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds and damages the closest unit within range, checking line of sight. Prioritizes
            living units over dead ones but can optionally hit dead units if no living targets
            exist.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="playerNum">The player number of the attacker (determines which units are enemies)</param>
            <param name="damage">The amount of damage to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="knock">Whether to apply knockback</param>
            <param name="canGib">If false, dead units receive 0 damage (prevents gibbing)</param>
            <param name="firedLocally">Whether this damage was initiated locally (unused in this method)</param>
            <param name="checkIfUnitIsLocallyOwned">Whether to check unit ownership (unused in this method)</param>
            <param name="hitDead">Whether dead units can be targeted (default true)</param>
            <returns>The unit that was hit, or null if no valid target was found</returns>
        </member>

        <member name="M:Map.HitDeadUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Damages only dead units (corpses) within a square area. Used for attacks that can
            destroy or further damage corpses, such as explosives that gib bodies or effects
            that prevent resurrection.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="damage">The amount of damage to inflict on each corpse.</param>
            <param name="damageType">The type of damage being inflicted (affects corpse reactions).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to corpses.</param>
            <param name="yI">The vertical impulse force to apply to corpses.</param>
            <param name="penetrates">If true, damage continues through corpses; if false, stops at the first corpse hit.</param>
            <param name="knock">Whether to apply knockback force to corpses.</param>
            <returns>True if at least one corpse was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitHellUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Damages only hell-type enemy units within a square area. Used for attacks that
            specifically target demonic enemies while ignoring regular units, with options to
            filter by unit state and position.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="ignoreDeadUnits">If true, only damages living units.</param>
            <param name="onlyGroundUnits">If true, only hits units that are on the ground. Default is false.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is true.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitLivingHeroes(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Selectively damages either heroes or non-hero units based on the hitHeroes
            parameter. Used for attacks that need to differentiate between player characters and
            enemies, such as mind control effects or faction-specific attacks.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="hitHeroes">If true, only damages hero units; if false, only damages non-hero units.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Damages only living units within a square area. This overload uses equal horizontal
            and vertical range for a square hit area, commonly used for explosions and
            area-of-effect attacks.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is true.</param>
            <param name="onlyGroundUnits">If true, only hits units that are on the ground. Default is false.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Damages only living units within a rectangular area. Provides separate control over
            horizontal and vertical hit ranges, useful for attacks with non-square areas of
            effect.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is true.</param>
            <param name="onlyGroundUnits">If true, only hits units that are on the ground. Default is false.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Damages units within a square range using basic hit detection. Convenience overload
            that delegates to the canGib version with gibbing enabled by default.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="avoidID">Unit to avoid damaging (unless it catches friendly bullets)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The hit detection range (used for both horizontal and vertical axes)</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">Whether damage penetrates through units</param>
            <param name="knock">Whether to apply knockback</param>
            <returns>True if any units were hit, false otherwise</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Damages units within a square range with gibbing control. Convenience overload that
            delegates to the rectangular version with equal x/y ranges and headshots enabled by
            default.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="avoidID">Unit to avoid damaging (unless it catches friendly bullets)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The base damage amount</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The damage range (used for both axes)</param>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">Whether damage penetrates through units</param>
            <param name="knock">Whether to apply knockback</param>
            <param name="canGib">Whether units can be gibbed when killed</param>
            <returns>True if any units were hit, false otherwise</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Damages units within a rectangular area with separate x/y ranges and headshot
            control. Convenience overload that delegates to the full implementation with default
            blood color tracking and no hit unit list.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="avoidID">Unit to avoid damaging (unless it catches friendly bullets)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="canHeadShot">Whether this damage can trigger headshots for increased damage (default: true)</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,BloodColor@,System.Collections.Generic.List{Unit},System.Boolean)">
            <summary>
            Core implementation of HitUnits with full parameter control. This is the main
            implementation that handles all unit damage logic, with options for blood color
            tracking, hit unit lists, and circular vs rectangular damage areas. Most other
            HitUnits overloads delegate to this method.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="avoidID">Optional unit to exclude from damage, unless they have CatchFriendlyBullets enabled.</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="canHeadShot">Whether this damage can trigger headshots for increased damage.</param>
            <param name="bloodColor">Output parameter that returns the blood color of the last unit hit.</param>
            <param name="hitUnits">Optional list to populate with all units that were hit by this damage.</param>
            <param name="onlyDamageInRadius">If true, applies damage only to units within a circular radius instead of rectangular area.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Damages units along a line segment between two points. Standalone implementation for
            line-based damage detection, useful for beam weapons, laser attacks, or linear area
            effects. Always applies upward knockback.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="avoidID">Unit to avoid damaging (currently not implemented in this overload)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="startPos">The starting position of the line segment</param>
            <param name="endPos">The ending position of the line segment</param>
            <param name="width">The width of the line for hit detection (perpendicular distance from line)</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit},System.Boolean,System.Boolean)">
            <summary>
            Damages units within a square range with hit tracking and corpse filtering.
            Convenience overload that delegates to the corpse damage version with equal damage
            values for living and dead units.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitUnits">List of units to skip and to add newly hit units to.</param>
            <param name="ignoreDeadUnits">If true, only damages living units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit},System.Boolean)">
            <summary>
            Damages units with separate damage values for living and dead units. Convenience
            overload that delegates to the rectangular version with equal x/y ranges. Useful for
            explosions that need different corpse damage.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on living units</param>
            <param name="corpseDamage">The amount of damage to inflict on dead units (corpses)</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitUnits">List of units to skip and to add newly hit units to.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots (default: false)</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit},System.Boolean,System.Boolean)">
            <summary>
            Core implementation for damage with separate corpse damage values and rectangular
            areas. This is a standalone implementation (not a delegation) that handles all the
            damage logic for cases where living and dead units need different damage amounts.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on living units.</param>
            <param name="corpseDamage">The amount of damage to inflict on dead units (corpses).</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitUnits">List of units to skip and to add newly hit units to.</param>
            <param name="ignoreDeadUnits">If true, only damages living units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{BroforceObject},System.Boolean)">
            <summary>
            Damages units with BroforceObject list tracking for mixed object types. Standalone
            implementation that tracks hit objects as BroforceObject instead of Unit, allowing
            for more flexible hit tracking across different game object types.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on living units.</param>
            <param name="corpseDamage">The amount of damage to inflict on dead units (corpses).</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitObjects">List of BroforceObjects to skip and to add newly hit units to.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is false.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Damages all units within a square range regardless of team. Convenience overload
            that delegates to the rectangular version with equal x/y ranges. No avoidID
            parameter means all units can be damaged.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The hit detection range (used for both horizontal and vertical axes)</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Damages all units within a rectangular area regardless of team. Standalone
            implementation without avoidID that hits all units in range. Includes special
            penetration logic that reduces penetration chance based on unit mass.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="xRange">The horizontal range of the damage area</param>
            <param name="yRange">The vertical range of the damage area</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,BloodColor@)">
            <summary>
            Damages all units within a square range and tracks blood color. Convenience overload
            that delegates to the rectangular version with equal x/y ranges. Used when visual
            blood effects are needed.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The range in both X and Y directions</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <param name="bloodColor">Output parameter that returns the blood color of the last unit hit</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>

        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,BloodColor@)">
            <summary>
            Damages all units within a rectangular area and tracks blood color. Standalone
            implementation without team filtering that includes blood color tracking for visual
            effects and special penetration reduction based on unit mass.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="xRange">The horizontal range of the damage area</param>
            <param name="yRange">The vertical range of the damage area</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <param name="bloodColor">Output parameter that will contain the blood color of the last hit unit</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>

        <member name="M:Map.HitUnitsWithArrow(UnityEngine.MonoBehaviour,Arrow,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Specialized hit detection for arrow projectiles that destroys the arrow on impact.
            Handles headshot detection and applies appropriate damage based on hit location,
            simulating realistic arrow physics where the projectile stops on impact.
            </summary>
            <param name="damageSender">The object that is causing the damage. (typically the bow or crossbow).</param>
            <param name="arrow">The arrow projectile instance that will be destroyed on hit.</param>
            <param name="playerNum">The player number who shot the arrow, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on hit.</param>
            <param name="damageType">The type of damage being inflicted (typically Bullet for arrows).</param>
            <param name="xRange">The horizontal hit detection range from the arrow's position.</param>
            <param name="yRange">The vertical hit detection range from the arrow's position.</param>
            <param name="x">The X coordinate of the arrow.</param>
            <param name="y">The Y coordinate of the arrow.</param>
            <param name="xI">The horizontal velocity/force of the arrow for knockback.</param>
            <param name="yI">The vertical velocity/force of the arrow for knockback.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <returns>Always returns false after processing hits (arrow is destroyed on impact).</returns>
        </member>

        <member name="M:Map.InseminateUnits(AlienFaceHugger,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Attempts to implant alien parasites into eligible units within range. Used by
            AlienFaceHugger enemies to infect heroes with chest-bursting aliens. Only affects
            non-replicant heroes that can be inseminated.
            </summary>
            <param name="inseminator">The AlienFaceHugger performing the insemination.</param>
            <param name="playerNum">The player number of the face hugger, used for team damage rules.</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the insemination attempt center point.</param>
            <param name="y">The Y coordinate of the insemination attempt center point.</param>
            <param name="xI">The horizontal velocity of the face hugger (affects insemination angle).</param>
            <param name="yI">The vertical velocity of the face hugger (affects insemination angle).</param>
            <returns>True if a unit was successfully inseminated, false otherwise.</returns>
        </member>

        <member name="M:Map.KnockAndDamageUnit(UnityEngine.MonoBehaviour,Unit,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Applies knockback and damage to a unit. This is a convenience overload that calls
            the more detailed version with default hit position parameters (-100, -100).
            </summary>
            <param name="damageSender">The object causing the damage</param>
            <param name="unit">The unit to knock and damage</param>
            <param name="damage">Amount of damage to apply</param>
            <param name="damageType">Type of damage being applied</param>
            <param name="xI">Horizontal knockback velocity</param>
            <param name="yI">Vertical knockback velocity</param>
            <param name="direction">Direction of the attack (-1 for left, 1 for right, 0 for no specific direction)</param>
            <param name="knock">Whether to apply knockback to the unit</param>
        </member>

        <member name="M:Map.KnockAndDamageUnit(UnityEngine.MonoBehaviour,Unit,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>
            Applies knockback and damage to a unit with full control over hit position. Handles
            damage policy validation to determine if damage should be applied based on the
            relationship between sender and target. Validates knockback velocity values to
            prevent NaN issues.
            </summary>
            <param name="damageSender">The object causing the damage</param>
            <param name="unit">The unit to knock and damage</param>
            <param name="damage">Amount of damage to apply</param>
            <param name="damageType">Type of damage being applied</param>
            <param name="xI">Horizontal knockback velocity (will be set to 0 if NaN)</param>
            <param name="yI">Vertical knockback velocity (will be set to 0 if NaN)</param>
            <param name="direction">Direction of the attack (-1 for left, 1 for right, 0 for no specific direction)</param>
            <param name="knock">Whether to apply knockback to the unit</param>
            <param name="hitX">X position where the hit occurred</param>
            <param name="hitY">Y position where the hit occurred</param>
            <param name="sendPosAndVelocityAcrossNetwork">Whether to synchronize position and velocity (networking functionality excluded for modding)</param>
        </member>

        <member name="M:Map.KnockMooks(UnityEngine.MonoBehaviour,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies knockback to enemy units (mooks) without dealing damage. Used for crowd
            control effects that push enemies away without harming them, such as sonic booms or
            force pushes.
            </summary>
            <param name="damageSender">The object that initiated the knockback.</param>
            <param name="damageType">The type of force being applied (affects knockback behavior).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the knockback center point.</param>
            <param name="y">The Y coordinate of the knockback center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="penetrates">If true, knockback continues through units; if false, stops at the first unit hit.</param>
            <param name="livingUnits">If true, only affects living units; if false, affects all units.</param>
            <param name="onlyGroundUnits">If true, only affects units on the ground. Default is true.</param>
            <returns>True if at least one unit was knocked back, false otherwise.</returns>
        </member>

        <member name="M:Map.KnockUnits(UnityEngine.MonoBehaviour,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies knockback to all units (not just enemies) without dealing damage. More
            general version of KnockMooks that affects any unit regardless of allegiance, used
            for universal force effects.
            </summary>
            <param name="damageSender">The object that initiated the knockback.</param>
            <param name="damageType">The type of force being applied (affects knockback behavior).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the knockback center point.</param>
            <param name="y">The Y coordinate of the knockback center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="penetrates">If true, knockback continues through units; if false, stops at the first unit hit.</param>
            <param name="livingUnits">If true, only affects living units; if false, affects all units.</param>
            <param name="onlyGroundUnits">If true, only affects units on the ground. Default is true.</param>
            <returns>True if at least one unit was knocked back, false otherwise.</returns>
        </member>

        <member name="M:Map.MakeAllBlocksUltraTough">
            <summary>
            Sets all blocks in the map to have extremely high health, making them virtually
            indestructible.
            </summary>
            <remarks>
            This method iterates through all blocks in the map grid and sets their health to 1,000,000.
            It's typically called before the level-ending explosion sequence when destruction recording
            is enabled, ensuring that the terrain remains intact for replay or recording purposes despite
            the visual explosion effects. Only non-null blocks are affected.
            </remarks>
        </member>

        <member name="M:Map.MakeLevelEndExplosion(UnityEngine.Vector3)">
            <summary>
            Creates a single explosion at the specified position using a pooled explosive
            object.
            </summary>
            <param name="pos">The world position where the explosion should occur</param>
            <remarks>
            This method pulls an explosive from the LevelEndExplosionBank pool, resets its state, positions it,
            and triggers the explosion. The explosive is moved from the bank to the active list for tracking.
            If the bank is empty, PopulateLevelEndExplosionBank() is called to refill it. This pooling system
            ensures smooth performance during the rapid explosion sequence at level end.
            </remarks>
        </member>

        <member name="M:Map.PopulateLevelEndExplosionBank">
            <summary>
            Pre-allocates a pool of hidden explosive objects for use in the level-ending
            explosion sequence.
            </summary>
            <remarks>
            This method creates a bank of 10 HiddenExplosives instances that are reused during the level-end
            explosion sequence. The explosives are instantiated from the hiddenExplosivePrefabReference asset,
            deactivated, and marked with DontDestroyOnLoad to persist across scenes. This pooling approach
            avoids the performance cost of instantiating explosives during the intense ending sequence.
            </remarks>
        </member>

        <member name="M:Map.RegisterTargetableObject(TargetableObject)">
            <summary>
            Registers an object that can be targeted by AI units, homing projectiles, or
            auto-aim systems. Targetable objects include enemies, destructible props, or any
            gameplay element that can be selected as a valid target for attacks.
            </summary>
            <param name="target">The TargetableObject to register for targeting systems.</param>
        </member>

        <member name="M:Map.RemoveTargetableObject(TargetableObject)">
            <summary>
            Removes an object from the targetable tracking system, typically when it is
            destroyed or should no longer be considered a valid target. This prevents AI and
            homing projectiles from continuing to target defunct objects.
            </summary>
            <param name="target">The TargetableObject to remove from targeting consideration.</param>
        </member>

        <member name="M:Map.ReviveDeadUnits(System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Boolean,TestVanDammeAnim,System.Boolean)">
            <summary>
            Attempts to revive dead units or remove acid from acid-covered units within a
            circular range. Returns true if any units were successfully revived.
            </summary>
            <param name="x">X position of the revival center</param>
            <param name="y">Y position of the revival center</param>
            <param name="range">Radius within which to revive units</param>
            <param name="playerNum">Player number to assign to revived units</param>
            <param name="maxReviveCount">Maximum number of units to revive</param>
            <param name="isPlayerControlled">Whether revived units should be player-controlled</param>
            <param name="reviveSource">The source object performing the revival</param>
            <param name="reviveBros">Whether hero units (Bros) can be revived (default true)</param>
            <returns>True if at least one unit was successfully revived, false otherwise</returns>
        </member>

        <member name="M:Map.RollOntoUnits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Causes units at the specified grid position to be rolled onto, applying the RollOnto
            effect to all non-heavy units in the area.
            </summary>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
            <param name="direction">Direction of the roll to apply to affected units</param>
        </member>

        <member name="M:Map.StartLevelEndExplosions">
            <summary>
            Begins the local level-ending explosion sequence on this client.
            </summary>
            <remarks>
            This private method is called via RPC from StartLevelEndExplosionsOverNetwork(). It sets the
            explosionsHaveStarted flag and starts the DoLevelEndExplosions coroutine which continuously
            creates explosions across the screen. This method ensures the explosion sequence only starts
            once per level completion.
            </remarks>
        </member>

        <member name="M:Map.StartLevelEndExplosionsOverNetwork">
            <summary>
            Initiates the level-ending explosion sequence across all networked clients.
            </summary>
            <remarks>
            This method checks if explosions have already started to prevent duplicate triggering. If the map data
            is set to record destruction, it first makes all blocks ultra-tough to preserve the terrain structure
            during the ending sequence. The method then sends an RPC to all clients to synchronize the explosion
            start. The actual explosion sequence is handled by StartLevelEndExplosions() on each client.
            </remarks>
        </member>

        <member name="M:Map.StunUnits(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Stuns all enemy units within range of a position. Only affects units that are
            enemies of the specified player number.
            </summary>
            <param name="playerNum">Player number performing the stun</param>
            <param name="x">X position of the stun center</param>
            <param name="y">Y position of the stun center</param>
            <param name="range">Radius of the stun effect</param>
            <param name="stunTime">Duration of the stun in seconds</param>
        </member>

        <member name="M:Map.TearGasUnits(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Applies tear gas effect to all enemy units within range. Tear gas causes units to be
            temporarily incapacitated.
            </summary>
            <param name="playerNum">Player number applying the tear gas</param>
            <param name="x">X position of the tear gas center</param>
            <param name="y">Y position of the tear gas center</param>
            <param name="range">Radius of the tear gas effect</param>
            <param name="tearGasTime">Duration of the tear gas effect in seconds (default 9)</param>
        </member>

        <member name="M:Map.WhipUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Single@)">
            <summary>
            Specialized damage method for whip-like attacks that deal variable damage based on
            distance. Creates visual effects and applies damage that scales with the unit's
            position relative to the whip's reach, simulating the physics of a whip strike.
            </summary>
            <param name="damageSender">The object that is causing the damage. (typically the whip weapon).</param>
            <param name="avoidID">Optional unit to exclude from damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The base damage amount, which will be scaled by distance.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal reach of the whip attack.</param>
            <param name="yRange">The vertical reach of the whip attack.</param>
            <param name="whipDirection">The direction of the whip strike (1 for right, -1 for left).</param>
            <param name="x">The X coordinate of the whip's origin point.</param>
            <param name="y">The Y coordinate of the whip's origin point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="maxDamageM">Output parameter that returns the maximum damage multiplier achieved during the whip strike.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>

        <member name="F:Map.enemyDeathListeners">
            <summary>
            List of triggers that respond to enemy deaths. Listeners are registered via
            RegisterEnemyDeathListener and removed via RemoveEnemyDeathListener. Used for
            mission objectives, wave spawning, and event triggering based on enemy elimination.
            Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.explosionsHaveStarted">
            <summary>
            Tracks whether level end explosions have been initiated. Set to true when
            StartLevelEndExplosions is called to prevent multiple coroutines from running the
            continuous explosion effects. Used to ensure the explosion sequence only starts once
            per level.
            </summary>
        </member>

        <member name="F:Map.nearestDist">
            <summary>
            Temporary storage for the nearest distance found during proximity searches. Used by
            various nearest entity search methods (GetNearestUnit, GetNearestCheckpoint, etc.)
            to track the shortest distance while iterating through candidates. Optimizes
            performance by avoiding repeated distance allocations.
            </summary>
        </member>

        <member name="F:Map.targetableObjects">
            <summary>
            List of objects that can be targeted by AI and auto-aim systems. Objects are
            registered via RegisterTargetableObject and removed via RemoveTargetableObject. Used
            by GetNearestTargetableObject for finding valid targets within range, considering
            player allegiance and boss target priorities. Initialized in Awake() and set to null
            in OnDestroy().
            </summary>
        </member>

        <member name="M:Map.AddSlime(SlimeGroundCover,System.Int32,System.Int32,System.Int32,DirectionEnum)">
            <summary>
            Adds slime to a block surface in the specified direction if the block is solid, has
            an open face, and isn't immune to slime. Creates new slime or adds to existing slime
            coverage.
            </summary>
            <param name="slimePrefab">The SlimeGroundCover prefab to instantiate if no slime exists on the surface.</param>
            <param name="slimeAmount">The amount of slime damage/thickness to add to the surface.</param>
            <param name="collumn">The column index of the block to add slime to.</param>
            <param name="row">The row index of the block to add slime to.</param>
            <param name="direction">The direction face of the block where slime should be added (Up, Down, Left, or Right).</param>
            <returns>True if slime was successfully added; false if the block is invalid, immune to
                slime, or doesn't have an open face.</returns>
            <remarks>
            Slime can only be added to solid blocks with an adjacent empty space. If slime already exists on the surface, the amount is added to it. Otherwise, a new SlimeGroundCover instance is created.
            </remarks>
        </member>

        <member name="M:Map.AddTaggedObject(UnityEngine.GameObject,System.String)">
            <summary>
            Registers a GameObject with a string tag for later retrieval. Tags are
            case-insensitive and stored in uppercase for consistent lookup.
            </summary>
            <param name="obj">The GameObject to register with the specified tag.</param>
            <param name="tag">The string identifier to associate with the object. Must not be null or empty.</param>
            <remarks>
            Used by the trigger and scripting system to reference specific objects in the map. Tagged objects can be retrieved, damaged, or manipulated through other tag-based methods.
            </remarks>
        </member>

        <member name="M:Map.CallFakeHelicopter(UnityEngine.Vector2,System.Single)">
            <summary>
            Summons a fake helicopter to the specified position after a delay. The fake
            helicopter is a visual-only helicopter used for cinematic sequences that doesn't
            interact with gameplay.
            </summary>
            <param name="position">The target position for the helicopter</param>
            <param name="delay">The delay in seconds before the helicopter appears</param>
            <remarks>
            Creates a single shared instance of HelicopterFake if one doesn't exist. The fake helicopter is typically used for background effects or scripted sequences where a full helicopter entity isn't needed.
            </remarks>
        </member>

        <member name="M:Map.CheckCheckPoint(System.Single,System.Single,System.Single,TestVanDammeAnim)">
            <summary>
            Checks and activates checkpoints near a moving character. Considers character
            velocity for predictive checkpoint activation, triggers perks and time bonuses.
            </summary>
            <param name="xI">The character's horizontal velocity</param>
            <param name="x">The character's X coordinate</param>
            <param name="y">The character's Y coordinate</param>
            <param name="activatingCharacter">The character activating the checkpoint</param>
            <returns>True if a visible checkpoint was newly activated, false otherwise</returns>
        </member>

        <member name="M:Map.CheckPersistBlocksPastLevelLoad">
            <summary>
            Checks whether blocks should be persisted after a level load and either maintains or
            destroys them accordingly. This method is called after level transitions to handle
            the persistence state.
            </summary>
            <remarks>
            Only processes persistence if loading time optimizations are active. Sets hasPersistedPastLevelLoad to true if persistence is enabled, otherwise calls DestroyPersistantBlocks to clear any persisted blocks.
            </remarks>
        </member>

        <member name="M:Map.ClearPersistenBlocksInstant">
            <summary>
            Immediately clears all persisted blocks without waiting for a level transition. This
            provides a way to force-clear persistence state during gameplay.
            </summary>
            <remarks>
            Resets the hasPersistedPastLevelLoad flag and calls DestroyPersistantBlocks to remove all persisted blocks immediately.
            </remarks>
        </member>

        <member name="M:Map.ConstrainToBlocks(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Boolean@,System.Boolean@,System.Boolean)">
            <summary>
            Constrains movement to prevent objects from passing through solid blocks,
            calculating collision responses and bounce directions. Handles multi-frame movements
            by breaking them into smaller steps.
            </summary>
            <param name="obj">The MonoBehaviour object being constrained (used for special handling of grenades).</param>
            <param name="x">The current X position of the object.</param>
            <param name="y">The current Y position of the object.</param>
            <param name="size">The collision radius of the object.</param>
            <param name="xIT">Input/Output: The attempted X movement. Modified to valid movement amount on collision.</param>
            <param name="yIT">Input/Output: The attempted Y movement. Modified to valid movement amount on collision.</param>
            <param name="bounceX">Output: Set to true if horizontal movement should be reversed (bounce).</param>
            <param name="bounceY">Output: Set to true if vertical movement should be reversed (bounce).</param>
            <param name="strictlyGround">If true, only collides with ground layer; if false, includes other collision layers.</param>
            <returns>True if a collision occurred and movement was constrained; false if movement is
                unobstructed.</returns>
            <remarks>
            Handles large movements (&gt;16 units) by recursively breaking them into smaller steps. Checks collisions at destination position and adjusts movement to stop at block boundaries.
            </remarks>
        </member>

        <member name="M:Map.Create4AmmoAndRevives(UnityEngine.Vector3,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a 2x2 arrangement of ammunition and revival crates at the specified
            position. The arrangement includes two ammo crates (top), one revive crate
            (bottom-left), and one damage crate (bottom-right).
            </summary>
            <param name="pos">The position for the top-left crate</param>
            <param name="collumn">The column index for block array placement</param>
            <param name="row">The row index for block array placement</param>
            <param name="setupBlocks">Whether to run block setup logic (connections to adjacent blocks)</param>
            <remarks>
            Sets the active theme to jungle theme for crate selection. Each crate is properly registered in the blocks array, networked, and initialized. If setupBlocks is true, establishes connections to adjacent blocks and runs FirstFrame initialization.
            </remarks>
        </member>

        <member name="M:Map.CreateExitPortal(UnityEngine.Vector2)">
            <summary>
            Creates a hero level exit portal at the specified position, typically used for level
            completion.
            </summary>
            <param name="position">The base position where the portal should be created.</param>
            <remarks>
            The portal is instantiated at an offset position (x+16, y+112) from the provided coordinates
            to properly align with the game's grid system. The portal is registered with the networking
            system using a deterministic ID for multiplayer synchronization.
            </remarks>
        </member>

        <member name="M:Map.CreateExitPortal(UnityEngine.Vector2)">
            <summary>
            Creates a hero level exit portal at the specified position. The portal is positioned
            with a vertical offset of 112 units and a horizontal offset of 16 units from the
            provided coordinates.
            </summary>
            <param name="position">The base position where the portal should be created</param>
            <remarks>
            The portal is instantiated from the exitPortalPrefabReference asset and registered with the game's networking system using a deterministic network ID. This ensures the portal is properly synchronized across all clients in multiplayer sessions.
            </remarks>
        </member>

        <member name="M:Map.CreateRemoteControlCar(System.Single,System.Single)">
            <summary>
            Creates and networks a remote control explosive car at the specified position.
            </summary>
            <param name="x">The x-coordinate for spawning the car</param>
            <param name="y">The y-coordinate for spawning the car</param>
            <returns>The created RemoteControlExplosiveCar instance</returns>
            <remarks>
            This method instantiates a networked remote control car from the remoteCarPrefabReference asset.
            The car is created at the specified coordinates with identity rotation. The Networking.Instantiate
            call ensures the car is properly synchronized across all clients. These cars are typically used
            as player-controlled explosive devices in gameplay.
            </remarks>
        </member>

        <member name="M:Map.CrossProduct(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Calculates the 2D cross product (scalar) of vectors formed by three points.
            </summary>
            <param name="pointA">The origin point for both vectors</param>
            <param name="pointB">The end point of the first vector</param>
            <param name="pointC">The end point of the second vector</param>
            <returns>The scalar cross product of vectors AB and AC</returns>
            <remarks>
            This method computes the 2D cross product (z-component) of vectors from point A to points B and C.
            The result's magnitude represents twice the area of the triangle formed by the three points, and
            its sign indicates the winding order (clockwise or counterclockwise). This is used in geometric
            calculations, particularly for determining which side of a line a point lies on and in distance
            calculations. Note the unusual array notation (e.g., pointB[0]) instead of pointB.x, which may
            be a decompilation artifact.
            </remarks>
        </member>

        <member name="M:Map.DamageBackground(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Damages background and foreground blocks within a circular radius. This method is
            used for explosive damage that affects the destructible terrain behind the main play
            area.
            </summary>
            <param name="damageSender">The MonoBehaviour that is causing the damage (used for damage attribution)</param>
            <param name="damage">The amount of damage to apply to blocks</param>
            <param name="radius">The radius of the damage effect in world units</param>
            <param name="x">The X coordinate of the damage center</param>
            <param name="y">The Y coordinate of the damage center</param>
            <remarks>
            Calculates which grid cells fall within the damage radius and applies damage to both background and foreground blocks. Uses MapController.Damage_Networked to ensure damage is synchronized across all clients. The damage type is specifically set to DestroyBackground.
            </remarks>
        </member>

        <member name="M:Map.DamageDoodadByTag(System.String,System.Int32)">
            <summary>
            Damages all doodads (environmental objects) with the specified tag. Handles both
            Unit components and generic damage message receivers.
            </summary>
            <param name="tag">The tag identifying which doodads to damage (case-insensitive).</param>
            <param name="damage">The amount of damage to apply to each matching doodad.</param>
            <returns>True if at least one doodad with the tag was found (even if it couldn't be
                damaged); false if no matching doodads exist.</returns>
            <remarks>
            Iterates through all doodads in MapData.DoodadList with matching tags. For objects with Unit components, calls the Damage method directly. For others, sends a "Damage" message with a DamageObject parameter.
            </remarks>
        </member>

        <member name="M:Map.DestroyPersistantBlocks">
            <summary>
            Destroys all persisted blocks and clears the persistence system. This removes both
            foreground and background persistent blocks and their container GameObject.
            </summary>
            <remarks>
            Iterates through all persistent block arrays and destroys each block's GameObject before clearing the arrays and destroying the persistent container. Also resets the hasPersistedPastLevelLoad flag.
            </remarks>
        </member>

        <member name="M:Map.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Calculates the Euclidean distance between two 2D points using manual calculation.
            This method provides a basic distance calculation used internally for geometric
            operations.
            </summary>
            <param name="pointA">The first point in 2D space</param>
            <param name="pointB">The second point in 2D space</param>
            <returns>The Euclidean distance between the two points</returns>
            <remarks>
            This method manually calculates distance using the formula: sqrt((x2-x1)² + (y2-y1)²). It's primarily used by the LineToPointDistance2D method for calculating perpendicular distances from points to line segments.
            </remarks>
        </member>

        <member name="M:Map.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Calculates the Euclidean distance between two 2D points using the standard distance
            formula.
            </summary>
            <param name="pointA">The first point in 2D space.</param>
            <param name="pointB">The second point in 2D space.</param>
            <returns>The distance between the two points as a float value.</returns>
            <remarks>
            This is a utility method used internally for various geometric calculations in the map system,
            particularly for line-to-point distance calculations. It uses the standard formula:
            sqrt((x2-x1)^2 + (y2-y1)^2).
            </remarks>
        </member>

        <member name="M:Map.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Calculates the Euclidean distance between two 2D points using manual calculation.
            This method provides a basic distance calculation used internally for geometric
            operations.
            </summary>
            <param name="pointA">The first point in 2D space</param>
            <param name="pointB">The second point in 2D space</param>
            <returns>The Euclidean distance between the two points</returns>
            <remarks>
            This method manually calculates distance using the formula: sqrt((x2-x1)² + (y2-y1)²). It's primarily used by the LineToPointDistance2D method for calculating perpendicular distances from points to line segments.
            </remarks>
        </member>

        <member name="M:Map.DoesForegroundBlockHaveBackground(GroundType)">
            <summary>
            Determines if a foreground block type should have a background layer rendered behind
            it. Most solid blocks have backgrounds, while bridges, ladders, and decorative
            elements do not.
            </summary>
            <param name="foregroundType">The ground type to check.</param>
            <returns>True if this ground type should have a background; false for transparent or
                pass-through blocks like ladders, bridges, and decorative elements.</returns>
        </member>

        <member name="M:Map.DoesForegroundBlockHaveBackground(TerrainType)">
            <summary>
            Determines if a foreground terrain type should have a background layer rendered
            behind it. Used during map generation to determine background placement.
            </summary>
            <param name="foregroundType">The terrain type to check.</param>
            <returns>True if this terrain type should have a background; false for transparent or
                pass-through terrain like ladders, bridges, and air.</returns>
        </member>

        <member name="M:Map.DontPersistBlocks">
            <summary>
            Disables block persistence for the next level load. This prevents blocks from being
            maintained between level transitions, ensuring a fresh map state.
            </summary>
            <remarks>
            Sets the persistPastLevelLoad flag to false. This method should be called when you want to ensure all blocks are cleared and recreated on the next level load, typically when transitioning to a completely different area.
            </remarks>
        </member>

        <member name="M:Map.DotProduct(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Calculates the dot product of vectors formed by three points, used for angle
            calculations.
            </summary>
            <param name="pointA">The first point defining the start of the first vector</param>
            <param name="pointB">The second point, end of first vector and start of second vector</param>
            <param name="pointC">The third point defining the end of the second vector</param>
            <returns>The dot product of vectors AB and BC</returns>
            <remarks>
            This helper method computes the dot product between two vectors formed by three sequential points.
            It creates vector AB (from A to B) and vector BC (from B to C), then returns their dot product.
            This is commonly used in distance calculations and determining angles between line segments,
            particularly in the line-to-point distance calculations used elsewhere in the map system.
            </remarks>
        </member>

        <member name="M:Map.FindHoleToJumpThroughAndAppear(System.Single,System.Single,System.Single@,System.Single@,System.Int32@)">
            <summary>
            Searches for a suitable floor opening where a character can jump through and appear
            from below. Used for dramatic entrance animations and spawn mechanics.
            </summary>
            <param name="xPos">The X coordinate around which to search for jump-through points.</param>
            <param name="yPos">The Y coordinate around which to search for jump-through points.</param>
            <param name="characterX">When successful, contains the X coordinate where the character should appear (centered in the empty column).</param>
            <param name="characterY">When successful, contains the Y coordinate where the character should appear (one block below the floor).</param>
            <param name="jumpDirection">When successful, contains the horizontal direction to jump: 1 for right, -1 for left.</param>
            <returns>True if a suitable jump-through location was found; false otherwise.</returns>
            <remarks>
            Searches within 9 columns on each side and up to 3 rows above. A valid location must have a solid floor block with at least 4 empty blocks below on one side.
            </remarks>
        </member>

        <member name="M:Map.FindLadderNearPosition(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Searches for a ladder block near the specified position and returns the optimal
            climbing position. Uses a default search range of 8 units, prioritizing ladders to
            the right of the position.
            </summary>
            <param name="xPos">The X coordinate of the search origin position.</param>
            <param name="yPos">The Y coordinate of the search origin position.</param>
            <param name="characterX">When successful, contains the X coordinate where the character should be positioned to climb the ladder (centered on the ladder at blockX + 8).</param>
            <param name="characterY">When successful, contains the Y coordinate where the character should be positioned (same as yPos).</param>
            <returns>True if a ladder was found within range; false if no ladder exists or the
                position is out of bounds.</returns>
            <remarks>
            Searches for all ladder types (normal, desert, city, metal, alien). The search prioritizes ladders in front (3/4 of range to the right) before checking behind (remaining 1/4 to the left).
            </remarks>
        </member>

        <member name="M:Map.FindLadderNearPosition(System.Single,System.Single,System.Int32,System.Single@,System.Single@)">
            <summary>
            Searches for a ladder block near the specified position within a custom range and
            returns the optimal climbing position. Prioritizes ladders in front of the search
            position.
            </summary>
            <param name="xPos">The X coordinate of the search origin position.</param>
            <param name="yPos">The Y coordinate of the search origin position.</param>
            <param name="range">The horizontal search range in grid units. The method searches from -range/4 to +range columns.</param>
            <param name="characterX">When successful, contains the X coordinate where the character should be positioned to climb the ladder.</param>
            <param name="characterY">When successful, contains the Y coordinate where the character should be positioned (same as yPos).</param>
            <returns>True if a ladder was found within range; false if no ladder exists or the
                position is out of bounds.</returns>
            <remarks>
            The search is asymmetric: it first checks 3/4 of the range to the right (forward), then 1/4 to the left (behind). This prioritization helps AI units find ladders in their movement direction.
            </remarks>
        </member>

        <member name="M:Map.FindLargeBlockDimensions(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,TerrainType,TerrainType[,])">
            <summary>
            Analyzes a terrain region to find the dimensions of a contiguous area of the same
            terrain type. Used for optimizing terrain mesh generation by combining adjacent
            blocks.
            </summary>
            <param name="x">The starting column position to analyze.</param>
            <param name="y">The starting row position to analyze.</param>
            <param name="firstCollumn">Output parameter containing the leftmost column of the contiguous area.</param>
            <param name="firstRow">Output parameter containing the bottom row of the contiguous area.</param>
            <param name="collumns">Output parameter containing the width of the contiguous area in columns.</param>
            <param name="rows">Output parameter containing the height of the contiguous area in rows.</param>
            <param name="currentTerrain">The terrain type to match when finding contiguous blocks.</param>
            <param name="terrainTypes">The 2D array of terrain types to analyze.</param>
            <remarks>
            Protected method that expands from the starting position in all four directions until it finds different terrain types or map boundaries. Validates that all corners match to ensure rectangular regions.
            </remarks>
        </member>

        <member name="M:Map.FindStartLocation">
            <summary>
            Determines the starting location for the level based on game mode and spawn point
            configuration. Handles different spawn strategies for various game modes.
            </summary>
            <returns>A Vector3 representing the world position where gameplay should begin.</returns>
            <remarks>
            For Suicide Horde mode, uses the first spawn point. For other modes, attempts to find spawn points or falls back to calculating a position based on map dimensions and highest solid block.
            </remarks>
        </member>

        <member name="M:Map.GetAmmoCrateFrequency">
            <summary>
            Calculates the spawn frequency for ammunition crates based on game mode and player
            progression. Higher values mean less frequent spawns.
            </summary>
            <returns>A float representing the spawn frequency multiplier for ammo crates.</returns>
            <remarks>
            Hardcore mode: 23x base frequency. Death match: 15x frequency. World map campaign: 30 minus (2 per unlocked pickup, max 15). Default: 23x. All values are multiplied by MapData.ammoCrateFrequencyMultiplier.
            </remarks>
        </member>

        <member name="M:Map.GetBlockCenter(GridPoint)">
            <summary>
            Converts a grid point to its world position center coordinates.
            </summary>
            <param name="gridPoint">The grid point containing column and row indices</param>
            <returns>The world position at the center of the specified grid cell</returns>
            <remarks>
            This overload provides a convenient way to get world coordinates from a GridPoint object.
            It simply delegates to the GetBlockCenter(int, int) method using the gridPoint's column
            and row values. This is useful when working with grid-based game logic that needs to
            convert grid positions to world positions for spawning or positioning objects.
            </remarks>
        </member>

        <member name="M:Map.GetBlocksXY(System.Single@,System.Single@,System.Int32,System.Int32)">
            <summary>
            Converts grid coordinates to world position using reference parameters. More
            efficient version for when you need both x and y coordinates.
            </summary>
            <param name="x">Reference parameter that will contain the world x coordinate</param>
            <param name="y">Reference parameter that will contain the world y coordinate</param>
            <param name="row">The row index in the grid</param>
            <param name="collumn">The column index in the grid</param>
        </member>

        <member name="M:Map.GetBlocksXYPosition(System.Int32,System.Int32)">
            <summary>
            Converts grid coordinates (column, row) to world position. Used for positioning
            objects on the map grid.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector3 representing the world position of the grid cell</returns>
        </member>

        <member name="M:Map.GetCheckPoint(System.Int32)">
            <summary>
            Retrieves a checkpoint by its ID number. Performs bounds checking to ensure the
            requested ID is valid.
            </summary>
            <param name="id">The checkpoint ID to retrieve (0-based index).</param>
            <returns>The CheckPoint object with the specified ID, or null if the ID is out of
                bounds.</returns>
        </member>

        <member name="M:Map.GetCheckPointAirHeight(System.Int32)">
            <summary>
            Retrieves the extra height offset for airdrop spawning at a specific checkpoint.
            This value is added to the default spawn height for airdrop checkpoints.
            </summary>
            <param name="id">The checkpoint ID to query.</param>
            <returns>The airDropExtraHeight value from the checkpoint if it exists, or 16f as the
                default height if the ID is invalid.</returns>
        </member>

        <member name="M:Map.GetCollumn(System.Single)">
            <summary>
            Converts a world x coordinate to a grid column index. Each grid cell is 16 units
            wide.
            </summary>
            <param name="x">The world x coordinate</param>
            <returns>The column index in the grid</returns>
        </member>

        <member name="M:Map.GetDoodadByTag(System.String)">
            <summary>
            Retrieves a single GameObject by its tag, searching both the persistent doodad list
            and dynamically tagged objects. Returns the first match found.
            </summary>
            <param name="tag">The tag to search for (case-insensitive).</param>
            <returns>The first GameObject found with the specified tag, or null if no object has
                that tag.</returns>
            <remarks>
            First searches the MapData.DoodadList for persistent level objects, then checks the dynamic taggedObjects dictionary. Used by triggers and scripts to find specific objects.
            </remarks>
        </member>

        <member name="M:Map.GetDoodadsByTag(System.String)">
            <summary>
            Retrieves all GameObjects with the specified tag, including both persistent doodads
            and dynamically tagged objects.
            </summary>
            <param name="tag">The tag to search for (case-insensitive).</param>
            <returns>A List containing all GameObjects with the specified tag. Returns an empty list
                if no matches are found.</returns>
            <remarks>
            Searches both the MapData.DoodadList for level-placed objects and the taggedObjects dictionary for dynamically added objects. Unlike GetDoodadByTag, this returns all matches rather than just the first.
            </remarks>
        </member>

        <member name="M:Map.GetGroundHeight(System.Single,System.Single)">
            <summary>
            Finds the height of the ground directly below the specified position using
            raycasting. Performs multiple raycasts to ensure accurate ground detection even near
            edges.
            </summary>
            <param name="x">The X coordinate from which to cast rays downward.</param>
            <param name="y">The Y coordinate from which to start the raycast.</param>
            <returns>The Y coordinate of the ground surface if found; 0 if no ground is detected
                below the position.</returns>
            <remarks>
            Performs three raycasts: at the exact position, 16 units to the right, and 16 units to the left. This ensures ground detection even when the character is partially off a platform. Uses groundLayerStrict for precise collision.
            </remarks>
        </member>

        <member name="M:Map.GetLeafColor">
            <summary>
            Gets the leaf color defined by the current map theme.
            </summary>
            <returns>The Color value for leaves in the active theme</returns>
            <remarks>
            This method returns the theme-specific leaf color used for vegetation rendering. Different
            themes (jungle, forest, etc.) can define unique leaf colors to match their visual style.
            The color is typically used by particle systems, vegetation sprites, or environmental effects
            to maintain consistent theming throughout the level.
            </remarks>
        </member>

        <member name="M:Map.GetMaxCollumns">
            <summary>
            Gets the maximum number of columns in the current map, representing the map's width
            in grid units.
            </summary>
            <returns>The total number of columns in the map grid (Map.Width).</returns>
            <remarks>
            Provides a consistent interface for accessing map dimensions. The map uses a column-based grid system where each column is 16 units wide.
            </remarks>
        </member>

        <member name="M:Map.GetMaxRows">
            <summary>
            Gets the maximum number of rows in the current map, representing the map's height in
            grid units.
            </summary>
            <returns>The total number of rows in the map grid (Map.Height).</returns>
            <remarks>
            Provides a consistent interface for accessing map dimensions. The map uses a row-based grid system where each row is 16 units tall.
            </remarks>
        </member>

        <member name="M:Map.GetNearbyCheckPoint(System.Single,System.Single,System.Single)">
            <summary>
            Finds the nearest checkpoint within range that isn't blocked by a unit. Used for
            spawn point determination and checkpoint activation checks.
            </summary>
            <param name="radius">The search radius</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>The nearest unblocked checkpoint within range, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestCheckPoint(System.Int32,System.Single,System.Single)">
            <summary>
            Finds the nearest checkpoint within range of a position using Manhattan distance.
            Searches through all registered checkpoints regardless of activation state.
            </summary>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <returns>The nearest checkpoint, or null if none found within range</returns>
        </member>

        <member name="M:Map.GetNearestCheckPointToRight(System.Single,System.Single,System.Boolean)">
            <summary>
            Finds the nearest checkpoint that is to the right of the specified position. Used
            for checkpoint discovery and progression tracking.
            </summary>
            <param name="x">The x coordinate of the starting position</param>
            <param name="y">The y coordinate of the starting position</param>
            <param name="onlyUnactivatedCheckpoints">Whether to only consider checkpoints that haven't been activated yet</param>
            <returns>The nearest checkpoint to the right, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestRescueBro(System.Single,System.Single)">
            <summary>
            Finds the nearest rescue bro (caged prisoner) to the specified position. Used for
            locating prisoners that can be freed to gain extra lives.
            </summary>
            <param name="x">The x coordinate of the search position</param>
            <param name="y">The y coordinate of the search position</param>
            <returns>The nearest RescueBro object, or null if none found or HeroController is not
                available</returns>
        </member>

        <member name="M:Map.GetRow(System.Single)">
            <summary>
            Converts a world y coordinate to a grid row index. Each grid cell is 16 units tall.
            </summary>
            <param name="y">The world y coordinate</param>
            <returns>The row index in the grid</returns>
        </member>

        <member name="M:Map.GetRowCollumn(System.Single,System.Single,System.Int32@,System.Int32@)">
            <summary>
            Converts world position to grid coordinates using reference parameters. Used to find
            which grid cell contains a given world position.
            </summary>
            <param name="x">The world x coordinate</param>
            <param name="y">The world y coordinate</param>
            <param name="row">Reference parameter that will contain the row index</param>
            <param name="collumn">Reference parameter that will contain the column index</param>
        </member>

        <member name="M:Map.GetSpawnPoint(System.Int32)">
            <summary>
            Retrieves the SpawnPoint object for the specified player number. Uses modulo
            arithmetic with spawnPointOffset to cycle through available spawn points if there
            are fewer spawn points than players.
            </summary>
            <param name="playerNum">The player number (0-based) requesting a spawn point.</param>
            <returns>The SpawnPoint object for the player, or null if no valid spawn points exist or
                playerNum is negative.</returns>
        </member>

        <member name="M:Map.GetSpawnPointPosition(System.Int32)">
            <summary>
            Retrieves the world position of a spawn point for the specified player number. Uses
            modulo arithmetic with spawnPointOffset to cycle through available spawn points if
            there are fewer spawn points than players.
            </summary>
            <param name="playerNum">The player number (0-based) requesting a spawn position.</param>
            <returns>The Vector3 position of the spawn point, or (-1000, -1000, -1000) if no valid
                spawn points exist or playerNum is negative.</returns>
        </member>

        <member name="M:Map.GetUnitXOffset">
            <summary>
            Generates a pseudo-random horizontal offset for unit positioning.
            </summary>
            <returns>A horizontal offset value between -5 and +5 units with complex distribution</returns>
            <remarks>
            This method creates varied unit spawn positions to prevent overlap when multiple units spawn
            at the same location. It uses a deterministic sequence based on unitOffsetCount that combines
            multiple modulo operations to create an irregular but repeatable pattern. The formula produces
            offsets that cluster around certain values while still covering the full -5 to +5 range,
            creating natural-looking unit spread. The counter increments with each call, ensuring unique
            offsets for sequential spawns.
            </remarks>
        </member>

        <member name="M:Map.HasSandStormTrigger">
            <summary>
            Checks whether the current map contains any sandstorm or sandworm trigger actions.
            This is used to determine if desert-specific environmental effects should be
            prepared.
            </summary>
            <returns>True if the map contains sandstorm or sandworm triggers, false otherwise</returns>
            <remarks>
            Iterates through all triggers in the MapData and checks their actions for Sandstorm or CallSandworm types. These triggers create environmental hazards specific to desert-themed levels.
            </remarks>
        </member>

        <member name="M:Map.HasThisMapGotAliens">
            <summary>
            Checks whether the current map contains alien enemies. This is used to determine if
            alien-specific gameplay mechanics should be enabled.
            </summary>
            <returns>True if the map contains aliens, false otherwise</returns>
            <remarks>
            Returns the value of the hasAliens static field, which is set during map loading based on the presence of alien spawn points or alien-themed elements.
            </remarks>
        </member>

        <member name="M:Map.InsideWall(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Checks if a position is inside a wall or solid terrain using a reduced radius
            collision check.
            </summary>
            <param name="x">The X coordinate of the position to check.</param>
            <param name="y">The Y coordinate of the position to check.</param>
            <param name="size">The size of the object. The actual check uses size/2 as the radius.</param>
            <param name="strictlyGround">If true, only checks ground layers; if false, includes additional collision layers.</param>
            <returns>True if the position overlaps solid terrain; false if the position is clear.</returns>
            <remarks>
            Uses half the provided size for the collision check, making it more permissive than IsOverGround. Useful for checking if objects are embedded in terrain.
            </remarks>
        </member>

        <member name="M:Map.IsBackgroundBlock(System.Int32,System.Int32)">
            <summary>
            Checks if a background block exists at the specified grid position. Background
            blocks are visual elements rendered behind the main terrain.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if a background block exists at this position; false if the position is
                out of bounds or no background block exists.</returns>
        </member>

        <member name="M:Map.IsBlockCompatible(GroundType,System.Int32,System.Int32)">
            <summary>
            Checks if the terrain at the specified position is compatible with the given ground
            type for blending. Combines boundary checking with terrain compatibility rules.
            </summary>
            <param name="compareGroundType">The ground type to check compatibility with.</param>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is out of bounds or the terrain is compatible; false if
                incompatible terrain exists.</returns>
        </member>

        <member name="M:Map.IsBlockDestroyed(System.Int32,System.Int32)">
            <summary>
            Checks if the block at the specified position has been destroyed. Destroyed blocks
            no longer provide collision or visual representation.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is out of bounds, empty, or the block is marked as
                destroyed; false if an intact block exists.</returns>
        </member>

        <member name="M:Map.IsBlockEmpty(System.Int32,System.Int32)">
            <summary>
            Checks if the specified grid position has no block. Empty positions allow free
            movement and projectile passage.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is empty (no block) or out of bounds; false if a block
                exists.</returns>
        </member>

        <member name="M:Map.IsBlockFacingOpen(System.Int32,System.Int32,DirectionEnum)">
            <summary>
            Checks if a solid block has an open (non-solid) adjacent block in the specified
            direction. Used for determining valid surfaces for slime attachment and other
            directional mechanics.
            </summary>
            <param name="c">The column index of the block to check.</param>
            <param name="r">The row index of the block to check.</param>
            <param name="direction">The direction to check for an open adjacent block (Up, Down, Left, or Right).</param>
            <returns>True if the block at (c,r) is solid and has a non-solid block in the specified
                direction; false otherwise.</returns>
            <remarks>
            Protected method used internally by slime placement and other surface-attachment systems. Ensures the base block is solid before checking the adjacent space.
            </remarks>
        </member>

        <member name="M:Map.IsBlockFloor(System.Int32,System.Int32)">
            <summary>
            Determines if a block position represents a floor tile by checking if it's solid
            with at least two empty blocks above it. Used for pathfinding and spawn placement.
            </summary>
            <param name="c">The column index of the block to check.</param>
            <param name="r">The row index of the block to check.</param>
            <returns>True if the block is solid and has two empty blocks directly above it; false
                otherwise.</returns>
            <remarks>
            Protected method used by AI pathfinding and spawn systems to identify walkable surfaces with sufficient clearance for character movement.
            </remarks>
        </member>

        <member name="M:Map.IsBlockLadder(System.Int32,System.Int32)">
            <summary>
            Checks if the block at the specified position is a ladder that units can climb.
            Checks the original map data for any ladder terrain type.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position contains any type of climbable ladder; false otherwise.</returns>
        </member>

        <member name="M:Map.IsBlockLadder(System.Single,System.Single)">
            <summary>
            Checks if the position contains a ladder that units can climb. Convenience overload
            that converts world coordinates to grid position.
            </summary>
            <param name="x">The world X coordinate to check.</param>
            <param name="y">The world Y coordinate to check.</param>
            <returns>True if the position contains any type of climbable ladder; false otherwise.</returns>
        </member>

        <member name="M:Map.IsBlockQuicksand(System.Int32,System.Int32)">
            <summary>
            Checks if the block at the specified position is quicksand. Quicksand blocks slow
            movement and can trap units that stay too long.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position contains an intact quicksand block; false if out of
                bounds, empty, or destroyed.</returns>
        </member>

        <member name="M:Map.IsBlockQuicksand(System.Single,System.Single)">
            <summary>
            Checks if the position contains quicksand. Convenience overload that converts world
            coordinates to grid position.
            </summary>
            <param name="x">The world X coordinate to check.</param>
            <param name="y">The world Y coordinate to check.</param>
            <returns>True if the position contains an intact quicksand block; false otherwise.</returns>
        </member>

        <member name="M:Map.IsBlockSandbag(System.Int32,System.Int32)">
            <summary>
            Checks if the block at the specified position is a sandbag. Sandbags provide cover
            and can be destroyed by explosions.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the position contains a sandbag block; false otherwise.</returns>
        </member>

        <member name="M:Map.IsBlockSolid(GridPoint)">
            <summary>
            Checks if the block at a grid point position is solid and blocks movement.
            Convenience overload that accepts a GridPoint structure.
            </summary>
            <param name="gp">The grid point containing column and row coordinates.</param>
            <returns>True if the block is solid and blocks movement; false if empty or passable.</returns>
        </member>

        <member name="M:Map.IsBlockSolid(System.Int32,System.Int32)">
            <summary>
            Checks if the block at the specified grid position is solid and blocks movement.
            Solid blocks prevent units from passing through, except for ladder types which are
            climbable.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the block is solid and blocks movement (including out-of-bounds
                positions); false if empty, destroyed, or a climbable ladder type.</returns>
        </member>

        <member name="M:Map.IsBlockSolidTerrain(System.Int32,System.Int32)">
            <summary>
            Checks if the block at the specified position is solid terrain (earth, rock, metal,
            etc). Used to distinguish terrain blocks from other solid objects.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the block is solid terrain or position is out of bounds; false if
                empty, destroyed, or non-terrain block type.</returns>
        </member>

        <member name="M:Map.IsBlockSolidTerrain(GroundType,System.Int32,System.Int32)">
            <summary>
            Checks if the block at the specified position is solid according to the ground type
            rules. Overload that accepts a ground type parameter (though it's not used in the
            implementation).
            </summary>
            <param name="groundType">The ground type parameter (unused in current implementation).</param>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is out of bounds or contains a solid ground type; false if
                empty or non-solid.</returns>
        </member>

        <member name="M:Map.IsBlockSolidToWater(System.Int32,System.Int32)">
            <summary>
            Checks if the block at the specified position blocks water flow. Bridges and ladders
            allow water to pass through, while solid blocks contain it.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the block prevents water flow (including out-of-bounds); false if water
                can pass through or no block exists.</returns>
        </member>

        <member name="M:Map.IsCheckPointAnAirdrop(System.Int32)">
            <summary>
            Determines whether a checkpoint with the specified ID is configured as an airdrop
            checkpoint. Airdrop checkpoints spawn players from above rather than on the ground.
            </summary>
            <param name="id">The checkpoint ID to check.</param>
            <returns>True if the checkpoint exists and has its airDropCheckPoint flag set, false
                otherwise.</returns>
        </member>

        <member name="M:Map.IsCitizenNearby(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Checks if any citizen (civilian NPC) is within a rectangular range of the specified
            position. Used for AI decisions and player actions that need to consider nearby
            civilians.
            </summary>
            <param name="x">The X coordinate to check from</param>
            <param name="y">The Y coordinate to check from</param>
            <param name="xRange">The horizontal search range in world units</param>
            <param name="yRange">The vertical search range in world units</param>
            <returns>True if at least one citizen is within the specified range, false otherwise</returns>
            <remarks>
            Iterates through the citizens list backwards and checks each citizen's position against the provided range. The rectangular check uses absolute distance comparisons for efficiency.
            </remarks>
        </member>

        <member name="M:Map.IsCollumnEmpty(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if a vertical column of blocks is completely empty (non-solid) within the
            specified row span. Supports both upward and downward checking based on rowSpan
            sign.
            </summary>
            <param name="c">The column index to check.</param>
            <param name="r">The starting row index.</param>
            <param name="rowSpan">The number of rows to check. Negative values check downward, positive values check upward.</param>
            <returns>True if all blocks in the specified column range are non-solid or out of
                bounds; false if any solid block exists.</returns>
            <remarks>
            Protected method used by jump-through detection and vertical clearance checks. Bounds checking ensures out-of-bounds positions are treated as empty.
            </remarks>
        </member>

        <member name="M:Map.IsForegroundBlock(System.Int32,System.Int32)">
            <summary>
            Checks if a foreground block exists at the specified grid position. Foreground
            blocks are the main terrain elements that units interact with.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if a foreground block exists at this position; false if the position is
                out of bounds or no foreground block exists.</returns>
        </member>

        <member name="M:Map.IsGround(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Checks if a grid position contains solid ground by testing for colliders at the
            block's center position.
            </summary>
            <param name="collumn">The column index of the grid position to check.</param>
            <param name="row">The row index of the grid position to check.</param>
            <param name="strictlyGround">If true, only checks ground layers; if false, includes additional collision layers.</param>
            <returns>True if ground exists at the specified grid position; false otherwise.</returns>
            <remarks>
            Performs a sphere overlap check with a 6-unit radius at the block's center. Used for pathfinding and terrain queries at the grid level.
            </remarks>
        </member>

        <member name="M:Map.IsGroundEmpty(UnityEngine.Texture2D,System.Int32,System.Int32)">
            <summary>
            Checks if a pixel in a terrain texture represents empty space based on its alpha
            channel. Used during map generation from image data.
            </summary>
            <param name="tex">The texture to sample.</param>
            <param name="x">The X coordinate of the pixel to check.</param>
            <param name="y">The Y coordinate of the pixel to check.</param>
            <returns>True if the pixel's alpha value is less than 0.94 (mostly transparent); false
                if opaque.</returns>
            <remarks>
            Protected method used during map loading to distinguish between solid terrain (opaque pixels) and empty space (transparent pixels) in level textures.
            </remarks>
        </member>

        <member name="M:Map.IsGroundTypeSolid(GroundType)">
            <summary>
            Determines if a ground type represents solid terrain that blocks movement. Central
            method for defining which terrain types are considered solid obstacles.
            </summary>
            <param name="groundType">The ground type to check.</param>
            <returns>True if the ground type is solid and blocks movement; false for passable types
                like ladders, bridges, and decorative elements.</returns>
        </member>

        <member name="M:Map.IsMapOpenAboveCrate(System.Int32,System.Int32)">
            <summary>
            Checks if the map area above a crate position is sufficiently open for gameplay
            purposes.
            </summary>
            <param name="collumn">The column coordinate of the crate.</param>
            <param name="row">The row coordinate of the crate.</param>
            <returns>True if the area above is open enough; false if too many solid blocks are
                present.</returns>
            <remarks>
            Examines up to 3 tiles above the crate position and counts solid blocks in the upper
            portion of the map. Returns false if more than 4 solid blocks are found, indicating
            a confined space. Ladder and bridge tiles are not counted as solid blocks.
            </remarks>
        </member>

        <member name="M:Map.IsMapOpenAboveCrate(System.Int32,System.Int32)">
            <summary>
            Determines if the map area above a crate position is sufficiently open for spawn
            mechanics. Checks if there are fewer than 5 solid blocks in the upper portion of the
            map above the specified position.
            </summary>
            <param name="collumn">The column index of the crate position</param>
            <param name="row">The row index of the crate position</param>
            <returns>True if the area above is considered open (less than 5 solid blocks), false if
                it's too enclosed</returns>
            <remarks>
            Used to determine suitable spawn locations for items or enemies from crates. Checks from 9 rows below the map height to the top, counting non-empty, non-ladder, and non-bridge ground types. Returns true if the position is out of bounds (considered open).
            </remarks>
        </member>

        <member name="M:Map.IsNearActivatedCheckPoint(System.Single,System.Single,UnityEngine.Vector2@,System.Boolean@)">
            <summary>
            Checks if a position is near the current active checkpoint. Returns checkpoint
            position and airdrop status for spawn determination.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="checkPointPos">Output parameter for the checkpoint position</param>
            <param name="spawnViaAirdrop">Output parameter indicating if spawn should be via airdrop</param>
            <returns>True if near the current active checkpoint, false otherwise</returns>
        </member>

        <member name="M:Map.IsNearActivatedCheckPoint(System.Single,System.Single)">
            <summary>
            Checks if a position is near the current active checkpoint. Simplified overload that
            doesn't return checkpoint details.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <returns>True if near the current active checkpoint, false otherwise</returns>
        </member>

        <member name="M:Map.IsNearActivatedCheckPoint(System.Single,System.Single,System.Boolean@)">
            <summary>
            Checks if a position is near any activated checkpoint. Returns airdrop status but
            checks all activated checkpoints, not just the current one.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="spawnViaAirdrop">Output parameter indicating if spawn should be via airdrop</param>
            <returns>True if near any activated checkpoint, false otherwise</returns>
        </member>

        <member name="M:Map.IsOverBackground(System.Single,System.Single)">
            <summary>
            Checks if a world position has a background block at its grid location. Note:
            parameters are named incorrectly in implementation.
            </summary>
            <param name="x">The X coordinate in world units (despite being used as Y in GetCollumn).</param>
            <param name="y">The Y coordinate in world units (despite being used as Y in second GetCollumn).</param>
            <returns>True if a background block exists at the calculated grid position; false
                otherwise.</returns>
            <remarks>
            WARNING: This method has a bug where both parameters are converted using GetCollumn, when the second should use GetRow. This may cause incorrect results.
            </remarks>
        </member>

        <member name="M:Map.IsOverGround(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Checks if a position with the specified radius overlaps any ground blocks. Used for
            collision detection and grounding checks.
            </summary>
            <param name="x">The X coordinate of the center position to check.</param>
            <param name="y">The Y coordinate of the center position to check.</param>
            <param name="size">The radius of the sphere to check for ground overlap.</param>
            <param name="strictlyGround">If true, only checks against ground layers; if false, includes additional collision layers.</param>
            <returns>True if the sphere at the specified position overlaps any ground; false
                otherwise.</returns>
            <remarks>
            Uses Physics.OverlapSphere to detect collisions. The strictlyGround parameter determines whether to use groundLayerStrict (Ground and IndestructibleGround only) or the broader groundLayer mask.
            </remarks>
        </member>

        <member name="M:Map.IsTerrainCompatible(GroundType,GroundType)">
            <summary>
            Determines if two ground types are compatible for terrain blending or connection.
            Compatible terrains can connect seamlessly without visual breaks.
            </summary>
            <param name="sourceGroundType">The first ground type to compare.</param>
            <param name="otherGroundType">The second ground type to compare.</param>
            <returns>True if the ground types are compatible and can blend together; false if they
                should remain separate.</returns>
        </member>

        <member name="M:Map.IsTerrainTheSame(GroundType,System.Int32,System.Int32)">
            <summary>
            Checks if the terrain at the specified position matches the given ground type. Used
            for terrain consistency checks during modifications.
            </summary>
            <param name="sourceGroundType">The ground type to compare against.</param>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the terrain at the position matches the source ground type; false if
                different or out of bounds.</returns>
        </member>

        <member name="M:Map.LineToPointDistance2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
            <summary>
            Calculates the minimum distance from a point to a line or line segment in 2D space.
            This method supports both infinite lines and finite line segments.
            </summary>
            <param name="pointA">The first point defining the line</param>
            <param name="pointB">The second point defining the line</param>
            <param name="pointC">The point to measure distance from</param>
            <param name="isSegment">If true, treats the line as a finite segment; if false, treats it as an infinite line</param>
            <returns>The minimum distance from pointC to the line/segment defined by pointA and
                pointB</returns>
            <remarks>
            For line segments, the method checks if the closest point on the line falls within the segment bounds. If not, it returns the distance to the nearest endpoint. Uses CrossProduct and DotProduct helper methods for calculations.
            </remarks>
        </member>

        <member name="M:Map.LineToPointDistance2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
            <summary>
            Calculates the shortest distance from a point to a line or line segment in 2D space.
            </summary>
            <param name="pointA">The starting point of the line or line segment.</param>
            <param name="pointB">The ending point of the line or line segment.</param>
            <param name="pointC">The point to calculate the distance from.</param>
            <param name="isSegment">If true, treats the line as a finite segment; if false, treats it as an infinite line.</param>
            <returns>The shortest distance from pointC to the line or line segment.</returns>
            <remarks>
            When isSegment is true, the method checks if the closest point on the line falls outside
            the segment bounds and returns the distance to the nearest endpoint instead. Uses cross
            product for perpendicular distance calculation and dot product for segment boundary checks.
            </remarks>
        </member>

        <member name="M:Map.LineToPointDistance2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
            <summary>
            Calculates the minimum distance from a point to a line or line segment in 2D space.
            This method supports both infinite lines and finite line segments.
            </summary>
            <param name="pointA">The first point defining the line</param>
            <param name="pointB">The second point defining the line</param>
            <param name="pointC">The point to measure distance from</param>
            <param name="isSegment">If true, treats the line as a finite segment; if false, treats it as an infinite line</param>
            <returns>The minimum distance from pointC to the line/segment defined by pointA and
                pointB</returns>
            <remarks>
            For line segments, the method checks if the closest point on the line falls within the segment bounds. If not, it returns the distance to the nearest endpoint. Uses CrossProduct and DotProduct helper methods for calculations.
            </remarks>
        </member>

        <member name="M:Map.LoadArea">
            <summary>
            Handles the loading and offset management for map areas during level transitions.
            Updates the load offset values based on whether the map is in editing mode.
            </summary>
            <remarks>
            Protected method that manages map area loading offsets. In normal gameplay, it preserves offset progression. In editing mode, all offsets are reset to zero. Part of the larger map loading system.
            </remarks>
        </member>

        <member name="M:Map.MakeBlockPersist(Block)">
            <summary>
            Marks a specific block for persistence by transferring it to the persistent blocks
            container. This is a helper method used by PersistBlocks to process individual
            blocks.
            </summary>
            <param name="block">The block to make persistent</param>
            <remarks>
            Simply calls the Persist method to reparent the block's GameObject to the persistent container.
            </remarks>
        </member>

        <member name="M:Map.Persist(UnityEngine.GameObject)">
            <summary>
            Transfers a GameObject to the persistent blocks container by changing its parent.
            This ensures the object survives scene transitions when persistence is enabled.
            </summary>
            <param name="go">The GameObject to make persistent</param>
            <remarks>
            Reparents the GameObject to the PersistentBlocks.Instance transform, which is marked as DontDestroyOnLoad to survive scene changes.
            </remarks>
        </member>

        <member name="M:Map.PersistBlocks">
            <summary>
            Enables block persistence and transfers all current foreground and background blocks
            to the persistent storage system. This allows blocks to survive level transitions
            when loading time optimizations are active.
            </summary>
            <remarks>
            Creates a persistent GameObject container if needed and iterates through all map blocks, marking matching persistent blocks for retention. Respects the dontPersistedPastLevelLoadThisLevel flag to handle special cases where persistence should be skipped.
            </remarks>
        </member>

        <member name="M:Map.PlaceGround(GroundType,System.Int32,System.Int32,Block[,]@,System.Boolean)">
            <summary>
            Places a ground block of the specified type at the given grid position. Handles
            block instantiation, theme application, and map state updates.
            </summary>
            <param name="placeGroundType">The type of ground block to place (Earth, Metal, Wood, etc.).</param>
            <param name="x">The column index where the block should be placed.</param>
            <param name="y">The row index where the block should be placed.</param>
            <param name="newBlocks">Reference to the 2D array of blocks being built/modified.</param>
            <param name="addToRegistry">Whether to add the block to the global block registry (default true).</param>
            <returns>The newly created Block instance, or null if placing an empty block type.</returns>
            <remarks>
            Updates highest solid block tracking for non-ladder blocks. Applies appropriate Z-depth offsets based on block type. Uses the active theme to determine which prefab to instantiate.
            </remarks>
        </member>

        <member name="M:Map.PushBlock(System.Int32,System.Int32,System.Single)">
            <summary>
            Attempts to push a block at the specified grid position with the given horizontal
            force. Blocks can only be pushed if editing mode is disabled and the block supports
            push mechanics.
            </summary>
            <param name="collumn">The column index of the block to push.</param>
            <param name="row">The row index of the block to push.</param>
            <param name="xI">The horizontal force to apply. Positive values push right, negative values push left.</param>
            <returns>True if the block was successfully pushed; false if the block can't be pushed,
                is already broken, or editing mode is active.</returns>
        </member>

        <member name="M:Map.PushBlock(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Attempts to push a block by raycasting from a position in the specified direction.
            Uses physics raycasting to find pushable blocks along the ray.
            </summary>
            <param name="x">The X coordinate to start the raycast from.</param>
            <param name="y">The Y coordinate to start the raycast from.</param>
            <param name="xI">The horizontal force to apply. Positive values raycast right, negative values raycast left.</param>
            <param name="distance">The maximum distance to check for pushable blocks.</param>
            <returns>True if a block was found and successfully pushed; false if no pushable block
                was found or editing mode is active.</returns>
        </member>

        <member name="M:Map.RegisterCheckPoint(CheckPoint)">
            <summary>
            Registers a checkpoint with the map's checkpoint system and assigns it a sequential
            ID based on the current count of checkpoints. Checkpoints serve as respawn locations
            and progress markers throughout a level. Initializes the checkpoints list if it
            doesn't exist.
            </summary>
            <param name="checkPoint">The CheckPoint object to register, which will have its checkPointID set to the current checkpoint count.</param>
        </member>

        <member name="M:Map.RegisterSpawnPoint(SpawnPoint)">
            <summary>
            Registers a spawn point with the map's spawn system. Spawn points determine where
            players respawn after death or at the start of a level. Initializes the spawn points
            list if it doesn't exist.
            </summary>
            <param name="spawnPoint">The SpawnPoint object to register.</param>
        </member>

        <member name="M:Map.RemoveCheckPoint(CheckPoint)">
            <summary>
            Removes a checkpoint from the map's checkpoint tracking system. Note that this may
            invalidate checkpoint IDs for checkpoints registered after the removed one.
            </summary>
            <param name="checkPoint">The CheckPoint object to remove.</param>
        </member>

        <member name="M:Map.ReplaceCageWithAmmoAndRevives(Cage)">
            <summary>
            Replaces a single cage with ammunition and revival crates at the same position. This
            helper method handles the transformation of individual cages.
            </summary>
            <param name="cage">The cage to replace with crates</param>
            <remarks>
            Preserves the cage's position and column information before destroying it, then calls Create4AmmoAndRevives to spawn the replacement crates. The cage is properly collapsed and destroyed before replacement.
            </remarks>
        </member>

        <member name="M:Map.ReplaceCagesWithAmmoAndRevives">
            <summary>
            Replaces all cages in the current map with ammunition and revival crates. This is
            typically used in specific game modes or when transitioning to different gameplay
            scenarios.
            </summary>
            <remarks>
            Iterates through the cages list backwards and calls ReplaceCageWithAmmoAndRevives for each valid cage. This transformation affects all cages in the level simultaneously.
            </remarks>
        </member>

        <member name="M:Map.SetStartFromHorizontalSuperCheckPoint(System.Int32)">
            <summary>
            Configures the map to start from a horizontal super checkpoint with a specific
            X-axis offset.
            </summary>
            <param name="xLoadOffset">The horizontal offset in grid units for loading the level.</param>
            <remarks>
            Used for horizontal level transitions where the player needs to spawn at a specific
            X coordinate. If the offset differs from the last load offset, it triggers a reset
            of persistent blocks. The offset is clamped to a minimum of 0 to prevent negative values.
            </remarks>
        </member>

        <member name="M:Map.SetStartFromHorizontalSuperCheckPoint(System.Int32)">
            <summary>
            Sets up a horizontal super checkpoint with a specific X-axis load offset. This is
            used for horizontal level transitions where the map needs to load at a specific
            horizontal position.
            </summary>
            <param name="xLoadOffset">The horizontal offset for loading the level, clamped to non-negative values</param>
            <remarks>
            If the offset differs from the last load offset, persistence is disabled for this level to ensure a clean transition. The offset determines where in the level the player spawns horizontally.
            </remarks>
        </member>

        <member name="M:Map.SetStartFromSuperCheckPoint">
            <summary>
            Configures the map to start from a super checkpoint on the next level load.
            </summary>
            <remarks>
            Super checkpoints are special spawn points that persist across level transitions,
            typically used for major progression points or after boss battles. This method
            simply sets the flag without specifying offset values.
            </remarks>
        </member>

        <member name="M:Map.SetStartFromSuperCheckPoint">
            <summary>
            Marks that the next level load should start from a super checkpoint. This affects
            spawn positioning and level initialization.
            </summary>
            <remarks>
            Sets the startFromSuperCheckPoint flag to true. Super checkpoints are special checkpoint types that typically mark major progression points or area transitions.
            </remarks>
        </member>

        <member name="M:Map.SetStartFromVerticalSuperCheckPoint(System.Int32)">
            <summary>
            Configures the map to start from a vertical super checkpoint with a specific Y-axis
            offset.
            </summary>
            <param name="yLoadOffset">The vertical offset in grid units for loading the level.</param>
            <remarks>
            Used for vertical level transitions where the player needs to spawn at a specific
            Y coordinate. Similar to horizontal checkpoints, changing the offset resets persistent
            blocks. The offset is clamped to a minimum of 0.
            </remarks>
        </member>

        <member name="M:Map.SetStartFromVerticalSuperCheckPoint(System.Int32)">
            <summary>
            Sets up a vertical super checkpoint with a specific Y-axis load offset. This is used
            for vertical level transitions where the map needs to load at a specific vertical
            position.
            </summary>
            <param name="yLoadOffset">The vertical offset for loading the level, clamped to non-negative values</param>
            <remarks>
            If the offset differs from the last load offset, persistence is disabled for this level to ensure a clean transition. The offset determines where in the level the player spawns vertically.
            </remarks>
        </member>

        <member name="M:Map.SetTryReduceLoadingTimes(System.Boolean)">
            <summary>
            Enables or disables the loading time optimization system. When enabled, the map will
            attempt to persist certain blocks between level loads to reduce loading times.
            </summary>
            <param name="actuallyTry">True to enable loading time optimizations, false to disable them</param>
            <remarks>
            This optimization system works in conjunction with the block persistence methods (PersistBlocks, DontPersistBlocks) to maintain certain map elements across level transitions.
            </remarks>
        </member>

        <member name="M:Map.TryingToReduceLoadingTimes">
            <summary>
            Checks whether the loading time optimization system is currently active. Returns
            true only if optimizations are enabled, the level editor is not active, and the
            asset pool is not disabled.
            </summary>
            <returns>True if loading time optimizations are active and available, false otherwise</returns>
            <remarks>
            This method verifies multiple conditions to ensure optimizations are appropriate for the current game state. It's used by various persistence-related methods to determine whether to maintain blocks between level loads.
            </remarks>
        </member>

        <member name="M:Map.WasBlockEarth(System.Int32,System.Int32)">
            <summary>
            Checks if the original map data at the specified position contained earth-like
            terrain. Uses map load offsets to check the original terrain type before any
            modifications.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the original terrain was earth-like (including various earth, stone,
                and background types); false otherwise.</returns>
        </member>

        <member name="M:Map.WasBlockOriginallyAir(System.Int32,System.Int32)">
            <summary>
            Checks if the original map data at the specified position was air or empty. Used to
            determine if a position was originally passable before modifications.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the original terrain was air or empty; true for out-of-bounds
                positions.</returns>
        </member>

        <member name="M:Map.WasBlockOriginallySolid(System.Int32,System.Int32)">
            <summary>
            Checks if the original map data at the specified position contained solid terrain.
            Comprehensive check for all solid terrain types in the original map data.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the original terrain was any solid type or position is out of bounds;
                false if originally empty or air.</returns>
        </member>

        <member name="F:Map.TileSize">
            <summary>
            The size of a single tile in the map grid system, measured in world units. This
            constant defines the fundamental unit of measurement for the Map's grid-based
            coordinate system.
            </summary>
            <remarks>
            Set to 16 units, this value is used throughout the codebase for converting between grid coordinates and world positions. Related constants include HalfTileSize (8) for half-tile calculations.
            </remarks>
        </member>

        <member name="F:Map.TileSize">
            <summary>
            The standard tile size in pixels used throughout the map grid system.
            </summary>
            <remarks>
            This constant defines the base unit of the map's grid system. All block positions,
            collision checks, and grid calculations use this 16-pixel tile size as the
            fundamental measurement unit.
            </remarks>
        </member>

        <member name="F:Map.TileSize">
            <summary>
            The size of a single tile in the map grid system, measured in world units. This
            constant defines the fundamental unit of measurement for the Map's grid-based
            coordinate system.
            </summary>
            <remarks>
            Set to 16 units, this value is used throughout the codebase for converting between grid coordinates and world positions. Related constants include HalfTileSize (8) for half-tile calculations.
            </remarks>
        </member>

        <member name="F:Map.barrierLayer">
            <summary>
            LayerMask for the MobileBarriers layer. Used to detect movable barriers and
            obstacles that can block movement or projectiles but may be pushable or
            destructible.
            </summary>
        </member>

        <member name="F:Map.cameraBlockers">
            <summary>
            List of objects that block or influence camera movement. Camera blockers are
            registered via RegisterCameraBlocker and removed via RemoveCameraBlocker. Used by
            the camera system to prevent viewing certain areas or to create cinematic
            boundaries. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.checkPoints">
            <summary>
            Static list tracking all checkpoint objects in the current map. Checkpoints are
            added via RegisterCheckPoint() and removed via DeregisterCheckPoint(). Used for
            respawn mechanics and progress tracking.
            </summary>
        </member>

        <member name="F:Map.defaultLayer">
            <summary>
            LayerMask for Unity's Default layer. Used for general-purpose collision detection
            with objects that haven't been assigned to a specific gameplay layer.
            </summary>
        </member>

        <member name="F:Map.exitPortalPrefabReference">
            <summary>
            Reference to the level exit portal prefab. Used by CreateExitPortal() to instantiate
            exit portals at specified positions. The portal is placed 112 units above the given
            position with a 16-unit horizontal offset.
            </summary>
        </member>

        <member name="F:Map.fragileLayer">
            <summary>
            LayerMask for the DirtyHippie layer. Despite the unusual name, this layer is used
            for fragile or easily breakable objects in the game world that can be destroyed by
            minimal force.
            </summary>
        </member>

        <member name="F:Map.groundAndDamageableObjects">
            <summary>
            LayerMask combining Ground, IndestructibleGround, LargeObjects, and FLUI layers.
            Extended ground collision mask that includes damageable objects, used for
            comprehensive collision detection in combat and damage calculations.
            </summary>
        </member>

        <member name="F:Map.groundLayer">
            <summary>
            LayerMask combining Ground, IndestructibleGround, and LargeObjects layers. Used for
            general ground collision detection including destructible terrain, permanent
            terrain, and large solid objects. This is the primary collision mask for most
            ground-based physics queries.
            </summary>
        </member>

        <member name="F:Map.groundLayerStrict">
            <summary>
            LayerMask combining only Ground and IndestructibleGround layers, excluding
            LargeObjects. Used for strict terrain-only collision detection when large objects
            should be ignored, such as certain movement or placement checks.
            </summary>
        </member>

        <member name="F:Map.hangingLayer">
            <summary>
            LayerMask for the Hanging layer. Used to detect overhead bars, ropes, and other
            objects that units can hang from or traverse hand-over-hand.
            </summary>
        </member>

        <member name="F:Map.highestSolidBlock">
            <summary>
            Tracks the Y coordinate of the highest solid block placed on the map. Updated during
            PlaceGround when placing solid blocks (excluding ladders and empty spaces). Used by
            CollapseTop to determine where to start collapsing terrain from the top. Minimum
            value is clamped to 11 during collapse operations.
            </summary>
        </member>

        <member name="F:Map.highestSolidBlockLadder">
            <summary>
            Tracks the Y coordinate 5 blocks above the highest solid block. Updated alongside
            highestSolidBlock during PlaceGround operations. Set to highestSolidBlock + 5 when a
            new highest solid block is placed.
            </summary>
        </member>

        <member name="F:Map.ladderLayer">
            <summary>
            LayerMask for the Ladders layer. Used to detect climbable ladder objects that allow
            vertical movement when units interact with them.
            </summary>
        </member>

        <member name="F:Map.largeObjectsLayer">
            <summary>
            LayerMask for the LargeObjects layer only. Used to specifically detect collision
            with large environmental objects that are separate from terrain, such as vehicles,
            large props, or destructible structures.
            </summary>
        </member>

        <member name="F:Map.maxCollumnActive">
            <summary>
            The rightmost column index currently active in the block deactivation system.
            Defaults to 256. Updated by RunDeactivationOffscreen() to optimize performance by
            deactivating off-screen blocks.
            </summary>
        </member>

        <member name="F:Map.maxUnitX">
            <summary>
            Maximum X position of active units used for extending the visible area. The
            offscreen deactivation system tracks unit positions to ensure blocks near active
            units remain loaded. Reset to -100001f when recalculating boundaries and updated via
            ExtendDisableToUnitPosition.
            </summary>
        </member>

        <member name="F:Map.maxUnitY">
            <summary>
            Maximum Y position of active units used for extending the visible area. The
            offscreen deactivation system tracks unit positions to ensure blocks near active
            units remain loaded. Reset to -100001f when recalculating boundaries and updated via
            ExtendDisableToUnitPosition.
            </summary>
        </member>

        <member name="F:Map.minCollumnActive">
            <summary>
            The leftmost column index currently active in the block deactivation system. Updated
            by RunDeactivationOffscreen() to track which blocks should be active based on camera
            position.
            </summary>
        </member>

        <member name="F:Map.minRowActive">
            <summary>
            The bottom row index currently active in the block deactivation system. Updated by
            RunDeactivationOffscreen() to track which blocks should be active based on camera
            position.
            </summary>
        </member>

        <member name="F:Map.minUnitX">
            <summary>
            Minimum X position of active units used for extending the visible area. The
            offscreen deactivation system tracks unit positions to ensure blocks near active
            units remain loaded. Reset to 100001f when recalculating boundaries and updated via
            ExtendDisableToUnitPosition.
            </summary>
        </member>

        <member name="F:Map.minUnitY">
            <summary>
            Minimum Y position of active units used for extending the visible area. The
            offscreen deactivation system tracks unit positions to ensure blocks near active
            units remain loaded. Reset to 100001f when recalculating boundaries and updated via
            ExtendDisableToUnitPosition.
            </summary>
        </member>

        <member name="F:Map.nearestCheckPoint">
            <summary>
            Temporary storage for the nearest checkpoint found during proximity searches. Used
            by GetNearestCheckpoint methods to track the closest checkpoint while iterating
            through all checkpoints. This field optimizes performance during frequent checkpoint
            proximity checks.
            </summary>
        </member>

        <member name="F:Map.platformLayer">
            <summary>
            LayerMask for the Platform layer. Used to detect one-way platforms that units can
            jump through from below but stand on from above, common in platformer gameplay
            mechanics.
            </summary>
        </member>

        <member name="F:Map.spawnPointInvisiblePrefabReference">
            <summary>
            Reference to the invisible spawn point prefab. Instantiated for spawn points that
            should function without visual indicators. Used via
            spawnPointInvisiblePrefabReference.Asset during map generation.
            </summary>
        </member>

        <member name="F:Map.spawnPointOffset">
            <summary>
            Random offset applied to spawn point selection to vary player starting positions.
            Initialized to a random value between 0 and 55 during map setup. Used when
            calculating spawn positions by adding this offset to the player number before modulo
            operation with total spawn points.
            </summary>
        </member>

        <member name="F:Map.spawnPointPrefabReference">
            <summary>
            Reference to the standard visible spawn point prefab. Instantiated when placing
            regular spawn points that show a visual indicator. Typically paired with an empty
            cage doodad placed above it.
            </summary>
        </member>

        <member name="F:Map.spawnPoints">
            <summary>
            List of player spawn points in the map. Spawn points are registered via
            RegisterSpawnPoint. Used by GetSpawnPointPos and GetSpawnPoint to determine where
            players spawn, cycling through points based on player number and spawnPointOffset.
            Critical for multiplayer spawn distribution. Initialized in Awake() and set to null
            in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.startFromSuperCheckPoint">
            <summary>
            Indicates whether the player should start from a super checkpoint position instead
            of normal spawn points. When true, uses superCheckpointStartPos for the player's
            starting location. Reset to false during ClearSuperCheckpointStatus.
            </summary>
        </member>

        <member name="F:Map.superCheckpointStartPos">
            <summary>
            The grid position where players spawn when starting from a super checkpoint. Used in
            conjunction with startFromSuperCheckPoint to override normal spawn behavior. Both
            column and row are set to -1 when cleared, indicating no super checkpoint is active.
            </summary>
        </member>

        <member name="F:Map.switchesLayer">
            <summary>
            LayerMask for the Switches layer. Used to detect interactive switch objects that can
            trigger events, open doors, or activate mechanisms when interacted with by units.
            </summary>
        </member>

        <member name="F:Map.unitLayer">
            <summary>
            LayerMask for the Units layer. Used to detect collision with units (enemies,
            players, NPCs) for combat targeting, movement blocking, and interaction checks.
            </summary>
        </member>

        <member name="F:Map.unitOffsetCount">
            <summary>
            Counter used by GetUnitXOffset() to generate pseudo-random X position offsets for
            units. Incremented each time an offset is requested to create variation in unit
            placement.
            </summary>
        </member>

        <member name="F:Map.victoryLayer">
            <summary>
            LayerMask for the Finish layer. Used to detect level completion triggers and victory
            zones that end the level when reached by players.
            </summary>
        </member>

        <member name="F:Map.waterLayer">
            <summary>
            LayerMask for the Water layer. Used to detect water volumes for swimming mechanics,
            drowning checks, and water-specific physics interactions.
            </summary>
        </member>

        <member name="M:Map.BloodyDoodads(System.Single,System.Single,System.Single)">
            <summary>
            Applies blood effects to decal doodads within a circular range of the specified
            position. Iterates through decal doodads up to the count of destroyable doodads and
            calls the Bloody() method on doodads within range, decreasing the iteration index
            when a doodad is bloodied to account for potential list modifications.
            </summary>
            <param name="x">The X coordinate of the blood effect center.</param>
            <param name="y">The Y coordinate of the blood effect center.</param>
            <param name="range">The radius within which doodads will be bloodied.</param>
        </member>

        <member name="M:Map.CallFakeHelicopter(UnityEngine.Vector2,System.Single)">
            <summary>
            Summons a fake helicopter to the specified position after a delay. The fake
            helicopter is a visual-only helicopter used for cinematic sequences that doesn't
            interact with gameplay.
            </summary>
            <param name="position">The target position for the helicopter</param>
            <param name="delay">The delay in seconds before the helicopter appears</param>
            <remarks>
            Creates a single shared instance of HelicopterFake if one doesn't exist. The fake helicopter is typically used for background effects or scripted sequences where a full helicopter entity isn't needed.
            </remarks>
        </member>

        <member name="M:Map.DamageBackground(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Damages background and foreground blocks within a circular radius. This method is
            used for explosive damage that affects the destructible terrain behind the main play
            area.
            </summary>
            <param name="damageSender">The MonoBehaviour that is causing the damage (used for damage attribution)</param>
            <param name="damage">The amount of damage to apply to blocks</param>
            <param name="radius">The radius of the damage effect in world units</param>
            <param name="x">The X coordinate of the damage center</param>
            <param name="y">The Y coordinate of the damage center</param>
            <remarks>
            Calculates which grid cells fall within the damage radius and applies damage to both background and foreground blocks. Uses MapController.Damage_Networked to ensure damage is synchronized across all clients. The damage type is specifically set to DestroyBackground.
            </remarks>
        </member>

        <member name="M:Map.DamageDoodads(System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean@,UnityEngine.MonoBehaviour)">
            <summary>
            Damages destroyable doodads within a circular range, applying damage based on player
            permissions and doodad properties. Checks if doodads can be damaged by mooks (if
            playerNum is negative) or heroes, respects immunity flags, and tracks whether
            impenetrable doodads were hit.
            </summary>
            <param name="damage">The amount of damage to apply to doodads.</param>
            <param name="damageType">The type of damage being applied.</param>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <param name="xI">The horizontal force component for the damage.</param>
            <param name="yI">The vertical force component for the damage.</param>
            <param name="range">The radius within which doodads will be damaged.</param>
            <param name="playerNum">The player number causing the damage (negative values indicate mook damage).</param>
            <param name="hitImpenetrableDoodad">Output parameter set to true if an impenetrable doodad was hit.</param>
            <param name="sender">The MonoBehaviour that caused the damage (optional).</param>
            <returns>True if at least one doodad was damaged, false otherwise.</returns>
        </member>

        <member name="M:Map.DamageStaticDoodads(System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.MonoBehaviour)">
            <summary>
            Damages static doodads within a circular range by causing them to collapse. Iterates
            through the static doodads list in reverse order and collapses any doodads within
            the specified range.
            </summary>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <param name="xI">The horizontal force component (currently unused in implementation).</param>
            <param name="yI">The vertical force component (currently unused in implementation).</param>
            <param name="range">The radius within which static doodads will be damaged.</param>
            <param name="sender">The MonoBehaviour that caused the damage (optional, currently unused).</param>
            <returns>True if at least one static doodad was damaged, false otherwise.</returns>
        </member>

        <member name="M:Map.DisturbAlienEggs(System.Single,System.Single,System.Int32)">
            <summary>
            Alerts alien eggs within a 64-unit radius of a position. Used to trigger alien egg
            reactions when players get too close.
            </summary>
            <param name="x">The X coordinate to check from</param>
            <param name="y">The Y coordinate to check from</param>
            <param name="playerNum">The player number disturbing the eggs (unused in current implementation)</param>
        </member>

        <member name="M:Map.DisturbWildLife(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Disturbs wildlife and alerts units within hearing range of a sound. Wildlife uses
            hearing range multipliers, units check their hearing capabilities and player
            allegiance.
            </summary>
            <param name="x">The X coordinate of the disturbance</param>
            <param name="y">The Y coordinate of the disturbance</param>
            <param name="range">The base range of the disturbance</param>
            <param name="playerNum">The player number causing the disturbance (-1 skips unit alerts)</param>
        </member>

        <member name="M:Map.GeTargetableObjectsInRange(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Gets all enemy targetable objects within a circular range. Uses Manhattan distance
            (sum of X and Y distances) for range calculation.
            </summary>
            <param name="playerNum">The player number searching for targets</param>
            <param name="range">The maximum Manhattan distance to search within</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>A list of all targetable objects within range that are enemies of the specified
                player</returns>
        </member>

        <member name="M:Map.GetDoodadVariationAmount(DoodadType)">
            <summary>
            Gets the number of available variations for a specific doodad type. Used to
            determine valid variation indices when spawning doodads.
            </summary>
            <param name="type">The type of doodad to check variations for</param>
            <returns>The number of available variations for the doodad type</returns>
        </member>

        <member name="M:Map.GetNearbyMookSwitch(System.Single,System.Single)">
            <summary>
            Finds any switch that can be activated by mooks (enemies) within range. Filters for
            switches with mook activation permissions.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The nearest mook-activatable switch, checking both registered list and physics
                overlaps, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearbySwitch(System.Single,System.Single)">
            <summary>
            Finds any switch within interaction range of the specified position. Checks both
            registered switches list and physics overlaps.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The nearest switch within 16 units horizontally and 24 units vertically, or
                null if none found</returns>
        </member>

        <member name="M:Map.GetNearbyTeleportDoor(System.Single,System.Single)">
            <summary>
            Finds any teleport door within interaction range of the specified position. Used for
            teleporter entrance detection.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The nearest teleport door within 32 units horizontally and 24 units vertically,
                or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestAcid(System.Single,System.Single,System.Single)">
            <summary>
            Finds the nearest acid pool within the specified range that doesn't fully submerge
            units. Iterates through all registered acid pools and returns the first one within
            range that either is null or doesn't submerge units (SubMergesUnit returns false).
            </summary>
            <param name="x">The X coordinate to search from.</param>
            <param name="y">The Y coordinate to search from.</param>
            <param name="range">The maximum distance to search for acid pools.</param>
            <returns>The nearest DoodadAcidPool within range that doesn't fully submerge units, or
                null if none found.</returns>
        </member>

        <member name="M:Map.GetNextClosestTargetableObject(System.Int32,DirectionEnum,System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.List{TargetableObject})">
            <summary>
            Finds the next closest targetable object (destructible environment pieces) in a
            specified direction. Used for target cycling systems.
            </summary>
            <param name="playerNum">The player number searching for targets</param>
            <param name="direction">The direction to search in (Up, Down, Left, Right, or Any)</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="alreadyFoundTargets">List of targets to exclude from the search</param>
            <returns>The next closest targetable object in the specified direction, or null if none
                found</returns>
        </member>

        <member name="M:Map.GetNextClosestTargetableObjectOnScreen(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Finds the closest targetable object that is currently visible on screen. Can
            optionally filter for boss-specific targets only.
            </summary>
            <param name="playerNum">The player number searching for targets</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="onlyBossTargets">If true, only returns objects marked as boss targets</param>
            <returns>The closest on-screen targetable object, or null if none found</returns>
        </member>

        <member name="M:Map.GetOtherZiplinePoint(ZiplinePoint)">
            <summary>
            Finds and returns the paired endpoint for a given zipline point.
            </summary>
            <param name="zipLinePoint">The zipline point to find a pair for</param>
            <returns>The other endpoint of the zipline, or null if no valid pair exists</returns>
            <remarks>
            This complex method searches through the map's doodad list to find zipline connections. It first
            locates the input point in the doodad list, then checks its TagAsGridPoint for a tagged connection.
            If found, it searches for another zipline at those coordinates. If no tag exists, it searches
            backwards through previous doodads for an unpaired zipline. This system allows both explicit
            zipline connections (via tags) and implicit pairing (sequential in the doodad list). The method
            ensures ziplines are properly connected in pairs for gameplay functionality.
            </remarks>
        </member>

        <member name="M:Map.GetStaticDoodad(System.Int32,System.Int32)">
            <summary>
            Retrieves a static doodad at the specified grid coordinates. Iterates through all
            registered static doodads to find one matching the given column and row position.
            </summary>
            <param name="collumn">The column coordinate in the map grid to search. Note: Parameter name contains a typo ("collumn").</param>
            <param name="row">The row coordinate in the map grid to search.</param>
            <returns>The Doodad at the specified grid position, or null if no static doodad exists
                at that location.</returns>
        </member>

        <member name="M:Map.HurtWildLife(System.Single,System.Single,System.Single)">
            <summary>
            Damages wildlife within range of a position. Only affects already disturbed
            wildlife, with vertical range 3x the horizontal range.
            </summary>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="range">The horizontal range for damaging wildlife</param>
        </member>

        <member name="M:Map.IsInSubstance(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a position is within a substance (submerging) doodad like water, acid, or
            quicksand. Iterates through all grass/blood doodads and finds those that submerge
            units within range.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="range">The range to check for substance doodads</param>
            <returns>The first substance doodad found at the position, or null if none found</returns>
        </member>

        <member name="M:Map.JiggleDoodads(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Applies jiggle physics to doodads within range of a position. Forces are calculated
            based on distance from center and applied to grass/blood doodads, also triggers
            slime jiggling.
            </summary>
            <param name="x">The X coordinate of the jiggle origin</param>
            <param name="y">The Y coordinate of the jiggle origin</param>
            <param name="xRange">The horizontal range of the jiggle effect</param>
            <param name="yRange">The vertical range of the jiggle effect</param>
            <param name="force">The force multiplier (multiplied by 100 before applying)</param>
        </member>

        <member name="M:Map.JiggleSlime(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Jiggles slime doodads that contain a position within their bounds. Checks if
            position is within slime bounds (accounting for width/height) and applies horizontal
            force.
            </summary>
            <param name="x">The X coordinate to check for slime</param>
            <param name="y">The Y coordinate to check for slime</param>
            <param name="xRange">The horizontal range (unused in current implementation)</param>
            <param name="yRange">The vertical range (unused in current implementation)</param>
        </member>

        <member name="M:Map.PassThroughScenery(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Checks if a position passes through damageable scenery and knocks it. Used to
            interact with destructible environmental objects like crates or barrels.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="xI">The horizontal velocity for knocking</param>
            <param name="yI">The vertical velocity for knocking</param>
            <returns>True if any scenery was knocked, false otherwise</returns>
        </member>

        <member name="M:Map.PlaceDoodad(DoodadInfo)">
            <summary>
            Places a doodad (decorative or interactive object) in the map based on the provided
            doodad information. Handles spawning of all doodad types including enemies, traps,
            checkpoints, cages, vehicles, decorations, and special objects. Applies variation
            selection, position adjustment, and game mode specific modifications.
            </summary>
            <param name="doodad">The doodad information containing type, position, variation, and other spawn data</param>
            <returns>The instantiated GameObject for the doodad, or null if spawning conditions
                aren't met</returns>
        </member>

        <member name="M:Map.RegisterAlienEggExplosive(AlienEggExplosive)">
            <summary>
            Registers an alien egg explosive with the map's tracking system. Alien eggs are
            environmental hazards that can explode when damaged or triggered, spawning
            facehuggers or dealing area damage to nearby units.
            </summary>
            <param name="egg">The AlienEggExplosive object to register.</param>
        </member>

        <member name="M:Map.RegisterAlienTelepathyTrigger(AlienTelepathyTrigger)">
            <summary>
            Registers an alien telepathy trigger with the map's tracking system. These triggers
            are special environmental objects that activate telepathic alien behaviors when
            players enter their trigger zones, potentially alerting or controlling nearby alien
            units.
            </summary>
            <param name="alien">The AlienTelepathyTrigger object to register.</param>
        </member>

        <member name="M:Map.RegisterCage(Cage)">
            <summary>
            Registers a cage object with the map's tracking system. Cages are interactive
            objects that typically contain prisoners or power-ups that can be freed by
            destroying the cage. Initializes the cages list if it doesn't exist.
            </summary>
            <param name="cage">The Cage object to register for tracking.</param>
        </member>

        <member name="M:Map.RegisterCameraBlocker(CameraBlockers)">
            <summary>
            Registers a camera blocker object that restricts camera movement in specific areas.
            Camera blockers are used to create boundaries that prevent the camera from moving
            beyond certain points, typically used for level boundaries or cinematic sequences.
            </summary>
            <param name="cB">The CameraBlockers object to register.</param>
        </member>

        <member name="M:Map.RegisterDamageableScenerye(DamageableScenery)">
            <summary>
            Registers a DamageableScenery object with the map's scenery tracking system.
            Prevents duplicate registrations and initializes the damageableScenery list if it
            doesn't exist. Note: Method name contains a typo ("Scenerye").
            </summary>
            <param name="tree">The DamageableScenery to register.</param>
        </member>

        <member name="M:Map.RegisterDecalDoodad(Doodad)">
            <summary>
            Registers a decal doodad with the map's tracking system. Decal doodads are visual
            elements like blood splatters or burn marks that can be applied to surfaces and
            affected by environmental effects. Initializes the decal doodads list if it doesn't
            exist.
            </summary>
            <param name="doodad">The Doodad object representing a decal to register.</param>
        </member>

        <member name="M:Map.RegisterDestroyableDoodad(Doodad)">
            <summary>
            Registers a destroyable doodad (decorative object) with the map's tracking system.
            Doodads include environmental props like barrels, crates, signs, and other
            destructible scenery that adds visual detail and can be destroyed for effect.
            </summary>
            <param name="doodad">The Doodad object to register as destroyable.</param>
        </member>

        <member name="M:Map.RegisterGrassAndBlood(Doodad)">
            <summary>
            Registers a grass or blood doodad with the map's substance tracking system. If the
            doodad is an acid pool (DoodadAcidPool), it is also added to the specialized acid
            pools list for additional tracking. Prevents duplicate registrations by checking if
            the doodad already exists in the list.
            </summary>
            <param name="doodad">The Doodad object to register, which can be grass, blood, acid, or other liquid substances.</param>
        </member>

        <member name="M:Map.RegisterHelicopter(Helicopter)">
            <summary>
            Registers a helicopter with the map by setting it as the newest helicopter
            reference. This static reference is used by various systems to interact with the
            most recently spawned helicopter on the map.
            </summary>
            <param name="heli">The Helicopter object to register as the newest helicopter.</param>
        </member>

        <member name="M:Map.RegisterJigglyBit(Doodad)">
            <summary>
            Registers a jiggly slime doodad with the map's tracking system. Jiggly bits are
            special doodads that exhibit physics-based jiggling behavior when affected by
            explosions or other forces.
            </summary>
            <param name="doodad">The Doodad object representing jiggly slime to register.</param>
        </member>

        <member name="M:Map.RegisterMookDoor(MookDoor)">
            <summary>
            Registers a MookDoor with the map's door tracking system. Initializes the mookDoors
            list if it doesn't exist.
            </summary>
            <param name="door">The MookDoor to register.</param>
        </member>

        <member name="M:Map.RegisterStaticDoodad(Doodad)">
            <summary>
            Registers a static doodad with the map's tracking system. Static doodads are
            non-moving environmental objects that can be damaged or collapsed but don't have
            special behaviors like jiggly physics. Initializes the static doodads list if it
            doesn't exist.
            </summary>
            <param name="doodad">The Doodad object to register as a static environmental element.</param>
        </member>

        <member name="M:Map.RegisterSwitch(Switch)">
            <summary>
            Registers a Switch with the map's switch tracking system. Initializes the switches
            list if it doesn't exist.
            </summary>
            <param name="swit">The Switch to register.</param>
        </member>

        <member name="M:Map.RegisterTeleportDoor(TeleportDoor)">
            <summary>
            Registers a TeleportDoor with the map's teleport system. Adds the door to the
            general teleportDoors list and also to either entranceDoors or exitDoors based on
            the door's isEntranceDoor property.
            </summary>
            <param name="teleportDoor">The TeleportDoor to register.</param>
        </member>

        <member name="M:Map.RegisterTreeFoliage(TreeFoliage)">
            <summary>
            Registers a tree foliage object with the map's tracking system for environmental
            effects. Tree foliage includes palm trees and other vegetation that can shake when
            affected by explosions or other forces, creating visual feedback for nearby impacts.
            </summary>
            <param name="tree">The TreeFoliage object to register for tracking.</param>
        </member>

        <member name="M:Map.RemoveAlienEggExplosive(AlienEggExplosive)">
            <summary>
            Removes an alien egg explosive from the map's tracking system, typically after it
            has exploded or been destroyed. This ensures the egg is no longer considered for
            gameplay interactions or AI targeting.
            </summary>
            <param name="egg">The AlienEggExplosive object to remove from tracking.</param>
        </member>

        <member name="M:Map.RemoveAlienTelepathyTrigger(AlienTelepathyTrigger)">
            <summary>
            Removes an alien telepathy trigger from the map's tracking system, typically when
            the trigger is destroyed or no longer needed. This prevents the trigger from
            continuing to affect alien behavior after it should be inactive.
            </summary>
            <param name="alien">The AlienTelepathyTrigger object to remove from tracking.</param>
        </member>

        <member name="M:Map.RemoveCage(Cage)">
            <summary>
            Removes a cage from the map's tracking system, typically after it has been destroyed
            and its contents freed. Checks if the cages list exists before attempting removal.
            </summary>
            <param name="cage">The Cage object to remove from tracking.</param>
        </member>

        <member name="M:Map.RemoveCameraBlocker(CameraBlockers)">
            <summary>
            Removes a camera blocker from the map's tracking system, allowing the camera to move
            freely through the previously blocked area. This is typically called when a blocker
            is destroyed or when transitioning between level sections.
            </summary>
            <param name="cB">The CameraBlockers object to remove from tracking.</param>
        </member>

        <member name="M:Map.RemoveDecalDoodad(Doodad)">
            <summary>
            Removes a decal doodad from the map's tracking system, typically when cleaning up
            visual effects or when the decal is no longer needed.
            </summary>
            <param name="doodad">The Doodad object representing a decal to remove.</param>
        </member>

        <member name="M:Map.RemoveDestroyableDoodad(Doodad)">
            <summary>
            Removes a destroyable doodad from the map's tracking system. This method is
            typically called when a doodad is destroyed or no longer needs to be tracked for
            damage calculations.
            </summary>
            <param name="doodad">The Doodad object to remove from the destroyable doodads list.</param>
        </member>

        <member name="M:Map.RemoveGrassOrBlood(Doodad)">
            <summary>
            Removes a grass or blood doodad from the map's substance tracking system. If the
            doodad is an acid pool, it is also removed from the specialized acid pools list.
            Only removes the doodad if it exists in the tracking list.
            </summary>
            <param name="doodad">The Doodad object to remove from substance tracking.</param>
        </member>

        <member name="M:Map.RemoveJigglyBit(Doodad)">
            <summary>
            Removes a jiggly slime doodad from the map's tracking system, typically when the
            jiggly bit is destroyed or no longer needs physics simulation.
            </summary>
            <param name="doodad">The Doodad object representing jiggly slime to remove.</param>
        </member>

        <member name="M:Map.RemoveMookDoor(MookDoor)">
            <summary>
            Removes a MookDoor from the map's door tracking system.
            </summary>
            <param name="door">The MookDoor to remove.</param>
        </member>

        <member name="M:Map.RemoveStaticDoodad(Doodad)">
            <summary>
            Removes a static doodad from the map's tracking system, typically when it has been
            destroyed or collapsed.
            </summary>
            <param name="doodad">The Doodad object to remove from static doodad tracking.</param>
        </member>

        <member name="M:Map.RemoveSwitch(Switch)">
            <summary>
            Removes a Switch from the map's switch tracking system. This method can be called
            via network RPC.
            </summary>
            <param name="swit">The Switch to remove.</param>
        </member>

        <member name="M:Map.RemoveTeleportDoor(TeleportDoor)">
            <summary>
            Removes a TeleportDoor from all relevant tracking lists (teleportDoors,
            entranceDoors, or exitDoors based on the door's type).
            </summary>
            <param name="teleportDoor">The TeleportDoor to remove.</param>
        </member>

        <member name="M:Map.ResetZiplines">
            <summary>
            Resets all ziplines in the map and re-establishes their connections.
            </summary>
            <remarks>
            This method performs a complete reset of the zipline system in three passes:
            1. Resets all zipline points to their default state
            2. Connects ziplines that have explicit tag connections (TagAsGridPoint)
            3. Connects remaining untagged ziplines in pairs based on their order in the doodad list
            The method ensures every zipline point calls SetupZipline() after finding its pair. The
            alternating counter in the third pass creates implicit pairs from sequential ziplines in
            the doodad list. This is typically called during map initialization or reset.
            </remarks>
        </member>

        <member name="M:Map.SetOilAlight(UnityEngine.Vector2,UnityEngine.Vector3)">
            <summary>
            Sets oil particles on fire by raycasting in a specific direction from an origin
            point. Used internally by explosions to ignite nearby oil.
            </summary>
            <param name="direction">Direction to check for oil particles</param>
            <param name="origin">Starting position for the raycast</param>
        </member>

        <member name="M:Map.ShakeTrees(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Shakes tree foliage within a specified range from a position. Applies force to trees
            based on their distance from the center position, also triggers doodad jiggling.
            </summary>
            <param name="x">The X coordinate of the shake origin</param>
            <param name="y">The Y coordinate of the shake origin</param>
            <param name="xRange">The horizontal range of the shake effect</param>
            <param name="yRange">The vertical range of the shake effect</param>
            <param name="force">The force multiplier for the shake effect</param>
        </member>

        <member name="F:Map.LevelEndExplosionActiveList">
            <summary>
            List of currently active HiddenExplosives objects creating level end explosion
            effects. Objects are moved here from the bank when MakeLevelEndExplosion is called
            and returned to the bank during map cleanup. Initialized with capacity of 10.
            </summary>
        </member>

        <member name="F:Map.LevelEndExplosionBank">
            <summary>
            Pool of inactive HiddenExplosives objects used for level end explosion effects.
            Pre-populated with 10 instances during map initialization to avoid runtime
            instantiation. Objects are moved to the active list when triggered and returned to
            this bank when the map is destroyed.
            </summary>
        </member>

        <member name="F:Map.LevelEndExplosionBankSizeInc">
            <summary>
            The initial size and increment value for the level end explosion object pool. Set to
            10, this determines how many HiddenExplosives objects are pre-instantiated in the
            bank during initialization.
            </summary>
        </member>

        <member name="F:Map.acidPools">
            <summary>
            List of acid pool hazards that damage units on contact. Acid pools are registered
            via RegisterAcidPool and removed via RemoveAcidPool. Used for environmental hazard
            mechanics and damage-over-time effects. Initialized in Awake() and set to null in
            OnDestroy().
            </summary>
        </member>

        <member name="F:Map.alienTelepathyTriggers">
            <summary>
            List of triggers for alien telepathy events. Triggers are registered via
            RegisterAlienTelepathyTrigger and removed via RemoveAlienTelepathyTrigger. Used for
            alien-specific gameplay mechanics and mind control effects. Initialized in Awake()
            and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.cages">
            <summary>
            Static list tracking all cage objects containing prisoners or collectibles. Cages
            are registered via RegisterCage() and removed via RemoveCage(). Used for rescue
            objectives and collectible tracking.
            </summary>
        </member>

        <member name="F:Map.damageableScenery">
            <summary>
            List of scenery objects that can take damage and be destroyed. Scenery is registered
            via RegisterDamageableScenery and removed via RemoveDamageableScenery. Used for
            destructible environment elements larger than doodads. Initialized in Awake() and
            set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.decalDoodads">
            <summary>
            List of decorative doodads that render as decals (e.g., blood splatters, scorch
            marks). Doodads are registered via RegisterDecalDoodad and removed via
            RemoveDecalDoodad. Used for visual environmental effects that don't affect gameplay.
            Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.destroyableDoodads">
            <summary>
            List of doodads that can be destroyed by damage (e.g., crates, barrels, destructible
            props). Doodads are registered via RegisterDestroyableDoodad and removed via
            RemoveDestroyableDoodad. Used for environmental destruction and chain reaction
            mechanics. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.entranceDoors">
            <summary>
            Subset of teleportDoors that serve as entrance portals. Entrance doors are added
            when RegisterTeleportDoor is called with an entrance-type door and removed via
            RemoveTeleportDoor. Used for level transitions and spawn point mechanics.
            Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.exitDoors">
            <summary>
            Subset of teleportDoors that serve as exit portals. Exit doors are added when
            RegisterTeleportDoor is called with an exit-type door and removed via
            RemoveTeleportDoor. Used for level completion and transition mechanics. Initialized
            in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.exitPortalNID">
            <summary>
            Network ID for the level exit portal. Allocated deterministically during map setup
            and used to register the exit portal GameObject when created via CreateExitPortal.
            The portal spawns at the specified position offset by (16, 112) pixels.
            </summary>
        </member>

        <member name="F:Map.grassAndBlood">
            <summary>
            List of grass and blood effect doodads. These are visual elements registered via
            RegisterGrassAndBloodDoodad and removed via RemoveGrassAndBloodDoodad. Used for
            organic environmental decoration and gore effects. Initialized in Awake() and set to
            null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.jigglySlime">
            <summary>
            List of jiggly slime doodads with physics-based movement. Slime doodads are
            registered via RegisterJigglySlime and removed via RemoveJigglySlime. Used for
            organic environmental effects with bouncy physics properties. Initialized in Awake()
            and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.mookDoors">
            <summary>
            Static list of all MookDoor objects in the map. Doors are registered via
            RegisterMookDoor() and removed via DeRegisterMookDoor(). Used for managing
            interactive door mechanics that enemies can open or players can destroy.
            </summary>
        </member>

        <member name="F:Map.remoteCarPrefabReference">
            <summary>
            Reference to the remote control explosive car prefab. This prefab reference allows
            the map to instantiate remote controlled explosive vehicles when required by map
            data or gameplay events.
            </summary>
        </member>

        <member name="F:Map.ropePrefabReference">
            <summary>
            Reference to the Predabro rope prefab used for spawning rope objects in the map.
            This prefab reference allows the map to instantiate rope elements when needed for
            gameplay mechanics.
            </summary>
        </member>

        <member name="F:Map.staticDoodads">
            <summary>
            List of static non-interactive doodads for decoration. Static doodads are registered
            via RegisterStaticDoodad and removed via RemoveStaticDoodad. Used for immutable
            environmental props that provide visual detail. Initialized in Awake() and set to
            null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.switches">
            <summary>
            List of all interactive switches in the map. Switches are registered via
            RegisterSwitch (which includes null-check initialization) and removed via
            RemoveSwitch. Used for puzzle mechanics and triggered events. The RegisterSwitch
            method initializes this list if null. Set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.teleportDoors">
            <summary>
            Master list of all teleport doors regardless of type. Doors are registered via
            RegisterTeleportDoor and removed via RemoveTeleportDoor. This list contains all
            doors, while entranceDoors and exitDoors contain type-specific subsets. Initialized
            in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.treeFoliage">
            <summary>
            List of tree foliage objects for jungle/forest environments. Tree foliage is
            registered via RegisterTreeFoliage and removed via RemoveTreeFoliage. Used for
            environmental decoration with potential physics interactions. Initialized in Awake()
            and set to null in OnDestroy().
            </summary>
        </member>

        <member name="M:Map.CallFakeHelicopter(UnityEngine.Vector2,System.Single)">
            <summary>
            Summons a fake helicopter to enter the scene at the specified position after a
            delay.
            </summary>
            <param name="position">The target position where the helicopter should appear.</param>
            <param name="delay">The delay in seconds before the helicopter enters.</param>
            <remarks>
            Creates a singleton fake helicopter instance if one doesn't exist. Fake helicopters
            are typically used for scripted sequences or cutscenes where player interaction
            is not required. The helicopter is reused across multiple calls.
            </remarks>
        </member>

        <member name="M:Map.Create4AmmoAndRevives(UnityEngine.Vector3,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a 2x2 arrangement of ammunition and revival crates at the specified
            position. The arrangement includes two ammo crates (top), one revive crate
            (bottom-left), and one damage crate (bottom-right).
            </summary>
            <param name="pos">The position for the top-left crate</param>
            <param name="collumn">The column index for block array placement</param>
            <param name="row">The row index for block array placement</param>
            <param name="setupBlocks">Whether to run block setup logic (connections to adjacent blocks)</param>
            <remarks>
            Sets the active theme to jungle theme for crate selection. Each crate is properly registered in the blocks array, networked, and initialized. If setupBlocks is true, establishes connections to adjacent blocks and runs FirstFrame initialization.
            </remarks>
        </member>

        <member name="M:Map.Create4AmmoAndRevives(UnityEngine.Vector3,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a 2x2 arrangement of power-up crates at the specified position.
            </summary>
            <param name="pos">The base position for the crate arrangement.</param>
            <param name="collumn">The column coordinate for block registration.</param>
            <param name="row">The row coordinate for block registration.</param>
            <param name="setupBlocks">Whether to perform block setup and initialization.</param>
            <remarks>
            Creates two ammo crates on top, one revival crate and one damage boost crate on bottom.
            Each crate is properly registered in the block grid and with the networking system.
            The jungle theme is temporarily set to ensure consistent crate types.
            </remarks>
        </member>

        <member name="M:Map.GetNearestEnemyUnit(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Finds the nearest enemy unit that can be damaged by the specified player. This is a
            convenience overload that calls the full GetNearestEnemyUnit with equal X and Y
            ranges.
            </summary>
            <param name="playerNum">Player number for damage checking</param>
            <param name="range">Maximum search range (used for both X and Y)</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest enemy unit, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestEnemyUnit(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Int32,Unit)">
            <summary>
            Finds the nearest enemy unit within specified X and Y ranges that can be damaged by
            the player. Supports directional filtering and unit exclusion.
            </summary>
            <param name="playerNum">Player number for damage checking</param>
            <param name="xRange">Maximum horizontal search range</param>
            <param name="yRange">Maximum vertical search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <param name="xDirection">Direction filter (1 for right only, -1 for left only, 0 for both)</param>
            <param name="ignoreUnit">Optional unit to exclude from the search</param>
            <returns>The nearest enemy unit matching all criteria, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestEvilUnit(System.Int32,System.Single,System.Single)">
            <summary>
            Finds the nearest evil unit (enemy) within range that is still alive. Uses Manhattan
            distance for proximity calculations and checks the IsEvil() flag on units.
            </summary>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <returns>The nearest evil unit, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestHero(Unit,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Finds the nearest hero (player character) within specified ranges, with optional
            direction filtering. Searches through the BroBase.bros list rather than general
            units.
            </summary>
            <param name="ignore">Unit to exclude from the search</param>
            <param name="direction">Direction filter (1 for right only, -1 for left only, 0 for both)</param>
            <param name="xRange">Maximum horizontal search range</param>
            <param name="yRange">Maximum vertical search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead heroes in the search</param>
            <returns>The nearest hero matching the criteria, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestUnit(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Finds the nearest unit belonging to a specific player within range using Manhattan
            distance. Similar to GetNearestUnitWithXBias but uses a local variable for tracking
            instead of static fields.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest unit matching the criteria, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestUnitWithXBias(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Finds the nearest unit belonging to a specific player within range, using Manhattan
            distance (sum of X and Y distances) for calculations. Biases search horizontally.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest unit matching the criteria, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestVisibleDeadUnit(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Finds the nearest dead unit belonging to a specific player that has line of sight
            from the search position. Uses raycasting to ensure no solid terrain blocks the
            path.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <returns>The nearest visible dead unit, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestVisibleUnit(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Finds the nearest unit belonging to a specific player that has line of sight from
            the search position. Uses raycasting to ensure visibility.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest visible unit, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearestVisibleUnitDamagebleBy(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Finds the nearest enemy unit that has line of sight from the search position and can
            be damaged by the specified player. Combines visibility checking with damage
            relationship checking.
            </summary>
            <param name="playerNum">Player number for damage checking</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest visible enemy unit, or null if none found</returns>
        </member>

        <member name="M:Map.GetNextClosestUnit(System.Int32,DirectionEnum,System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.List{Unit})">
            <summary>
            Finds the next closest enemy unit in a specified direction, excluding units already
            found. Used for cycling through targets.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="direction">The direction to search in (Up, Down, Left, Right, or Any)</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="alreadyFoundUnits">List of units to exclude from the search</param>
            <returns>The next closest unit in the specified direction, or null if none found</returns>
        </member>

        <member name="M:Map.GetNextClosestUnitOnScreen(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Finds the closest enemy unit that is currently visible on screen. Used for
            auto-targeting systems that should only target visible enemies.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The closest on-screen enemy unit, or null if none found</returns>
        </member>

        <member name="M:Map.GetUnitCountInRange(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Counts the number of units within a rectangular range without creating a list. More
            efficient than GetUnitsInRange when only the count is needed.
            </summary>
            <param name="xRange">Maximum horizontal distance from center</param>
            <param name="yRange">Maximum vertical distance from center</param>
            <param name="x">X position of rectangle center</param>
            <param name="y">Y position of rectangle center</param>
            <param name="includeDead">Whether to include dead units in the count</param>
            <returns>Number of units within the specified range</returns>
        </member>

        <member name="M:Map.GetUnitsInRange(System.Int32,System.Single,System.Single,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
            Populates a list with all units within a circular range of a position. Uses squared
            distance for efficiency and adds a 6 unit vertical offset to unit positions for
            center-of-mass calculations.
            </summary>
            <param name="range">Radius of the search circle</param>
            <param name="x">X position of circle center</param>
            <param name="y">Y position of circle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <param name="unitsInRange">List to populate with found units (not cleared before adding)</param>
        </member>

        <member name="M:Map.GetUnitsInRange(System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Returns a new list containing all units within a circular range of a position.
            Creates and returns a new list rather than populating an existing one.
            </summary>
            <param name="range">Radius of the search circle</param>
            <param name="x">X position of circle center</param>
            <param name="y">Y position of circle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <returns>New list containing all units within range</returns>
        </member>

        <member name="M:Map.GetUnitsInRange(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
            Populates a list with all units within a rectangular range of a position. Uses
            separate X and Y ranges for rectangular area searches.
            </summary>
            <param name="xRange">Maximum horizontal distance from center</param>
            <param name="yRange">Maximum vertical distance from center</param>
            <param name="x">X position of rectangle center</param>
            <param name="y">Y position of rectangle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <param name="unitsInRange">List to populate with found units (not cleared before adding)</param>
        </member>

        <member name="M:Map.GetUnitsInRange(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Returns a new list containing all units within a rectangular range of a position.
            Creates and returns a new list rather than populating an existing one.
            </summary>
            <param name="xRange">Maximum horizontal distance from center</param>
            <param name="yRange">Maximum vertical distance from center</param>
            <param name="x">X position of rectangle center</param>
            <param name="y">Y position of rectangle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <returns>New list containing all units within the rectangular range</returns>
        </member>

        <member name="M:Map.IsCitizenNearby(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Checks if any citizen (civilian NPC) is within a rectangular range of the specified
            position. Used for AI decisions and player actions that need to consider nearby
            civilians.
            </summary>
            <param name="x">The X coordinate to check from</param>
            <param name="y">The Y coordinate to check from</param>
            <param name="xRange">The horizontal search range in world units</param>
            <param name="yRange">The vertical search range in world units</param>
            <returns>True if at least one citizen is within the specified range, false otherwise</returns>
            <remarks>
            Iterates through the citizens list backwards and checks each citizen's position against the provided range. The rectangular check uses absolute distance comparisons for efficiency.
            </remarks>
        </member>

        <member name="M:Map.IsCitizenNearby(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Checks if any citizen (civilian NPC) is within the specified rectangular range.
            </summary>
            <param name="x">The X coordinate of the search center.</param>
            <param name="y">The Y coordinate of the search center.</param>
            <param name="xRange">The horizontal search range in world units.</param>
            <param name="yRange">The vertical search range in world units.</param>
            <returns>True if at least one citizen is found within range; false otherwise.</returns>
            <remarks>
            Iterates through all registered citizens and checks their distance from the center point.
            Used for gameplay mechanics that need to detect civilian presence, such as rescue
            missions or collateral damage prevention.
            </remarks>
        </member>

        <member name="M:Map.IsEnemyUnitNearby(System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Checks if any enemy unit exists within a directional range with optional line of
            sight checking. Used for AI threat detection.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xDirection">The horizontal direction constraint (-1 for left only, 1 for right only, 0 for both)</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <param name="testForVisible">If true, performs line of sight check to each potential target</param>
            <returns>True if at least one enemy unit is found that meets all criteria, false
                otherwise</returns>
        </member>

        <member name="M:Map.IsEnemyUnitNearby(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Checks if any enemy unit exists within the specified range in any direction.
            Simplified version without directional constraints.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <returns>True if at least one enemy unit is found within range, false otherwise</returns>
        </member>

        <member name="M:Map.IsMapOpenAboveCrate(System.Int32,System.Int32)">
            <summary>
            Determines if the map area above a crate position is sufficiently open for spawn
            mechanics. Checks if there are fewer than 5 solid blocks in the upper portion of the
            map above the specified position.
            </summary>
            <param name="collumn">The column index of the crate position</param>
            <param name="row">The row index of the crate position</param>
            <returns>True if the area above is considered open (less than 5 solid blocks), false if
                it's too enclosed</returns>
            <remarks>
            Used to determine suitable spawn locations for items or enemies from crates. Checks from 9 rows below the map height to the top, counting non-empty, non-ladder, and non-bridge ground types. Returns true if the position is out of bounds (considered open).
            </remarks>
        </member>

        <member name="M:Map.IsUnitInRange(Unit,System.Int32,System.Single,System.Single)">
            <summary>
            Checks if a specific unit is within range of a position using Manhattan distance.
            Adds 6 units to the unit's Y position for center-of-mass calculations.
            </summary>
            <param name="unit">The unit to check</param>
            <param name="range">Maximum allowed distance</param>
            <param name="x">X position to measure from</param>
            <param name="y">Y position to measure from</param>
            <returns>True if the unit is within range, false otherwise</returns>
        </member>

        <member name="M:Map.IsUnitNearby(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Checks if any allied unit (same player number) exists within the specified range.
            Used for proximity detection of friendly units.
            </summary>
            <param name="playerNum">The player number to check for (finds units with same player number)</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <returns>True if at least one allied unit is found within range, false otherwise</returns>
        </member>

        <member name="M:Map.IsUnitNearby(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,Unit@)">
            <summary>
            Checks for allied units within range and returns the nearest one found. Extended
            version that provides access to the found unit.
            </summary>
            <param name="playerNum">The player number to check for (finds units with same player number)</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <param name="nearestUnit">Output parameter that will contain the nearest allied unit found</param>
            <returns>True if at least one allied unit is found within range, false otherwise</returns>
        </member>

        <member name="M:Map.RegisterCitizen(Citizen)">
            <summary>
            Registers a citizen NPC with the map's unit tracking system. Citizens are
            non-combatant NPCs that can be rescued by players, react to danger, and contribute
            to level objectives or scoring.
            </summary>
            <param name="citizen">The Citizen object to register for tracking.</param>
        </member>

        <member name="M:Map.RegisterDisturbedWildLife(WildLife)">
            <summary>
            Registers a wildlife creature as disturbed, indicating it has been startled or
            agitated by player actions, explosions, or other disturbances. Disturbed wildlife
            may flee, make noise, or exhibit other panic behaviors.
            </summary>
            <param name="wildLifeObject">The WildLife object to register as disturbed.</param>
        </member>

        <member name="M:Map.RegisterUnit(Unit,System.Boolean)">
            <summary>
            Registers a Unit with the map's unit tracking system. If the unit is a Mook and
            addToStatistics is true, also registers it with the StatisticsController for kill
            tracking.
            </summary>
            <param name="unit">The Unit to register.</param>
            <param name="addToStatistics">If true and the unit is a Mook, registers it with StatisticsController for kill tracking.</param>
        </member>

        <member name="M:Map.RegisterWildLife(WildLife)">
            <summary>
            Registers a wildlife creature with the map's tracking system. Wildlife includes
            passive animals like pigs, chickens, and other creatures that populate levels and
            can react to player actions or explosions.
            </summary>
            <param name="wildLifeObject">The WildLife object to register.</param>
        </member>

        <member name="M:Map.RemoveCitizen(Citizen)">
            <summary>
            Removes a citizen from the map's unit tracking system, typically when they are
            rescued, killed, or otherwise removed from gameplay. This ensures they are no longer
            considered for AI targeting or rescue objectives.
            </summary>
            <param name="citizen">The Citizen object to remove from tracking.</param>
        </member>

        <member name="M:Map.RemoveDisturbedWildLife(WildLife)">
            <summary>
            Removes a wildlife creature from the disturbed wildlife tracking list, typically
            when it has calmed down, been killed, or is no longer in a disturbed state. This
            allows the creature to return to normal behavior patterns.
            </summary>
            <param name="wildLifeObject">The WildLife object to remove from disturbed tracking.</param>
        </member>

        <member name="M:Map.RemoveUnit(Unit)">
            <summary>
            Removes a Unit from the map's unit tracking system.
            </summary>
            <param name="unit">The Unit to remove.</param>
        </member>

        <member name="M:Map.RemoveWildLife(WildLife)">
            <summary>
            Removes a wildlife creature from the map's general tracking system, typically when
            the creature is killed, leaves the level, or is no longer needed for gameplay
            purposes.
            </summary>
            <param name="wildLifeObject">The WildLife object to remove from tracking.</param>
        </member>

        <member name="M:Map.ReplaceCageWithAmmoAndRevives(Cage)">
            <summary>
            Replaces a single cage with ammunition and revival crates at the same position. This
            helper method handles the transformation of individual cages.
            </summary>
            <param name="cage">The cage to replace with crates</param>
            <remarks>
            Preserves the cage's position and column information before destroying it, then calls Create4AmmoAndRevives to spawn the replacement crates. The cage is properly collapsed and destroyed before replacement.
            </remarks>
        </member>

        <member name="M:Map.ReplaceCageWithAmmoAndRevives(Cage)">
            <summary>
            Replaces a single cage with a 2x2 arrangement of ammunition and revival crates.
            </summary>
            <param name="cage">The cage to replace with power-up crates.</param>
            <remarks>
            Called internally by ReplaceCagesWithAmmoAndRevives. Destroys the cage and creates
            four crates in its place: two ammo crates on top and one revival crate plus one
            damage boost crate on the bottom.
            </remarks>
        </member>

        <member name="M:Map.ReplaceCagesWithAmmoAndRevives">
            <summary>
            Replaces all cages in the current map with ammunition and revival crates. This is
            typically used in specific game modes or when transitioning to different gameplay
            scenarios.
            </summary>
            <remarks>
            Iterates through the cages list backwards and calls ReplaceCageWithAmmoAndRevives for each valid cage. This transformation affects all cages in the level simultaneously.
            </remarks>
        </member>

        <member name="M:Map.ReplaceCagesWithAmmoAndRevives">
            <summary>
            Replaces all existing cages in the level with ammunition and revival crates.
            </summary>
            <remarks>
            Iterates through all registered cages and replaces each one with a 2x2 arrangement
            of power-up crates. This is typically used for game modes or difficulty settings
            where prisoner rescue is replaced with resource collection.
            </remarks>
        </member>

        <member name="M:Map.SpawnFaceBaneling(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Spawns an alien baneling (face hugger variant) at the specified position with
            initial velocity. These aliens climb on walls and ceilings to ambush players.
            </summary>
            <param name="x">The x coordinate to spawn at</param>
            <param name="y">The y coordinate to spawn at</param>
            <param name="xI">The initial x velocity</param>
            <param name="yI">The initial y velocity</param>
            <returns>The spawned AlienClimber instance</returns>
        </member>

        <member name="M:Map.SpawnFaceHugger(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Spawns an alien face hugger at the specified position with initial velocity. These
            aliens jump at players and attach to their faces.
            </summary>
            <param name="x">The x coordinate to spawn at</param>
            <param name="y">The y coordinate to spawn at</param>
            <param name="xI">The initial x velocity</param>
            <param name="yI">The initial y velocity</param>
            <returns>The spawned AlienClimber instance</returns>
        </member>

        <member name="F:Map.alienEggs">
            <summary>
            Static list tracking all alien egg explosives in the current map. Used to manage
            alien spawn points that can hatch facehuggers when disturbed or destroyed by player
            actions.
            </summary>
        </member>

        <member name="F:Map.citizens">
            <summary>
            List of civilian NPCs that need rescuing or protection. Citizens are registered via
            RegisterCitizen and removed via RemoveCitizen. Used for rescue missions and civilian
            AI behavior. The registration method prevents duplicate entries. Initialized in
            Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.disturbedWildLife">
            <summary>
            Static list of wildlife that have been disturbed by explosions or player actions.
            Wildlife are added via RegisterDisturbedWildLife() when startled and removed via
            RemoveDisturbedWildLife() when calmed or killed.
            </summary>
        </member>

        <member name="F:Map.heroWatchers">
            <summary>
            List of objects that monitor or react to hero presence. Watchers are registered via
            RegisterHeroWatcher and removed via RemoveHeroWatcher. Used for triggering events,
            cinematics, or AI behaviors based on player proximity. The registration method
            prevents duplicate entries. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.nearestUnit">
            <summary>
            Temporary storage for the nearest unit found during proximity searches. Used by
            GetNearestUnit methods to track the closest unit while iterating through all units.
            This field is used for optimization to avoid allocating new variables during
            frequent proximity checks.
            </summary>
        </member>

        <member name="F:Map.units">
            <summary>
            Static list containing all active Unit objects in the map. This is the primary
            registry for all enemies, NPCs, and other unit types. Units are added during
            spawn/creation and removed when destroyed. Used for AI targeting and game state
            management.
            </summary>
        </member>

        <member name="F:Map.wildLife">
            <summary>
            Static list tracking all wildlife creatures in the map (pigs, chickens, etc).
            Wildlife are registered via RegisterWildLife() and removed via RemoveWildLife().
            Separate from the disturbed wildlife tracking.
            </summary>
        </member>

        <member name="M:Map.ActivateNearbyAlienTelepathyTriggers(System.Int32,System.Int32,System.Int32)">
            <summary>
            Activates alien telepathy triggers within sensing range of the specified grid
            position.
            </summary>
            <param name="collumn">The column index of the activation source</param>
            <param name="row">The row index of the activation source</param>
            <param name="chainCount">The current chain reaction count for limiting propagation</param>
            <remarks>
            This method iterates through all registered alien telepathy triggers and activates those within
            their defined sensing range. Each trigger has its own columnSenseRange and rowSenseRange values
            that determine its activation distance. When activated, triggers receive the source position and
            an incremented chain count, allowing for cascading activation effects. The method processes the
            list in reverse order for safe modification during iteration. This system is used for alien
            enemy coordination and environmental reactions.
            </remarks>
        </member>

        <member name="M:Map.AddBroToHeroTransport(TestVanDammeAnim)">
            <summary>
            Adds a bro (player character) to the appropriate hero transport vehicle. Determines
            transport type based on game mode and map settings, then adds the bro to either the
            helicopter, portal, or truck transport.
            </summary>
            <param name="Bro">The bro character to add to the transport</param>
        </member>

        <member name="M:Map.AlertNearbyMooks(System.Single,System.Single,System.Single,System.Single,System.Int32,GridPoint)">
            <summary>
            Fully alerts all enemy units within a rectangular range, making them aware of a
            player at the specified position. The GridPoint parameter appears to be unused in
            the implementation.
            </summary>
            <param name="x">X position of the alert source</param>
            <param name="y">Y position of the alert source</param>
            <param name="xRange">Half-width of the rectangular alert area</param>
            <param name="yRange">Half-height of the rectangular alert area</param>
            <param name="playerNum">Player number that triggered the alert</param>
            <param name="startPoint">Grid point where the alert originated (unused in implementation)</param>
        </member>

        <member name="M:Map.AlertNearbyMooks(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Fully alerts all living enemy units within a rectangular range, making them aware of
            a player at the specified position. Only affects units with negative player numbers
            and positive health.
            </summary>
            <param name="x">X position of the alert source</param>
            <param name="y">Y position of the alert source</param>
            <param name="xRange">Half-width of the rectangular alert area</param>
            <param name="yRange">Half-height of the rectangular alert area</param>
            <param name="playerNum">Player number that triggered the alert</param>
        </member>

        <member name="M:Map.AttractAliens(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Attracts all alien units within a rectangular range to move toward the specified
            position. Affects units with playerNum of -2 or units that are instances of the
            Alien class.
            </summary>
            <param name="x">X position to attract aliens toward</param>
            <param name="y">Y position to attract aliens toward</param>
            <param name="xRange">Half-width of the rectangular attraction area</param>
            <param name="yRange">Half-height of the rectangular attraction area</param>
        </member>

        <member name="M:Map.AttractMooks(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Attracts all enemy units (mooks) within a rectangular range to move toward the
            specified position. Only affects units with negative player numbers (enemies).
            </summary>
            <param name="x">X position to attract units toward</param>
            <param name="y">Y position to attract units toward</param>
            <param name="xRange">Half-width of the rectangular attraction area</param>
            <param name="yRange">Half-height of the rectangular attraction area</param>
        </member>

        <member name="M:Map.BotherNearbyMooks(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Makes a sound that bothers nearby enemy units, causing them to investigate. Only
            affects living enemy units that have the ability to hear (CanHear property is true).
            </summary>
            <param name="x">X position of the sound source</param>
            <param name="y">Y position of the sound source</param>
            <param name="xRange">Half-width of the rectangular sound area</param>
            <param name="yRange">Half-height of the rectangular sound area</param>
            <param name="playerNum">Player number making the sound (currently unused in implementation)</param>
        </member>

        <member name="M:Map.CallInHeroTransportAnyway">
            <summary>
            Forces the hero transport to be called in regardless of current state. Handles
            different spawn modes (Portal, Truck, Helicopter) and calls the appropriate
            transport if it hasn't already entered the level.
            </summary>
        </member>

        <member name="M:Map.CallInTransport(UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Initiates the hero transport arrival sequence. Sends an RPC to all clients to
            synchronize the transport arrival.
            </summary>
            <param name="startLocation">The position where the transport should arrive</param>
            <param name="ArriveByHelicopter">Whether to use helicopter transport</param>
            <param name="ArriveByPortal">Whether to use portal transport</param>
        </member>

        <member name="M:Map.CallInTransport_RPC(UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <summary>
            RPC handler that executes the transport arrival on all clients. Activates the
            appropriate transport type and initiates its entry sequence.
            </summary>
            <param name="startLocation">The position where the transport should arrive</param>
            <param name="ArriveByHelicopter">Whether to use helicopter transport</param>
            <param name="ArriveByPortal">Whether to use portal transport</param>
        </member>

        <member name="M:Map.CanSeeNPCEnemyUnit(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Single@,System.Single@)">
            <summary>
            Searches for visible enemy units within a directional sight range with no vertical
            direction preference. Wrapper that calls the full overload with yDirection set to 0.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The direction to search in (-1 for left, 1 for right)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit</param>
            <param name="seenEnemyNum">Output parameter for the seen enemy's player number</param>
            <param name="enemyX">Output parameter for the seen enemy's X position</param>
            <param name="enemyY">Output parameter for the seen enemy's Y position</param>
            <returns>True if an enemy unit was found, false otherwise</returns>
        </member>

        <member name="M:Map.CanSeeNPCEnemyUnit(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Single@,System.Single@)">
            <summary>
            Searches for visible enemy units within a directional sight range with optional
            vertical direction filtering. Full implementation that checks line of sight and
            stealth status.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The horizontal direction to search in (-1 for left, 1 for right)</param>
            <param name="yDirection">The vertical direction preference (-1 for down, 1 for up, 0 for no preference)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit</param>
            <param name="seenEnemyNum">Output parameter for the seen enemy's player number</param>
            <param name="enemyX">Output parameter for the seen enemy's X position</param>
            <param name="enemyY">Output parameter for the seen enemy's Y position</param>
            <returns>True if an enemy unit was found that meets all criteria, false otherwise</returns>
        </member>

        <member name="M:Map.CanSeeNPCEnemyUnit(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if any enemy unit is visible within a directional sight range without
            returning position information. Simplified version for basic visibility checks.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The direction to search in (-1 for left, 1 for right)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit</param>
            <returns>True if any enemy unit is visible within range, false otherwise</returns>
        </member>

        <member name="M:Map.CanSeeNPCEnemyUnitWithPosition(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Single@,System.Single@)">
            <summary>
            Searches for visible enemy units within a directional sight range and returns the
            first found enemy's position. Used by AI to detect player units in their field of
            view.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The direction to search in (-1 for left, 1 for right, 0 for both directions)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit (will find enemies of this player)</param>
            <param name="seenEnemyNum">Output parameter that will contain the player number of the seen enemy</param>
            <param name="seenPositionX">Output parameter that will contain the X position of the seen enemy</param>
            <param name="seenPositionY">Output parameter that will contain the Y position of the seen enemy</param>
            <returns>True if an enemy unit was found within the sight range, false otherwise</returns>
        </member>

        <member name="M:Map.CanSeePosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if there is a clear line of sight between two grid positions using raycast
            collision detection. Tests visibility between the center points of two grid blocks.
            </summary>
            <param name="fromCollumn">The starting column position in the grid</param>
            <param name="fromRow">The starting row position in the grid</param>
            <param name="seenCollumn">The target column position to check visibility to</param>
            <param name="seenRow">The target row position to check visibility to</param>
            <returns>True if there is a clear line of sight between the positions (no ground or
                fragile terrain blocking), false otherwise</returns>
        </member>

        <member name="M:Map.CanSeePosition(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Checks if there is a clear line of sight between two world positions using raycast
            collision detection. Tests direct visibility between exact coordinates.
            </summary>
            <param name="fromPositionX">The starting X position in world coordinates</param>
            <param name="fromPositionY">The starting Y position in world coordinates</param>
            <param name="seenPositionX">The target X position to check visibility to</param>
            <param name="seenPositionY">The target Y position to check visibility to</param>
            <returns>True if there is a clear line of sight between the positions (no ground or
                fragile terrain blocking), false otherwise</returns>
        </member>

        <member name="M:Map.CheckHighFive(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Checks if a player can perform a high five with another player within range. Players
            must be facing each other (opposite directions) and both must be player-controlled
            units.
            </summary>
            <param name="playerNum">Player number attempting the high five</param>
            <param name="x">X position to check from</param>
            <param name="y">Y position to check from</param>
            <param name="xRange">Maximum horizontal distance for high five</param>
            <param name="yRange">Maximum vertical distance for high five</param>
            <param name="direction">Direction the initiating player is facing</param>
            <returns>True if a high five connection was successfully made, false otherwise</returns>
        </member>

        <member name="M:Map.EnemyDeathEvent(Unit)">
            <summary>
            Broadcasts an enemy death event to all registered death listeners. This method is
            called when an enemy unit dies and notifies all triggers that are monitoring for
            enemy eliminations, allowing them to evaluate their conditions.
            </summary>
            <param name="unit">The Unit that has died, passed to listeners for evaluation.</param>
        </member>

        <member name="M:Map.ForgetPlayer(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Makes all AI units on the map forget about a specific player. Affects all units
            regardless of distance.
            </summary>
            <param name="playerNum">The player number (0-3) to forget.</param>
            <param name="confuseMooks">If true, makes AI units lose sight of the player; if false and amuseMooks is false, makes them forget the player entirely.</param>
            <param name="amuseMooks">If true, makes AI units laugh at the dead player.</param>
        </member>

        <member name="M:Map.ForgetPlayer(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Makes AI units within a circular range forget about a specific player.
            </summary>
            <param name="playerNum">The player number (0-3) to forget.</param>
            <param name="x">The X coordinate of the range center.</param>
            <param name="y">The Y coordinate of the range center.</param>
            <param name="range">The radius of the circular area of effect.</param>
            <param name="confuseMooks">If true, makes AI units lose sight of the player; if false and amuseMooks is false, makes them forget the player entirely.</param>
            <param name="amuseMooks">If true, makes AI units laugh at the dead player.</param>
        </member>

        <member name="M:Map.ForgetPlayer(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Makes AI units within a rectangular range forget about a specific player.
            </summary>
            <param name="playerNum">The player number (0-3) to forget.</param>
            <param name="x">The X coordinate of the range center.</param>
            <param name="y">The Y coordinate of the range center.</param>
            <param name="xRange">The horizontal half-width of the rectangular area of effect.</param>
            <param name="yRange">The vertical half-height of the rectangular area of effect.</param>
            <param name="confuseMooks">If true, makes AI units lose sight of the player; if false and amuseMooks is false, makes them forget the player entirely.</param>
            <param name="amuseMooks">If true, makes AI units laugh at the dead player.</param>
        </member>

        <member name="M:Map.GetNearbyUnalertedMook(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Finds and returns a nearby enemy unit (Mook) that has never been alerted. Used for
            stealth gameplay mechanics to identify unaware enemies.
            </summary>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="xRange">Half-width of the rectangular search area</param>
            <param name="yRange">Half-height of the rectangular search area</param>
            <returns>The first unalerted Mook found in range, or null if none exist</returns>
        </member>

        <member name="M:Map.GetNearestMookDoor(System.Int32,System.Int32)">
            <summary>
            Finds the nearest intact mook door to a given grid position using Manhattan
            distance. This method uses LINQ to order all doors by distance and returns the first
            one that hasn't been destroyed, used by AI for pathfinding through door checkpoints.
            </summary>
            <param name="col">The column coordinate in the map grid to search from.</param>
            <param name="row">The row coordinate in the map grid to search from.</param>
            <returns>The nearest non-destroyed MookDoor to the specified position, or null if no
                intact doors exist.</returns>
        </member>

        <member name="M:Map.GetNearestMookInterestPoint(System.Int32,System.Int32)">
            <summary>
            Finds the nearest scout mook interest point to a given grid position using Manhattan
            distance calculation. This is used by scout mook AI to determine the closest point
            to investigate during patrol or alert behaviors.
            </summary>
            <param name="col">The column coordinate in the map grid to search from.</param>
            <param name="row">The row coordinate in the map grid to search from.</param>
            <returns>The nearest ScoutMookInterestPoint to the specified position, or null if no
                points exist.</returns>
        </member>

        <member name="M:Map.HeroTransportHasEntered">
            <summary>
            Checks whether any hero transport has entered the level and released heroes. Checks
            all three transport types (truck, helicopter, portal) to see if any have completed
            their entry sequence.
            </summary>
            <returns>True if any transport has released heroes, false otherwise</returns>
        </member>

        <member name="M:Map.MakeMooksDance(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Makes all enemy units (mooks) within a rectangular range dance for a specified
            duration. Dancing units are temporarily incapacitated.
            </summary>
            <param name="x">X position of the dance effect center</param>
            <param name="y">Y position of the dance effect center</param>
            <param name="xRange">Half-width of the rectangular dance area</param>
            <param name="yRange">Half-height of the rectangular dance area</param>
            <param name="time">Duration of the dance in seconds</param>
        </member>

        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Causes all enemy units within a circular range to panic and flee. Units will run
            away from the panic source for 0.1 seconds.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="range">Radius of the panic effect</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
        </member>

        <member name="M:Map.PanicUnits(System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Causes enemy units within range to panic and flee from a specific player. Only
            affects units that can be damaged by the specified player number. Units panic for 2
            seconds.
            </summary>
            <param name="playernum">Player number causing the panic</param>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="range">Radius of the panic effect</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
        </member>

        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Causes enemy units within range to panic for a specified duration. This overload
            converts circular range to rectangular range internally.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="range">Radius of the panic effect (used for both X and Y range)</param>
            <param name="time">Duration of the panic in seconds</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
            <param name="runRandomDirection">Whether units should run in random directions or away from the source</param>
        </member>

        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Causes enemy units within a rectangular range to panic for a specified duration.
            Units can either flee away from the source or run in random directions.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="xRange">Half-width of the rectangular panic area</param>
            <param name="yRange">Half-height of the rectangular panic area</param>
            <param name="time">Duration of the panic in seconds</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
            <param name="runRandomDirection">If true, units run in random directions; if false, they run away from the source</param>
        </member>

        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
            Causes enemy units within a rectangular range to panic in a specific direction for a
            specified duration. If direction is 0, units will flee away from the source.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="xRange">Half-width of the rectangular panic area</param>
            <param name="yRange">Half-height of the rectangular panic area</param>
            <param name="direction">Forced panic direction (-1 left, 1 right, 0 for away from source)</param>
            <param name="time">Duration of the panic in seconds</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
        </member>

        <member name="M:Map.RegisterEnemyDeathListener(Trigger)">
            <summary>
            Registers a trigger that responds to enemy death events. These listeners are
            notified whenever an enemy unit dies, allowing for gameplay mechanics like kill
            counters, wave completion detection, or triggered events based on eliminations.
            </summary>
            <param name="trig">The Trigger object that will listen for enemy death events.</param>
        </member>

        <member name="M:Map.RegisterFetchObject(System.Single,System.Single,System.Single,System.Single,UnityEngine.Transform)">
            <summary>
            Registers an object for nearby enemy units to fetch. Only affects living enemy units
            that can hear. Unlike other range checks, this method uses exact range comparison
            rather than accounting for unit width/height.
            </summary>
            <param name="x">X position to check from</param>
            <param name="y">Y position to check from</param>
            <param name="xRange">Maximum horizontal distance to fetch object</param>
            <param name="yRange">Maximum vertical distance to fetch object</param>
            <param name="fetchTransform">The transform of the object to fetch</param>
        </member>

        <member name="M:Map.RegisterHeroWatcher(BroforceObject)">
            <summary>
            Registers an object that monitors hero (player) activity and position. Hero watchers
            are typically used by AI systems, traps, or environmental elements that need to
            react to player presence or actions within their awareness range.
            </summary>
            <param name="watcher">The BroforceObject that will watch for hero activity.</param>
        </member>

        <member name="M:Map.RegisterMookInterestPoint(ScoutMookInterestPoint)">
            <summary>
            Registers a point of interest for scout mook AI behavior. These points represent
            locations that scout mooks will investigate, patrol to, or use as waypoints during
            their scouting patterns, often including doors or strategic positions.
            </summary>
            <param name="pointObject">The ScoutMookInterestPoint to register.</param>
        </member>

        <member name="M:Map.RemoveEnemyDeathListener(Trigger)">
            <summary>
            Removes a trigger from the enemy death listener system, typically when the trigger
            is destroyed or its conditions have been met. This prevents the trigger from
            continuing to receive death notifications.
            </summary>
            <param name="trig">The Trigger object to remove from death event listening.</param>
        </member>

        <member name="M:Map.RemoveHeroWatcher(BroforceObject)">
            <summary>
            Removes an object from the hero watcher tracking system, typically when the watcher
            is destroyed or no longer needs to monitor player activity. This prevents
            unnecessary processing of defunct watchers.
            </summary>
            <param name="watcher">The BroforceObject to remove from hero watching.</param>
        </member>

        <member name="M:Map.RemoveMookInterestPoint(ScoutMookInterestPoint)">
            <summary>
            Removes a scout mook interest point from the tracking system, typically when the
            point has been used, destroyed, or is no longer relevant for AI pathing. Some
            interest points are configured to remove themselves after first use.
            </summary>
            <param name="pointObject">The ScoutMookInterestPoint to remove from tracking.</param>
        </member>

        <member name="M:Map.StunMooks(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Stuns all enemy units (mooks) within a rectangular range for a specified duration.
            Only affects units with negative player numbers.
            </summary>
            <param name="x">X position of the stun center</param>
            <param name="y">Y position of the stun center</param>
            <param name="xRange">Half-width of the rectangular stun area</param>
            <param name="yRange">Half-height of the rectangular stun area</param>
            <param name="time">Duration of the stun in seconds</param>
        </member>

        <member name="F:Map.mookInterestPoints">
            <summary>
            List of points of interest for scout mook AI pathfinding. Interest points are
            registered via RegisterMookInterestPoint and removed via RemoveMookInterestPoint.
            Used by GetNearestMookInterestPoint to find the closest point based on grid
            coordinates for AI navigation decisions. Initialized in Awake() and set to null in
            OnDestroy().
            </summary>
        </member>

        <member name="M:Map.DamageProjectile(Projectile,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Applies damage to a projectile, potentially destroying or redirecting it. Used when
            projectiles collide with attacks or explosions.
            </summary>
            <param name="projectile">The projectile to damage</param>
            <param name="damage">The amount of damage to apply</param>
            <param name="damageType">The type of damage being applied</param>
            <param name="xI">The horizontal force to apply</param>
            <param name="yI">The vertical force to apply</param>
            <param name="delay">Delay before applying the damage</param>
            <param name="newPlayerNum">The new owner player number (for redirected projectiles)</param>
        </member>

        <member name="M:Map.DeflectProjectiles(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Deflects enemy projectiles within range back at enemies. Changes projectile
            ownership, reverses direction, adds scatter, and can trigger achievements.
            </summary>
            <param name="newOwner">The new owner of deflected projectiles</param>
            <param name="playerNum">The player number doing the deflection</param>
            <param name="range">The deflection range</param>
            <param name="x">The X coordinate of the deflection source</param>
            <param name="y">The Y coordinate of the deflection source</param>
            <param name="xI">The horizontal direction indicator for deflection</param>
            <param name="giveDeflectAchievementOnMookKill">Whether to award achievement for mook kills with deflected projectiles</param>
            <returns>True if any projectiles were deflected, false otherwise</returns>
        </member>

        <member name="M:Map.GetGrenadesInRange(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Gets all active grenades within Manhattan distance that can be damaged by the
            player. Checks game mode rules for friendly fire and filters by active state.
            </summary>
            <param name="playerNum">The player number to check damage rules for</param>
            <param name="range">The Manhattan distance range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>List of grenades within range that can be damaged</returns>
        </member>

        <member name="M:Map.GetNearbyGrenade(System.Single,System.Single,System.Single)">
            <summary>
            Finds the nearest active grenade within range using Manhattan distance. Returns the
            single closest grenade regardless of player ownership.
            </summary>
            <param name="range">The maximum search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>The nearest grenade within range, or null if none found</returns>
        </member>

        <member name="M:Map.GetNearbySachelPack(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Finds the nearest active satchel pack within range using Manhattan distance. Used
            for remote detonation and chain explosion mechanics.
            </summary>
            <param name="playerNum">The player number (unused in current implementation)</param>
            <param name="range">The maximum search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>The nearest satchel pack within range, or null if none found</returns>
        </member>

        <member name="M:Map.GetProjectilesInRange(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Gets all projectiles within Manhattan distance that can damage the specified player.
            Respects game mode damage rules for team damage and friendly fire.
            </summary>
            <param name="playerNum">The player number to check damage rules against</param>
            <param name="range">The Manhattan distance range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>List of projectiles within range that can damage the player</returns>
        </member>

        <member name="M:Map.HitGrenades(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Checks for grenade hits within range and knocks the first one found. Special
            handling for coconuts with RPC synchronization for knockback.
            </summary>
            <param name="playerNum">The player number performing the hit check</param>
            <param name="range">The hit detection range</param>
            <param name="x">The X coordinate of the hit origin</param>
            <param name="y">The Y coordinate of the hit origin</param>
            <param name="xI">The horizontal force to apply</param>
            <param name="yI">The vertical force to apply</param>
            <param name="grenadeX">Output parameter for the hit grenade's X position</param>
            <param name="grenadeY">Output parameter for the hit grenade's Y position</param>
            <returns>True if a grenade was hit, false otherwise</returns>
        </member>

        <member name="M:Map.HitProjectiles(System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Damages damageable projectiles within a square range. Simple overload that uses same
            range for both X and Y axes.
            </summary>
            <param name="playerNum">The player number dealing damage</param>
            <param name="damage">The damage amount to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="range">The damage range (used for both axes)</param>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="xI">The horizontal impact force</param>
            <param name="yI">The vertical impact force</param>
            <param name="delay">The damage delay</param>
            <returns>True if any projectiles were hit, false otherwise</returns>
        </member>

        <member name="M:Map.HitProjectiles(System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Damages damageable projectiles within a rectangular range. Checks projectile size
            for precise collision and respects damage rules.
            </summary>
            <param name="playerNum">The player number dealing damage</param>
            <param name="damage">The damage amount to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="xRange">The horizontal damage range</param>
            <param name="yRange">The vertical damage range</param>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="xI">The horizontal impact force</param>
            <param name="yI">The vertical impact force</param>
            <param name="delay">The damage delay</param>
            <returns>True if any projectiles were hit, false otherwise</returns>
        </member>

        <member name="M:Map.RegisterDamageableProjectile(Projectile)">
            <summary>
            Registers a Projectile in the damageable projectiles list, marking it as a
            projectile that can take damage.
            </summary>
            <param name="projectile">The Projectile to register as damageable.</param>
        </member>

        <member name="M:Map.RegisterGrenade(Grenade)">
            <summary>
            Registers a Grenade with the map's grenade tracking system.
            </summary>
            <param name="grenade">The Grenade to register.</param>
        </member>

        <member name="M:Map.RegisterProjectile(Projectile)">
            <summary>
            Registers a Projectile with the map's projectile tracking system.
            </summary>
            <param name="projectile">The Projectile to register.</param>
        </member>

        <member name="M:Map.RegisterSachelPack(SachelPack)">
            <summary>
            Registers a SachelPack with the map's satchel pack tracking system.
            </summary>
            <param name="sachelPack">The SachelPack to register.</param>
        </member>

        <member name="M:Map.RegisterShootableGrenade(Grenade)">
            <summary>
            Registers a Grenade in the shootable grenades list, marking it as a grenade that can
            be damaged by gunfire.
            </summary>
            <param name="shootableGrenade">The Grenade to register as shootable.</param>
        </member>

        <member name="M:Map.RemoveGrenade(Grenade)">
            <summary>
            Removes a Grenade from the map's grenade tracking system.
            </summary>
            <param name="grenade">The Grenade to remove.</param>
        </member>

        <member name="M:Map.RemoveProjectile(Projectile)">
            <summary>
            Removes a Projectile from both the regular projectiles list and the damageable
            projectiles list if present.
            </summary>
            <param name="projectile">The Projectile to remove.</param>
        </member>

        <member name="M:Map.RemoveSachelPack(SachelPack)">
            <summary>
            Removes a SachelPack from the map's satchel pack tracking system.
            </summary>
            <param name="sachelPack">The SachelPack to remove.</param>
        </member>

        <member name="M:Map.RemoveShootableGrenade(Grenade)">
            <summary>
            Removes a Grenade from the shootable grenades list.
            </summary>
            <param name="shootableGrenade">The Grenade to remove from shootable tracking.</param>
        </member>

        <member name="F:Map.damageableProjectiles">
            <summary>
            List of projectiles that can be destroyed by damage (e.g., rockets that can be shot
            down). Projectiles are added via RegisterDamageableProjectile and removed via
            RemoveDamageableProjectile. Used for advanced projectile interaction mechanics.
            Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.grenades">
            <summary>
            Master list of all active grenades in the map. Grenades are registered via
            RegisterGrenade when thrown and removed via RemoveGrenade when they explode or are
            destroyed. Used for grenade-specific collision detection and detonation logic.
            Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.helicopterCallCount">
            <summary>
            Static counter tracking the number of helicopter calls made during gameplay. Reset
            to 0 during map initialization. Used to limit or track helicopter usage in levels.
            </summary>
        </member>

        <member name="F:Map.helicopterFake">
            <summary>
            Static reference to a fake helicopter object used for visual effects or scripted
            sequences where a full helicopter entity isn't needed. Separate from the functional
            newestHelicopter reference.
            </summary>
        </member>

        <member name="F:Map.hiddenExplosivePrefabReference">
            <summary>
            Reference to the hidden explosives prefab used for trap mechanics. Instantiated via
            hiddenExplosivePrefabReference.Asset during map generation to create explosive traps
            that trigger when players get near.
            </summary>
        </member>

        <member name="F:Map.newestHelicopter">
            <summary>
            Static reference to the most recently spawned helicopter in the game. Updated
            whenever a new helicopter is created, allowing other systems to reference the
            current active helicopter for extraction or attack sequences.
            </summary>
        </member>

        <member name="F:Map.projectiles">
            <summary>
            Master list of all active projectiles in the map. Projectiles are registered via
            RegisterProjectile when spawned and removed via RemoveProjectile when destroyed.
            Used by various systems to iterate through all projectiles for collision detection,
            updates, and cleanup. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.sachelPacks">
            <summary>
            List of all placed satchel pack explosives. Satchel packs are registered via
            RegisterSachelPack when placed and removed via RemoveSachelPack when detonated. Used
            for remote detonation functionality and chain explosion mechanics. Initialized in
            Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="F:Map.shootableGrenades">
            <summary>
            Subset of grenades that can be detonated by shooting them. Grenades are added via
            RegisterShootableGrenade and removed via RemoveShootableGrenade. Used by projectile
            collision systems to check if a grenade should explode when hit. Initialized in
            Awake() and set to null in OnDestroy().
            </summary>
        </member>

        <member name="M:Map.Awake">
            <summary>
            Initializes the Map singleton when it awakens. Sets up layer masks for collision
            detection, initializes all tracking lists for game objects, allocates network IDs
            for deterministic spawning, and prepares the level loading system.
            </summary>
        </member>

        <member name="M:Map.ClearSuperCheckpointStatus">
            <summary>
            Clears all super checkpoint related data. Resets the super checkpoint position and
            load offsets to their default values.
            </summary>
        </member>

        <member name="M:Map.ContinueLevel">
            <summary>
            Resets level continuation state after loading from a super checkpoint. Clears super
            checkpoint status to allow normal gameplay to resume.
            </summary>
        </member>

        <member name="M:Map.ExitLevel">
            <summary>
            Cleans up level data when exiting a level. Nullifies the blocks array to free up
            memory and prepare for the next level.
            </summary>
        </member>

        <member name="M:Map.IsFinished">
            <summary>
            Checks whether the current level has been completed. Used to determine when to
            trigger level end sequences and transitions.
            </summary>
            <returns>True if the level is marked as finished, false otherwise</returns>
        </member>

        <member name="M:Map.OnDestroy">
            <summary>
            Cleans up all map resources when the Map object is destroyed. Returns all pooled
            effects to their pools, clears all tracking lists to prevent memory leaks, and
            properly nullifies all references to allow garbage collection.
            </summary>
        </member>

        <member name="M:Map.SetupBlocksCoroutine">
            <summary>
            Sets up the level blocks and initializes the game world. Handles random seed
            synchronization for deterministic gameplay, loads the appropriate map data based on
            game mode, spawns parallax backgrounds and clouds, initializes wind and quicksand
            controllers, and creates hero transport vehicles based on spawn mode settings.
            </summary>
        </member>

        <member name="M:Map.ShouldTheBrosArriveByHeli(UnityEngine.Vector3)">
            <summary>
            Determines whether heroes should arrive by helicopter based on the level's starting
            area. Checks if there are solid blocks or gaps near the start location that would
            require aerial insertion.
            </summary>
            <param name="startLocation">The starting position to check from</param>
            <returns>True if helicopter arrival is needed, false if ground-based arrival is possible</returns>
        </member>

        <member name="M:Map.Start">
            <summary>
            Completes map initialization after all objects are awake. Instantiates the
            helicopter for the host, triggers FirstFrame on all blocks to initialize their
            state, and sets up any additional level-specific components.
            </summary>
        </member>

        <member name="P:Map.Instance">
            <summary>
            Gets the singleton instance of the Map class using lazy initialization. If no
            instance exists, searches for a Map object in the scene using Unity's
            FindObjectOfType.
            </summary>
        </member>

        <member name="F:Map.alreadyLoadedForceStartLevel">
            <summary>
            Tracks whether the editor force start level functionality has already been applied.
            Used in the editor to ensure that the startLevel field is only applied once when
            starting the game outside of the main menu. Set to true after the first application
            to prevent repeated level changes.
            </summary>
        </member>

        <member name="F:Map.hasBeenSetup">
            <summary>
            Indicates whether the map has completed its setup process. Set to true at the end of
            SetupBlocksCoroutine after all map initialization is complete, including terrain
            loading, spawn point setup, and random seed generation.
            </summary>
        </member>

        <member name="F:Map.inst">
            <summary>
            Static backing field for the singleton Map instance. Used by the Instance property
            to implement lazy initialization of the Map singleton pattern.
            </summary>
        </member>

        <member name="F:Map.startLevel">
            <summary>
            The level number to force start at when running in the editor. When set to a value
            &gt;= 0 and the game is started outside the main menu in the editor, this overrides
            the default starting level. Also supports random level selection when randomLevel is
            enabled, adding a random offset based on randomRange.
            </summary>
        </member>

        <member name="F:Map.waitingForSeed">
            <summary>
            Indicates whether the map is waiting for network seed synchronization. Set to false
            after random seeds are generated for spawn point offset, wood block count, and
            barrel block count during map setup.
            </summary>
        </member>

        <member name="F:Map.waitingForSync">
            <summary>
            Indicates whether the map is waiting for network synchronization. Used to coordinate
            map state across networked games before proceeding with initialization.
            </summary>
        </member>

        <member name="M:Map.AssignBlock(Block,System.Int32,System.Int32)">
            <summary>
            Assigns a block to the specified grid coordinates. Will only assign if the position
            is within bounds and either empty, destroyed, or contains a ladder-type block.
            </summary>
            <param name="block">The block to assign to the grid position</param>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block was successfully assigned, false if the position is invalid
                or already contains a solid block</returns>
        </member>

        <member name="M:Map.CheckPersistBlocksPastLevelLoad">
            <summary>
            Checks whether blocks should be persisted after a level load and either maintains or
            destroys them accordingly. This method is called after level transitions to handle
            the persistence state.
            </summary>
            <remarks>
            Only processes persistence if loading time optimizations are active. Sets hasPersistedPastLevelLoad to true if persistence is enabled, otherwise calls DestroyPersistantBlocks to clear any persisted blocks.
            </remarks>
        </member>

        <member name="M:Map.CheckPersistBlocksPastLevelLoad">
            <summary>
            Checks and applies block persistence settings after a level load.
            </summary>
            <remarks>
            Called after level loading to determine if persistent blocks should be maintained
            or destroyed. Only applies when loading time reduction is active. Sets the
            hasPersistedPastLevelLoad flag if persistence is enabled.
            </remarks>
        </member>

        <member name="M:Map.ClearBackgroundBlock(System.Int32,System.Int32)">
            <summary>
            Destroys and removes the background block at the specified grid coordinates if it
            exists.
            </summary>
            <param name="c">The column index in the grid</param>
            <param name="r">The row index in the grid</param>
        </member>

        <member name="M:Map.ClearForegroundBlock(System.Int32,System.Int32)">
            <summary>
            Destroys and removes the foreground block at the specified grid coordinates. Also
            handles clearing the upper part of 2-unit tall blocks.
            </summary>
            <param name="c">The column index in the grid</param>
            <param name="r">The row index in the grid</param>
        </member>

        <member name="M:Map.ClearPersistenBlocksInstant">
            <summary>
            Immediately clears all persisted blocks without waiting for a level transition. This
            provides a way to force-clear persistence state during gameplay.
            </summary>
            <remarks>
            Resets the hasPersistedPastLevelLoad flag and calls DestroyPersistantBlocks to remove all persisted blocks immediately.
            </remarks>
        </member>

        <member name="M:Map.ClearPersistenBlocksInstant">
            <summary>
            Immediately clears all persistent blocks without waiting for level transition.
            </summary>
            <remarks>
            Resets the persistence flag and destroys all persistent blocks instantly.
            Used when an immediate cleanup is required rather than waiting for the
            normal level transition process. Note the typo in the method name.
            </remarks>
        </member>

        <member name="M:Map.CollapseTop">
            <summary>
            Collapses the top row of the map by destroying blocks and lowering the ceiling.
            </summary>
            <returns>The new highest solid block row index after collapse</returns>
            <remarks>
            This method implements a ceiling collapse mechanic by decrementing highestSolidBlock (minimum 11)
            and destroying blocks in the rows above it. For each column, it checks a sphere area around blocks
            in the collapse zone. Most block types are instantly destroyed with InstaGib damage, but certain
            types like barrels, rockets, ladders, and cages are preserved. Non-block objects in the area
            receive 15 damage. This creates a crushing ceiling effect often used in escape sequences.
            </remarks>
        </member>

        <member name="M:Map.CollapseTopLadders">
            <summary>
            Specifically collapses ladder blocks from the top of the map.
            </summary>
            <returns>The highest solid block value (not the ladder-specific value)</returns>
            <remarks>
            This method decrements highestSolidBlockLadder (minimum 16) and destroys only ladder blocks
            in the affected rows. Unlike CollapseTop(), this targets ladders specifically, useful for
            preventing vertical escape routes during collapse sequences. The method checks block types
            directly from the blocks array and sends InstaGib damage to ladder blocks. Note that it
            returns highestSolidBlock, not highestSolidBlockLadder.
            </remarks>
        </member>

        <member name="M:Map.CreateExitPortal(UnityEngine.Vector2)">
            <summary>
            Creates a hero level exit portal at the specified position. The portal is positioned
            with a vertical offset of 112 units and a horizontal offset of 16 units from the
            provided coordinates.
            </summary>
            <param name="position">The base position where the portal should be created</param>
            <remarks>
            The portal is instantiated from the exitPortalPrefabReference asset and registered with the game's networking system using a deterministic network ID. This ensures the portal is properly synchronized across all clients in multiplayer sessions.
            </remarks>
        </member>

        <member name="M:Map.DeactivateHalfTheMap">
            <summary>
            Deactivates the right half of the map by disabling all blocks beyond the midpoint.
            </summary>
            <remarks>
            This method provides a simple way to hide half the map, typically used for debugging or special
            game modes. It deactivates all blocks from the horizontal midpoint to the right edge of the map.
            Only the block GameObjects are deactivated; the block data remains intact. This is separate from
            the dynamic offscreen deactivation system and provides a static way to reduce the active map size.
            </remarks>
        </member>

        <member name="M:Map.DestroyPersistantBlocks">
            <summary>
            Destroys all persisted blocks and clears the persistence system. This removes both
            foreground and background persistent blocks and their container GameObject.
            </summary>
            <remarks>
            Iterates through all persistent block arrays and destroys each block's GameObject before clearing the arrays and destroying the persistent container. Also resets the hasPersistedPastLevelLoad flag.
            </remarks>
        </member>

        <member name="M:Map.DestroyPersistantBlocks">
            <summary>
            Destroys all persistent blocks and cleans up persistence-related data structures.
            </summary>
            <remarks>
            Iterates through all persistent block arrays and destroys the game objects,
            then nullifies the arrays and destroys the persistent container object.
            This ensures a complete cleanup of the persistence system. Note the typo
            in the method name (Persistant vs Persistent) is from the original code.
            </remarks>
        </member>

        <member name="M:Map.DontPersistBlocks">
            <summary>
            Disables block persistence for the next level load. This prevents blocks from being
            maintained between level transitions, ensuring a fresh map state.
            </summary>
            <remarks>
            Sets the persistPastLevelLoad flag to false. This method should be called when you want to ensure all blocks are cleared and recreated on the next level load, typically when transitioning to a completely different area.
            </remarks>
        </member>

        <member name="M:Map.DontPersistBlocks">
            <summary>
            Disables block persistence for the current level transition.
            </summary>
            <remarks>
            Prevents blocks from being carried over to the next level load. This is typically
            used when transitioning between completely different level sections or when a
            clean slate is required.
            </remarks>
        </member>

        <member name="M:Map.ExtendDisableToUnitPosition(System.Single,System.Single,System.Single)">
            <summary>
            Extends the active area bounds to include the specified unit position with a buffer.
            </summary>
            <param name="x">The x-coordinate of the unit</param>
            <param name="y">The y-coordinate of the unit</param>
            <param name="buffer">The buffer distance around the unit (default: 48 units)</param>
            <remarks>
            This method ensures important units remain in the active area even if they're outside the normal
            camera bounds. It updates the min/max unit position trackers which are consumed by
            RunDeactivationOffscreen() to extend the active area. This prevents important gameplay elements
            like bosses or objective units from being deactivated when slightly offscreen. The buffer parameter
            adds extra space around the unit to ensure smooth activation transitions.
            </remarks>
        </member>

        <member name="M:Map.GetBackgroundBlock(System.Int32,System.Int32)">
            <summary>
            Retrieves the background block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>The background block at the specified position, or null if the position is out
                of bounds or empty</returns>
        </member>

        <member name="M:Map.GetBackgroundGroundType(System.Int32,System.Int32,GroundType)">
            <summary>
            Retrieves the ground type of the background block at the specified grid coordinates,
            falling back to the foreground block if no background block exists.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <param name="currentGroundType">The default ground type to return if the position is out of bounds or both background and foreground are empty</param>
            <returns>The ground type of the background block if it exists, otherwise the foreground
                block's ground type, or currentGroundType if both are empty</returns>
        </member>

        <member name="M:Map.GetBlock(System.Int32,System.Int32)">
            <summary>
            Retrieves the foreground block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>The block at the specified position, or null if the position is out of bounds
                or empty</returns>
        </member>

        <member name="M:Map.GetBlock(UnityEngine.Vector2)">
            <summary>
            Retrieves the foreground block at the specified world coordinates. Note: This method
            incorrectly uses the y component of the Vector2 for row calculation instead of
            column.
            </summary>
            <param name="worldXY">The world coordinates to check</param>
            <returns>The block at the specified world position, or null if the position is out of
                bounds or empty</returns>
        </member>

        <member name="M:Map.GetBlockCenter(System.Int32,System.Int32)">
            <summary>
            Gets the 2D world position of the center of a block at the specified grid
            coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector2 representing the center position of the block</returns>
        </member>

        <member name="M:Map.GetBlockCenterX(System.Int32)">
            <summary>
            Gets the world x coordinate of the center of a block at the specified column. Each
            column is 16 units wide.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <returns>The world x coordinate of the center of the block</returns>
        </member>

        <member name="M:Map.GetBlockCenterY(System.Int32)">
            <summary>
            Gets the world y coordinate of the center of a block at the specified row. Each row
            is 16 units tall.
            </summary>
            <param name="row">The row index in the grid</param>
            <returns>The world y coordinate of the center of the block</returns>
        </member>

        <member name="M:Map.GetBlockExcludingDestroyed(UnityEngine.Vector2)">
            <summary>
            Retrieves the foreground block at the specified world coordinates, excluding blocks
            that are marked as destroyed. Note: This method incorrectly uses the y component of
            the Vector2 for row calculation instead of column.
            </summary>
            <param name="worldXY">The world coordinates to check</param>
            <returns>The block at the specified world position if it exists and is not destroyed, or
                null if the position is out of bounds, empty, or contains a destroyed block</returns>
        </member>

        <member name="M:Map.GetBlocksX(System.Int32)">
            <summary>
            Converts a column index to its left world x coordinate. Each column is 16 units
            wide, with an offset of -8 units.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <returns>The world x coordinate of the left edge of the block at the specified column</returns>
        </member>

        <member name="M:Map.GetBlocksY(System.Int32)">
            <summary>
            Converts a row index to its bottom world y coordinate. Each row is 16 units tall,
            with an offset of -8 units.
            </summary>
            <param name="row">The row index in the grid</param>
            <returns>The world y coordinate of the bottom edge of the block at the specified row</returns>
        </member>

        <member name="M:Map.GetCenterPosition(System.Int32,System.Int32)">
            <summary>
            Gets the world position of the center of a block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector3 representing the center position of the block (z is always 0)</returns>
        </member>

        <member name="M:Map.GetDescentOffset(System.Boolean,System.Int32)">
            <summary>
            Returns the current descent offset value without modification.
            </summary>
            <param name="forceCollapse">Whether to force a collapse (parameter is not used)</param>
            <param name="current">The current offset value to return</param>
            <returns>The current offset value unchanged</returns>
            <remarks>
            This method appears to be a placeholder or simplified version of a descent calculation system.
            Despite having parameters suggesting collapse functionality, it simply returns the current value
            without any processing. This may be used in systems where descent offset calculation was removed
            or simplified.
            </remarks>
        </member>

        <member name="M:Map.GetGridPoint(UnityEngine.Vector3)">
            <summary>
            Converts a world position to a grid coordinate point.
            </summary>
            <param name="pos">The world position to convert</param>
            <returns>A GridPoint containing the column and row indices for the given world position</returns>
        </member>

        <member name="M:Map.GetGridPoint(System.Single,System.Single)">
            <summary>
            Converts world x and y coordinates to a grid coordinate point.
            </summary>
            <param name="x">The world x coordinate</param>
            <param name="y">The world y coordinate</param>
            <returns>A GridPoint containing the column and row indices for the given coordinates</returns>
        </member>

        <member name="M:Map.GetGroundType(System.Int32,System.Int32,GroundType)">
            <summary>
            Retrieves the ground type of the foreground block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <param name="currentGroundType">The default ground type to return if the position is out of bounds or empty</param>
            <returns>The ground type of the block at the specified position, or currentGroundType if
                no block exists</returns>
        </member>

        <member name="M:Map.GetHighestSolidBlock">
            <summary>
            Gets the row index of the highest solid block in the map.
            </summary>
            <returns>The row index of the highest solid block</returns>
            <remarks>
            This method returns the cached highestSolidBlock value which tracks the topmost row containing
            solid terrain. This value is updated when blocks are placed or destroyed and is used for various
            gameplay systems including camera bounds, enemy spawning limits, and collapse mechanics. The value
            represents a row index in the map's grid system.
            </remarks>
        </member>

        <member name="M:Map.GetPosition(System.Int32,System.Int32)">
            <summary>
            Gets the world position of the bottom-left corner of a block at the specified grid
            coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector3 representing the bottom-left corner position of the block (z is
                always 0)</returns>
        </member>

        <member name="M:Map.HasSandStormTrigger">
            <summary>
            Checks whether the current map contains any sandstorm or sandworm trigger actions.
            This is used to determine if desert-specific environmental effects should be
            prepared.
            </summary>
            <returns>True if the map contains sandstorm or sandworm triggers, false otherwise</returns>
            <remarks>
            Iterates through all triggers in the MapData and checks their actions for Sandstorm or CallSandworm types. These triggers create environmental hazards specific to desert-themed levels.
            </remarks>
        </member>

        <member name="M:Map.HasSandStormTrigger">
            <summary>
            Checks if the current map contains any sandstorm or sandworm trigger actions.
            </summary>
            <returns>True if sandstorm or sandworm triggers exist; false otherwise.</returns>
            <remarks>
            Iterates through all trigger actions in the map data looking for Sandstorm
            or CallSandworm action types. Used to determine if desert-specific weather
            effects or enemies will appear in the level.
            </remarks>
        </member>

        <member name="M:Map.HasThisMapGotAliens">
            <summary>
            Checks whether the current map contains alien enemies. This is used to determine if
            alien-specific gameplay mechanics should be enabled.
            </summary>
            <returns>True if the map contains aliens, false otherwise</returns>
            <remarks>
            Returns the value of the hasAliens static field, which is set during map loading based on the presence of alien spawn points or alien-themed elements.
            </remarks>
        </member>

        <member name="M:Map.HasThisMapGotAliens">
            <summary>
            Checks if the current map contains alien enemies.
            </summary>
            <returns>True if aliens are present in the map; false otherwise.</returns>
            <remarks>
            Returns the value of the hasAliens flag, which is set during map loading
            based on the enemy types placed in the level. Used for gameplay logic
            that differs when aliens are present.
            </remarks>
        </member>

        <member name="M:Map.InitializeDeactivationOffscreen">
            <summary>
            Initializes the offscreen deactivation system to its default state covering the
            entire map.
            </summary>
            <remarks>
            This method sets up the offscreen culling system by initializing the active area to encompass
            the full map bounds (0 to width-1, 0 to height-1). It also resets the unit position tracking
            variables to zero and sets the runDeactivationOffscreenIsSetup flag. This system is used to
            optimize performance by deactivating blocks and objects that are far from the camera view.
            Must be called before RunDeactivationOffscreen() can function properly.
            </remarks>
        </member>

        <member name="M:Map.IsBlockInvulnerable(System.Int32,System.Int32)">
            <summary>
            Checks if a block at the specified grid coordinates is invulnerable (made of steel).
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block exists and has a ground type of Steel, false otherwise</returns>
        </member>

        <member name="M:Map.IsBlockSolid(System.Single,System.Single)">
            <summary>
            Checks if a block at the specified world coordinates is solid. This method converts
            world coordinates to grid coordinates and checks if a solid block exists at that
            location.
            </summary>
            <param name="x">The world x coordinate to check</param>
            <param name="y">The world y coordinate to check</param>
            <returns>True if a solid block exists at the specified coordinates, false otherwise</returns>
        </member>

        <member name="M:Map.IsInvulnerableAbove(System.Single,System.Single)">
            <summary>
            Checks if there are any invulnerable blocks in the column above the specified
            position.
            </summary>
            <param name="x">The x-coordinate to check</param>
            <param name="y">The y-coordinate to start checking from</param>
            <returns>True if any invulnerable block exists above this position; false otherwise</returns>
            <remarks>
            This method scans vertically upward from the given position to the top of the map, checking
            each block in the column for invulnerability. It's useful for determining if attacks or
            effects can reach the sky, or if there's protective terrain overhead. The check uses
            IsBlockInvulnerable() for each grid position.
            </remarks>
        </member>

        <member name="M:Map.IsWithinBounds(UnityEngine.Vector3)">
            <summary>
            Checks if the specified world position is within the map boundaries.
            </summary>
            <param name="pos">The world position to check</param>
            <returns>True if the position is within the map's width and height bounds, false
                otherwise</returns>
        </member>

        <member name="M:Map.IsWithinBounds(System.Int32,System.Int32)">
            <summary>
            Checks if the specified grid coordinates are within the map boundaries.
            </summary>
            <param name="c">The column index to check</param>
            <param name="r">The row index to check</param>
            <returns>True if the coordinates are within the map's width and height bounds, false
                otherwise</returns>
        </member>

        <member name="M:Map.MakeBlockPersist(Block)">
            <summary>
            Marks a specific block for persistence by transferring it to the persistent blocks
            container. This is a helper method used by PersistBlocks to process individual
            blocks.
            </summary>
            <param name="block">The block to make persistent</param>
            <remarks>
            Simply calls the Persist method to reparent the block's GameObject to the persistent container.
            </remarks>
        </member>

        <member name="M:Map.MakeBlockPersist(Block)">
            <summary>
            Marks a single block to persist across level transitions.
            </summary>
            <param name="block">The block to make persistent.</param>
            <remarks>
            Simple wrapper that calls the Persist method with the block's game object.
            Part of the internal persistence system workflow.
            </remarks>
        </member>

        <member name="M:Map.Persist(UnityEngine.GameObject)">
            <summary>
            Transfers a GameObject to the persistent blocks container by changing its parent.
            This ensures the object survives scene transitions when persistence is enabled.
            </summary>
            <param name="go">The GameObject to make persistent</param>
            <remarks>
            Reparents the GameObject to the PersistentBlocks.Instance transform, which is marked as DontDestroyOnLoad to survive scene changes.
            </remarks>
        </member>

        <member name="M:Map.Persist(UnityEngine.GameObject)">
            <summary>
            Moves a game object to the persistent blocks container to survive level transitions.
            </summary>
            <param name="go">The game object to make persistent.</param>
            <remarks>
            Reparents the object to the PersistentBlocks singleton instance, which is
            configured to not be destroyed on level load. This is the core mechanism
            for block persistence.
            </remarks>
        </member>

        <member name="M:Map.PersistBlocks">
            <summary>
            Enables block persistence and transfers all current foreground and background blocks
            to the persistent storage system. This allows blocks to survive level transitions
            when loading time optimizations are active.
            </summary>
            <remarks>
            Creates a persistent GameObject container if needed and iterates through all map blocks, marking matching persistent blocks for retention. Respects the dontPersistedPastLevelLoadThisLevel flag to handle special cases where persistence should be skipped.
            </remarks>
        </member>

        <member name="M:Map.PersistBlocks">
            <summary>
            Enables block persistence and prepares blocks to survive the next level transition.
            </summary>
            <remarks>
            Creates a persistent game object container if needed and marks matching blocks
            in both foreground and background layers for persistence. Blocks are only persisted
            if they exist in both the current map and the persistent block arrays. Respects
            the dontPersistedPastLevelLoadThisLevel flag to allow temporary overrides.
            </remarks>
        </member>

        <member name="M:Map.RotateBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
            Rotates the foreground block at the specified grid coordinates if it exists.
            </summary>
            <param name="c">The column index in the grid</param>
            <param name="r">The row index in the grid</param>
            <param name="direction">The rotation direction to apply to the block</param>
        </member>

        <member name="M:Map.RunDeactivationOffscreen">
            <summary>
            Updates the active area of the map based on camera position and unit locations,
            deactivating distant blocks.
            </summary>
            <remarks>
            This comprehensive optimization method manages which blocks are active based on proximity to the camera
            and important units. It calculates an active area using screen bounds plus a 256x160 unit buffer, then
            extends this area to include any tracked unit positions. The method efficiently updates block activation
            states only for blocks entering or leaving the active area, rather than processing all blocks every frame.
            The method tracks the previously active area and only processes blocks in the difference between old and
            new bounds, significantly reducing processing overhead. Both foreground and background blocks are managed.
            This system is crucial for maintaining performance in large maps by keeping only nearby blocks active.
            </remarks>
        </member>

        <member name="M:Map.SetBackgroundBlockEmpty(Block,System.Int32,System.Int32)">
            <summary>
            Removes a specific block from the background grid if it matches the provided block
            reference.
            </summary>
            <param name="block">The block instance to remove (must match the block at the position)</param>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block matched and was removed, false if a different block exists at
                that position</returns>
        </member>

        <member name="M:Map.SetBlockEmpty(Block,System.Int32,System.Int32)">
            <summary>
            Removes a specific block from the foreground grid if it matches the provided block
            reference or if the position is already empty.
            </summary>
            <param name="block">The block instance to remove (must match the block at the position)</param>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block was removed or position was already empty, false if a
                different block exists at that position</returns>
        </member>

        <member name="M:Map.SetStartFromHorizontalSuperCheckPoint(System.Int32)">
            <summary>
            Sets up a horizontal super checkpoint with a specific X-axis load offset. This is
            used for horizontal level transitions where the map needs to load at a specific
            horizontal position.
            </summary>
            <param name="xLoadOffset">The horizontal offset for loading the level, clamped to non-negative values</param>
            <remarks>
            If the offset differs from the last load offset, persistence is disabled for this level to ensure a clean transition. The offset determines where in the level the player spawns horizontally.
            </remarks>
        </member>

        <member name="M:Map.SetStartFromSuperCheckPoint">
            <summary>
            Marks that the next level load should start from a super checkpoint. This affects
            spawn positioning and level initialization.
            </summary>
            <remarks>
            Sets the startFromSuperCheckPoint flag to true. Super checkpoints are special checkpoint types that typically mark major progression points or area transitions.
            </remarks>
        </member>

        <member name="M:Map.SetStartFromVerticalSuperCheckPoint(System.Int32)">
            <summary>
            Sets up a vertical super checkpoint with a specific Y-axis load offset. This is used
            for vertical level transitions where the map needs to load at a specific vertical
            position.
            </summary>
            <param name="yLoadOffset">The vertical offset for loading the level, clamped to non-negative values</param>
            <remarks>
            If the offset differs from the last load offset, persistence is disabled for this level to ensure a clean transition. The offset determines where in the level the player spawns vertically.
            </remarks>
        </member>

        <member name="M:Map.SetTryReduceLoadingTimes(System.Boolean)">
            <summary>
            Enables or disables the loading time optimization system. When enabled, the map will
            attempt to persist certain blocks between level loads to reduce loading times.
            </summary>
            <param name="actuallyTry">True to enable loading time optimizations, false to disable them</param>
            <remarks>
            This optimization system works in conjunction with the block persistence methods (PersistBlocks, DontPersistBlocks) to maintain certain map elements across level transitions.
            </remarks>
        </member>

        <member name="M:Map.SetTryReduceLoadingTimes(System.Boolean)">
            <summary>
            Enables or disables the loading time reduction optimization system.
            </summary>
            <param name="actuallyTry">True to enable optimization; false to disable.</param>
            <remarks>
            This optimization system affects block persistence and asset pooling to reduce
            level loading times. The setting is checked in conjunction with level editor
            status and debug configuration.
            </remarks>
        </member>

        <member name="M:Map.TryingToReduceLoadingTimes">
            <summary>
            Checks whether the loading time optimization system is currently active. Returns
            true only if optimizations are enabled, the level editor is not active, and the
            asset pool is not disabled.
            </summary>
            <returns>True if loading time optimizations are active and available, false otherwise</returns>
            <remarks>
            This method verifies multiple conditions to ensure optimizations are appropriate for the current game state. It's used by various persistence-related methods to determine whether to maintain blocks between level loads.
            </remarks>
        </member>

        <member name="M:Map.TryingToReduceLoadingTimes">
            <summary>
            Checks if the loading time reduction optimization is currently active.
            </summary>
            <returns>True if optimization is enabled and conditions are met; false otherwise.</returns>
            <remarks>
            Returns true only if optimization is enabled, level editor is not active, and
            asset pooling is not disabled in debug config. This ensures optimizations don't
            interfere with editing or debugging workflows.
            </remarks>
        </member>

        <member name="P:Map.HasBeenSetup">
            <summary>
            Gets a value indicating whether the map has completed its initialization process.
            </summary>
        </member>

        <member name="P:Map.HasSpawnedFlexPower">
            <summary>
            Gets or sets a value indicating whether flex power items have been spawned on the
            map. Used to ensure flex power items are only spawned once per map.
            </summary>
        </member>

        <member name="P:Map.MapData">
            <summary>
            Gets or sets the current map's data structure. When setting, automatically updates
            the static Map.Width and Map.Height fields based on the MapData dimensions (or sets
            them to 0 if MapData is null).
            </summary>
        </member>

        <member name="F:Map.HalfTileSize">
            <summary>
            Defines half the size of a standard tile in pixels. Used for center-point
            calculations and sub-tile positioning operations. Equal to 8 pixels (half of
            TileSize).
            </summary>
        </member>

        <member name="F:Map.LevelFileName">
            <summary>
            The filename of the currently loaded level. Used by the level loading system and
            editor to track which level file is active. Referenced by various game systems
            including the level editor and selection controller.
            </summary>
        </member>

        <member name="F:Map._hasSpawnedFlexPower">
            <summary>
            Private backing field for the HasSpawnedFlexPower property. Tracks whether flex
            power items have been spawned on the current map to prevent duplicate spawning.
            </summary>
        </member>

        <member name="F:Map._mapData">
            <summary>
            Static backing field for the current map's data structure. Stores the MapData object
            that contains level layout, dimensions, and configuration. Used by the MapData
            property.
            </summary>
        </member>

        <member name="F:Map.americaThemeReference">
            <summary>
            Reference to the America/patriotic theme assets holder. Selected as activeTheme when
            MapData.theme is LevelTheme.America. Features American-themed decorations and
            environments.
            </summary>
        </member>

        <member name="F:Map.barrelBlockCount">
            <summary>
            A randomized counter used to determine barrel variant spawning. Initialized to a
            random value between 0 and 100 during map setup. Used in calculations to determine
            whether to spawn propane tanks, oil barrels, or acid barrels based on the map's
            configured spawn probabilities.
            </summary>
        </member>

        <member name="F:Map.burningJungleThemeReference">
            <summary>
            Reference to the burning jungle theme assets holder. Selected as activeTheme when
            MapData.theme is LevelTheme.BurningJungle. Features fire effects, burned vegetation,
            and destruction-themed assets.
            </summary>
        </member>

        <member name="F:Map.cagesSinceLastHardcoreCage">
            <summary>
            Counts the number of potential cage spawn locations passed since the last hardcore
            cage was placed. Defaults to 3. When this exceeds 5, forces a cage placement
            regardless of random chance.
            </summary>
        </member>

        <member name="F:Map.cityThemeReference">
            <summary>
            Reference to the city theme assets holder. Selected as activeTheme when
            MapData.theme is LevelTheme.City. Contains urban environment prefabs including
            buildings, streets, and city-specific enemies.
            </summary>
        </member>

        <member name="F:Map.currentBackgroundBlock">
            <summary>
            Temporary reference to the current background block being instantiated during map
            generation. Used for blocks that have both foreground and background components.
            </summary>
        </member>

        <member name="F:Map.currentBlock">
            <summary>
            Temporary reference to the current foreground block being instantiated during map
            generation. Used throughout the PlaceBlock method to hold the newly created block
            before placement.
            </summary>
        </member>

        <member name="F:Map.deathMatchHelicopterCount">
            <summary>
            Tracks the number of helicopters spawned in death match mode. Every even-numbered
            helicopter spawns at a different X position (minX + 48f).
            </summary>
        </member>

        <member name="F:Map.desertThemeReference">
            <summary>
            Reference to the desert theme assets holder. Selected as activeTheme when
            MapData.theme is LevelTheme.Desert. Contains sand terrain, desert structures, and
            arid environment assets.
            </summary>
        </member>

        <member name="F:Map.dontPersistedPastLevelLoadThisLevel">
            <summary>
            Prevents block persistence for the current level when set to true. Used to disable
            persistence for specific levels or game modes.
            </summary>
        </member>

        <member name="F:Map.finished">
            <summary>
            Indicates whether the current level has been completed. Set to false during map
            initialization and checked by IsFinished().
            </summary>
        </member>

        <member name="F:Map.followCameraTransform">
            <summary>
            Transform reference used by parallax background elements to follow camera movement.
            Passed to ParallaxFollow components via SetFollow() to create depth-based scrolling
            effects for clouds, fog, and background decorations.
            </summary>
        </member>

        <member name="F:Map.forceMode">
            <summary>
            Forces a specific game mode when running in the Unity editor. When set to a value
            other than GameMode.NotSet, overrides the normal game mode selection process.
            Supports modes like ExplosionRun, DeathMatch, Race, and SuicideHorde for testing.
            </summary>
        </member>

        <member name="F:Map.forceTestLevel">
            <summary>
            When true, forces the map to load the test level specified in testLevelFileName
            instead of the normal level. Instance field used for editor testing workflows.
            </summary>
        </member>

        <member name="F:Map.forceThisToBeTheDefaultCampaignScene">
            <summary>
            When true in the Unity editor, sets this scene as the default campaign scene in
            LevelSelectionController. Instance field used for development workflow to override
            the normal campaign scene selection.
            </summary>
        </member>

        <member name="F:Map.forceTryingToReduceLoadingTimes">
            <summary>
            Instance-specific override to enable loading time optimizations. When true, forces
            SetTryReduceLoadingTimes(true) during map initialization.
            </summary>
        </member>

        <member name="F:Map.forestThemeReference">
            <summary>
            Reference to the forest theme assets holder. Selected as activeTheme when
            MapData.theme is LevelTheme.Forest. Includes forest-specific terrain, vegetation,
            and wildlife assets.
            </summary>
        </member>

        <member name="F:Map.hasAliens">
            <summary>
            Indicates whether the current map contains alien enemies. Set to true during map
            loading when any DoodadInfo with DoodadType.Alien is found in MapData.DoodadList.
            Used by HasThisMapGotAliens() for gameplay logic.
            </summary>
        </member>

        <member name="F:Map.hasPersistedPastLevelLoad">
            <summary>
            Tracks whether blocks were actually persisted from the previous level. Used to
            determine if persistent blocks need to be handled during map generation.
            </summary>
        </member>

        <member name="F:Map.havePlacedCageForHardcore">
            <summary>
            Tracks whether a cage has been placed in the current hardcore game session. Used to
            control cage spawning frequency in hardcore mode.
            </summary>
        </member>

        <member name="F:Map.hellThemeReference">
            <summary>
            Reference to the hell theme assets holder. Selected as activeTheme when
            MapData.theme is LevelTheme.Hell. Contains demonic enemies, lava effects, and
            underworld environment assets.
            </summary>
        </member>

        <member name="F:Map.isEditing">
            <summary>
            Indicates whether the map is currently in editor mode. When true, enables special
            editor-only functionality and bypasses certain gameplay restrictions (such as hard
            mode requirements for specific doodads). Also affects terrain interaction behavior
            and visual feedback.
            </summary>
        </member>

        <member name="F:Map.jungleThemeReference">
            <summary>
            Reference to the jungle theme assets holder. Selected as activeTheme when
            MapData.theme is LevelTheme.Jungle. Contains prefabs for blocks, enemies, doodads,
            and environmental elements specific to jungle levels.
            </summary>
        </member>

        <member name="F:Map.lastXLoadOffset">
            <summary>
            The X coordinate offset of the currently loaded map section. Updated from
            nextXLoadOffset when loading new map sections. Used to translate between absolute
            map coordinates and local loaded section coordinates when spawning doodads and other
            map elements.
            </summary>
        </member>

        <member name="F:Map.lastYLoadOffset">
            <summary>
            The Y coordinate offset of the currently loaded map section. Updated from
            nextYLoadOffset when loading new map sections. Used to translate between absolute
            map coordinates and local loaded section coordinates when spawning doodads and other
            map elements.
            </summary>
        </member>

        <member name="F:Map.levelNum">
            <summary>
            The current level number in a sequence. Protected field used internally for level
            progression tracking, though its specific usage appears limited in the decompiled
            code.
            </summary>
        </member>

        <member name="F:Map.levelsCount">
            <summary>
            The total number of levels in the current sequence. Protected field used internally
            for level progression management, though its specific usage appears limited in the
            decompiled code.
            </summary>
        </member>

        <member name="F:Map.levelsLength">
            <summary>
            Stores the total number of levels available in the game. Currently unused in the
            decompiled code.
            </summary>
        </member>

        <member name="F:Map.maxRowActive">
            <summary>
            Maximum active row index for block visibility optimization. Used by the offscreen
            deactivation system to track the highest row that should remain active. Blocks
            beyond this row are deactivated to improve performance. Initialized to 256 and
            updated dynamically as the camera moves through the level.
            </summary>
        </member>

        <member name="F:Map.nextXLoadOffset">
            <summary>
            The X coordinate offset for the next map section to be loaded. Used in conjunction
            with streaming map loading to determine which horizontal section of the map should
            be loaded next. Reset to 0 during map initialization.
            </summary>
        </member>

        <member name="F:Map.nextYLoadOffset">
            <summary>
            The Y coordinate offset for the next map section to be loaded. Used in conjunction
            with streaming map loading to determine which vertical section of the map should be
            loaded next. Always initialized to 0.
            </summary>
        </member>

        <member name="F:Map.persistPastLevelLoad">
            <summary>
            Controls whether certain map elements should persist when loading the next level.
            Used by the block persistence system to maintain state between levels.
            </summary>
        </member>

        <member name="F:Map.persistentGameObject">
            <summary>
            The GameObject that holds persistent map elements between level loads. Created as
            "Persistent Map" when block persistence is first enabled.
            </summary>
        </member>

        <member name="F:Map.placeGroundType">
            <summary>
            Stores the ground type to be placed during map generation operations. Used as a
            temporary variable during block placement.
            </summary>
        </member>

        <member name="F:Map.randomLevel">
            <summary>
            Determines whether the map should add a random offset to the starting level number.
            When true, adds a random value between 0 and randomRange to startLevel during
            initialization.
            </summary>
        </member>

        <member name="F:Map.randomLevelSet">
            <summary>
            Tracks whether the random level offset has been applied during map initialization.
            Used to ensure the random level adjustment only happens once per session.
            </summary>
        </member>

        <member name="F:Map.randomOffset">
            <summary>
            Instance-specific random offset value used during map generation. Purpose unclear
            from available code.
            </summary>
        </member>

        <member name="F:Map.randomRange">
            <summary>
            The maximum random offset that can be added to the starting level when randomLevel
            is enabled. Defaults to 3, meaning the start level can be increased by 0-2.
            </summary>
        </member>

        <member name="F:Map.runDeactivationOffscreenIsSetup">
            <summary>
            Indicates whether the offscreen deactivation system has been initialized. Set to
            true after InitializeDeactivationOffscreen completes setup of active area
            boundaries. When false, RunDeactivationOffscreen will not execute its optimization
            logic.
            </summary>
        </member>

        <member name="F:Map.sharedObjectsReference">
            <summary>
            Reference to shared level objects that are used across multiple themes. Accessed via
            sharedObjectsReference.Asset to instantiate common objects like treasure mooks,
            special vehicles, alien bosses, and theme-agnostic gameplay elements.
            </summary>
        </member>

        <member name="F:Map.tempColor">
            <summary>
            Temporary color storage used during map texture processing. Currently unused in the
            decompiled code.
            </summary>
        </member>

        <member name="F:Map.tempEmptyColor">
            <summary>
            Temporary color value used by IsGroundEmpty to check pixel transparency. Cached to
            avoid repeated color allocations during texture parsing.
            </summary>
        </member>

        <member name="F:Map.tempGroundType">
            <summary>
            Temporary ground type storage used during map generation. Currently unused in the
            decompiled code.
            </summary>
        </member>

        <member name="F:Map.testLevelFileName">
            <summary>
            Filename for a test level that can be loaded in editor mode. Instance field used in
            conjunction with forceTestLevel to override normal level loading for testing
            purposes.
            </summary>
        </member>

        <member name="F:Map.tryingToReduceLoadingTimes">
            <summary>
            Global flag controlling whether the game should use optimizations to reduce loading
            times. Defaults to true, but disabled in level editor or when asset pooling is
            disabled.
            </summary>
        </member>

        <member name="F:Map.woodBlockCount">
            <summary>
            Counter used for procedural variation in crate spawning. Initialized to a random
            value (0-144) on map setup and incremented when placing wood blocks. Used with
            modulo operations to determine when to spawn special crates (ammo, time, airstrike)
            based on spawn chance calculations.
            </summary>
        </member>

        <member name="M:Player.AddPerksToHUD">
            <summary>
            Adds the player's current perks to their HUD display. Retrieves perks from
            PlayerInventory and displays them on the HUD interface for the player to see their
            active bonuses.
            </summary>
        </member>

        <member name="M:Player.Awake">
            <summary>
            Initializes the player instance with network instantiation data. Sets up player
            number, network PID, controller ID, and creates the HUD if needed. Also initializes
            lives to 0 if the player dropped out this round (except for solo host who gets 1
            life).
            </summary>
        </member>

        <member name="M:Player.DisableBotBrain">
            <summary>
            Disables AI control for this player by setting the UsingBotBrain flag to false. The
            player will return to normal input control after this is called. Note that this
            doesn't remove the BotBrain component, only disables its use.
            </summary>
        </member>

        <member name="M:Player.EnableBotBrain">
            <summary>
            Enables AI control for this player by adding and configuring a BotBrain component.
            Creates a new BotBrain component if one doesn't exist, assigns the current character
            to it, and sets the UsingBotBrain flag to true. This allows the player to be
            controlled by AI instead of player input.
            </summary>
        </member>

        <member name="M:Player.OnDestroy">
            <summary>
            Cleanup method called when the player object is destroyed. Properly disposes of the
            player's HUD by unparenting it and destroying the game object, then destroys any
            active character unit. This ensures proper cleanup of player-owned resources.
            </summary>
        </member>

        <member name="M:Player.ResetPerkValuesOnLevelStart">
            <summary>
            Resets per-level perk values at the start of each level. Calls into PlayerInventory
            to reset any perk effects that don't persist between levels.
            </summary>
        </member>

        <member name="M:Player.SetBotbrainLeader(System.Int32)">
            <summary>
            Sets which player the bot should follow when using AI control. The bot brain will
            attempt to follow and support the character of the specified player number. This is
            used to coordinate AI teammates with human players.
            </summary>
            <param name="playerNum">The player number that this bot should follow. Use -1 for no specific leader.</param>
        </member>

        <member name="M:Player.SetupHud">
            <summary>
            Creates and initializes the player's HUD interface. Instantiates the PlayerHUD
            prefab, sets it up with current lives and player number, then hides it initially
            until needed.
            </summary>
        </member>

        <member name="M:Player.Start">
            <summary>
            Performs initial player setup after instantiation. Verifies network connection, sets
            initial lives based on game mode, requests player data from server if not host, and
            sets up perks. Handles special cases for hardcore mode, deathmatch, and procedural
            generation modes.
            </summary>
        </member>

        <member name="P:Player.BotBrainLeader">
            <summary>
            Gets or sets the player number that this bot should follow when using AI control.
            The bot brain will attempt to follow the character of the specified player number.
            -1 indicates no specific leader.
            </summary>
        </member>

        <member name="P:Player.UsingBotBrain">
            <summary>
            Gets or sets whether this player is being controlled by AI. When true, the BotBrain
            component controls the player's character instead of player input. Used for
            AI-controlled teammates or testing.
            </summary>
        </member>

        <member name="P:Player.controllerNum">
            <summary>
            Gets the controller ID assigned to this player. Returns the controller ID from
            HeroController.playerControllerIDs based on this player's playerNum. Returns -1 if
            playerNum is invalid (less than 0).
            </summary>
        </member>

        <member name="F:Player.playerNum">
            <summary>
            The player's unique identifier number in the game session. Ranges from 0-3 for the
            four possible players. Used as an index into various player arrays like
            HeroController.players, PlayerInventory arrays, and for network identification.
            Initialized to -1 until properly set during Awake.
            </summary>
        </member>

        <member name="M:Player.AssignCharacter(TestVanDammeAnim)">
            <summary>
            Assigns a hero character to this player and clears pending state flags. Sets the
            character reference and resets awaitingHeroTypeFromServer and RescueInProgress flags
            to false.
            </summary>
            <param name="character">The hero character to assign to this player.</param>
        </member>

        <member name="M:Player.BoostHero(System.Single)">
            <summary>
            Applies a speed boost to the player's hero character for the specified duration. If
            the player has an active character, calls the character's Boost method which
            increases movement speed temporarily. This is typically used for power-ups or
            special abilities that enhance hero mobility.
            </summary>
            <param name="time">The duration in seconds for which the speed boost should last.</param>
        </member>

        <member name="M:Player.DeRegisterMinion(Unit)">
            <summary>
            Removes a unit from this player's minion list. If the unit is currently registered
            as a minion, removes it from the tracking list. This is typically called when a
            minion dies or is no longer under the player's control.
            </summary>
            <param name="minion">The unit to remove from this player's minion list.</param>
        </member>

        <member name="M:Player.InstantiateHero(HeroType,System.Int32,System.Int32)">
            <summary>
            Creates and initializes a new hero instance for the local player only. Instantiates
            the hero prefab via networking, sets up the hero with player data, calculates spawn
            position, configures death match HUD if needed, and applies any flex powers. Returns
            null for non-local players. Note: ProcGenGameMode references are for an unfinished
            feature.
            </summary>
            <param name="heroTypeEnum">The type of hero to instantiate.</param>
            <param name="PlayerNum">The player number who owns this hero.</param>
            <param name="ControllerNum">The controller number assigned to this player.</param>
            <returns>The instantiated hero character, or null if not the local player.</returns>
        </member>

        <member name="M:Player.ReRequestHeroTypeFromMasterOnServerMigration">
            <summary>
            Re-requests hero type information from the new master after server migration.
            Currently empty implementation - appears to be a stub for handling host migration
            scenarios.
            </summary>
        </member>

        <member name="M:Player.RegisterMinion(Unit)">
            <summary>
            Registers a unit as a minion controlled by this player. Adds the unit to the
            player's minions list if not already present. Minions are AI-controlled units that
            fight alongside the player, such as rescued animals or summoned allies.
            </summary>
            <param name="minion">The unit to register as a minion of this player.</param>
        </member>

        <member name="M:Player.RespawnBro(System.Boolean)">
            <summary>
            Initiates the respawn process for the player's hero. Sets awaitingHeroTypeFromServer
            flag and requests a hero type from the master/host. The swappingBro parameter
            indicates if this is a hero swap rather than a death respawn. This is an RPC method
            that only executes for the local player.
            </summary>
            <param name="swappingBro">If true, indicates this is a hero swap rather than a death respawn.</param>
        </member>

        <member name="M:Player.SetHeroType(HeroType)">
            <summary>
            Sets the current hero type and updates the HUD avatar display. Changes the HUD
            avatar and grenade material to match the specified hero type and sets the avatar to
            calm state.
            </summary>
            <param name="heroTypeEnum">The hero type to set as current.</param>
        </member>

        <member name="M:Player.SetInvulnerable(System.Single)">
            <summary>
            Sets the hero character to be invulnerable for the specified duration. Calls the
            character's SetInvulnerable method with the fadeIn parameter set to true and the
            showSmoke parameter set to false. This provides temporary protection from damage,
            typically used after spawning or during special events.
            </summary>
            <param name="time">The duration in seconds for which the character should be invulnerable.</param>
        </member>

        <member name="M:Player.SetSpawnPositon(TestVanDammeAnim,Player.SpawnType,System.Boolean,UnityEngine.Vector3)">
            <summary>
            RPC method that sets the spawn position and state for a hero character. Applies the
            calculated position, enables parachute if spawning via air drop, plays spawn sounds
            for non-first deployments, and grants temporary invulnerability. Updates rescue and
            hero request flags to false.
            </summary>
            <param name="bro">The hero character being spawned.</param>
            <param name="spawnType">The type of spawn scenario being used.</param>
            <param name="spawnViaAirDrop">Whether the hero should spawn with a parachute.</param>
            <param name="pos">The world position where the hero should spawn.</param>
        </member>

        <member name="M:Player.SpawnHero(HeroType)">
            <summary>
            Spawns a new hero of the specified type for this player. Recalls any existing living
            hero, handles cutscene loading for newly played heroes, unlocks heroes in campaign
            mode, and calls InstantiateHero to create the actual character. Updates player
            progress for unlocked heroes.
            </summary>
            <param name="nextHeroType">The type of hero to spawn.</param>
        </member>

        <member name="M:Player.TimeBroBoostHero(System.Single)">
            <summary>
            Applies a TimeBro-specific boost effect to the player's hero character. If the
            player has an active character, calls the character's TimeBroBoost method which
            provides special time-manipulation abilities. This boost is specific to TimeBro's
            unique gameplay mechanics.
            </summary>
            <param name="time">The duration in seconds for which the TimeBro boost should last.</param>
        </member>

        <member name="M:Player.WorkOutSpawnPosition(TestVanDammeAnim)">
            <summary>
            Calculates and sets the spawn position for a hero based on the determined spawn
            scenario. Evaluates the spawn type, retrieves the appropriate position (checkpoint,
            cage, transport, etc.), and calls SetSpawnPositon via RPC to synchronize the
            position across all clients. Handles special cases like air drops and level editor
            reloads.
            </summary>
            <param name="bro">The hero character to position for spawning.</param>
        </member>

        <member name="M:Player.WorkOutSpawnScenario">
            <summary>
            Determines the appropriate spawn scenario based on current game state and player
            conditions. Evaluates various factors including rescue status, game mode, checkpoint
            activation, and initial deployment to select the correct SpawnType. Returns Unknown
            type for explosion run mode without first deployment.
            </summary>
            <returns>The SpawnType enum value indicating how the player should spawn.</returns>
        </member>

        <member name="P:Player.character">
            <summary>
            Gets or sets the current hero character (TestVanDammeAnim) controlled by this
            player. This is the actual bro/character unit in the game world that the player
            controls. Setting this property also updates internal state tracking.
            </summary>
        </member>

        <member name="F:Player._character">
            <summary>
            The current hero character (TestVanDammeAnim) instance controlled by this player.
            This is the actual bro unit in the game world. Can be null when the player is dead
            or waiting to spawn. Accessed through the character property which provides
            additional logic when setting.
            </summary>
        </member>

        <member name="F:Player._forceFlexPowerupSpawn">
            <summary>
            Private field storing a flex power type to be automatically granted when the player
            spawns a new hero. Set by ForceRespawnWithFlexPower and checked during
            InstantiateHero to apply the power immediately after spawning. Reset to
            PickupType.None after use.
            </summary>
        </member>

        <member name="F:Player.heroType">
            <summary>
            The HeroType enum value of the player's current hero. Used for HUD avatar display
            and tracking which bro the player is currently playing as. Set to HeroType.None when
            no hero is active. Updated when spawning a new hero via SetHeroType method.
            </summary>
        </member>

        <member name="F:Player.minions">
            <summary>
            List of AI-controlled units that fight alongside this player. Includes rescued
            animals, summoned allies, or other units under the player's control. Units are added
            via RegisterMinion and removed via DeRegisterMinion. Used to track and manage AI
            companions.
            </summary>
        </member>

        <member name="F:Player.recentlyUnlockedHeros">
            <summary>
            List of hero types that were recently unlocked but not yet used by the player. This
            field appears to be defined but not actively used in the current implementation.
            Likely intended for tracking newly unlocked bros for UI notifications or
            achievements.
            </summary>
        </member>

        <member name="M:Player.AddFlexPower(PickupType,System.Boolean)">
            <summary>
            Adds a flex power pickup to the player's inventory. Flex powers are temporary
            power-ups that grant special abilities like invulnerability, air jump, teleport, or
            golden light. If forced is true, overwrites any existing flex power. If forced is
            false, only adds if the player has no current flex power. This is an RPC method for
            network synchronization.
            </summary>
            <param name="pickup">The type of flex power pickup to add (e.g., FlexInvulnerability, FlexAirJump, FlexTeleport, FlexGoldenLight).</param>
            <param name="forced">If true, replaces any existing flex power. If false, only adds if no flex power is currently active.</param>
        </member>

        <member name="M:Player.ClearFlexPower">
            <summary>
            Removes the player's current flex power. Calls PlayerInventory.HeroHasDied which
            clears the flex power from the global inventory. This is typically called when the
            player dies to ensure flex powers don't persist between lives in campaign mode.
            </summary>
        </member>

        <member name="M:Player.ForceRespawnWithFlexPower(PickupType,System.Boolean)">
            <summary>
            Sets a flex power to be automatically applied when the player respawns. Stores the
            specified pickup type in _forceFlexPowerupSpawn field, which is checked during hero
            instantiation to grant the power immediately upon spawning. The respawnWithFlexPower
            parameter is not used in the current implementation.
            </summary>
            <param name="pickup">The flex power pickup type to grant on respawn.</param>
            <param name="respawnWithFlexPower">Unused parameter in current implementation.</param>
        </member>

        <member name="M:Player.GetFlexPower">
            <summary>
            Gets the player's currently active flex power type. Retrieves the flex power from
            PlayerInventory for this player number.
            </summary>
            <returns>The PickupType of the current flex power, or PickupType.None if no power is
                active.</returns>
        </member>

        <member name="M:Player.HasFlexPower(PickupType)">
            <summary>
            Checks if the player currently has a specific type of flex power. Compares the
            player's current flex power in PlayerInventory against the specified type.
            </summary>
            <param name="flexType">The flex power type to check for.</param>
            <returns>True if the player has the specified flex power type, false otherwise.</returns>
        </member>

        <member name="M:Player.HasFlexPower">
            <summary>
            Checks if the player currently has any flex power active. Returns true if the
            player's flex power in PlayerInventory is not None.
            </summary>
            <returns>True if the player has any flex power, false otherwise.</returns>
        </member>

        <member name="M:Player.AddLife">
            <summary>
            Adds one life to the player's life count. Only executes for the local player,
            incrementing Lives and triggering a free life animation on the HUD.
            </summary>
        </member>

        <member name="M:Player.RemoveLife">
            <summary>
            Removes a life from the player based on the current game mode rules. In hardcore
            mode, moves the hero from available to dead list and may force level restart. In
            ProcGen mode, decrements global lives and may trigger level failure. In campaign
            mode, also clears any active flex powers. Updates lives differently for each game
            mode.
            </summary>
        </member>

        <member name="M:Player.SetLivesRPC(System.Int32)">
            <summary>
            RPC method that sets the player's lives count and updates the HUD. Called by the
            Lives property setter to synchronize life count across all clients in multiplayer.
            </summary>
            <param name="_lives">The new lives count to set.</param>
        </member>

        <member name="P:Player.Lives">
            <summary>
            Gets or sets the player's remaining lives count. Handles different game modes:
            returns/sets hardcore lives for hardcore mode, procedural generation lives for
            procgen mode, or standard lives otherwise. When setting as the local player, also
            syncs the value via RPC to other players.
            </summary>
        </member>

        <member name="F:Player.lives">
            <summary>
            Private backing field for the Lives property storing the player's current life
            count. Initialized to 1 and modified through the Lives property setter which handles
            RPC synchronization. In standard gameplay this tracks the player's remaining lives,
            but the Lives property getter may return different values based on game mode
            (hardcore or procedural generation).
            </summary>
        </member>

        <member name="M:Player.AddPlayerTarget(UnityEngine.Transform)">
            <summary>
            Sets a temporary target transform for this player to focus on. This target overrides
            normal camera behavior and can be used to direct player attention to specific
            objects or locations in the game world, such as during scripted sequences or
            tutorials.
            </summary>
            <param name="target">The transform to set as the temporary target.</param>
        </member>

        <member name="M:Player.GetInput(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Retrieves input state for all control actions from the appropriate source. If using
            bot brain, gets AI-generated input. If chat or pause menu is active (based on
            controller number), returns all false inputs. Otherwise reads input from the
            physical controller via InputReader. This centralizes all input handling for the
            player.
            </summary>
            <param name="up">Output parameter set to true if up direction is pressed.</param>
            <param name="down">Output parameter set to true if down direction is pressed.</param>
            <param name="left">Output parameter set to true if left direction is pressed.</param>
            <param name="right">Output parameter set to true if right direction is pressed.</param>
            <param name="fire">Output parameter set to true if fire button is pressed.</param>
            <param name="buttonJump">Output parameter set to true if jump button is pressed.</param>
            <param name="special">Output parameter set to true if special/grenade button is pressed.</param>
            <param name="highFive">Output parameter set to true if high five button is pressed.</param>
            <param name="buttonGesture">Output parameter set to true if gesture button is pressed.</param>
            <param name="sprint">Output parameter set to true if sprint button is pressed.</param>
        </member>

        <member name="M:Player.HasTemporaryTarget">
            <summary>
            Checks whether this player currently has a temporary target set. Returns true if a
            temporary target transform is assigned, false otherwise. Used to determine if the
            camera should follow a special target instead of the player character.
            </summary>
            <returns>True if the player has a temporary target set, false otherwise.</returns>
        </member>

        <member name="M:Player.IsRescuingBro">
            <summary>
            Checks if the player is currently rescuing a specific bro. Returns true if
            rescuingThisBro field is not null, indicating an active rescue operation in
            progress.
            </summary>
            <returns>True if actively rescuing a bro, false otherwise.</returns>
        </member>

        <member name="M:Player.RemovePlayerTarget">
            <summary>
            Clears the temporary target transform for this player. Returns camera focus to
            normal behavior, typically following the player's character. This is called when a
            scripted sequence ends or the target object is no longer relevant.
            </summary>
        </member>

        <member name="M:Player.SetRumble(System.Single)">
            <summary>
            Sets the controller rumble intensity for force feedback. Updates the rumbleIntensity
            to the maximum of the current value and the provided amount, ensuring the strongest
            rumble effect is preserved. The rumble will fade out over time based on the update
            loop logic.
            </summary>
            <param name="amount">The rumble intensity to apply (0 to 1 range).</param>
        </member>

        <member name="P:Player.RescueInProgress">
            <summary>
            Gets or sets whether this player is currently in the process of rescuing a bro. When
            set to true, starts a 15-second timeout. Used to track rescue operation state and
            prevent multiple simultaneous rescues.
            </summary>
        </member>

        <member name="P:Player.awaitingHeroTypeFromServer">
            <summary>
            Gets or sets whether the player is waiting for the server to assign a hero type.
            When set to true, starts a 15-second timeout. Used during respawn/rescue operations
            to track server response state.
            </summary>
        </member>

        <member name="F:Player._awaitingHeroTypeFromServer">
            <summary>
            Private flag indicating the player is waiting for the server to assign a hero type
            during respawn. Set via the awaitingHeroTypeFromServer property which also manages
            the server timeout. Prevents multiple hero requests and tracks respawn state.
            </summary>
        </member>

        <member name="F:Player.changingBroFromTrigger">
            <summary>
            Flag indicating the player is swapping bros via a trigger (like swap bro crates).
            Checked in WorkOutSpawnScenario to return TriggerSwapBro spawn type, then
            immediately cleared. Used to maintain position when swapping heroes through game
            triggers rather than death.
            </summary>
        </member>

        <member name="F:Player.rescueInProgress">
            <summary>
            Private flag indicating whether this player is currently rescuing a bro. Set via the
            RescueInProgress property which also manages the server timeout. Prevents multiple
            simultaneous rescue attempts and tracks rescue state for spawn positioning.
            </summary>
        </member>

        <member name="F:Player.rescuingThisBro">
            <summary>
            Reference to the RescueBro object currently being rescued by this player. Set when
            the player initiates a rescue operation via HeroController.RescueBro or
            HeroController.SpawnOnPlayer. Used to determine spawn position (RespawnAtRescueBro)
            and properly destroy the rescue cage when the hero spawns. Null when no rescue is in
            progress.
            </summary>
        </member>

        <member name="F:Player.rumbleIntensity">
            <summary>
            Current controller vibration intensity (0 to 1 range) for force feedback effects.
            Set via SetRumble which takes the maximum of current and new values. Automatically
            decreases by 2 per second in Update loop until reaching 0. Passed to
            InputReader.SetRumble each frame to apply controller vibration if the player has
            rumble enabled in options.
            </summary>
        </member>

        <member name="F:Player.serverResponseTimeout">
            <summary>
            Timeout counter for server operations in seconds. Set to 15 seconds when starting a
            rescue operation or requesting hero type from server. Counts down each frame and
            clears rescue/hero request flags if it reaches 0, preventing indefinite waiting for
            server responses.
            </summary>
        </member>

        <member name="M:Player.ActivateHUD">
            <summary>
            Activates and shows the player's HUD if standard HUDs are enabled in the current
            game mode. Creates the HUD if needed and makes it visible on screen.
            </summary>
        </member>

        <member name="M:Player.DisableHud">
            <summary>
            Hides and deactivates the player's HUD elements. Calls Hide on the HUD, deactivates
            the HUD game object, and also deactivates the lives text display if it exists.
            </summary>
        </member>

        <member name="M:Player.EnableHud">
            <summary>
            Shows and activates the player's HUD elements if standard HUDs are enabled. Checks
            GameModeController.ShowStandardHUDS before making the HUD visible, activating the
            game object and lives text display.
            </summary>
        </member>

        <member name="M:Player.FlashSpecialAmmo">
            <summary>
            Triggers a flash effect on the special ammo/grenade icons in the HUD. Creates the
            HUD if it doesn't exist, then calls FlashSpecialIcons to provide visual feedback for
            special ammo changes.
            </summary>
        </member>

        <member name="M:Player.SetAvatarDead(System.Boolean)">
            <summary>
            Updates the HUD to show the player's avatar as dead. Calls the HUD's SetAvatarDead
            method to update the visual representation of the player's death state.
            </summary>
            <param name="primaryAvatar">Whether this is the primary avatar that died.</param>
        </member>

        <member name="M:Player.SetAvatarSpecialFrame(System.Single)">
            <summary>
            Sets a special animation frame on the player's HUD avatar for a specified duration.
            Used for special visual effects or states on the HUD avatar display.
            </summary>
            <param name="time">The duration to display the special frame.</param>
        </member>

        <member name="M:Player.SetUpDeathMatchHUD(TestVanDammeAnim)">
            <summary>
            Creates and configures a death match HUD that follows the hero character. Hides the
            standard HUD, instantiates the death match HUD prefab, sets it up with player lives
            and number, and parents it to the hero transform at zero offset.
            </summary>
            <param name="newUnit">The hero unit to attach the death match HUD to.</param>
        </member>

        <member name="M:Player.ShowMinusPlum">
            <summary>
            Displays a negative score indicator (plum) on the player's deathmatch HUD. Shows a
            visual feedback element indicating point loss, typically when the player dies or
            loses points in deathmatch game modes.
            </summary>
        </member>

        <member name="M:Player.ShowPlusPlum">
            <summary>
            Displays a positive score indicator (plum) on the player's deathmatch HUD. Shows a
            visual feedback element indicating point gain, typically when the player scores a
            kill or earns points in deathmatch game modes.
            </summary>
        </member>

        <member name="M:Player.StopAvatarSpecialFrame">
            <summary>
            Stops any active special animation frame on the player's HUD avatar. Returns the
            avatar display to its normal state by calling StopUsingSpecialFrame on the HUD.
            </summary>
        </member>

        <member name="M:Player.UnlockProcGenCamera">
            <summary>
            Unlocks the procedural generation camera after a delay. Called via Invoke after
            spawning a hero in ProcGen mode when the player died inside a room. Note:
            ProcGenGameMode is an unfinished feature.
            </summary>
        </member>

        <member name="F:Player.characterUI">
            <summary>
            Reference to the CharacterUI component on this player game object. Retrieved during
            Awake and used for character-specific UI functionality. The specific usage of this
            component is not shown in the available code.
            </summary>
        </member>

        <member name="F:Player.deathMatchHUD">
            <summary>
            The instantiated HUDHeadGear instance for deathmatch modes. Follows the player's
            character transform and displays game mode specific information. Created from
            deathMatchHUDPrefab when playing deathmatch and parented to the hero transform.
            </summary>
        </member>

        <member name="F:Player.deathMatchHUDPrefab">
            <summary>
            Prefab reference for the deathmatch-specific HUD that appears above the player's
            character. Used in deathmatch game modes to show player-specific information like
            lives and grenades directly on the character rather than in screen corners.
            </summary>
        </member>

        <member name="F:Player.hud">
            <summary>
            The instantiated PlayerHUD instance for this player. Displays lives count,
            grenade/special ammo count, avatar icon, and perk information. Created from
            playerHUDPrefab and managed throughout the player's lifetime. Can be null before
            setup or in certain game modes.
            </summary>
        </member>

        <member name="F:Player.playerHUDPrefab">
            <summary>
            Prefab reference for the standard player HUD interface. Used as a template to
            instantiate the player's HUD display showing lives, grenades, and other UI elements.
            Instantiated in SetupHud method when needed.
            </summary>
        </member>

        <member name="M:Player.ReportGib(KillData,DamageObject)">
            <summary>
            Reports when this player gibs (completely destroys) an enemy for perk triggering. If
            the character is alive, triggers the OnEnemyGibbed perk event with player inventory
            items and gib data. Gibbing enemies often provides bonus effects or satisfies
            specific perk conditions.
            </summary>
            <param name="killData">Struct containing information about the gibbed unit including damage type.</param>
            <param name="damageObject">The damage source object that caused the gib.</param>
        </member>

        <member name="M:Player.ReportGib(Unit)">
            <summary>
            Simplified gib reporting method that takes only the gibbed unit. Currently has an
            empty implementation after checking if the character exists and is alive. This
            appears to be an incomplete overload for simpler gib tracking scenarios.
            </summary>
            <param name="gibbedUnit">The unit that was gibbed.</param>
        </member>

        <member name="M:Player.ReportKill(KillData,DamageObject)">
            <summary>
            Reports a kill made by this player's character for statistics and perk triggering.
            If the character is alive, triggers the OnMookKilled perk event with player
            inventory items and kill data, then notifies the character of the kill. This tracks
            combat performance and activates kill-based perks.
            </summary>
            <param name="killData">Struct containing information about the killed unit including damage type and whether it was gibbed.</param>
            <param name="damageObject">The damage source object that caused the kill.</param>
        </member>

        <member name="M:Player.TriggerPerkEvent(PerkTriggerController.PerkEvent,TestVanDammeAnim)">
            <summary>
            Triggers a perk event for this player with just the hero as context. Passes the
            event type, player's inventory items, and hero reference to the perk trigger
            controller. Used for hero-specific events like spawning, death, or ability usage.
            </summary>
            <param name="eventType">The type of perk event to trigger.</param>
            <param name="bro">The hero character associated with this event.</param>
        </member>

        <member name="M:Player.TriggerPerkEvent(PerkTriggerController.PerkEvent,TestVanDammeAnim,Mook)">
            <summary>
            Triggers a perk event for this player with hero and mook context. Passes the event
            type, player's inventory items, hero, and mook references to the perk trigger
            controller. Used for combat events involving specific enemy interactions.
            </summary>
            <param name="eventType">The type of perk event to trigger.</param>
            <param name="bro">The hero character associated with this event.</param>
            <param name="mook">The mook (enemy) involved in this event.</param>
        </member>

        <member name="M:Player.TriggerPerkEvent(PerkTriggerController.PerkEvent,TestVanDammeAnim,CheckPoint)">
            <summary>
            Triggers a perk event for this player with hero and checkpoint context. Passes the
            event type, player's inventory items, hero, and checkpoint references to the perk
            trigger controller. Used for checkpoint-related events like reaching or activating
            checkpoints.
            </summary>
            <param name="eventType">The type of perk event to trigger.</param>
            <param name="bro">The hero character associated with this event.</param>
            <param name="checkPoint">The checkpoint involved in this event.</param>
        </member>

        <member name="P:Player.PlayerColor">
            <summary>
            Gets the color assigned to this player based on their player number. Retrieves the
            color from HeroController.GetHeroColor for consistent player identification across
            UI elements.
            </summary>
        </member>

        <member name="P:Player.ValueOrchestrator">
            <summary>
            Gets the ValueOrchestrator instance for this player from the global PlayerInventory.
            The ValueOrchestrator manages dynamic value modifications from perks, power-ups, and
            other sources, calculating final multipliers for various gameplay values like
            damage, speed, or health.
            </summary>
        </member>

        <member name="M:Player.ClearTimeSinceDeath">
            <summary>
            Resets the death timer to allow continued camera following. Sets timeSinceDeath to
            timeSinceDeathToFollow value, effectively extending the camera follow duration after
            death.
            </summary>
        </member>

        <member name="M:Player.Exists">
            <summary>
            Checks if the player has an active character in the game world. Returns true only if
            the character reference is not null and the character's game object is active in the
            hierarchy.
            </summary>
            <returns>True if the player has an active character, false otherwise.</returns>
        </member>

        <member name="M:Player.GetCharacterPosition">
            <summary>
            Gets the current position of the player's character. Returns the character's
            transform position if alive, otherwise returns the last known player follow
            position.
            </summary>
            <returns>The character's current position or last known position if dead.</returns>
        </member>

        <member name="M:Player.GetFollowPosition">
            <summary>
            Gets the position the camera should follow for this player. Returns temporary target
            position if set, otherwise returns the smoothed character position. Updates death
            timer and follow position for living characters. Falls back to last known position
            after death.
            </summary>
            <returns>The world position the camera should follow.</returns>
        </member>

        <member name="M:Player.HasFollowPosition">
            <summary>
            Determines if this player should be followed by the camera. For local players,
            returns true if alive or within the death follow time window. For remote players,
            returns true if alive and instantiated. Tracks time since death to allow brief
            following after death.
            </summary>
            <returns>True if the camera should follow this player, false otherwise.</returns>
        </member>

        <member name="M:Player.IsAlive">
            <summary>
            Determines if the player is considered alive in the game. Returns true if the
            character exists and is alive, OR if the player is pending respawn/rescue (waiting
            states count as alive for game logic).
            </summary>
            <returns>True if the player is alive or pending respawn, false otherwise.</returns>
        </member>

        <member name="M:Player.IsAliveAndSpawnedHero">
            <summary>
            Checks if the player has a fully spawned and alive hero. More strict than IsAlive -
            requires the character to exist, be alive, AND have completed spawn position setup.
            </summary>
            <returns>True if the hero is alive and fully spawned, false otherwise.</returns>
        </member>

        <member name="M:Player.IsInvulnerable">
            <summary>
            Checks if the player's character is currently invulnerable. Returns the invulnerable
            state of the character if it exists, false otherwise.
            </summary>
            <returns>True if the character is invulnerable, false otherwise.</returns>
        </member>

        <member name="M:Player.IsNearbyActivatedCheckPoint(UnityEngine.Vector2@,System.Boolean@)">
            <summary>
            Checks if the player's character is near an activated checkpoint and gets the
            checkpoint position. Delegates to Map.IsNearActivatedCheckPoint using the
            character's current position. Modifies the ref parameters with checkpoint data if
            found.
            </summary>
            <param name="pos">Output parameter that receives the checkpoint position if one is found nearby.</param>
            <param name="spawnViaAirdrop">Output parameter that indicates if the checkpoint requires air drop spawning.</param>
            <returns>True if near an activated checkpoint, false otherwise.</returns>
        </member>

        <member name="M:Player.IsNearbyActivatedCheckPoint(System.Boolean@)">
            <summary>
            Checks if the player's character is near an activated checkpoint without retrieving
            position. Overload that only returns whether an air drop spawn is required, without
            the checkpoint position.
            </summary>
            <param name="spawnViaAirdrop">Output parameter that indicates if the checkpoint requires air drop spawning.</param>
            <returns>True if near an activated checkpoint, false otherwise.</returns>
        </member>

        <member name="M:Player.IsPendingRespawnOrResuingInProgress">
            <summary>
            Checks if the player is in a pending state waiting for respawn or rescue. Returns
            true if either RescueInProgress or awaitingHeroTypeFromServer flags are set.
            </summary>
            <returns>True if waiting for respawn or in rescue process, false otherwise.</returns>
        </member>

        <member name="M:Player.IsThisWay(System.Single,System.Single,System.Int32)">
            <summary>
            Checks if the player's character is in the specified direction from a given
            position. Special handling for Snake Broskin's grenade hologram position. Returns
            true if the character (or hologram) is in the direction indicated by xDirection from
            the given coordinates.
            </summary>
            <param name="x">The X coordinate to check from.</param>
            <param name="y">The Y coordinate to check from.</param>
            <param name="xDirection">The direction to check (-1 for left, 1 for right).</param>
            <returns>True if the character is in the specified direction, false otherwise.</returns>
        </member>

        <member name="M:Player.LateUpdate">
            <summary>
            Late update processing that occurs after all Update calls. Calls base class
            LateUpdate and then updates the smoothed follow position for camera tracking.
            </summary>
        </member>

        <member name="M:Player.PackState(UnityStream)">
            <summary>
            Serializes the player's state for network synchronization. Packs the current lives
            count, character reference, and firstDeployment flag into the stream, then calls the
            base class PackState. This method is used to sync player state across the network in
            multiplayer games. Note: Network functionality may not work reliably in mods.
            </summary>
            <param name="stream">The Unity network stream to write the state data to.</param>
            <returns>The stream with the serialized player state.</returns>
        </member>

        <member name="M:Player.UnpackState(UnityStream)">
            <summary>
            Deserializes the player's state from network data. Reads lives count, character
            reference, and firstDeployment flag from the stream, enables the HUD with updated
            data, then calls the base class UnpackState. This method receives player state
            updates in multiplayer games. Note: Network functionality may not work reliably in
            mods.
            </summary>
            <param name="stream">The Unity network stream to read the state data from.</param>
            <returns>The stream after reading the player state.</returns>
        </member>

        <member name="M:Player.Update">
            <summary>
            Main update loop for the player. Handles idle timeout detection (35 seconds),
            controller rumble, server response timeouts, fuel/grenade HUD updates, and bot brain
            management. Monitors player input to detect AFK players in multiplayer and manages
            various time-based states.
            </summary>
        </member>

        <member name="M:Player.UpdateSmoothFollowPos">
            <summary>
            Updates the smoothed follow position used for camera tracking. For local players,
            directly uses character position. For remote players, smoothly interpolates position
            unless the character has moved too far (200 units squared), in which case it snaps
            to the new position.
            </summary>
        </member>

        <member name="F:Player.AFKTimeLimit">
            <summary>
            Constant defining the idle time limit before a player is considered AFK (Away From
            Keyboard). Set to 35 seconds. When idleTimer reaches this value in multiplayer
            games, the player is automatically dropped out and an AFK message is displayed. This
            prevents inactive players from blocking game progress.
            </summary>
        </member>

        <member name="F:Player.SmoothedFollowPosition">
            <summary>
            The interpolated position used for smooth camera following. For local players,
            directly matches character position. For remote players, smoothly interpolates
            toward the character position unless they teleport (move more than 200 units).
            Initialized to -Vector3.one and updated in UpdateSmoothFollowPos.
            </summary>
        </member>

        <member name="F:Player.charHasBeenInstantiated">
            <summary>
            Flag indicating whether the player's character has completed at least one update
            cycle. Set to true in Update when character exists and UpdateHasRunAtleastOnce is
            true. Used by remote players in HasFollowPosition to determine if the character is
            ready for camera following. Ensures character is fully initialized before certain
            operations.
            </summary>
        </member>

        <member name="F:Player.firstDeployment">
            <summary>
            Tracks whether this is the player's first spawn in the current level. Initialized to
            true and set to false after first spawn. Used to determine spawn behavior (transport
            vs checkpoint), suppress spawn sounds, and handle special first-spawn logic. Reset
            between levels.
            </summary>
        </member>

        <member name="F:Player.idleTimer">
            <summary>
            Tracks how long the player has been idle (no input) in seconds. Incremented by
            unscaled delta time when the player has no input in multiplayer games with other
            alive players. Reset to 0 when any input is detected. When this reaches AFKTimeLimit
            (35 seconds), triggers automatic dropout and shows AFK message.
            </summary>
        </member>

        <member name="F:Player.playerDelay">
            <summary>
            Timer field that counts down in the Update loop. Decremented by deltaTime each frame
            when greater than 0. The specific purpose is not clear from the available code, but
            appears to be a general-purpose delay timer for player actions.
            </summary>
        </member>

        <member name="F:Player.playerTemporaryTarget">
            <summary>
            Optional transform that overrides normal camera following behavior. When set, the
            camera will follow this target instead of the player's character. Used for scripted
            sequences, cutscenes, or directing player attention to specific objects. Cleared
            with RemovePlayerTarget.
            </summary>
        </member>

        <member name="F:Player.timeSinceDeath">
            <summary>
            Tracks elapsed time in seconds since the player's character died. Incremented in
            HasFollowPosition for local players after death. Reset to 0 when character is alive
            and updating. Used with timeSinceDeathToFollow to allow brief camera following after
            death before switching to other players. Can be reset via ClearTimeSinceDeath.
            </summary>
        </member>

        <member name="F:Player.timeSinceDeathToFollow">
            <summary>
            The duration in seconds to continue following a dead player's last position. Set to
            1.5 seconds by default. After a player dies, the camera continues following their
            position for this duration before switching to other players. This provides visual
            continuity and lets players see the immediate aftermath of their death.
            </summary>
        </member>

        <member name="M:Projectile.Awake">
            <summary>
            Initializes layer masks, barrier layers, and projectile configuration during Unity's
            Awake phase. Sets up collision layers for ground, fragile objects, and team-specific
            barriers, initializes z-offset from transform position, and establishes random seed
            for deterministic effects.
            </summary>
        </member>

        <member name="M:Projectile.Start">
            <summary>
            Initializes damage background counter with a random offset between 0 and 0.2
            seconds. This creates variation in when projectiles start damaging background
            elements.
            </summary>
        </member>

        <member name="M:Projectile.Update">
            <summary>
            Main update loop that drives projectile behavior. Calls RunProjectile and RunLife
            methods each frame with the current delta time to process movement, collision, and
            lifetime.
            </summary>
        </member>

        <member name="F:Projectile.barrierLayer">
            <summary>
            Layer mask for enemy barrier detection. Set during Awake to include "MobileBarriers"
            and "IndestructibleGround" layers. Used to detect barriers that can reflect player
            projectiles, changing their ownership and increasing damage.
            </summary>
        </member>

        <member name="F:Projectile.fragileLayer">
            <summary>
            Layer mask for fragile/destructible object detection. Set to "DirtyHippie" layer
            during Awake. Used to detect breakable objects like doors and crates that
            projectiles can damage or destroy on contact.
            </summary>
        </member>

        <member name="F:Projectile.friendlyBarrierLayer">
            <summary>
            Layer mask for player-created barrier detection. Set to "FriendlyBarriers" layer
            during Awake. Used to detect barriers that can reflect enemy projectiles, converting
            them to player-owned projectiles with increased damage.
            </summary>
        </member>

        <member name="F:Projectile.groundLayer">
            <summary>
            Layer mask for ground and solid object collision detection. Set during Awake to
            include "Ground", "LargeObjects", and "FLUI" layers. Used in raycast operations to
            detect walls and terrain that should stop or reflect projectiles.
            </summary>
        </member>

        <member name="F:Projectile.random">
            <summary>
            Random number generator instance for deterministic projectile variations.
            Initialized in Awake with either a random seed (0-10000) or the specified seed
            value. Used to create small random offsets for damage timing and other projectile
            behaviors that need to be consistent across clients.
            </summary>
        </member>

        <member name="F:Projectile.seed">
            <summary>
            Seed value for deterministic random number generation. Set via the SetSeed method to
            ensure synchronized projectile behavior across networked games. Used to initialize
            the random field for consistent randomization of effects and variations.
            </summary>
        </member>

        <member name="F:Projectile.t">
            <summary>
            Delta time value for frame-independent movement calculations. Initialized to 0.011f
            and updated each frame with clamped Time.deltaTime (maximum 0.0334f). Used
            throughout the projectile system for consistent movement and timing regardless of
            framerate.
            </summary>
        </member>

        <member name="F:Projectile.zOffset">
            <summary>
            Z-axis rendering offset for visual depth variation. Randomly set between -0.04 and
            0.04 in Awake, or can be overridden during Fire method. Applied to transform
            position to create slight 3D depth effect and prevent z-fighting when multiple
            projectiles overlap.
            </summary>
        </member>

        <member name="M:Projectile.Bounce(UnityEngine.RaycastHit)">
            <summary>
            Reverses the projectile's Y velocity to create a bounce effect off surfaces. Sets
            the Y velocity to its absolute value, ensuring upward movement after bounce. Updates
            projectile rotation to match new trajectory.
            </summary>
            <param name="raycastHit">Information about the surface that was hit</param>
        </member>

        <member name="M:Projectile.Damage(System.Int32,DamageType,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Applies damage to this projectile if it's damageable. Reduces projectile damage by
            the incoming damage amount and destroys the projectile if damage reaches zero. Only
            processes damage for projectiles marked with isDamageable flag.
            </summary>
            <param name="damage">Amount of damage to apply to the projectile</param>
            <param name="damageType">Type of damage being applied</param>
            <param name="xI">X force component (unused)</param>
            <param name="yI">Y force component (unused)</param>
            <param name="damageDelay">Delay before damage is applied (unused)</param>
            <param name="newPlayerNum">Player number applying the damage (unused)</param>
        </member>

        <member name="M:Projectile.HitFragile">
            <summary>
            Processes collision with fragile/destructible objects. Uses sphere overlap to detect
            fragile objects within projectile radius and applies damage to each one found.
            Called during projectile movement to handle destruction of breakable terrain.
            </summary>
        </member>

        <member name="M:Projectile.HitGrenades">
            <summary>
            Detects and interacts with grenades within projectile radius if canHitGrenades is
            enabled. Uses Map.KnockAndDamageGrenades to apply knockback force based on
            projectile velocity. Only processes for projectiles with projectileSize greater than
            3.
            </summary>
        </member>

        <member name="M:Projectile.HitHorizontalWalls">
            <summary>
            Specialized collision detection for wide projectiles against horizontal walls. Uses
            three parallel raycasts (center, up, down) spaced by projectileSize. Only active
            when horizontalProjectile is set to true.
            </summary>
        </member>

        <member name="M:Projectile.HitOil">
            <summary>
            Checks for oil particles and oily terrain at the projectile's position. Ignites any
            oil found using EffectsController.IgniteOilParticles within a 24-unit radius. Also
            ignites oily blocks detected via raycast collision.
            </summary>
        </member>

        <member name="M:Projectile.HitProjectiles">
            <summary>
            Checks for collisions with other projectiles in the vicinity. Uses
            Map.HitProjectiles to detect and handle projectile-on-projectile interactions within
            the projectile's radius.
            </summary>
        </member>

        <member name="M:Projectile.HitUnits">
            <summary>
            Detects and damages enemy units within the projectile's area. Uses Map.HitUnits with
            projectile ownership to find valid targets. Awards deflection achievement if
            projectile was reflected and kills an enemy. Destroys projectile on successful hit.
            </summary>
        </member>

        <member name="M:Projectile.HitWalls">
            <summary>
            Performs raycast collision detection against walls in the projectile's path. Handles
            standard wall impacts by applying damage, creating effects, and destroying the
            projectile. Special handling for depleted uranium perk creates 24-radius explosions
            on impact. Returns true if wall was hit.
            </summary>
            <returns>True if the projectile hit a wall and was destroyed, false otherwise</returns>
        </member>

        <member name="M:Projectile.HitWildLife">
            <summary>
            Checks for and damages wildlife units within the projectile's radius. Destroys the
            projectile with effects if any wildlife is hit. Uses Map.DamageWildLife to apply
            damage to animals.
            </summary>
        </member>

        <member name="M:Projectile.MakeSparkShower(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an intense shower of spark particles at the specified position. Generates 12
            sparks with randomized velocities based on the provided shower direction. Each spark
            has high initial velocity (250+ units) for dramatic visual effect.
            </summary>
            <param name="xPos">X position to create sparks</param>
            <param name="yPos">Y position to create sparks</param>
            <param name="showerXI">Base X velocity for spark shower direction</param>
            <param name="showerYI">Base Y velocity for spark shower direction</param>
        </member>

        <member name="M:Projectile.ProjectileApplyDamageToBlock(UnityEngine.GameObject,System.Int32,DamageType,System.Single,System.Single)">
            <summary>
            Applies damage to terrain blocks with special handling for depleted uranium perks.
            Creates a 24-radius explosion for player projectiles with depleted uranium,
            otherwise applies standard block damage. Handles oil ignition for fire damage types.
            </summary>
            <param name="blockObject">The block GameObject to damage</param>
            <param name="damage">Amount of damage to apply</param>
            <param name="type">Type of damage being applied</param>
            <param name="forceX">X component of impact force</param>
            <param name="forceY">Y component of impact force</param>
        </member>

        <member name="M:Projectile.ReflectProjectile(UnityEngine.RaycastHit)">
            <summary>
            Reflects the projectile off barriers with complex angle calculations and damage
            bonuses. Changes projectile ownership, adds +12 damage, plays reflection sound, and
            calculates reflection angle based on impact normal and projectile direction. Awards
            achievement for deflection kills. Returns false if canReflect is disabled.
            </summary>
            <param name="raycastHit">Raycast hit information containing impact point and surface
                normal</param>
            <returns>True if projectile was successfully reflected, false if reflection is disabled</returns>
        </member>

        <member name="M:Projectile.RunDamageBackground(System.Single)">
            <summary>
            Periodically damages background doodads along the projectile's path. Uses a timer
            that triggers every 0.033 seconds, checking and damaging doodads within 3 units of
            the projectile position. Only processes if affectScenery is enabled.
            </summary>
            <param name="t">Delta time for this frame</param>
        </member>

        <member name="F:Projectile.damage">
            <summary>
            Base damage value for the projectile. Default value is 1. This is the initial damage
            setting that gets copied to damageInternal during initialization and can be modified
            by SetDamage method. Represents the projectile's intended damage before any
            modifiers.
            </summary>
        </member>

        <member name="F:Projectile.damageInternal">
            <summary>
            The actual damage value used in calculations. Initially set from the damage field,
            but can be modified by fadeDamage mechanics, reflection bonuses (+12), or other
            gameplay effects. This is the value actually applied when the projectile hits
            targets.
            </summary>
        </member>

        <member name="F:Projectile.damageType">
            <summary>
            Specifies the type of damage this projectile inflicts (e.g., Bullet, Fire,
            Explosion). Passed to all damage application methods to determine appropriate hit
            reactions, visual effects, and special damage behaviors like oil ignition for fire
            damage.
            </summary>
        </member>

        <member name="F:Projectile.fadeDamage">
            <summary>
            When enabled, causes projectile damage to decrease proportionally with remaining
            life. Uses the formula damageInternal = fullDamage * (life/fullLife) to create
            projectiles that weaken over distance. Special interaction with BulletSnakeBroskin
            weapon type.
            </summary>
        </member>

        <member name="F:Projectile.firedBy">
            <summary>
            Reference to the MonoBehaviour (usually a unit) that created this projectile. Used
            for damage attribution, preventing self-collision at spawn, and special behaviors
            like inseminator targeting. Can be modified by return zones and reflection
            mechanics.
            </summary>
        </member>

        <member name="F:Projectile.fullDamage">
            <summary>
            Stores the original damage value at projectile initialization. Used with fadeDamage
            mechanic to calculate damage reduction over time using the formula: damage =
            fullDamage * (life/fullLife). Preserves the initial damage for percentage
            calculations.
            </summary>
        </member>

        <member name="F:Projectile.playerNum">
            <summary>
            Identifies which player fired this projectile. Value of -1 indicates enemy
            projectile, 0-3 indicates player 1-4, and 5 indicates a reflected projectile. Used
            for friendly fire checks, material selection, and damage attribution. Modified
            during reflection.
            </summary>
        </member>

        <member name="F:Projectile.unitHit">
            <summary>
            Reference to the last unit hit by this projectile. While this field exists in the
            base Projectile class, it is not actively used and is likely intended for derived
            classes that need to track specific hit targets.
            </summary>
        </member>

        <member name="M:Projectile.Death">
            <summary>
            Handles projectile destruction with appropriate effects. Creates visual impact
            effects at the projectile's position, plays death sound if configured, and destroys
            the GameObject.
            </summary>
        </member>

        <member name="M:Projectile.IncreaseLife(System.Single)">
            <summary>
            Extends the projectile's remaining lifetime by a multiplier. Increases both current
            life and maximum life values proportionally, allowing projectiles to travel further
            before expiring.
            </summary>
            <param name="m">Multiplier to apply to the projectile's life (e.g., 2.0 doubles
                remaining life)</param>
        </member>

        <member name="M:Projectile.MakeEffects(System.Boolean,System.Single,System.Single,System.Boolean,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates visual effects when the projectile impacts. Generates sparks with
            physics-based trajectories, optional puff effects, and plays impact sounds. Supports
            both raycast-based hit information and position-only effects. Only creates effects
            once unless canMakeEffectsMoreThanOnce is enabled.
            </summary>
            <param name="particles">Whether to create particle effects (currently unused)</param>
            <param name="x">X position for the effects</param>
            <param name="y">Y position for the effects</param>
            <param name="useRayCast">Whether to use raycast hit information for effect direction</param>
            <param name="hitNormal">Normal vector of the surface hit (used if useRayCast is true)</param>
            <param name="hitPoint">Exact point of impact (used if useRayCast is true)</param>
        </member>

        <member name="M:Projectile.MoveProjectile">
            <summary>
            Updates the projectile's position based on current velocity and delta time. Applies
            doubled movement when doubleSpeed is enabled, effectively moving the projectile
            twice per frame for increased speed. Handles Z-axis positioning for rendering depth.
            </summary>
        </member>

        <member name="M:Projectile.OnDestroy">
            <summary>
            Cleanup method called when the projectile GameObject is destroyed. Deregisters the
            projectile from the Map system and calls base class cleanup.
            </summary>
        </member>

        <member name="M:Projectile.PlayDeathSound">
            <summary>
            Plays the projectile's death sound effect if a sound holder is configured. Uses the
            projectile's position and configured volume, with playback priority of 0.65.
            </summary>
        </member>

        <member name="M:Projectile.RunLife(System.Single)">
            <summary>
            Manages projectile lifetime countdown and destruction. Decrements life by delta time
            each frame, applying damage fade if enabled. When life reaches zero or damage fades
            completely, destroys the projectile with appropriate effects.
            </summary>
            <param name="t">Delta time for this frame</param>
        </member>

        <member name="M:Projectile.RunProjectile(System.Single)">
            <summary>
            Core projectile update method that processes movement, collision detection, and
            damage application. Handles projectile physics, checks for unit/terrain hits,
            applies damage to background elements, manages return zone interactions, and
            processes special behaviors like reversing. Updates position based on velocity and
            delta time.
            </summary>
            <param name="t">Delta time for this frame</param>
        </member>

        <member name="M:Projectile.SetDoubleSpeed">
            <summary>
            Activates double speed mode for the projectile. Limits the projectile's life to a
            maximum of 1 second and enables the doubleSpeed flag which causes MoveProjectile to
            update position twice per frame.
            </summary>
        </member>

        <member name="P:Projectile.Position">
            <summary>
            Gets or sets the projectile's 2D position. Setting the position updates both the X
            and Y coordinates and immediately applies the new position to the transform. Getting
            returns the current X,Y as a Vector2.
            </summary>
        </member>

        <member name="P:Projectile.Velocity">
            <summary>
            Gets or sets the projectile's 2D velocity vector. Setting velocity updates both xI
            and yI components and recalculates the projectile's rotation to match the new
            direction. Getting returns xI,yI as a Vector2.
            </summary>
        </member>

        <member name="F:Projectile.affectScenery">
            <summary>
            Controls whether this projectile can damage background scenery and doodads. Default
            is true. When disabled, the projectile passes through destructible background
            elements without affecting them. Checked in RunDamageBackground method.
            </summary>
        </member>

        <member name="F:Projectile.canHitGrenades">
            <summary>
            Determines if this projectile can interact with grenades. Default is true. When
            enabled, the projectile will knock back and potentially damage grenades it
            encounters. Only applies to projectiles with projectileSize greater than 3.
            </summary>
        </member>

        <member name="F:Projectile.canMakeEffectsMoreThanOnce">
            <summary>
            When enabled, allows MakeEffects to create visual effects multiple times during the
            projectile's lifetime. Works with hasMadeEffects flag to control whether effects can
            be repeated for projectiles that hit multiple targets or surfaces.
            </summary>
        </member>

        <member name="F:Projectile.damageBackgroundCounter">
            <summary>
            Timer controlling periodic background damage checks. Initialized with a small random
            negative value (-0.2 to 0) and increments by delta time. When positive, triggers
            background damage check every 0.033 seconds if affectScenery is enabled.
            </summary>
        </member>

        <member name="F:Projectile.damagedBackground">
            <summary>
            Flag tracking whether this projectile has already damaged background elements.
            Prevents multiple damage applications to scenery during a single projectile's
            lifetime. Set to true after first background damage event.
            </summary>
        </member>

        <member name="F:Projectile.doubleSpeed">
            <summary>
            Speed multiplier flag that doubles projectile movement when enabled. Set via
            SetDoubleSpeed method which also caps projectile life at 1 second. Applied in
            MoveProjectile to effectively move the projectile twice per frame.
            </summary>
        </member>

        <member name="F:Projectile.flickPuff">
            <summary>
            Puff effect prefab created when the projectile damages background scenery or
            doodads. Instantiated by EffectsController.CreateProjectilePuff during background
            damage checks to provide visual feedback for environmental destruction.
            </summary>
        </member>

        <member name="F:Projectile.fullLife">
            <summary>
            Original lifetime value stored at projectile initialization. Used with fadeDamage to
            calculate damage reduction over time and preserved for any mechanics that need to
            reference the projectile's initial lifetime setting.
            </summary>
        </member>

        <member name="F:Projectile.hasHit">
            <summary>
            Flag indicating the projectile has already hit a target. Set to true on successful
            collision to prevent multiple hit registrations from the same impact. Ensures
            projectiles only deal damage once per target.
            </summary>
        </member>

        <member name="F:Projectile.hasMadeEffects">
            <summary>
            Tracks whether visual impact effects have been created. Prevents duplicate effect
            spawning unless canMakeEffectsMoreThanOnce is enabled. Set to true after first
            effect creation in MakeEffects method.
            </summary>
        </member>

        <member name="F:Projectile.isDamageable">
            <summary>
            Indicates whether this projectile can be damaged and destroyed by attacks. While
            this field exists in the base class, it is not actively used in the base
            implementation and is likely intended for derived projectile types that can be shot
            down.
            </summary>
        </member>

        <member name="F:Projectile.life">
            <summary>
            Remaining lifetime of the projectile in seconds. Default value is 4 seconds.
            Decreases by delta time each frame and destroys the projectile when it reaches zero.
            Can be modified by SetDoubleSpeed (caps at 1 second) and IncreaseLife methods.
            </summary>
        </member>

        <member name="F:Projectile.projectileSize">
            <summary>
            Collision radius of the projectile in units. Default value is 8. Used for all
            sphere-based collision checks, hit detection radii, and raycast distances. Larger
            values create projectiles that can hit targets more easily and affect wider areas.
            </summary>
        </member>

        <member name="F:Projectile.shrapnel">
            <summary>
            Shrapnel prefab reference for creating debris particles. While not directly used in
            the base Projectile class, this field is available for derived projectile types to
            create custom shrapnel effects on impact.
            </summary>
        </member>

        <member name="F:Projectile.shrapnelSpark">
            <summary>
            Spark shrapnel prefab reference for creating spark particles. While not directly
            used in the base Projectile class, this field is available for derived projectile
            types to create custom spark effects, particularly for metal impacts.
            </summary>
        </member>

        <member name="F:Projectile.sound">
            <summary>
            Lazy-initialized Sound instance for playing projectile audio effects. Created on
            demand in PlayDeathSound when the projectile is destroyed. Cached to avoid creating
            multiple Sound objects for the same projectile.
            </summary>
        </member>

        <member name="F:Projectile.soundHolder">
            <summary>
            Reference to the SoundHolder component containing this projectile's sound effects.
            Used in PlayDeathSound to play impact sounds when the projectile is destroyed.
            Configured per projectile type for unique audio feedback.
            </summary>
        </member>

        <member name="F:Projectile.soundVolume">
            <summary>
            Volume level for projectile sound effects. Default value is 0.2f (20% volume).
            Applied when playing death sounds through the sound holder to control audio levels
            relative to other game sounds.
            </summary>
        </member>

        <member name="F:Projectile.sparkCount">
            <summary>
            Number of spark particles created on impact. Default value is 10. Used in
            MakeEffects to determine how many sparks to generate. Different impact contexts use
            full count or reduced counts for visual variety.
            </summary>
        </member>

        <member name="F:Projectile.startProjectileSpeed">
            <summary>
            Initial speed magnitude of the projectile when fired. Default 400f but set from
            velocity vector magnitude in Fire method. Used in collision prediction calculations
            to determine raycast distances based on projectile speed.
            </summary>
        </member>

        <member name="F:Projectile.whitePopEffect">
            <summary>
            Determines the type of impact effect created. When true, creates a white pop effect
            instead of the standard projectile pop effect. Used in MakeEffects to provide visual
            variety for different projectile types.
            </summary>
        </member>

        <member name="F:Projectile.z">
            <summary>
            The projectile's Z-axis position used for rendering depth. Updated during movement
            to maintain proper visual layering with other game objects.
            </summary>
        </member>

        <member name="M:Projectile.Fire(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour)">
            <summary>
            Primary initialization method that launches the projectile. Sets position, velocity,
            player ownership, and performs comprehensive spawn validation including collision
            checks, unit hits, and barrier reflections. Applies perk-based scaling for player
            projectiles and sets appropriate team materials.
            </summary>
            <param name="newX">Starting X position of the projectile</param>
            <param name="newY">Starting Y position of the projectile</param>
            <param name="xI">Initial X velocity</param>
            <param name="yI">Initial Y velocity</param>
            <param name="_zOffset">Z-axis offset for rendering depth</param>
            <param name="playerNum">Player number who fired the projectile (0-3 for players, -1 for
                enemies)</param>
            <param name="FiredBy">Reference to the unit that fired this projectile</param>
        </member>

        <member name="M:Projectile.GetSuggestedSpeed">
            <summary>
            Returns the suggested default speed for projectiles, used as a baseline for velocity
            calculations. Standard projectiles return 120 units per second.
            </summary>
            <returns>The suggested projectile speed (120f)</returns>
        </member>

        <member name="M:Projectile.SetDamage(System.Int32)">
            <summary>
            Sets the projectile's damage value, updating both the internal damage tracking and
            the public damage field used for display and calculations.
            </summary>
            <param name="d">The damage value to set</param>
        </member>

        <member name="M:Projectile.SetPosition">
            <summary>
            Updates the projectile's transform position using rounded X and Y coordinates with
            the configured z-offset for proper rendering depth.
            </summary>
        </member>

        <member name="M:Projectile.SetRotation">
            <summary>
            Calculates and applies rotation to the projectile's transform based on its current
            velocity. Uses atan2 to determine angle from velocity vector and converts to
            degrees. Applies an additional 180-degree rotation for horizontal projectiles.
            </summary>
        </member>

        <member name="M:Projectile.SetSeed(System.Int32)">
            <summary>
            Sets the random seed for this projectile, creating a new Randomf instance with the
            specified seed for deterministic random behavior in effects and variations.
            </summary>
            <param name="newSeed">The seed value for random number generation</param>
        </member>

        <member name="M:Projectile.SetSpeed(System.Single,System.Single)">
            <summary>
            Updates the projectile's velocity vector and recalculates its rotation to match the
            new direction of travel.
            </summary>
            <param name="xI">New X velocity component</param>
            <param name="yI">New Y velocity component</param>
        </member>

        <member name="F:Projectile.canReflect">
            <summary>
            Controls whether this projectile can be reflected by barriers. Default is true. When
            disabled, projectile ignores barrier collision checks that would normally cause
            reflection. Used to create projectiles that pass through or are destroyed by
            barriers instead of bouncing off.
            </summary>
        </member>

        <member name="F:Projectile.enemyMaterial">
            <summary>
            Material applied to enemy-fired projectiles for visual team identification. Set
            through CheckFriendlyFireMaterial when playerNum is negative. Creates visual
            distinction between projectiles that can harm the player versus those that cannot.
            </summary>
        </member>

        <member name="F:Projectile.friendlyMaterial">
            <summary>
            Material applied to player-fired projectiles for visual team identification. Set
            through CheckFriendlyFireMaterial when playerNum is 0 or greater. Helps players
            distinguish between friendly and enemy projectiles at a glance.
            </summary>
        </member>

        <member name="F:Projectile.horizontalProjectile">
            <summary>
            Determines raycast behavior for collision detection. Default is true. When true,
            uses offset raycasts from projectile sides for barrier detection. When false, uses
            direct center raycasts. Affects how projectiles interact with barriers and walls.
            </summary>
        </member>

        <member name="F:Projectile.isWideProjectile">
            <summary>
            Indicates if this is a wide projectile that requires special collision handling.
            When true, skips horizontal wall collision checks. Used in conjunction with
            horizontalProjectile to determine appropriate collision detection methods.
            </summary>
        </member>

        <member name="M:Projectile.CheckSpawnPoint">
            <summary>
            Comprehensive spawn point validation that checks for walls, doodads, return zones,
            barriers, and units at the projectile's starting position. Handles barrier
            reflections for both enemy and friendly projectiles, destroys projectile if spawning
            inside solid objects, and attempts to hit units at spawn location. Registers
            projectile with Map system if spawn is valid.
            </summary>
        </member>

        <member name="M:Projectile.CheckSpawnPointFragile">
            <summary>
            Checks for fragile/destructible objects at spawn location using a 5-unit radius
            sphere overlap. Creates puff effects and applies damage to all fragile objects
            found, but does not destroy the projectile.
            </summary>
        </member>

        <member name="M:Projectile.CheckWallsAtSpawnPoint">
            <summary>
            Checks for wall collisions at the projectile's spawn position using a 5-unit radius
            sphere overlap. Applies damage to any walls found (excluding the firing unit's
            collider) and destroys the projectile if walls are hit, creating appropriate impact
            effects.
            </summary>
            <returns>True if walls were hit and projectile was destroyed, false otherwise</returns>
        </member>

        <member name="M:Projectile.TryHitUnitsAtSpawn">
            <summary>
            Attempts to damage units at the projectile's spawn location. Handles special case
            for inseminator units (alien face huggers) by targeting their host unit with double
            damage. Destroys projectile with effects if any units are successfully hit.
            </summary>
        </member>

        <member name="F:Projectile.raycastHit">
            <summary>
            Stores the result of raycast collision detection operations. Contains hit point,
            surface normal, collider reference, and other collision data used for creating
            effects, calculating reflections, and applying damage at the correct position and
            angle.
            </summary>
        </member>

        <member name="M:Projectile.AvoidRect(UnityEngine.Transform,System.Single,System.Single)">
            <summary>
            Virtual method for implementing projectile avoidance behavior around rectangular
            areas. Base implementation is empty - derived projectile types override this to
            steer around obstacles.
            </summary>
            <param name="avoidTransform">Transform of the rectangle to avoid</param>
            <param name="avoidWidth">Width of the avoidance area</param>
            <param name="avoidHeight">Height of the avoidance area</param>
        </member>

        <member name="M:Projectile.CheckFriendlyFireMaterial">
            <summary>
            Updates the projectile's visual material based on team affiliation. Player
            projectiles (playerNum &gt;= 0) use the friendly material if available, while enemy
            projectiles use the enemy material. Helps players identify projectile ownership
            visually.
            </summary>
        </member>

        <member name="M:Projectile.CheckReturnZones">
            <summary>
            Scans for nearby ProjectileReturnZones that can capture and reverse this projectile.
            Only captures enemy projectiles (playerNum -1) within 64 units of an active zone.
            Initiates reversal behavior when a valid zone is found.
            </summary>
            <returns>True if the projectile was captured by a return zone, false otherwise</returns>
        </member>

        <member name="M:Projectile.IsHeldByZone">
            <summary>
            Checks if this projectile is currently being held and reversed by a return zone.
            Returns true when the projectile has an active zone reference and is in reversing
            state.
            </summary>
            <returns>True if held by a return zone, false otherwise</returns>
        </member>

        <member name="M:Projectile.ReverseProjectile">
            <summary>
            Initiates projectile reversal toward its firing unit. Sets reverse velocity targets
            to 80% of negative initial velocity, creating a boomerang effect. Only reverses if
            the original firing unit still exists.
            </summary>
        </member>

        <member name="M:Projectile.RunReversing">
            <summary>
            Handles projectile reversal behavior when captured by return zones. Gradually
            adjusts velocity toward the zone's return point using interpolation. Destroys the
            projectile when it gets within 16 units of the target position.
            </summary>
        </member>

        <member name="M:Projectile.Target(System.Single,System.Single,System.Int32)">
            <summary>
            Virtual method for implementing projectile targeting behavior. Base implementation
            is empty - guided projectile types override this to track toward specified
            coordinates.
            </summary>
            <param name="targetX">X coordinate of the target position</param>
            <param name="targetY">Y coordinate of the target position</param>
            <param name="playerNum">Player number associated with the targeting</param>
        </member>

        <member name="P:Projectile.StopBeingControlled">
            <summary>
            Virtual property that indicates whether the projectile should stop being controlled
            by external systems. Base implementation always returns false, but can be overridden
            by guided projectiles to signal when they should stop tracking targets.
            </summary>
        </member>

        <member name="F:Projectile.giveDeflectAchievementOnMookKill">
            <summary>
            When enabled, awards the "bronald_bradman" achievement if this deflected projectile
            kills an enemy. Checked in HitUnits when the projectile successfully damages a
            target. Used to track player skill in deflecting enemy projectiles back at enemies.
            </summary>
        </member>

        <member name="F:Projectile.heldDelay">
            <summary>
            Random delay before reversed projectile starts moving. Set to 0-0.333 seconds when
            caught by a return zone. Decrements each frame in RunReversing, creating a brief
            pause before the projectile reverses direction.
            </summary>
        </member>

        <member name="F:Projectile.reverseXI">
            <summary>
            Target X velocity for projectile reversal. Set to 80% of negative current X velocity
            when reversal begins. Used in RunReversing for smooth interpolation from current to
            reversed trajectory.
            </summary>
        </member>

        <member name="F:Projectile.reverseYI">
            <summary>
            Target Y velocity for projectile reversal. Set to 80% of negative current Y velocity
            when reversal begins. Used in RunReversing for smooth interpolation from current to
            reversed trajectory.
            </summary>
        </member>

        <member name="F:Projectile.reversing">
            <summary>
            Indicates the projectile is being reversed by a return zone (like Brondleman's
            ability). Set to true when captured by a ProjectileReturnZone. Triggers special
            movement behavior in RunReversing that gradually redirects the projectile.
            </summary>
        </member>

        <member name="F:Projectile.zone">
            <summary>
            Reference to the ProjectileReturnZone currently controlling this projectile. Set
            when the projectile enters a return zone's area of effect. Used to determine if the
            projectile should continue reversing behavior or has escaped the zone's influence.
            </summary>
        </member>

        <member name="M:Projectile.DeregisterProjectile">
            <summary>
            Removes this projectile from the Map's projectile tracking system, typically called
            during cleanup when the projectile is destroyed.
            </summary>
        </member>

        <member name="M:Projectile.RegisterProjectile">
            <summary>
            Registers this projectile with the Map's projectile tracking system, allowing it to
            be found by other game systems for collision detection and effects.
            </summary>
        </member>

        <member name="M:ProjectileController.Awake">
            <summary>
            Unity's Awake method that initializes mathematical lookup tables when the
            ProjectileController is first created.
            </summary>
        </member>

        <member name="P:ProjectileController.instance">
            <summary>
            Gets the singleton instance of ProjectileController. Uses lazy initialization to
            find or create the instance when first accessed.
            </summary>
        </member>

        <member name="F:ProjectileController.inst">
            <summary>
            Private static field that stores the singleton instance of ProjectileController.
            </summary>
        </member>

        <member name="M:ProjectileController.SpawnGrenadeLocally(Grenade,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Spawns a grenade locally without network synchronization. Sets up the grenade with
            physics parameters and launches it.
            </summary>
            <param name="grenadePrefab">The grenade prefab to instantiate.</param>
            <param name="firedBy">The MonoBehaviour that threw this grenade.</param>
            <param name="x">The X position to spawn the grenade.</param>
            <param name="y">The Y position to spawn the grenade.</param>
            <param name="radius">The explosion radius of the grenade (passed to SetupGrenade but
                actual usage depends on grenade type).</param>
            <param name="force">The explosion force of the grenade (passed to SetupGrenade but
                actual usage depends on grenade type).</param>
            <param name="xI">The initial X velocity of the grenade.</param>
            <param name="yI">The initial Y velocity of the grenade.</param>
            <param name="playerNum">The player number who owns this grenade.</param>
            <param name="seed">Random seed for deterministic grenade behavior.</param>
            <returns>The spawned Grenade instance.</returns>
        </member>

        <member name="M:ProjectileController.SpawnGrenadeOverNetwork(Grenade,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Spawns a grenade across the network for multiplayer synchronization. Creates the
            grenade and sends RPCs to set it up and launch it on all clients. Note: Network
            functionality may not work reliably in mods.
            </summary>
            <param name="grenadePrefab">The grenade prefab to instantiate.</param>
            <param name="firedBy">The MonoBehaviour that threw this grenade.</param>
            <param name="x">The X position to spawn the grenade.</param>
            <param name="y">The Y position to spawn the grenade.</param>
            <param name="radius">The explosion radius (usage depends on grenade type).</param>
            <param name="force">The explosion force (usage depends on grenade type).</param>
            <param name="xI">The initial X velocity of the grenade.</param>
            <param name="yI">The initial Y velocity of the grenade.</param>
            <param name="playerNum">The player number who owns this grenade.</param>
            <param name="lifeM">Life multiplier for the grenade. Values less than 1 reduce the
                grenade's fuse time.</param>
            <returns>The spawned Grenade instance.</returns>
        </member>

        <member name="M:ProjectileController.SpawnLaserBeamLocally(LaserBeam,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Spawns a laser beam locally without network synchronization. Creates a laser beam
            with specified angle and rotation parameters.
            </summary>
            <param name="prefab">The laser beam prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that created this laser beam.</param>
            <param name="x">The X position to spawn the laser beam.</param>
            <param name="y">The Y position to spawn the laser beam.</param>
            <param name="z">The Z position to spawn the laser beam.</param>
            <param name="angle">The initial angle of the laser beam in degrees.</param>
            <param name="duration">How long the laser beam should last in seconds.</param>
            <param name="rotateSpeed">The rotation speed of the laser beam in degrees per second.</param>
            <param name="playerNum">The player number who owns this laser beam.</param>
            <returns>The spawned LaserBeam instance.</returns>
        </member>

        <member name="M:ProjectileController.SpawnLaserBeamOverNetwork(LaserBeam,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,UnityEngine.Transform,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Spawns a laser beam across the network for multiplayer synchronization. Can target a
            specific transform. Note: Network functionality may not work reliably in mods.
            </summary>
            <param name="prefab">The laser beam prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that created this laser beam.</param>
            <param name="x">The X position to spawn the laser beam.</param>
            <param name="y">The Y position to spawn the laser beam.</param>
            <param name="z">The Z position to spawn the laser beam.</param>
            <param name="duration">How long the laser beam should last in seconds.</param>
            <param name="target">Optional transform for the laser to track/target.</param>
            <param name="synced">Whether to enable continuous network synchronization.</param>
            <param name="playerNum">The player number who owns this laser beam.</param>
            <param name="executeImmediately">Whether to execute the network commands immediately.</param>
            <returns>The spawned LaserBeam instance.</returns>
        </member>

        <member name="M:ProjectileController.SpawnProjectileLocally(Projectile,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Spawns a projectile locally without network synchronization. This is the simplest
            overload for local projectile creation.
            </summary>
            <param name="projectilePrefab">The projectile prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that fired this projectile (usually the
                character or weapon).</param>
            <param name="x">The X position to spawn the projectile.</param>
            <param name="y">The Y position to spawn the projectile.</param>
            <param name="xI">The initial X velocity of the projectile.</param>
            <param name="yI">The initial Y velocity of the projectile.</param>
            <param name="playerNum">The player number who owns this projectile.</param>
            <returns>The spawned Projectile instance.</returns>
        </member>

        <member name="M:ProjectileController.SpawnProjectileLocally(Projectile,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Single)">
            <summary>
            Spawns a projectile locally with additional z-offset control. The
            AddTemporaryPlayerTarget parameter appears to be unused in this overload.
            </summary>
            <param name="prefab">The projectile prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that fired this projectile.</param>
            <param name="x">The X position to spawn the projectile.</param>
            <param name="y">The Y position to spawn the projectile.</param>
            <param name="xI">The initial X velocity of the projectile.</param>
            <param name="yI">The initial Y velocity of the projectile.</param>
            <param name="playerNum">The player number who owns this projectile.</param>
            <param name="AddTemporaryPlayerTarget">Unused parameter in this overload.</param>
            <param name="_zOffset">The Z-axis offset for the projectile spawn position.</param>
            <returns>The spawned Projectile instance.</returns>
        </member>

        <member name="M:ProjectileController.SpawnProjectileLocally(Projectile,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Spawns a projectile locally with all available parameters. The synced,
            AddTemporaryPlayerTarget, and executeImmediately parameters appear to be unused in
            local spawning.
            </summary>
            <param name="prefab">The projectile prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that fired this projectile.</param>
            <param name="x">The X position to spawn the projectile.</param>
            <param name="y">The Y position to spawn the projectile.</param>
            <param name="xI">The initial X velocity of the projectile.</param>
            <param name="yI">The initial Y velocity of the projectile.</param>
            <param name="synced">Unused parameter in local spawning.</param>
            <param name="playerNum">The player number who owns this projectile.</param>
            <param name="AddTemporaryPlayerTarget">Unused parameter in local spawning.</param>
            <param name="executeImmediately">Unused parameter in local spawning.</param>
            <param name="_zOffset">The Z-axis offset for the projectile spawn position.</param>
            <returns>The spawned Projectile instance.</returns>
        </member>

        <member name="M:ProjectileController.SpawnProjectileOverNetwork(Projectile,UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Spawns a projectile across the network for multiplayer synchronization. Creates the
            projectile and sends RPCs to synchronize its state across all players. Note: Network
            functionality may not work reliably in mods.
            </summary>
            <param name="prefab">The projectile prefab to instantiate.</param>
            <param name="FiredBy">The MonoBehaviour that fired this projectile.</param>
            <param name="x">The X position to spawn the projectile.</param>
            <param name="y">The Y position to spawn the projectile.</param>
            <param name="xI">The initial X velocity of the projectile.</param>
            <param name="yI">The initial Y velocity of the projectile.</param>
            <param name="synced">Whether to enable continuous network synchronization for this
                projectile.</param>
            <param name="playerNum">The player number who owns this projectile.</param>
            <param name="AddTemporaryPlayerTarget">Whether to add this projectile as a temporary
                target for the specified player.</param>
            <param name="executeImmediately">Whether to execute the network commands immediately or
                queue them.</param>
            <param name="_zOffset">The Z-axis offset for the projectile spawn position.</param>
            <returns>The spawned Projectile instance.</returns>
        </member>

        <member name="M:ProjectileController.SummonPortalNetworked(WarlockPortal,System.Int32,UnityEngine.Vector2,System.Single)">
            <summary>
            Spawns a warlock portal across the network with a delay. Only creates the portal if
            spawnPos is not Vector2.zero. Note: Network functionality may not work reliably in
            mods.
            </summary>
            <param name="portalPrefab">The warlock portal prefab to instantiate.</param>
            <param name="seenPlayerNum">The player number associated with this portal.</param>
            <param name="spawnPos">The position to spawn the portal. Portal is not created if this
                is Vector2.zero.</param>
            <param name="delay">Delay in seconds before the portal activates.</param>
        </member>

        <member name="M:ProjectileController.CheckReturnZone(System.Single,System.Single,System.Int32@,ProjectileReturnZone@,UnityEngine.MonoBehaviour@)">
            <summary>
            Checks if a position is within any registered return zone. If found, updates the
            projectile ownership and provides zone information. Return zones only affect
            projectiles from different players.
            </summary>
            <param name="x">The X position to check.</param>
            <param name="y">The Y position to check.</param>
            <param name="playerNum">The current player number of the projectile. Updated to the
                zone's player number if a zone is found.</param>
            <param name="returnZone">Output parameter that receives the ProjectileReturnZone if one
                is found at the position.</param>
            <param name="zoneFiredBy">Output parameter that receives the MonoBehaviour that created
                the return zone.</param>
            <returns>True if a return zone was found at the position, false otherwise.</returns>
        </member>

        <member name="M:ProjectileController.RegisterReturnZone(ProjectileReturnZone)">
            <summary>
            Registers a projectile return zone with the controller. Return zones can capture and
            redirect projectiles that enter their area.
            </summary>
            <param name="zone">The ProjectileReturnZone to register.</param>
        </member>

        <member name="M:ProjectileController.RemoveReturnZone(ProjectileReturnZone)">
            <summary>
            Removes a previously registered projectile return zone from the controller.
            </summary>
            <param name="zone">The ProjectileReturnZone to unregister.</param>
        </member>

        <member name="F:ProjectileController.returnZones">
            <summary>
            List of all currently active projectile return zones. These zones can capture and
            redirect projectiles that enter their radius.
            </summary>
        </member>

        <member name="M:ProjectileController.GetAirstrikeGrenadePrefab">
            <summary>
            Gets the airstrike grenade prefab used for calling in aerial bombardments.
            </summary>
            <returns>The airstrike Grenade prefab.</returns>
        </member>

        <member name="M:ProjectileController.GetAlienPheromoneGrenadePrefab">
            <summary>
            Gets the alien pheromone grenade prefab used for alien-related mechanics.
            </summary>
            <returns>The alien pheromone Grenade prefab.</returns>
        </member>

        <member name="M:ProjectileController.GetMechDropGrenadePrefab">
            <summary>
            Gets the mech drop grenade prefab used for deploying mechs.
            </summary>
            <returns>The mech drop Grenade prefab.</returns>
        </member>

        <member name="F:ProjectileController.airstrikeGrenade">
            <summary>
            The grenade prefab for airstrike special abilities. Used by character abilities and
            perks to call in aerial bombardment at marked locations. Can be spawned with
            stance-based trajectories (close-range: 30 velocity/70 angle, long-range: 200
            velocity/150 angle) or immediately detonated for instant strikes. Shared with
            SpecialAbilitiesController for consistent access.
            </summary>
        </member>

        <member name="F:ProjectileController.alienPheromoneGrenade">
            <summary>
            The grenade prefab for alien pheromone biological warfare. Creates pheromone effects
            that influence alien enemy behavior when detonated. Available as pocketed special
            ammunition pickup. Uses stance-based throwing system (crouching: 30/70 for close
            range, standing: 200/150 for long range) and shares animation behavior with
            airstrike and mech drop abilities.
            </summary>
        </member>

        <member name="F:ProjectileController.allGrenadePrefabs">
            <summary>
            Unity Inspector field containing references to all grenade prefabs in the game. Not
            referenced in code but likely populated via Unity Editor for cataloging, validation,
            or potential editor tooling purposes. Serves as a central registry of available
            grenade types.
            </summary>
        </member>

        <member name="F:ProjectileController.allProjectilePrefabs">
            <summary>
            Unity Inspector field containing references to all projectile prefabs in the game.
            Not referenced in code but likely populated via Unity Editor for cataloging,
            validation, or potential editor tooling purposes. Initialized as empty list in code.
            </summary>
        </member>

        <member name="F:ProjectileController.assasinationTargetPrefab">
            <summary>
            The assassination target prefab used by Matilda for marking elimination targets.
            </summary>
        </member>

        <member name="F:ProjectileController.broGummerSniperTargetPrefab">
            <summary>
            The specialized sniper targeting system prefab used by Bro Gummer.
            </summary>
        </member>

        <member name="F:ProjectileController.brobocop">
            <summary>
            The projectile prefab specifically used by Brobocop character.
            </summary>
        </member>

        <member name="F:ProjectileController.fireBallBombardment">
            <summary>
            The projectile prefab used for fireball bombardment attacks. Used in
            TimePressureBombardment for Rogueforce procedural generation mode to create
            environmental fire hazards. Spawned at random positions and immediately detonated to
            create explosive fiery bombardment effects.
            </summary>
        </member>

        <member name="F:ProjectileController.goldenLightProjectile">
            <summary>
            The golden light projectile prefab, likely used for special holy or light-based
            attacks by specific characters or abilities.
            </summary>
        </member>

        <member name="F:ProjectileController.mechDropGrenade">
            <summary>
            The grenade prefab for mech deployment special ability. Acts as a beacon that spawns
            a combat mech on detonation. Part of the pocketed special ammo system - players can
            collect and use this to deploy mechs using stance-based throwing mechanics identical
            to airstrikes. Uses custom animation sequence (row 5, frames 17-24) with deployment
            trigger at frame 4.
            </summary>
        </member>

        <member name="F:ProjectileController.remoteRocketPrefab">
            <summary>
            The prefab for remote-controlled rockets that can be guided by the player.
            </summary>
        </member>

        <member name="F:ProjectileController.shellBombardment">
            <summary>
            The projectile prefab used for artillery shell bombardment attacks.
            </summary>
        </member>

        <member name="F:ProjectileController.targetPrefab">
            <summary>
            A general-purpose following object prefab that can track targets.
            </summary>
        </member>

        <member name="F:ProjectileController.targetSystemPrefab">
            <summary>
            The targeting system prefab used by Robocop for locking onto enemies.
            </summary>
        </member>

        <member name="F:ProjectileController.teleportTargetPrefab">
            <summary>
            The remote teleport target prefab used for marking teleportation destinations in
            teleportation-based abilities and mechanics.
            </summary>
        </member>

        <member name="M:SpriteSM.Awake">
            <summary>
            Unity Awake callback that initializes the sprite system. Creates normals, gets the
            mesh renderer component, initializes the animations array if null, builds all UV
            animations, and calls base initialization. This ensures all sprite components are
            properly set up before Start is called.
            </summary>
        </member>

        <member name="M:SpriteSM.OnDrawGizmos">
            <summary>
            Unity editor callback that monitors sprite changes during edit mode. Creates and
            maintains a SpriteMirror instance to detect property changes, automatically
            reinitializing the sprite when modifications are detected to ensure real-time
            preview updates in the editor.
            </summary>
        </member>

        <member name="M:SpriteSM.Start">
            <summary>
            Unity Start callback that plays the default animation if configured. Checks if
            playAnimOnStart is true, defaultAnim is within the animations array bounds, and the
            application is playing (not in editor mode). This allows sprites to automatically
            start animating when the game begins.
            </summary>
        </member>

        <member name="M:SpriteSM.Clear">
            <summary>
            Clears the sprite state by calling base clear functionality and stopping any current
            animation. If an animation is playing, it pauses the animation and sets the current
            animation reference to null. This effectively resets the sprite to its initial
            non-animated state.
            </summary>
        </member>

        <member name="M:SpriteSM.Copy(SpriteBase)">
            <summary>
            Copies all settings from another SpriteSM instance. Copies base sprite properties,
            lower left pixel, pixel dimensions, bleed compensation, and size settings. Also
            duplicates the entire animations array and rebuilds all UV animations for this
            sprite. This creates a complete duplicate of the source sprite's visual
            configuration.
            </summary>
            <param name="s">The source sprite to copy settings from. Must be a SpriteSM instance.</param>
        </member>

        <member name="M:SpriteSM.SetTextureDefaults">
            <summary>
            Sets the sprite to use the full texture dimensions as defaults. Recalculates the
            texture reference, sets the lower left pixel to (0, texture.height), sets the sprite
            size to match the texture dimensions, updates pixel dimensions, calculates UVs, and
            updates the mesh UVs. This is useful for initializing a sprite to display an entire
            texture without manual configuration.
            </summary>
        </member>

        <member name="F:SpriteSM.lockWidthAndHeight">
            <summary>
            When true, forces the sprite's world size to exactly match its pixel dimensions.
            Overrides autoResize behavior and ensures 1:1 pixel-to-unit scaling regardless of
            other size calculation settings.
            </summary>
        </member>

        <member name="F:SpriteSM.meshRender">
            <summary>
            Cached reference to the Renderer component on this GameObject. Used for accessing
            the material and texture during trim operations and pixel sampling. Initialized
            during Awake.
            </summary>
        </member>

        <member name="F:SpriteSM.mirror">
            <summary>
            SpriteMirror instance used exclusively in the editor to detect property changes.
            Stores a snapshot of sprite properties and compares them each frame to automatically
            reinitialize the sprite when modifications occur.
            </summary>
        </member>

        <member name="F:SpriteSM.refreshMeshNow">
            <summary>
            Editor flag that forces an immediate mesh update when set to true. Used in editor
            scripts to trigger sprite recreation after property changes without waiting for the
            next update cycle.
            </summary>
        </member>

        <member name="M:SpriteSM.CalcUVs">
            <summary>
            Calculates the UV coordinates for the sprite based on pixel coordinates. Converts
            the lower left pixel position to UV space and sets the UV rect's position. Then
            converts pixel dimensions to UV space and sets the UV rect's size. This mapping
            allows the sprite to display the correct portion of its texture.
            </summary>
        </member>

        <member name="M:SpriteSM.SetLowerLeftPixel(UnityEngine.Vector2)">
            <summary>
            Sets the lower left pixel coordinate of the sprite on the texture and recalculates
            all UV mappings. Updates the UV rect position and size based on the new pixel
            coordinates, applies bleed compensation, and optionally recalculates the sprite size
            if auto-resize or pixel-perfect mode is enabled.
            </summary>
            <param name="lowerLeft">The pixel coordinates of the lower left corner on the texture.</param>
        </member>

        <member name="M:SpriteSM.SetLowerLeftPixel(System.Single,System.Single)">
            <summary>
            Sets the lower left pixel coordinate of the sprite on the texture using individual X
            and Y values. This is a convenience overload that creates a Vector2 and calls the
            main SetLowerLeftPixel method.
            </summary>
            <param name="x">The X pixel coordinate on the texture.</param>
            <param name="y">The Y pixel coordinate on the texture.</param>
        </member>

        <member name="M:SpriteSM.SetLowerLeftPixel(UnityEngine.Vector2)">
            <summary>
            Sets the lower-left corner position of the sprite within the texture in pixel
            coordinates. Recalculates UV coordinates, applies bleed compensation, and optionally
            resizes the sprite based on autoResize or pixelPerfect settings.
            </summary>
            <param name="lowerLeft">The pixel coordinates of the lower-left corner in texture space.</param>
        </member>

        <member name="M:SpriteSM.SetLowerLeftPixel(System.Single,System.Single)">
            <summary>
            Sets the lower-left corner position of the sprite within the texture using
            individual x and y pixel coordinates. Wrapper method that creates a Vector2 and
            calls the main SetLowerLeftPixel method.
            </summary>
            <param name="x">The x pixel coordinate of the lower-left corner.</param>
            <param name="y">The y pixel coordinate of the lower-left corner.</param>
        </member>

        <member name="M:SpriteSM.SetPixelDimensions(UnityEngine.Vector2)">
            <summary>
            Sets the pixel dimensions of the sprite on the texture and updates UV coordinates
            accordingly. Converts pixel space to UV space, updates the UV rect size, applies
            bleed compensation, and optionally recalculates sprite size for auto-resize or
            pixel-perfect modes. If lockWidthAndHeight is true, also updates the sprite's world
            size to match pixel dimensions.
            </summary>
            <param name="size">The width and height in pixels on the texture.</param>
        </member>

        <member name="M:SpriteSM.SetPixelDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the pixel dimensions of the sprite on the texture using individual width and
            height values. This is a convenience overload that creates a Vector2 and calls the
            main SetPixelDimensions method.
            </summary>
            <param name="x">The width in pixels on the texture.</param>
            <param name="y">The height in pixels on the texture.</param>
        </member>

        <member name="M:SpriteSM.SetPixelDimensions(UnityEngine.Vector2)">
            <summary>
            Sets the pixel dimensions of the sprite region within the texture. Updates UV
            coordinates to match the new dimensions, applies bleed compensation, and optionally
            updates the sprite's world size based on lockWidthAndHeight, autoResize, or
            pixelPerfect settings.
            </summary>
            <param name="size">The width and height in pixels of the sprite region.</param>
        </member>

        <member name="M:SpriteSM.SetPixelDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the pixel dimensions of the sprite region within the texture using integer
            width and height values. Wrapper method that creates a Vector2 and calls the main
            SetPixelDimensions method.
            </summary>
            <param name="x">The width in pixels of the sprite region.</param>
            <param name="y">The height in pixels of the sprite region.</param>
        </member>

        <member name="F:SpriteSM.lowerLeftPixel">
            <summary>
            The pixel coordinates of the lower-left corner of this sprite's region within the
            texture. Used as the starting point for UV coordinate calculations and determines
            which part of the texture is displayed.
            </summary>
        </member>

        <member name="F:SpriteSM.pixelDimensions">
            <summary>
            The width and height in pixels of this sprite's region within the texture. Combined
            with lowerLeftPixel to define the complete rectangular area of the texture that this
            sprite displays.
            </summary>
        </member>

        <member name="M:SpriteSM.ExpandDown">
            <summary>
            Expands the sprite area downward until no more non-transparent pixels are found.
            Checks each row below the current area, testing all pixels in that row. If any pixel
            has alpha greater than alphaBias, expands the area to include that row. Updates
            pixel dimensions, lower left position, size, and UVs to reflect the expanded area.
            </summary>
        </member>

        <member name="M:SpriteSM.ExpandLeft">
            <summary>
            Expands the sprite area to the left until no more non-transparent pixels are found.
            Checks each column to the left of the current area, testing all pixels in that
            column. If any pixel has alpha greater than alphaBias, expands the area to include
            that column. Updates pixel dimensions, lower left position, size, and UVs to reflect
            the expanded area.
            </summary>
        </member>

        <member name="M:SpriteSM.ExpandRight">
            <summary>
            Expands the sprite area to the right until no more non-transparent pixels are found.
            Checks each column to the right of the current area, testing all pixels in that
            column. If any pixel has alpha greater than alphaBias, expands the area to include
            that column. Updates pixel dimensions, size, and UVs to reflect the expanded area.
            </summary>
        </member>

        <member name="M:SpriteSM.ExpandUp">
            <summary>
            Expands the sprite area upward until no more non-transparent pixels are found.
            Checks each row above the current area, testing all pixels in that row. If any pixel
            has alpha greater than alphaBias, expands the area to include that row. Updates
            pixel dimensions, size, and UVs to reflect the expanded area.
            </summary>
        </member>

        <member name="M:SpriteSM.Trim">
            <summary>
            Automatically trims transparent pixels from all sides of the sprite to create a
            tight bounding box. Snaps the sprite position to 0.5 unit intervals, reduces the
            sprite to a 2x2 pixel area at the center, then iteratively expands outward until
            non-transparent pixels are found. Finally trims any remaining transparent edges.
            This creates the smallest possible sprite that contains all visible pixels.
            </summary>
        </member>

        <member name="M:SpriteSM.TrimBottom">
            <summary>
            Trims transparent pixels from the bottom of the sprite. Iterates through rows from
            bottom to top, checking all pixels in each row. Stops when a row contains any pixel
            with alpha greater than alphaBias. Updates the sprite's size, dimensions, lower left
            position, and UVs to exclude the trimmed area.
            </summary>
        </member>

        <member name="M:SpriteSM.TrimRight">
            <summary>
            Trims transparent pixels from the right side of the sprite. Iterates through columns
            from right to left, checking all pixels in each column. Stops when a column contains
            any pixel with alpha greater than alphaBias. Updates the sprite's dimensions and UVs
            to exclude the trimmed area.
            </summary>
        </member>

        <member name="M:SpriteSM.TrimTop">
            <summary>
            Trims transparent pixels from the top of the sprite. Iterates through rows from top
            to bottom, checking all pixels in each row. Stops when a row contains any pixel with
            alpha greater than alphaBias. Updates the sprite's size, dimensions, and UVs to
            exclude the trimmed area.
            </summary>
        </member>

        <member name="M:SpriteSM.Trimleft">
            <summary>
            Trims transparent pixels from the left side of the sprite. Iterates through columns
            from left to right, checking all pixels in each column. Stops when a column contains
            any pixel with alpha greater than alphaBias. Updates the sprite's position,
            dimensions, and UVs to exclude the trimmed area.
            </summary>
        </member>

        <member name="F:SpriteSM.alphaBias">
            <summary>
            Alpha threshold value (0.2) used during trim operations. Pixels with alpha values
            below this threshold are considered transparent and will be trimmed. Higher values
            result in more aggressive trimming.
            </summary>
        </member>

        <member name="F:SpriteSM.trim">
            <summary>
            Editor flag that enables automatic transparent pixel trimming. When true, the sprite
            boundaries are automatically adjusted to exclude fully transparent edges, optimizing
            the sprite size.
            </summary>
        </member>

        <member name="M:SpriteSM.AddAnimation(UVAnimation_Multi)">
            <summary>
            Adds a new UV animation to the sprite's animation collection. Creates a new array
            with one additional slot, copies all existing animations, and adds the new animation
            at the end. This allows dynamic addition of animations at runtime.
            </summary>
            <param name="anim">The UV animation to add to the sprite.</param>
        </member>

        <member name="M:SpriteSM.GetAnim(System.String)">
            <summary>
            Retrieves an animation by name from the animations array. Searches through all
            configured animations and returns the first match found.
            </summary>
            <param name="name">The name of the animation to retrieve.</param>
            <returns>The UVAnimation_Multi with the specified name, or null if not found.</returns>
        </member>

        <member name="M:SpriteSM.GetCurAnim">
            <summary>
            Returns the currently playing animation. Used to check animation state or access
            animation properties during playback.
            </summary>
            <returns>The current UVAnimation_Multi instance, or null if no animation is playing.</returns>
        </member>

        <member name="M:SpriteSM.PlayAnim(UVAnimation_Multi)">
            <summary>
            Starts playing the specified UV animation from the beginning. Resets the animation,
            calculates frame timing based on the animation's framerate, and begins stepping
            through frames. For single-frame animations, immediately triggers the completion
            delegate. Adds the sprite to the animated list if it has multiple frames and isn't
            already animating.
            </summary>
            <param name="anim">The animation to play.</param>
        </member>

        <member name="M:SpriteSM.PlayAnim(System.Int32)">
            <summary>
            Plays an animation by its index in the animations array. Validates the index is
            within bounds before playing the animation at that position.
            </summary>
            <param name="index">The zero-based index of the animation to play.</param>
        </member>

        <member name="M:SpriteSM.PlayAnim(System.String)">
            <summary>
            Plays an animation by its name. Searches through all animations to find one with a
            matching name and plays the first match found. Does nothing if no animation with the
            specified name exists.
            </summary>
            <param name="name">The name of the animation to play.</param>
        </member>

        <member name="M:SpriteSM.PlayAnimInReverse(UVAnimation_Multi)">
            <summary>
            Starts playing the specified UV animation in reverse from the end. Resets the
            animation, sets it to play in reverse mode, calculates frame timing, and begins
            stepping backwards through frames. Handles single-frame animations and animation
            list management the same as forward playback.
            </summary>
            <param name="anim">The animation to play in reverse.</param>
        </member>

        <member name="M:SpriteSM.PlayAnimInReverse(System.Int32)">
            <summary>
            Plays an animation in reverse by its index in the animations array. Validates the
            index is within bounds before playing the animation at that position in reverse.
            </summary>
            <param name="index">The zero-based index of the animation to play in reverse.</param>
        </member>

        <member name="M:SpriteSM.PlayAnimInReverse(System.String)">
            <summary>
            Plays the animation with the specified name in reverse direction. Searches through
            all animations in the animations array to find a match by name, then configures it
            to play backwards with the same framerate and animation settings as normal playback.
            </summary>
            <param name="name">The name of the animation to play in reverse.</param>
        </member>

        <member name="M:SpriteSM.StepAnim(System.Single)">
            <summary>
            Advances the current animation by the specified time and updates the sprite's UV
            coordinates. Calculates frames to advance based on elapsed time and frame rate.
            Handles animation completion according to the animation's end action (do nothing,
            revert to static, or play default). Triggers animation complete delegate when
            appropriate. Updates bleed compensation and recalculates size if in auto-resize or
            pixel-perfect mode.
            </summary>
            <param name="time">The time in seconds to advance the animation.</param>
            <returns>True if the animation is still playing, false if it has completed.</returns>
        </member>

        <member name="M:SpriteSM.StopAnim">
            <summary>
            Stops the currently playing animation and reverts the sprite to its static state.
            Removes the sprite from the animation update list, resets the current animation's
            frame counter, and restores the original UV coordinates.
            </summary>
        </member>

        <member name="M:SpriteSM.UnpauseAnim">
            <summary>
            Resumes playback of a previously paused animation. If a current animation exists,
            re-adds the sprite to the animated update list to continue frame stepping.
            </summary>
        </member>

        <member name="F:SpriteSM.animations">
            <summary>
            Array of all UV animations configured for this sprite. Each animation contains frame
            data, timing, and playback settings. Animations are identified by name and can be
            played, stopped, or reversed through the animation control methods.
            </summary>
        </member>

        <member name="F:SpriteSM.curAnim">
            <summary>
            The currently playing animation instance. Null when no animation is active. Used by
            the animation system to track frame progression, handle animation events, and
            determine when animations complete.
            </summary>
        </member>

        <member name="M:SpriteSM.CheckReadbility">
            <summary>
            Placeholder method for checking texture readability. Currently has no implementation
            but is called before pixel read operations. This may have been intended for runtime
            texture readability validation.
            </summary>
        </member>

        <member name="M:SpriteSM.GetPixel(System.Single,System.Single)">
            <summary>
            Gets the color of a pixel at the specified texture coordinates. Returns transparent
            black if the material, texture, or coordinates are invalid. Checks texture
            readability, validates coordinates are within texture bounds, and returns the pixel
            color. Note that Y coordinates are flipped since Unity textures have origin at
            bottom-left.
            </summary>
            <param name="x">The X coordinate on the texture in pixels.</param>
            <param name="y">The Y coordinate on the texture in pixels (bottom-left origin).</param>
            <returns>The color of the pixel at the specified coordinates, or transparent black if
                invalid.</returns>
        </member>

        <member name="M:SpriteSM.Snap(System.Single)">
            <summary>
            Snaps a value to the nearest interval as defined by roundInterval. Divides the value
            by the interval, rounds to the nearest integer, then multiplies back by the
            interval. This is used for pixel-perfect positioning and sizing.
            </summary>
            <param name="value">The value to snap to the grid.</param>
            <returns>The value snapped to the nearest interval.</returns>
        </member>

        <member name="F:SpriteSM.round">
            <summary>
            Enables position rounding for pixel-perfect alignment. When true, sprite positions
            are snapped to intervals defined by roundInterval to prevent sub-pixel rendering
            artifacts.
            </summary>
        </member>

        <member name="F:SpriteSM.roundInterval">
            <summary>
            The rounding interval in pixels used when round is enabled. Positions are snapped to
            multiples of this value. Default value of 1 provides standard pixel-perfect
            alignment.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AddBoxCollider">
            <summary>
            Adds or configures a BoxCollider component with character-specific collision dimensions.
            Sets different box sizes and centers for various enemy types (Xenomorph, FaceHugger, etc.)
            with default humanoid dimensions as fallback.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AddRigidbody">
            <summary>
            Adds or configures a Rigidbody component for physics simulation. Sets the rigidbody to
            kinematic mode with gravity disabled for manual physics control.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Awake">
            <summary>
            Unity lifecycle method that initializes TestVanDammeAnim. Sets up sprite systems, parachute
            functionality, collision layers, materials, and core physics components required for
            character operation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.FixedUpdate">
            <summary>
            Unity fixed update method that runs oil test checking at fixed intervals.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.LateUpdate">
            <summary>
            Unity lifecycle method for post-frame updates. Handles input bit preservation, inseminator
            unit synchronization, map disable area extension, and quicksand checking.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.OnDestroy">
            <summary>
            Unity lifecycle callback when the GameObject is destroyed. Calls base implementation for
            cleanup.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.OnDisable">
            <summary>
            Unity lifecycle callback when the component is disabled. Empty implementation for potential
            override.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.OnEnable">
            <summary>
            Unity lifecycle callback when the component is enabled. Empty implementation for potential
            override.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RegisterUnit">
            <summary>
            Registers this unit with the Map system for game tracking and management.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunSync">
            <summary>
            Network synchronization method that updates the unit's position. Calls base synchronization
            and updates position based on current transform.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetDefaultGroundLayer">
            <summary>
            Sets up the default ground collision layer mask including Ground, LargeObjects, and
            IndestructibleGround layers for ground detection and collision checking.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetDeltaTime">
            <summary>
            Updates the frame delta time with clamping to prevent large time steps. Stores previous
            frame time and clamps current time to maximum of 0.0334 seconds.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetHighFiveBoostDeltaTime">
            <summary>
            Sets modified delta time during high-five boost effects. Applies different time multipliers
            based on time scale and special boost conditions.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetStrictGroundLayer">
            <summary>
            Sets up a strict ground collision layer mask including only Ground and IndestructibleGround
            layers, excluding LargeObjects for more restrictive ground detection.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Start">
            <summary>
            Unity lifecycle method that handles game mode-specific initialization. Configures special
            ammo based on game mode (deathmatch, procedural generation, campaign), sets up sound system,
            avatar states, and initial invulnerability.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Update">
            <summary>
            Core Unity lifecycle method that executes the main update loop for TestVanDammeAnim each
            frame. Processes essential character systems in this execution order: 1. **Acid coverage
            effects** - Visual and damage processing for acid-covered characters 2. **Delta time
            management** - Frame timing with high-five boost support 3. **Input processing** - Handle
            player input or trigger action control 4. **Status effect timers** - Stun, freeze, zombie
            revival, and death counters 5. **Animation frame management** - Sprite frame advancement and
            timing 6. **Movement calculation and execution** - Core physics and movement processing 7.
            **Special movement states** - Impaled, strung-up, or platform movement 8. **Combat systems**
            - Weapon management, firing, and melee processing 9. **Hero-specific systems** -
            Checkpoints, rescues, enemy alerting, item pickup 10. **Invulnerability management** -
            Temporary invincibility and revival timing 11. **Alien infection system** - Insemination
            mechanics and chest-bursting 12. **Environmental effects** - Ducking, grass interaction,
            boundary checks 13. **Audio and visual effects** - Wall dragging sounds, trails, freeze
            shaders 14. **Player management** - Kick system and recall mechanics 15. **Parachute
            system** - Deployment timing and physics modification This method coordinates all core
            character functionality and represents the main execution loop for character behavior.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CancelMelee">
            <summary>
            Cleanly exits melee state and resets all melee-related variables. Clears all melee flags,
            removes target reference, and intelligently determines next action state based on current
            conditions (preserves ladder climbing, sets jumping if airborne, running if moving, or
            idle).
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckBustCage">
            <summary>
            Checks if there's a cage in front of the player that can be broken. Performs a raycast
            within 16 units to detect cage components.
            </summary>
            <returns>True if a cage is found that can be busted, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.CheckPlasmaDeath(System.Single@,System.Single@)">
            <summary>
            Handles special plasma/vaporization death effects when plasma damage is 1 or greater.
            Creates white flash effects and for explosion damage types, generates area damage and smoke
            effects while shaking the camera and disturbing nearby wildlife. Returns true if plasma
            death occurred.
            </summary>
            <param name="xGibI">Reference to horizontal gib velocity, modified for plasma deaths</param>
            <param name="yGibI">Reference to vertical gib velocity, modified for plasma deaths</param>
            <returns>True if plasma death effects were triggered, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.CreateGibEffects(DamageType,System.Single,System.Single)">
            <summary>
            Creates appropriate visual effects when the character is gibbed based on damage type. Crush
            damage creates a spread pattern, OutOfBounds uses larger spread, and BittenBySandworm
            creates directional effects. Generates frozen particles if the character was frozen, plays
            gib sounds, and sprays blood effects.
            </summary>
            <param name="damageType">Type of damage determining the gib effect pattern</param>
            <param name="xI">Base horizontal velocity for effects</param>
            <param name="yI">Base vertical velocity for effects</param>
        </member>

        <member name="M:TestVanDammeAnim.CreateGibs(System.Single,System.Single)">
            <summary>
            Default gib creation method that generates standard gib pieces with velocity. Uses the
            character's material for gib textures and applies an upward bias to gib velocity for more
            dramatic effect.
            </summary>
            <param name="xI">Horizontal velocity for gib pieces</param>
            <param name="yI">Vertical velocity for gib pieces</param>
        </member>

        <member name="M:TestVanDammeAnim.Damage(System.Int32,DamageType,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour,System.Single,System.Single)">
            <summary>
            Core damage handling method that processes all incoming damage to the character. Handles
            special cases like inseminator unit redirection, parachute destruction (grants 1.33s
            invulnerability), instant-gib damage types, acid coverage, skeleton creation, and damage
            reduction based on game mode. Creates appropriate visual effects (blood, impact effects) and
            manages death state including revival mechanics. Triggers death sequence if health drops
            below zero.
            </summary>
            <param name="damage">Amount of damage to apply</param>
            <param name="damageType">Type of damage being applied (affects reactions and effects)</param>
            <param name="xI">Horizontal impulse force from damage</param>
            <param name="yI">Vertical impulse force from damage</param>
            <param name="direction">Direction of incoming damage (-1 left, 1 right)</param>
            <param name="damageSender">The MonoBehaviour that caused the damage (for kill tracking)</param>
            <param name="hitX">X coordinate where damage was applied</param>
            <param name="hitY">Y coordinate where damage was applied</param>
        </member>

        <member name="M:TestVanDammeAnim.DealWithBounce(DamageType@,System.Int32@)">
            <summary>
            Handles bounce damage differently based on whether the unit is a player or enemy. For
            players in non-competitive modes, nullifies all damage and applies a 0.25 second blind
            effect instead. For enemies or players in DeathMatch/BroDown modes, changes the damage type
            to Crush.
            </summary>
            <param name="damageType">Reference to the damage type, may be changed to Crush</param>
            <param name="damage">Reference to the damage amount, set to 0 for players in non-competitive
        modes</param>
        </member>

        <member name="M:TestVanDammeAnim.Death(System.Single,System.Single,DamageObject)">
            <summary>
            Handles the complete character death sequence. Cancels active melee attacks, deactivates
            parachute, stops network syncing, clears revival sources, stops player UI bubbles, reports
            kills for scoring, reduces lives if applicable, applies death velocity modifications,
            deactivates weapons, creates blood effects, releases held objects, disables collision, and
            saves death GIFs for player characters. This is the main death orchestration method.
            </summary>
            <param name="xI">Horizontal velocity to apply on death</param>
            <param name="yI">Vertical velocity to apply on death</param>
            <param name="damage">DamageObject containing information about what killed the character</param>
        </member>

        <member name="M:TestVanDammeAnim.DestroyRemoteProjectile">
            <summary>
            Destroys a remotely controlled projectile. Clears controlling flag and calls Death() on the
            projectile.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.FallDamage(System.Single)">
            <summary>
            Virtual method for handling fall damage based on fall velocity. Empty implementation for
            subclasses to calculate and apply fall damage.
            </summary>
            <param name="yI">The vertical velocity at impact</param>
        </member>

        <member name="M:TestVanDammeAnim.FindNearbyMook">
            <summary>
            Searches for a nearby mook that can be interacted with. Prioritizes skinned mook on the
            player's back, otherwise searches for mooks within 30 unit radius behind the player.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.FireWeapon(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fires weapon projectile at specified position and velocity. Sets gun animation frame,
            creates muzzle flash, spawns projectile, and triggers fire events.
            </summary>
            <param name="x">X position for projectile spawn</param>
            <param name="y">Y position for projectile spawn</param>
            <param name="xSpeed">X velocity for projectile</param>
            <param name="ySpeed">Y velocity for projectile</param>
        </member>

        <member name="M:TestVanDammeAnim.Gib(DamageType,System.Single,System.Single)">
            <summary>
            Destroys the character into gibs (gore pieces) if gibbing is allowed. Releases held objects,
            sets appropriate death type, creates gib visual effects, sends network RPC to synchronize
            gibbing, saves death GIFs for heroes, handles special plasma death effects, and disconnects
            any attached face huggers.
            </summary>
            <param name="damageType">Type of damage that caused the gibbing</param>
            <param name="xI">Horizontal velocity for gib pieces</param>
            <param name="yI">Vertical velocity for gib pieces</param>
        </member>

        <member name="M:TestVanDammeAnim.GibRPC(DamageType,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Network RPC handler for synchronizing gibbing across all connected players. Updates the
            character position for out-of-bounds deaths and calls the local Gib method to ensure
            consistent visual effects across the network.
            </summary>
            <param name="damageType">Type of damage that caused the gibbing</param>
            <param name="xI">Horizontal velocity for gib pieces</param>
            <param name="yI">Vertical velocity for gib pieces</param>
            <param name="_x">X position for out-of-bounds gibbing</param>
            <param name="_y">Y position for out-of-bounds gibbing</param>
        </member>

        <member name="M:TestVanDammeAnim.IsLockedInMelee">
            <summary>
            Checks if character is locked in melee animation. Used to prevent other actions during melee
            attacks.
            </summary>
            <returns>True if doing melee and cannot do independent animations, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.Knock(DamageType,System.Single,System.Single,System.Boolean)">
            <summary>
            Applies knockback force to the character from damage or explosions. Clears any impalement
            state and ignores knockback if frozen. Applies half the horizontal knockback force and uses
            different vertical limits for heroes (300) versus enemies (400). Automatically deactivates
            parachute if knocked upward.
            </summary>
            <param name="damageType">Type of damage causing the knockback</param>
            <param name="xI">Horizontal knockback force (half is applied)</param>
            <param name="yI">Vertical knockback force</param>
            <param name="forceTumble">Whether to force the character into a tumbling state (currently
        unused)</param>
        </member>

        <member name="M:TestVanDammeAnim.KnockSimple(DamageObject)">
            <summary>
            Simplified knockback method using a DamageObject for consistent force application. Ignores
            knockback if frozen and applies blast forces with the same velocity clamping as SetVelocity
            method.
            </summary>
            <param name="damageObject">DamageObject containing knockback force information</param>
        </member>

        <member name="M:TestVanDammeAnim.ReleaseAlien(Mook,System.Single,System.Single,System.Boolean,System.Int32)">
            <summary>
            RPC method that handles alien release from chest bursting. Applies fire damage to spawned
            alien if specified.
            </summary>
            <param name="newAlien">The alien unit being released</param>
            <param name="xI">X velocity for alien spawn</param>
            <param name="yI">Y velocity for alien spawn</param>
            <param name="onFire">Whether the alien should be set on fire</param>
            <param name="seenPlayer">Index of player that witnessed the spawn</param>
        </member>

        <member name="M:TestVanDammeAnim.ReleaseGrenadeRPC(Grenade,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            RPC method for releasing grenades across network. Handles grenade physics and positioning.
            </summary>
            <param name="GrenadeToRelease">Grenade object to release</param>
            <param name="XI">X velocity for grenade</param>
            <param name="YI">Y velocity for grenade</param>
            <param name="X">X position for grenade release</param>
            <param name="Y">Y position for grenade release</param>
        </member>

        <member name="M:TestVanDammeAnim.ReleaseHeldObject(System.Boolean)">
            <summary>
            Releases currently held object (grenade or mook) with appropriate physics and networking.
            Handles both throwing and dropping scenarios.
            </summary>
            <param name="thrown">Whether object is being thrown (true) or dropped (false)</param>
        </member>

        <member name="M:TestVanDammeAnim.RunFiring">
            <summary>
            Main firing logic update that manages fire rate, delays, and weapon usage. Stops rolling
            when firing, handles fire counter and rate modifications, triggers the UseFire method,
            applies avatar effects, and clears gesture animations during combat.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunIndependentMeleeFrames">
            <summary>
            Virtual method for handling melee animation frames independently from main animation. Allows
            subclasses to implement custom melee animation logic.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunKnifeMeleeMovement">
            <summary>
            Handles movement physics during knife melee attacks with three distinct patterns. Old system
            applies simple gravity. Jumping melee applies falling gravity with speed clamping. Dashing
            melee uses frame-based movement: frames 0-1 stop movement, frames 2-3 dash horizontally
            (with target tracking if available), frames 4-5 reduce speed, frames 6+ apply only gravity.
            Quicksand disables horizontal movement.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunMelee">
            <summary>
            Executes melee attack behavior by delegating to RunKnifeMeleeMovement. Acts as the entry
            point for melee execution.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetMeleeType">
            <summary>
            Determines the type of melee attack (standing, jumping, or dashing) based on current
            character state. When using new knifing frames, checks if jumping, moving horizontally, or
            on ladder to set appropriate melee type.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetVelocity(DamageType,System.Single,System.Single,System.Single)">
            <summary>
            Sets character velocity from damage or explosion forces, adding to existing velocity rather
            than replacing it. Clamps horizontal velocity to ±200 and vertical velocity between -20000
            and 300 to prevent excessive speeds.
            </summary>
            <param name="damageType">Type of damage causing the velocity change</param>
            <param name="xI">Horizontal velocity to add</param>
            <param name="xIBlast">Additional horizontal blast force (currently same as xI)</param>
            <param name="yIBlast">Vertical blast force to add</param>
        </member>

        <member name="M:TestVanDammeAnim.SetupThrownMookVelocity(System.Single@,System.Single@)">
            <summary>
            Calculates output velocity for thrown mook objects. Sets X velocity to 210 units in facing
            direction plus 20% of current momentum, and Y velocity to 120 units upward plus 30% of
            current vertical momentum.
            </summary>
            <param name="XI">Output X velocity for thrown mook</param>
            <param name="YI">Output Y velocity for thrown mook</param>
        </member>

        <member name="M:TestVanDammeAnim.SpawnPrimaryProjectile(Projectile,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Spawns primary weapon projectile using the ProjectileController system with specified
            parameters.
            </summary>
            <param name="projectilePrefab">Projectile prefab to spawn</param>
            <param name="x">X position for projectile spawn</param>
            <param name="y">Y position for projectile spawn</param>
            <param name="xSpeed">X velocity for projectile</param>
            <param name="ySpeed">Y velocity for projectile</param>
            <returns>Spawned Projectile instance</returns>
        </member>

        <member name="M:TestVanDammeAnim.StartFiring">
            <summary>
            Initiates firing with rate control. Sets the fire counter based on fire rate: uses fireRate
            value for fast firing (rate &lt; 0.3f) or 0 for slower rates.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StartMelee">
            <summary>
            Virtual method for initiating melee attacks. Empty implementation serves as an override
            point for subclasses to implement melee attack logic.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StopFiring">
            <summary>
            Virtual method placeholder for stopping fire action. Empty in base class, allows subclasses
            to implement fire stopping behavior.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ThrowBackGrenade(Grenade)">
            <summary>
            Picks up and prepares to throw a grenade. Disables the grenade, parents it to the player,
            handles achievement tracking for player-thrown grenades, plays throw sound, and initiates
            throwing animation.
            </summary>
            <param name="grenade">The grenade object to pick up and throw</param>
        </member>

        <member name="M:TestVanDammeAnim.ThrowBackMook(Mook)">
            <summary>
            Picks up and prepares to throw a mook enemy. Sets the mook as being thrown, parents it to
            the player, plays heavy throw sound, and starts throwing animation with appropriate frame.
            </summary>
            <param name="mook">The mook object to pick up and throw</param>
        </member>

        <member name="M:TestVanDammeAnim.ThrowGrenade(Grenade,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Executes grenade throwing mechanics with specified position and velocity parameters.
            </summary>
            <param name="GrenadeToThrow">Grenade object to throw</param>
            <param name="XI">X velocity for grenade trajectory</param>
            <param name="YI">Y velocity for grenade trajectory</param>
            <param name="X">X position for grenade release</param>
            <param name="Y">Y position for grenade release</param>
        </member>

        <member name="M:TestVanDammeAnim.TriggerBroFireEvent">
            <summary>
            Triggers perk system fire event for hero characters to activate fire-related perks and
            bonuses.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.TriggerBroMeleeEvent">
            <summary>
            Triggers perk system melee event for hero characters to activate melee-related perks and
            bonuses.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.TriggerBroSpecialEvent">
            <summary>
            Triggers perk system special ability event for hero characters to activate special-related
            perks and bonuses.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.UseFire">
            <summary>
            Executes primary weapon firing sequence. Cancels melee if active, calculates projectile
            trajectory, spawns projectile, plays attack sound, and disturbs wildlife.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim._invulnerableTime">
            <summary>
            Remaining duration of invulnerability in seconds. Decremented each frame, providing
            temporary damage immunity. Commonly set after spawning (3 seconds) or parachute destruction
            (1.33 seconds). Visual feedback provided through flashing effect.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.addedDeathMatchScore">
            <summary>
            Flag preventing duplicate score additions in deathmatch game modes. Set to true after death
            score is recorded to ensure each death only counts once. Reset when the unit respawns for
            the next life.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canDoIndependentMeleeAnimation">
            <summary>
            Allows melee animations to play independently from movement animations. When true, melee
            attacks don't interrupt movement animations. Used by characters like IndianaBrones.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canGib">
            <summary>
            Determines if this character can be gibbed (exploded into pieces) when killed. Default true
            allows normal gibbing on death. Set to false for characters that should have death
            animations instead of exploding. Checked during death processing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.cancelMeleeOnChangeDirection">
            <summary>
            Stops melee attack when the character changes facing direction. Used by characters with
            directional melee attacks to ensure attacks match the intended direction.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.dashingMelee">
            <summary>
            Indicates the character is performing a melee attack while dashing. Set by SetMeleeType()
            when dashing, triggers special dash-melee animations and damage values.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.deadTimeCounter">
            <summary>
            Timer tracking how long the unit has been dead. Incremented each frame after death. Used for
            delayed effects like late gibbing, corpse removal, or preventing revival after extended
            death duration.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.disembowelHoldFrames">
            <summary>
            Frame counter for chainsaw disembowelment death animation. When greater than zero, holds the
            death animation at the current frame to show prolonged chainsaw damage. Creates dramatic
            pause during brutal chainsaw deaths.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.doingMelee">
            <summary>
            Indicates the character is currently performing a melee attack. Affects animation states and
            prevents certain other actions while active. Cleared when the melee attack completes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.fireCounter">
            <summary>
            Accumulates time to control automatic firing rate. When this counter exceeds fireRate, a
            shot is fired and the counter is decremented by fireRate. Initialized to 0.0667 to ensure
            immediate first shot capability.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.fireDelay">
            <summary>
            Delay in seconds before firing can begin. Prevents immediate firing in certain situations
            such as after spawning or switching weapons.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.fireRate">
            <summary>
            Time interval between automatic weapon shots in seconds. Default value of 0.0334 provides
            approximately 30 shots per second. Can be modified by power-ups through ValueOrchestrator.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.firedWhileInvulnerable">
            <summary>
            Tracks if the player fired weapons during invulnerability period. When true, immediately
            cancels invulnerability as a penalty for aggressive play during spawn protection. Encourages
            defensive play after respawning.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.gibThreshold">
            <summary>
            Health threshold below which the unit will gib instead of playing death animation (default
            -10). When health drops below this value from damage, the unit explodes into pieces. More
            negative values require more overkill damage to trigger gibbing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.gibs">
            <summary>
            Reference to the GibHolder containing gore particle prefabs for this character. Used when
            the unit is gibbed to spawn appropriate blood and body part effects. Each character can have
            unique gib sets for visual variety.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.hasPlayedMissSound">
            <summary>
            Prevents multiple miss sound effects from playing for a single melee attack. Reset when
            canceling melee or starting a new attack.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.heroThatKilledMeIndex">
            <summary>
            Player index of the hero that killed this unit (default -1 for no killer). Used for respawn
            positioning to place the unit near their killer. Also used for kill attribution in
            statistics and scoring systems.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.iDiedAtPosition">
            <summary>
            World position where this unit died (default Vector3.zero). Stored for respawn calculations
            and death statistics. Used with heroThatKilledMeIndex to determine optimal respawn location
            near the action.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.impaledByChainSaw">
            <summary>
            Flag indicating the unit was killed by chainsaw impalement. Currently not actively used in
            the codebase. May have been intended for special chainsaw death animations or to prevent
            certain post-death effects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.impalementCollider">
            <summary>
            GameObject reference to the collider used for impalement mechanics. Destroyed when cleanup
            is needed to prevent physics conflicts. Handles collision detection for impalement death
            scenarios.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.jumpingMelee">
            <summary>
            Indicates the character is performing a melee attack while jumping or airborne. Set by
            SetMeleeType() based on action state, determines aerial melee animations and physics.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastAlertTime">
            <summary>
            Tracks when the character last alerted nearby enemies. Prevents alert spam with minimum 0.07
            seconds between alerts. Only alerts when character is alive and not in stealth mode.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.meleeChosenUnit">
            <summary>
            Stores the target unit for melee attacks. Set when a valid melee target is found nearby and
            used to calculate movement toward the target during the melee animation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.meleeFollowUp">
            <summary>
            Indicates whether a melee combo or follow-up attack is allowed. Set to false in
            CancelMelee(), checked with dashingMelee to control combo behavior.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.meleeHasHit">
            <summary>
            Tracks whether the current melee attack has successfully connected with a target. Prevents
            multiple damage applications from a single melee attack.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.projectileTime">
            <summary>
            Cooldown timer preventing immediate detonation of remote projectiles after firing. Set to
            0.3 seconds when firing remote explosives. Prevents accidental self-destruction by requiring
            a brief delay before detonation is allowed.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.remoteCar">
            <summary>
            Reference to a remote control car currently being controlled by this character. When set,
            player input controls the car instead of the character. Provides reference for remote
            vehicle mechanics. Cleared when car is destroyed or control ends.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.remoteProjectile">
            <summary>
            Reference to a projectile currently under remote control by this character. When set,
            character can detonate or guide the projectile. Cleared when projectile is destroyed or
            control is released. Used for remote-controlled explosives gameplay.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.skinnedMookOnMyBack">
            <summary>
            Reference to a SkinnedMook enemy that has jumped onto this unit's back. When set, reduces
            movement speed by 50%, prevents dashing and wall climbing, and marks the unit as having
            "baggage". The attached enemy can be removed by melee attacks or death.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.specialCounter">
            <summary>
            Controls timing for special ability usage. Similar to fireCounter but for special attacks.
            Initialized to 0.0667 seconds.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.standingMelee">
            <summary>
            Indicates the character is performing a melee attack while standing or grounded. Set by
            SetMeleeType() based on action state, determines ground melee animations.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.willComeBackToLife">
            <summary>
            Indicates this unit will resurrect after death. When true, displays a halo effect above the
            corpse and prevents certain death cleanup operations. The resurrection occurs after
            willComebackToLifeTime expires.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.willComebackToLifeTime">
            <summary>
            Countdown timer in seconds until resurrection occurs. Set when unit dies with
            willComeBackToLife active. Decremented each frame while dead, triggering resurrection and
            full health restoration when reaching zero.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AddSpecialAmmo">
            <summary>
            Increases special ammunition by 1 if below maximum capacity and updates the HeroController
            with the new value.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AirDashDown">
            <summary>
            Initiates a downward slam air dash with an extended duration (5x normal), starting with a
            slight upward movement before transitioning to a powerful downward motion.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AirDashLeft">
            <summary>
            Initiates a leftward air dash with a two-phase execution: a charge-up delay followed by the
            actual dash. The dash grants brief invulnerability and enables downward dashing afterwards.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AirDashRight">
            <summary>
            Initiates a rightward air dash with a two-phase execution: a charge-up delay followed by the
            actual dash. The dash grants brief invulnerability and enables downward dashing afterwards.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AirDashUp">
            <summary>
            Performs an instant upward air dash without charge-up delay, launching the character upward
            with 150% jump force for a shorter duration than horizontal dashes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Airdash(System.Boolean)">
            <summary>
            Main air dash input handler that checks directional inputs and availability, then calls the
            appropriate directional dash method. Processes dashes in priority order: Right, Left, Down,
            Up.
            </summary>
            <param name="highFived">If true, allows horizontal dashes without requiring fresh directional
        input.</param>
        </member>

        <member name="M:TestVanDammeAnim.CanUseJetpack">
            <summary>
            Checks if the hero can use jetpack abilities. Base implementation returns false, override
            for jetpack-enabled heroes.
            </summary>
            <returns>True if jetpack can be used</returns>
        </member>

        <member name="M:TestVanDammeAnim.GetRemoteControlCar">
            <summary>
            Creates and assigns a remote control car to this unit. Only executes for the owning player,
            sets up networking RPCs for control. Applies initial knockback and sets fire delay to
            prevent immediate use.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.GetSpecialAmmo">
            <summary>
            Gets the current special ammunition count for this character.
            </summary>
            <returns>Current special ammunition amount</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsAmmoFull">
            <summary>
            Checks if special ammunition is at maximum capacity compared to the original special ammo
            limit.
            </summary>
            <returns>True if ammunition is at maximum, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.MustUsePockettedSpecialAmmo">
            <summary>
            Checks if pocketed special ammo must be used. Base implementation returns false, designed
            for override by characters with special ammo requirements.
            </summary>
            <returns>False in base implementation, can be overridden to return true when special ammo must
        be used</returns>
        </member>

        <member name="M:TestVanDammeAnim.PickupPockettableAmmo(PockettedSpecialAmmoType)">
            <summary>
            Handles picking up pocketable special ammunition. Virtual method intended for override by
            specific character implementations.
            </summary>
            <param name="ammoType">Type of pocketable ammo being picked up</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayAidDashSound">
            <summary>
            Virtual method for playing the air dash execution sound effect. Empty in base class,
            intended for override in derived classes. Note: Method name contains typo ("Aid" instead of
            "Air").
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayAirDashChargeUpSound">
            <summary>
            Virtual method for playing the air dash charge-up sound effect. Empty in base class,
            intended for override in derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ResetSpecialAmmo">
            <summary>
            Resets special ammunition to the original maximum amount and updates the HeroController with
            the new value.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunAirDashing">
            <summary>
            Central air dash controller that manages dash execution based on direction. Delegates to
            specific directional dash methods, counts down dash timer, and clamps velocities to normal
            ranges when dash completes. Special handling for upward dashes limits velocity to 80% jump
            force.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunDownwardDash">
            <summary>
            Executes downward slam dash with accelerating descent. Uses complex velocity calculation
            that accelerates downward movement, triggers sound and visual effects when reaching -50
            velocity threshold, and clamps final velocity between 1.25x max fall speed and 300 units.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunLeftAirDash">
            <summary>
            Executes leftward air dash with two-phase implementation. Delay phase: stops vertical
            movement and adds slight rightward anticipation movement. Dash phase: triggers animation
            change, plays dash sound, creates rightward poof effect, and calls SetAirDashLeftSpeed.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunRightAirDash">
            <summary>
            Executes rightward air dash with two-phase implementation. Delay phase: stops vertical
            movement and adds slight leftward anticipation movement. Dash phase: triggers animation
            change, plays dash sound, creates leftward poof effect, and calls SetAirDashRightSpeed.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunUpwardDash">
            <summary>
            Executes upward air dash immediately without delay phase. Resets jump timer, applies 150%
            jump force for strong upward boost, and zeroes horizontal movement.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetAirDashLeftSpeed">
            <summary>
            Sets velocity for leftward air dash execution. Zeroes vertical movement and sets horizontal
            velocity to -2.3x normal speed for fast leftward movement.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetAirDashRightSpeed">
            <summary>
            Sets velocity for rightward air dash execution. Zeroes vertical movement and sets horizontal
            velocity to 2.3x normal speed for fast rightward movement.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetAirdashAvailable">
            <summary>
            Resets all directional air dash availability flags to true, allowing the character to
            perform air dashes in all directions again.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetHeldObjectPos(System.Single,System.Single)">
            <summary>
            Positions held objects (grenades/mooks) relative to character with specified offset
            coordinates.
            </summary>
            <param name="xOffset">X offset from character position</param>
            <param name="yOffset">Y offset from character position</param>
        </member>

        <member name="M:TestVanDammeAnim.SetRemoteProjectile(Projectile)">
            <summary>
            Associates a remote-controlled projectile with this unit. Updates projectile time tracking
            and stores the projectile reference.
            </summary>
            <param name="p">The projectile to be remotely controlled</param>
        </member>

        <member name="M:TestVanDammeAnim.SetSpecialAmmoRPC(System.Int32)">
            <summary>
            Sets special ammunition amount via RPC for network synchronization and updates the
            HeroController.
            </summary>
            <param name="ammo">Amount of special ammunition to set</param>
        </member>

        <member name="M:TestVanDammeAnim.StartPockettedSpecial">
            <summary>
            Virtual method for initiating pocketed special ability. Empty in base class, designed for
            character-specific overrides to implement special weapon usage.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.UseJetpack">
            <summary>
            Activates jetpack thrust for vertical movement. Virtual method intended for override by
            jetpack-equipped heroes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.UsePockettedSpecial">
            <summary>
            Virtual method for using pocketed special abilities. Resets facing direction and can be
            overridden by derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.UseSpecial">
            <summary>
            Uses special ability (grenade throwing). Consumes special ammo, spawns grenade projectile
            with position-based trajectory, or flashes ammo indicator if depleted.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.UseSteroidsNetworked">
            <summary>
            Activates steroid power-up effects across the network. Virtual method intended for override
            by heroes with steroid abilities.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.UseSteroidsNetworkedForDuration(System.Single)">
            <summary>
            Activates steroid power-up effects for a specific duration across the network. Virtual
            method intended for override by heroes with timed steroid abilities.
            </summary>
            <param name="duration">Duration of the steroid effect in seconds</param>
        </member>

        <member name="P:TestVanDammeAnim.SpecialAmmo">
            <summary>
            Gets or sets the current special ammunition count. Setting this property synchronizes the
            value across all clients when the unit is owned by the local player.
            </summary>
            <value>The number of special ammunition units currently available.</value>
        </member>

        <member name="F:TestVanDammeAnim._specialAmmo">
            <summary>
            Current special ammunition count (backing field for SpecialAmmo property). Changes to this
            value are synchronized across the network via RPC calls.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.originalSpecialAmmo">
            <summary>
            Default and maximum special ammunition capacity. Typically set to 3 but can be overridden
            (e.g., 6 for certain game modes). Used to initialize special ammo on spawn and check if ammo
            is full.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.pressSpecialFacingDirection">
            <summary>
            Stores the character's facing direction when a special ability is activated. Used to lock
            facing direction during special abilities when turnAroundWhhileUsingSpecials is false. Reset
            when actions complete.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.specialGrenade">
            <summary>
            Reference to the grenade prefab spawned when using special abilities. Different throwing
            trajectories are used based on whether the character is ducking or standing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.turnAroundWhhileUsingSpecials">
            <summary>
            Controls whether the character can change facing direction while using special abilities.
            When false, the character's facing is locked to the direction they were facing when the
            special was activated. Defaults to true.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.usingPockettedSpecial">
            <summary>
            Indicates the character is using a stored or pocketed special ability. Often set and cleared
            together with the main usingSpecial flag and affects animation states.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.usingSpecial">
            <summary>
            Indicates the character is currently performing a special ability animation. Set true when
            special is pressed, false when animation completes or is interrupted by acid/remote control.
            Takes priority in animation selection.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.usingSpecial2">
            <summary>
            Secondary special ability input state, primarily used by AI enemies. Checked as part of the
            IsUsingSpecial condition for determining if any special ability is active.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.usingSpecial3">
            <summary>
            Tertiary special ability input state, primarily used by AI enemies. Part of the
            multi-special ability system that allows AI to have different special attacks.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.usingSpecial4">
            <summary>
            Quaternary special ability input state, primarily used by AI enemies. Provides a fourth
            special ability option for complex AI behavior patterns.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasUsingSpecial">
            <summary>
            Previous frame's primary special ability state. Used for edge detection to determine when
            special abilities are first activated.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasUsingSpecial2">
            <summary>
            Previous frame's secondary special ability state. Used for edge detection of AI special
            ability inputs.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasUsingSpecial3">
            <summary>
            Previous frame's tertiary special ability state. Used for edge detection of AI special
            ability inputs.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasUsingSpecial4">
            <summary>
            Previous frame's quaternary special ability state. Used for edge detection to trigger AI
            special abilities on button press.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AddParentedDiff(System.Single,System.Single)">
            <summary>
            Adds positional differences to the character's coordinates based on parent movement, with
            special handling for different parent types.
            </summary>
            <param name="xDiff">The horizontal position difference to apply.</param>
            <param name="yDiff">The vertical position difference to apply.</param>
        </member>

        <member name="M:TestVanDammeAnim.AddSpeedLeft">
            <summary>
            Accelerates the character leftward with speed limits and multipliers based on movement
            state. Base acceleration is 2x, dashing provides 4x, and parachute reduces speed by 50%.
            Includes an extra 2.6x boost when below maximum speed.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AddSpeedRight">
            <summary>
            Accelerates the character rightward with speed limits and multipliers based on movement
            state. Base acceleration is 2x, dashing provides 4x, and parachute reduces speed by 50%.
            Includes an extra 2.6x boost when below maximum speed.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AirJump">
            <summary>
            Virtual method placeholder for air jump/double jump mechanics. Empty in base class, allows
            subclasses to implement air jumping behavior.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ApplyFallingGravity">
            <summary>
            Orchestrates gravity application based on character state, delegating to specialized gravity
            methods for parachute, quicksand, or normal conditions.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ApplyNormalGravity">
            <summary>
            Applies standard gravity with modifiers for fluid submersion and high-five boost effects.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ApplyQuicksandGravity">
            <summary>
            Applies special gravity behavior in quicksand, clamping velocities and creating a floating
            effect with different sink rates for alive versus dead characters.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AssignGroundTransform(UnityEngine.Transform)">
            <summary>
            Assigns and tracks the transform of the ground or platform the character is standing on.
            Stores local position offset for proper movement synchronization with moving platforms.
            Handles special notifications for blocks when being stood on.
            </summary>
            <param name="gTransform">The ground transform to assign as the current standing surface</param>
        </member>

        <member name="M:TestVanDammeAnim.AssignParentedPos">
            <summary>
            Stores the current position relative to the parent transform for tracking movement between
            frames.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AssignWallTransform(UnityEngine.Transform)">
            <summary>
            Assigns the wall transform for wall climbing mechanics. Stores the wall reference and
            calculates the character's local position relative to the wall for proper climbing movement.
            </summary>
            <param name="wTransform">The wall transform to assign for climbing</param>
        </member>

        <member name="M:TestVanDammeAnim.AttachToZipline(ZipLine)">
            <summary>
            Attaches character to zipline for transportation. Sets zipline state and disables normal
            movement controls.
            </summary>
            <param name="zipLine">ZipLine object to attach to</param>
        </member>

        <member name="M:TestVanDammeAnim.CalculateCollumnRowFromTransform">
            <summary>
            Updates the unit's grid position based on its transform position. Sets X and Y from
            transform and recalculates grid coordinates.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CalculateGridPosition">
            <summary>
            Converts world position to grid coordinates for tile-based game mechanics. Updates the
            character's row and column values based on 16-unit grid size.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CalculateGroundHeight">
            <summary>
            Updates the ground height for the character by calling GetGroundHeightGround to perform
            ground detection calculations.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CalculateMovement">
            <summary>
            Core movement calculation method that processes all character input and physics. Handles
            wind effects, sandstorm damage, firing input, dash detection, directional movement with
            double-tap dash triggers, air dashes during high-five holds, action state transitions, edge
            slip prevention, down input processing with parachute deactivation, and comprehensive jump
            mechanics including wall jumps, quicksand jumps, wall climbing initiation, and air jump
            grace periods.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CanAirDash(DirectionEnum)">
            <summary>
            Determines if character can perform air dash in specified direction based on character state
            and directional availability. Returns true if character can air dash or is on ground, false
            if dead, acid-covered, or direction unavailable.
            </summary>
            <param name="direction">Direction to check for air dash availability (Up, Down, Left, Right)</param>
            <returns>True if air dash is possible in the specified direction, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.CanBeAffectedByWind">
            <summary>
            Determines if character can be affected by wind effects. Returns false during chimney flip
            to prevent wind interference with the maneuver.
            </summary>
            <returns>True if character can be affected by wind, false during chimney flip</returns>
        </member>

        <member name="M:TestVanDammeAnim.CanJumpOffGround">
            <summary>
            Determines if character can jump from current ground position by checking for solid ground
            contact with wall collision considerations. Accounts for directional movement restrictions
            and quicksand movement penalties.
            </summary>
            <returns>True if character can jump from current position, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.CanTouchGround(System.Single)">
            <summary>
            Checks if the character can touch ground using multiple raycasts at different positions.
            Performs up to 4 raycasts for regular ground and 4 additional raycasts for ladders if
            applicable.
            </summary>
            <param name="xOffset">Horizontal offset for additional raycast checks.</param>
            <returns>True if any raycast hits ground or ladder, false otherwise.</returns>
        </member>

        <member name="M:TestVanDammeAnim.CheckDucking">
            <summary>
            Advanced ducking logic that handles auto-ducking in tight spaces. Checks for ceiling and
            floor constraints, auto-ducks when running into low passages, and stops ducking when space
            becomes available.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ClampSpeedPressingLeft">
            <summary>
            Clamps horizontal velocity to -10 when pressing left without simultaneous right input to
            ensure responsive leftward movement initiation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ClampSpeedPressingRight">
            <summary>
            Clamps horizontal velocity to 10 when pressing right without simultaneous left input to
            ensure responsive rightward movement initiation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ClampWallDragYI(System.Single@)">
            <summary>
            Limits vertical velocity during wall dragging to control sliding speed. Prevents upward
            movement and clamps minimum falling speed to -40 units.
            </summary>
            <param name="yIT">Reference to vertical velocity to be clamped</param>
        </member>

        <member name="M:TestVanDammeAnim.ConstrainSpeedToSidesOfScreen">
            <summary>
            Enforces screen boundaries to prevent the character from moving outside the playable area,
            with special handling for repositioning fallen players.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.DontSlipOverEdges">
            <summary>
            Prevents heroes from accidentally falling off edges by detecting ground ahead and stopping
            movement. Uses raycast detection based on facing direction to check for ground at feet width
            distance, stopping rolling and zeroing velocity when edge detected.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.EvaluateIsJumping">
            <summary>
            Determines if the character should be in a jumping state by checking if they are more than
            0.1 units above the ground. Only evaluates when ground height is valid (not -100000).
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.GetFollowPosition">
            <summary>
            Returns the position for the camera to follow, accounting for parachute state. During
            parachute deployment, returns a position with temporary Y value to smooth camera movement.
            </summary>
            <returns>The world position the camera should follow</returns>
        </member>

        <member name="M:TestVanDammeAnim.GetGroundHeightGround">
            <summary>
            Calculates the ground height below the character using box casts and raycasts. Checks for
            both regular ground and ladders, updating ground references and footstep sound types based
            on what is detected.
            </summary>
            <returns>The highest ground point found, or -200f if no ground is detected.</returns>
        </member>

        <member name="M:TestVanDammeAnim.GetGroundLayer">
            <summary>
            Returns the appropriate layer mask for ground detection based on whether the player is
            holding down. When not holding down, includes platforms; when holding down, excludes
            platforms to allow dropping through.
            </summary>
            <returns>LayerMask combining ground, fragile, and optionally platform layers.</returns>
        </member>

        <member name="M:TestVanDammeAnim.GetParentedToPos">
            <summary>
            Calculates the character's position relative to their parent transform, used for maintaining
            relative positioning on moving platforms.
            </summary>
            <returns>The character's position in parent transform space, or world position if not
        parented.</returns>
        </member>

        <member name="M:TestVanDammeAnim.GetParentedToTransform">
            <summary>
            Returns the current parent transform in order of priority: impaled transform, wall climb
            transform, or ground transform.
            </summary>
            <returns>The active parent transform, or null if not parented to anything.</returns>
        </member>

        <member name="M:TestVanDammeAnim.HitLeftWall">
            <summary>
            Virtual method called when character collides with left wall. Empty implementation that can
            be overridden by derived classes for wall collision handling.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.HitRightWall">
            <summary>
            Virtual method called when character collides with right wall. Empty implementation that can
            be overridden by derived classes for wall collision handling.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.IsGroundBelow">
            <summary>
            Simple ground detection with fixed 5-unit range using two raycasts from left and right foot
            positions.
            </summary>
            <returns>True if either foot detects ground within 5 units below.</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsGroundBelow(System.Single)">
            <summary>
            Parameterized ground detection with variable range using two raycasts from foot positions.
            </summary>
            <param name="maxDistance">Maximum distance to check for ground below the character.</param>
            <returns>True if either foot detects ground within the specified distance.</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsGroundBelowAtXOffset(System.Single,System.Boolean)">
            <summary>
            Ground detection at a specific horizontal offset from the character position, useful for
            checking ground ahead or behind.
            </summary>
            <param name="xOffset">Horizontal offset from character position to check.</param>
            <param name="includeLadders">Whether to include ladder detection in addition to ground.</param>
            <returns>True if ground (and optionally ladders) detected at the offset position.</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsNearGround(System.Single)">
            <summary>
            Checks if the character is within a specified distance from the ground.
            </summary>
            <param name="maxOffset">Maximum distance above ground to consider "near".</param>
            <returns>True if the character's Y position is below ground height plus the offset.</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsOilyBelow">
            <summary>
            Detects if there are oily surfaces beneath the character using two raycasts from foot
            positions. Checks 9 units down from Y+4 position with foot spread of 4 units.
            </summary>
            <returns>True if either foot position detects an oily block below.</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsOnGround">
            <summary>
            Determines if the character is standing on ground by checking if Y position is within 0.5
            units above ground height and vertical velocity is not positive.
            </summary>
            <returns>True if the character is on ground, false otherwise.</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsWallInFront(System.Single)">
            <summary>
            Detects if there's a wall in front of the character at waist height using raycasting. Used
            for wall detection in movement and climbing systems.
            </summary>
            <param name="distance">The distance to check for walls</param>
            <returns>True if a wall is detected within the specified distance</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsWallInFrontOfHead(System.Single)">
            <summary>
            Detects if there's a wall at head height (Y position + 17 units) using raycasting. Used to
            prevent movement into walls at head level.
            </summary>
            <param name="distance">The distance to check for walls</param>
            <returns>True if a wall is detected at head height within the specified distance</returns>
        </member>

        <member name="M:TestVanDammeAnim.Jump(System.Boolean)">
            <summary>
            Handles all jump mechanics including wall jumps, grace jumping, and special surface
            interactions. Adjusts jump force based on surface type (barbed wire reduces to 80%, bouncy
            blocks increase to 190%) and inherits velocity from moving platforms.
            </summary>
            <param name="wallJump">If true, performs a wall jump with horizontal velocity reset and climb
        sound/animation.</param>
        </member>

        <member name="M:TestVanDammeAnim.NotPressingJump">
            <summary>
            Processes jump button release by disabling wall climbing state when jump is not being
            pressed.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.OpenParachute">
            <summary>
            Activates the parachute if not already active. Sets the IsParachuteActive flag to true.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ParachuteLandedOn">
            <summary>
            Called when another object lands on this unit's parachute. Virtual method intended for
            override by specific implementations.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PressDown">
            <summary>
            Handles down button press input by recording the tap time for potential down-based actions.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RaycastGroundSingleSquare(UnityEngine.Vector3)">
            <summary>
            Helper method that performs a single raycast for ground detection. Casts from 8 units above
            character position with 12 unit ray length.
            </summary>
            <param name="direction">The direction to cast the ray (typically Vector3.down)</param>
            <returns>True if ground is detected within range, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.ResetToOriginalJumpForce">
            <summary>
            Restores the original jump force and clears the attack jump force timer if previously
            modified.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunAirFriction">
            <summary>
            Virtual method placeholder for air friction. Empty in base class, allows subclasses to
            implement air resistance.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunCheckHanging">
            <summary>
            Detects if character can hang from ceiling using upward raycasts. Requires 0.8 seconds after
            jump, appropriate directional conditions, and ceiling detection within range. Sets vertical
            velocity based on ceiling distance and tracks interactive ceiling objects.
            </summary>
            <returns>True if hanging conditions are met and ceiling is detected.</returns>
        </member>

        <member name="M:TestVanDammeAnim.RunDeadGravity">
            <summary>
            Applies physics when character is dead. In air: applies gravity or quicksand gravity unless
            impaled, triggers falling animation at -50 velocity. On ground: applies friction using 10x
            friction multiplier.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunFallen">
            <summary>
            Virtual method placeholder for post-fall state behavior. Empty in base class, allows
            subclasses to implement custom fallen state logic.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunFalling">
            <summary>
            Virtual method placeholder for falling state behavior. Empty in base class, allows
            subclasses to implement custom falling logic.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunGroundFriction">
            <summary>
            Applies friction when character is on ground and idle. Normal friction rapidly decelerates
            at 25x rate, while rolling friction is slower at 5x rate.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunHanging">
            <summary>
            Manages movement and physics while hanging from ceiling. Provides slight upward movement
            with up/jump input, applies horizontal speed clamping based on animation frame, increases
            friction when not moving, and continuously checks for ceiling presence. Automatically stops
            hanging when ceiling is lost or down is pressed.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunImpaledMovement">
            <summary>
            Handles movement constraints when the character is impaled by an object. Checks if the
            impaling object still exists, manages blood effects, and evaluates if the character should
            remain in the impaled state.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunMovement">
            <summary>
            Central movement processing hub that orchestrates all character movement based on action
            state. Handles dead state physics with quicksand damping, ladder and zipline mechanics, jump
            timing and gravity application, water physics damping, comprehensive collision detection for
            walls/ceilings/floors, out-of-bounds death triggers, and frame-based movement calculations.
            This is the core method that drives all character physics and movement.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunStrungByPredabroMovement">
            <summary>
            Handles special movement when the character is caught by a Predabro enemy. Positions the
            character below the predabro with a -24 Y offset (additional -5 for MookBigGuy) and zeros
            out velocity while caught.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetActionStateToJumping(System.Boolean)">
            <summary>
            Changes the character's action state to jumping with health validation. Normal mode requires
            positive health and not already jumping. Updates animation frame unless using special
            ability.
            </summary>
            <param name="forced">If true, bypasses the check for already being in jump state (but still
        requires health &gt; 0).</param>
        </member>

        <member name="M:TestVanDammeAnim.SetActionstateToIdle">
            <summary>
            Sets the character's action state to idle. Simple state transition method that can be
            overridden by derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetCanParachute(System.Boolean)">
            <summary>
            Enables or disables parachute capability with appropriate delay setup. When enabling, stores
            camera Y position and sets delay (0.15s for players, 0.6s for NPCs). When disabling,
            deactivates the parachute.
            </summary>
            <param name="canParachute">Whether parachute use is allowed</param>
        </member>

        <member name="M:TestVanDammeAnim.SetParachuteDelay(System.Single)">
            <summary>
            Sets the delay before the parachute can be deployed. Used to prevent immediate parachute use
            after certain actions.
            </summary>
            <param name="time">Delay in seconds before parachute can be used</param>
        </member>

        <member name="M:TestVanDammeAnim.SetPositionAndVelocity(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the position and velocity of TestVanDammeAnim with teleportation handling. If the
            distance change exceeds 6 units, directly sets position to prevent large jumps.
            </summary>
            <param name="newX">New X coordinate position</param>
            <param name="newY">New Y coordinate position</param>
            <param name="xi">X velocity component</param>
            <param name="yi">Y velocity component</param>
        </member>

        <member name="M:TestVanDammeAnim.ShiftUnitWithParent">
            <summary>
            Updates the character's position based on parent transform movement, applying the difference
            between frames.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StartDucking">
            <summary>
            Initiates ducking state and adjusts collision heights. Sets ducking flag, updates height
            values, cancels hanging state, and triggers animation update.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StopAirDashing">
            <summary>
            Cancels air dash state and resets related variables. Clears chimney flip animation frames
            and air dash timers.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StopDashing">
            <summary>
            Manages dash speed multiplier cleanup when ending dash sequences. Resets dash speed to 1.0
            for grounded characters while preserving last dash speed for airborne characters to maintain
            momentum.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StopDucking">
            <summary>
            Exits ducking state if conditions allow. Checks if player is still holding down while
            standing still and restores standing height values.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.TeleportOnScreenCounter(System.Int32)">
            <summary>
            Sets a delay counter for teleporting the hero back on screen when they fall below the
            visible area. Used to give a grace period before forcibly bringing off-screen players back
            into play.
            </summary>
            <param name="delay">Number of frames to wait before teleporting back on screen</param>
        </member>

        <member name="M:TestVanDammeAnim.Tumble">
            <summary>
            Virtual method placeholder for tumble mechanics. Empty in base class, allows subclasses to
            implement tumbling behavior.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.UseAttackJumpForceForSeconds(System.Single)">
            <summary>
            Temporarily increases jump force to attack jump force for a specified duration. Stores
            original jump force for restoration.
            </summary>
            <param name="seconds">Duration in seconds to use the enhanced jump force</param>
        </member>

        <member name="P:TestVanDammeAnim.GetSpeed">
            <summary>
            Gets the effective movement speed considering all active modifiers and environmental
            effects. Speed is reduced by 50% when surrounded by barbed wire.
            </summary>
            <value>The calculated movement speed including ValueOrchestrator modifiers and environmental
        penalties.</value>
        </member>

        <member name="P:TestVanDammeAnim.IsStandingStill">
            <summary>
            Gets a value indicating whether the character is completely stationary. Returns true when
            the character is on the ground and both X and Y velocities are below 0.5.
            </summary>
            <value>true if the character is on ground and not moving; otherwise, false.</value>
        </member>

        <member name="P:TestVanDammeAnim.XY">
            <summary>
            Gets or sets the character's position as a Vector2. This override provides network
            synchronization hooks for the base class position property.
            </summary>
            <value>The character's X and Y coordinates in world space.</value>
        </member>

        <member name="P:TestVanDammeAnim.jumpForce">
            <summary>
            Gets or sets the force applied when the character jumps. This value can be temporarily
            modified for special attack jumps.
            </summary>
            <value>The upward force in physics units applied during jump actions.</value>
        </member>

        <member name="F:TestVanDammeAnim.GRAVITY">
            <summary>
            Standard gravity constant of 1100 units/second² used for character physics. Note: While
            defined as a constant, the codebase often uses the literal value 1100f instead of
            referencing this constant. Represents downward acceleration for all characters.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.JUMP_TIME">
            <summary>
            Duration in seconds that jump force is applied when the jump button is held. Default 0.123
            seconds allows for variable jump heights. Used to calculate upward velocity during jumps.
            Can be modified per-character for different jump behaviors.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim._jumpForce">
            <summary>
            Private backing field for the jumpForce property. Stores the base jump force value in units
            per second. Default value is 260.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.airDashDelay">
            <summary>
            Controls the delay/charge-up time before an air dash executes. Set to defaultAirdashDelay
            when initiating a dash and counts down during the charge phase. Provides invulnerability
            during the delay period.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.airdashDirection">
            <summary>
            Tracks which direction the current air dash is going. Can be Right, Left, Up, Down, or Any.
            Affects movement physics during the dash execution.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.airdashDownAvailable">
            <summary>
            Tracks if downward air dash is available. Set to true by SetAirdashAvailable and disabled
            after use. Downward dashes use a 5x duration multiplier for extended effect.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.airdashLeftAvailable">
            <summary>
            Tracks if leftward air dash is available. Set to true by SetAirdashAvailable and disabled
            after use to prevent repeated air dashes until landing or wall climbing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.airdashMaxTime">
            <summary>
            Maximum duration of an air dash in seconds. Base value of 0.5 seconds is multiplied by 0.8x
            for upward dashes (shorter) and 5x for downward dashes (longer slam).
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.airdashRightAvailable">
            <summary>
            Tracks if rightward air dash is available. Set to true by SetAirdashAvailable and disabled
            after use to create a one-dash-per-direction aerial movement system.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.airdashTime">
            <summary>
            Timer controlling air dash duration and availability. Set to airdashMaxTime when initiating
            dash and decrements each frame. Different dash types use different multipliers (up=0.8x,
            down=5x).
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.airdashUpAvailable">
            <summary>
            Tracks if upward air dash is available. Set to true by SetAirdashAvailable and disabled
            after use to prevent repeated air dashes in the same direction until reset.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.attackJumpForce">
            <summary>
            Alternative jump force used during attack moves. Applied temporarily via
            UseAttackJumpForceForSeconds method to create special attack jump mechanics.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.attackJumpForceSecondsRemaining">
            <summary>
            Timer for temporary jump force modifications during special attacks. While greater than or
            equal to 0, overrides normal jump force with attackJumpForce. Counts down each frame and
            resets to -1 when expired.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.belowScreenCounter">
            <summary>
            Timer tracking how long unit has been below screen bottom. Incremented when Y position is 30
            units below screenMinY. Triggers repositioning when exceeding 2 seconds.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.bouncyJumpMultiplyer">
            <summary>
            Multiplier constant (1.9x) intended for bouncy/spring jump mechanics. Currently defined but
            not actively used in TestVanDammeAnim. May be utilized by derived classes for special jump
            behaviors on trampolines or springs.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canAirdash">
            <summary>
            Master toggle for air dash ability. When true, allows the character to perform directional
            air dashes. Used by characters like Nebro, BroLee, and TheBrocketeer.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canCeilingHang">
            <summary>
            Allows the character to hang from ceilings. When true, enables hanging when near ceiling
            with up/jump input. Used by special characters like ScorpionBro.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canDash">
            <summary>
            Master toggle for dashing ability. Default is true. When false, prevents all dash moves and
            affects ladder climbing behavior (cannot climb ladders while dashing).
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canPushBlocks">
            <summary>
            Controls whether the character can push moveable blocks. Default is true. Only allows
            pushing when running or climbing ladders. Triggers Map.PushBlock when conditions are met.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canTouchCeiling">
            <summary>
            Controls whether unit can collide with ceilings. Set by ConstrainToCeiling method and
            affects wall drag behavior. Protected field for internal collision state.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canTouchLeftWalls">
            <summary>
            Allows or blocks collision with left walls. Public field for external collision control.
            Referenced in barbed wire collision checks.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canTouchRightWalls">
            <summary>
            Allows or blocks collision with right walls. Public field for external collision control.
            Works with canTouchLeftWalls for directional collision management.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canWallClimb">
            <summary>
            Determines if the character can climb walls. Default is true but can be disabled for certain
            character types. Also used by the AI pathfinding system to determine movement options.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.ceilingHeight">
            <summary>
            Height of ceiling above character. Updated by upward raycast checks from center and both
            sides. Default value of 1000 indicates no ceiling. Used for vertical space calculations and
            movement constraints.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.chimneyFlip">
            <summary>
            Indicates whether the player is currently performing a chimney flip wall-jump maneuver. Set
            to true when initiating the flip, false when animation completes or air dash stops.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.chimneyFlipConstrained">
            <summary>
            Determines whether horizontal movement is restricted during a chimney flip. When true,
            horizontal movement is limited unless up/jump is held.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.chimneyFlipDirection">
            <summary>
            Horizontal direction of chimney flip (-1 for left, 1 for right). Multiplied by 100 to set
            horizontal velocity during the flip maneuver.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.chimneyFlipFrames">
            <summary>
            Animation frame counter for chimney flip, starting at 11 and counting down to 0. Used to
            calculate animation frame (22 - chimneyFlipFrames) and control movement restrictions.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.constrainedLeft">
            <summary>
            Indicates collision with wall on left side during current frame. Set true when raycast
            detects left wall collision. Works with constrainedRight for full wall detection.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.constrainedRight">
            <summary>
            Indicates collision with wall on right side during current frame. Set true when raycast
            detects right wall collision. Used for ceiling hang transitions and wall interaction
            mechanics.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.dashSpeedM">
            <summary>
            Current air dash speed multiplier (default 1.0). Increased during air dashes to provide
            burst movement. Value changes dynamically during dash execution and returns to 1.0 when dash
            ends.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.dashTime">
            <summary>
            Timestamp marking when the current dash started. Set when initiating a dash after successful
            double-tap detection.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.dashing">
            <summary>
            Current dash state of the character. When true, applies dash speed multiplier and triggers
            dash animations.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.defaultAirdashDelay">
            <summary>
            The standard delay time in seconds before air dashes execute. Default value of 0.15 seconds
            provides consistency across different air dash types.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.delayedDashing">
            <summary>
            Handles dash continuation after landing from an aerial state. When true, allows dash to
            resume upon landing if conditions are met.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.doodadCurrentlyHangingFrom">
            <summary>
            Reference to the ceiling JiggleDoodad object the character is currently hanging from. Set
            when grabbing ceiling and used for physics interactions with environmental effects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.doubleJumpsLeft">
            <summary>
            Tracks remaining double jump charges. Always reset to 0 in the base implementation when
            landing, wall jumping, or entering various states. Actual double jump functionality appears
            to be implemented in derived classes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.downTapTime">
            <summary>
            Timestamp of the last down direction button press. Set in PressDown() method, potentially
            used for ground pound or slide mechanics.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.feetWidth">
            <summary>
            Width for foot collision detection in units. Default value of 4 used in ground detection
            raycasts. Adjusts based on movement direction for better platforming feel.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.frictionM">
            <summary>
            Ground friction multiplier affecting horizontal deceleration. Default value of 10. Applied
            as xI *= (1 - Clamp01(t * frictionM)) when on ground. Higher values create faster
            deceleration.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.graceJumping">
            <summary>
            Allows jump input buffering on bouncy blocks. Set to true when initiating jump and checked
            for bouncy block interactions to provide forgiving jump timing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.gravityWaterDanmping">
            <summary>
            Unused constant intended for water gravity damping (0.5f). Currently not referenced in the
            codebase. The actual water damping is handled by separate waterDampingX (0.95f) and
            waterDampingY (0.65f) fields.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.groundHeight">
            <summary>
            Current ground level below character. Updated by CalculateGroundHeight each frame. Core
            vertical reference point used for ground detection, fall damage calculations, and jumping
            mechanics.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.halfWidth">
            <summary>
            Half of unit's collision width in units. Default value of 6 used throughout for wall
            collision boundaries, ledge detection, and constraint calculations. Returned by HalfWidth
            property.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.hangGrace">
            <summary>
            Grace period timer that allows the player to grab onto ceilings within a short window after
            moving away from a climbable surface. Initialized to hangGraceTime (0.3f) when near ceilings
            while jumping. Counts down each frame.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.hangGraceTime">
            <summary>
            Grace period for hanging mechanics in seconds. Default value of 0.3 sets hangGrace timer
            when detecting hang points. Multiplied by 1.33x for upward hangs.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.hasDashedInAir">
            <summary>
            Tracks whether the player has already performed a dash while airborne in the current jump.
            Prevents multiple air dashes until landing, reset to false upon touching ground.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.jumpTime">
            <summary>
            Multi-purpose timer for jump-related mechanics. Set to 0.13 seconds at the start of a
            standard jump and controls jump boost duration. Also prevents wall climbing immediately
            after jumping. Different jump types use values between 0.03-0.07 seconds.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastCollumn">
            <summary>
            Previous grid column position. Field exists but usage not found in current implementation.
            Note: Field name contains spelling error ("Collumn" instead of "Column").
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastDashSpeedM">
            <summary>
            Previous frame's dash speed multiplier value. Used for smooth interpolation of dash speeds
            and to detect dash state changes. Helps create fluid dash animations and movement curves.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastJumpTime">
            <summary>
            Timestamp of most recent jump action. Used for various jump cooldowns: 0.08s minimum between
            jumps, 0.2s for wall jumps, and 0.3s for ceiling grab attempts.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastLandTime">
            <summary>
            Timestamp of the most recent ground landing. Used for "coyote time" or grace jumping,
            allowing jumps shortly after leaving a platform. Enables more forgiving platforming by
            permitting jumps within a small window after walking off ledges.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastParentPosition">
            <summary>
            Intended to store previous parent position. Field exists but is never used in current
            implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastParentWorldPos">
            <summary>
            Caches parent's world position for movement calculations. Used to calculate parentedDiff in
            ShiftUnitWithParent based on position changes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastParentedToTransform">
            <summary>
            Tracks previous parent transform for detecting parent changes. Used to apply momentum when
            switching parents or leaving a moving platform. Set to null in Initialize.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastRow">
            <summary>
            Previous grid row position. Field exists but usage not found in current implementation.
            Likely intended for grid-based movement tracking.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.ledgeGrapple">
            <summary>
            Indicates if the character is currently grabbing a ledge. Works with wasLedgeGrapple for
            state transition detection.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.ledgeOffsetY">
            <summary>
            Vertical offset applied when grabbing ledges. Used to calculate which animation frame to
            display during ledge grapple animations, with values typically ranging from 0 to 13.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.leftTapTime">
            <summary>
            Timestamp of the last left direction button press. Used with minDashTapTime to detect left
            double-tap for dashing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.maxFallSpeed">
            <summary>
            Terminal velocity limit for falling in units per second (default -400). Prevents
            acceleration beyond this speed when falling. Can be modified temporarily by abilities or
            environmental effects like fans or low gravity zones.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.maxWallClimbYI">
            <summary>
            Maximum upward velocity allowed when initiating wall climbing. Default value of 100 prevents
            climbing at high speeds. Different units may have different values (e.g., Alien: 250).
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.minDashTapTime">
            <summary>
            Maximum time window (0.33 seconds) between two directional taps to trigger a dash. If second
            tap occurs within this window, dash is initiated.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.noclipSpeed">
            <summary>
            Movement speed when in level editor noclip mode. Default value of 200 units per second. Only
            active when Map.isEditing and LevelEditorGUI.NoClip are true. Speed increases while moving
            up to +300/sec.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.oldJumpForce">
            <summary>
            Unused field that was likely intended to store the original jump force during temporary
            modifications. Initialized to -1 but never used in implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.originalMaxFallSpeed">
            <summary>
            Stores the default terminal velocity value (default -400). Used to restore normal falling
            physics after temporary modifications from abilities or effects. Ensures fall speed limits
            return to baseline after special states.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.parachuteTemporyPositionY">
            <summary>
            Smooth Y-position interpolation for parachute deployment visuals. Initialized to camera
            position when parachute activates and gradually moves up toward actual position at 250
            units/second. Creates smooth "pulling up" effect for attached visual elements.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.parentHasMovedTime">
            <summary>
            Timer tracking when parent object has moved. Set to 0.5 seconds when parent moves and
            affects wall drag mechanics while positive. Decrements by delta time in RunMovement.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.parentVelocityInheritM">
            <summary>
            Multiplier for inheriting velocity from parent objects. Default value of 1.0 applies full
            parent velocity. Used when unimpaling and in movement calculations. Reset to 1 after
            impalement ends.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.parentedDiff">
            <summary>
            Movement difference calculated when parented to moving objects. Applied to unit position and
            transfers momentum (adds to xIBlast/yI) when leaving parent.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.rightTapTime">
            <summary>
            Timestamp of the last right direction button press. Used with minDashTapTime to detect right
            double-tap for dashing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.rumbleAmountPerShot">
            <summary>
            Controller vibration intensity per shot fired. Default value of 0.3. Intended for gamepad
            feedback but not actively used in base implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.screenMaxX">
            <summary>
            Maximum X coordinate of current camera/screen boundary. Set via
            SetResolutionCamera.GetScreenExtents. Used for screen constraint checks and respawn
            positioning.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.screenMaxY">
            <summary>
            Maximum Y coordinate of current camera/screen boundary. Set via
            SetResolutionCamera.GetScreenExtents. Used for top-of-screen constraints in MapExtents mode.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.screenMinX">
            <summary>
            Minimum X coordinate of current camera/screen boundary. Set via
            SetResolutionCamera.GetScreenExtents. Used with screenMaxX to calculate screen center for
            respawning.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.screenMinY">
            <summary>
            Minimum Y coordinate of current camera/screen boundary. Set via
            SetResolutionCamera.GetScreenExtents. Used to detect when character falls below screen (with
            30 unit buffer).
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.specialAttackXIBoost">
            <summary>
            Horizontal velocity boost applied during special attacks. Added to total velocity
            calculation to provide special move momentum.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.specialAttackYIBoost">
            <summary>
            Vertical velocity boost applied during special attacks. Added to vertical velocity
            calculation to provide special move momentum.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.speed">
            <summary>
            Base horizontal movement speed in units per second (default 110). Core value used throughout
            movement calculations for walking and running. Modified by various factors like terrain,
            status effects, and attached enemies.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.standingHeadHeight">
            <summary>
            Default head height when standing in units. Default value of 18 sets initial headHeight and
            is restored when standing up from crouch.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useAttackJumpForceForAttack">
            <summary>
            Flag indicating if special attack jump force should be used for attacks. Checked by AI
            systems to determine attack behavior and triggers temporary jump force modification.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wallClimbing">
            <summary>
            Current wall climbing state flag. Set true when initiating wall climb. Affects movement
            physics, animations, and special moves like air dash. Reset when leaving walls or
            transitioning states.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wallClimbingWallTransform">
            <summary>
            Reference to wall being climbed. Set in AssignWallTransform when touching walls and used as
            part of the parenting system. Reset to null in ShiftUnitWithParent.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wallClimbingWallTransformLocalPos">
            <summary>
            Local position on wall for climbing calculations. Set using InverseTransformPoint in
            AssignWallTransform and returned by GetParentedToPos during wall climbing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wallDrag">
            <summary>
            Indicates if the character is sliding down a wall. When set to true, triggers wall drag
            audio loop and can initiate wall climbing if conditions are met. Automatically deactivates
            parachute when wall dragging begins.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wallDragTime">
            <summary>
            Timer controlling wall sliding effect when touching walls. Set to 0.2 seconds on wall
            contact and prevents downward movement while active. Creates a brief "stick" effect that
            slows descent along walls.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasConstrainedLeft">
            <summary>
            Previous frame's left wall collision state. Updated from constrainedLeft each frame. Used to
            detect wall release for state transitions.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasConstrainedRight">
            <summary>
            Previous frame's right wall collision state. Updated from constrainedRight each frame. Used
            to detect wall release for state transitions like ceiling hanging.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasDashing">
            <summary>
            Previous frame's dash state, used for state change detection. Compared with current dashing
            state to trigger dash start effects and sounds.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasLedgeGrapple">
            <summary>
            Previous frame's ledge grapple state. Used for edge detection to determine when ledge
            grabbing begins or ends.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasWallClimbing">
            <summary>
            Previous wall climbing state. Field exists but is never used in current implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasWallDragging">
            <summary>
            Previous frame's wall drag state for transition detection. Updated from wallDrag each frame.
            Used to detect wall drag state changes and prevents immediate re-grabbing of walls after
            release.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.waterDampingX">
            <summary>
            Horizontal movement damping factor when submerged in water. Default value of 0.95 multiplies
            xI and xIBlast velocities, creating water resistance.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.waterDampingY">
            <summary>
            Vertical movement damping factor when submerged in water. Default value of 0.65 multiplies
            yIT velocity, creating stronger vertical water resistance than horizontal.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.xIAttackExtra">
            <summary>
            Additional horizontal velocity during attack animations. Used by characters like BroLee for
            martial arts moves and BrocSnipes for sniper recoil. Reset to 0 after attacks complete.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.xIBlast">
            <summary>
            Horizontal knockback velocity component from explosions and impacts. Clamped to [-200, 200]
            range and affected by water damping. Adds to total velocity calculation without affecting
            base movement.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.xIT">
            <summary>
            Frame-interpolated horizontal movement distance. Calculated as (xI + xIBlast + xIAttackExtra
            + specialAttackXIBoost) * deltaTime. Modified by wall constraints and water damping. Reduced
            by 0.95x when carrying objects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.yIBlast">
            <summary>
            Vertical knockback velocity component from explosions. Set via SetVelocity method and added
            to vertical velocity with clamping. Creates upward or downward force from impacts.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.yIT">
            <summary>
            Frame-interpolated vertical movement distance. Calculated as (yI + specialAttackYIBoost) *
            deltaTime each frame. Modified by water damping, constraints, and traps. Represents actual
            vertical position change per frame.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateActualDuckingRunning">
            <summary>
            Specialized ducking run animation that uses an 8-frame cycle with foot effects every 4
            frames. Adjusts gun position to (2f, -1f) to accommodate ducking pose and includes
            submersion checks for particle effects.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateActualIdleDuckingFrames">
            <summary>
            Provides the base ducking idle animation with adjusted gun positioning. Similar to standing
            idle but uses a different frame and positions gun at offset (2f, -1f) to accommodate the
            ducking pose.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateActualIdleFrames">
            <summary>
            Provides the base standing idle animation when the character is not performing any special
            actions. Activates gun, sets frame rate to 0.0667f, and displays a static pose.
            Conditionally sets gun sprite based on firing state.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateActualJumpingDuckingFrames">
            <summary>
            Handles specific jumping animation frames when character is in ducking state during jump.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateActualJumpingFrames">
            <summary>
            Manages complex jumping animation frames based on vertical and horizontal velocity. Supports
            three distinct velocity states: fast rising (yI &gt; 20f), fast falling (yI &lt; -55f), and
            normal jumping. Includes gun positioning and frame validation with different animations for
            varying movement speeds.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateActualNewRunningFrames">
            <summary>
            Running animation with environmental responsiveness. Adjusts frame rate based on quicksand
            (3x slower) and barbed wire (2x slower) conditions. Generates foot particle effects every 4
            frames when not submerged and plays footstep sounds. Supports dash animation states.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateAirdash">
            <summary>
            Handles horizontal air dash animation with direction-based sprite selection and timing.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateAirdashDown">
            <summary>
            Handles downward air dash animation with specific sprite frames and timing.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateChimneyFlip">
            <summary>
            Handles chimney flip animation sequence for wall-to-wall traversal between narrow spaces.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateHanging">
            <summary>
            Handles hanging animation from ledges or ceilings with proper sprite positioning and timing.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateHighFiveHold">
            <summary>
            Handles animation for holding high-five gesture with proper timing and visual feedback.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateHighFiveRelease">
            <summary>
            Handles animation for releasing/completing high-five gesture with celebration effects.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateIdle">
            <summary>
            Main idle animation dispatcher that routes to specific animations based on character state.
            Implements a priority hierarchy system that handles ducking versus standing states
            separately. Routes to appropriate sub-animations including melee, high-five, special
            abilities, rolling, gestures, and dancing based on current character flags.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateImpaled">
            <summary>
            Handles impalement animation with different frames for living versus dead characters. Living
            characters use a clamped frame range, while dead characters or aliens use a specific static
            frame. Deactivates gun and resets sprite offset during impalement.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateImpaledByChainSaw">
            <summary>
            Sets a specific animation frame for chainsaw impalement death. Deactivates the gun and
            resets sprite offset. Simpler than regular impalement animation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateJumping">
            <summary>
            Handles jumping animation sequences including takeoff, flight, and landing preparation
            phases.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateLedgeGrapple">
            <summary>
            Handles ledge grappling animation with grabbing and climbing motion sequences.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateMelee">
            <summary>
            Virtual method for melee attack animation. Empty implementation that can be overridden by
            derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateOnBackOffUnit">
            <summary>
            Sets the sprite frame for when the character is backing away from another unit.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimatePockettedSpecial">
            <summary>
            Executes pocketed special ability animation sequence. Manages 10-frame animation cycle,
            triggers ability execution at frame 4, and handles gun deactivation/reactivation throughout
            the sequence.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimatePushing">
            <summary>
            Animates character pushing objects with specialized timing and gun orientation. Uses 3x
            slower frame rate than normal running, flips gun sprite horizontally (scale -1f on X-axis),
            and uses a specific sprite sheet row. Plays footstep sounds every 4 frames.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateRolling">
            <summary>
            Animates the rolling sequence using a countdown-based frame system. Sets frame rate to
            0.025f, deactivates the gun during rolling, and plays landing sound at frame 7 of the
            sequence.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateRunning">
            <summary>
            Main running animation dispatcher with comprehensive state priority system. Handles
            throwable objects, melee, special abilities, pushing, and rolling states. For base running,
            generates environmental effects including foot particles and sounds. Adapts frame rate for
            quicksand environments.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateSpecial">
            <summary>
            Handles special ability animation sequences. Manages timing, facing direction, and animation
            state for special moves.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateSpecial2">
            <summary>
            Virtual method for secondary special ability animation. Empty implementation that can be
            overridden by derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateSpecial3">
            <summary>
            Virtual method for tertiary special ability animation. Empty implementation that can be
            overridden by derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateSpecial4">
            <summary>
            Virtual method for quaternary special ability animation. Empty implementation that can be
            overridden by derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateStrungUpFrames">
            <summary>
            Sets the sprite animation frame for when the character is strung up or hanged. Displays a
            static death pose frame.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateThrowingHeldObject">
            <summary>
            Handles animation for throwing held objects like grenades or mooks. Sets throwing state and
            manages object release timing.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateZipline">
            <summary>
            Handles zipline traversal animation with movement-based sprite selection and timing.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CreateFaderTrailInstance">
            <summary>
            Creates a fading trail effect sprite at character's current position and rotation.
            Instantiates fader sprite prefab, matches character's scale and material properties, and
            configures sprite dimensions for trail visualization.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunGun">
            <summary>
            Updates gun animation by managing frame timing. Increments gun counter and decreases gun
            frame when not wall dragging, calling SetGunSprite to update visuals when frame changes
            occur.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetGunSprite(System.Int32,System.Int32)">
            <summary>
            Sets the gun sprite frame and row based on current character state. Uses special hanging
            frame offset when hanging, climbing one-armed, or on zipline.
            </summary>
            <param name="spriteFrame">The frame index for the gun sprite</param>
            <param name="spriteRow">The row index for the gun sprite sheet</param>
        </member>

        <member name="M:TestVanDammeAnim.SetSpriteOffset(System.Single,System.Single)">
            <summary>
            Sets sprite rendering offset for visual positioning adjustments during animations.
            </summary>
            <param name="xOffset">X coordinate offset for sprite positioning</param>
            <param name="yOffset">Y coordinate offset for sprite positioning</param>
        </member>

        <member name="P:TestVanDammeAnim.Renderer">
            <summary>
            Gets the MeshRenderer component attached to this GameObject. Uses lazy initialization to
            cache the component reference for performance.
            </summary>
            <value>The MeshRenderer component, cached after first access.</value>
        </member>

        <member name="P:TestVanDammeAnim.material">
            <summary>
            Gets or sets the shared material of the MeshRenderer. This property provides direct access
            to modify the character's visual appearance.
            </summary>
            <value>The shared Material used by the MeshRenderer component.</value>
        </member>

        <member name="F:TestVanDammeAnim._frozenGunMaterial">
            <summary>
            Cached material for frozen gun appearance. Currently not actively used in TestVanDammeAnim -
            the Freeze method creates materials directly. May be used by derived classes or reserved for
            optimization to avoid material creation during gameplay.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim._frozenMaterial">
            <summary>
            Cached material for frozen appearance. Currently not actively used in TestVanDammeAnim - the
            Freeze method creates materials directly. May be used by derived classes or reserved for
            optimization to avoid material creation during gameplay.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim._oilyGunMaterial">
            <summary>
            Cached material for oil-covered gun appearance. Applied alongside _oilyMaterial to ensure
            both character and weapon show oil coverage. Uses the same oil shader as character material
            for consistent visual effect.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim._oilyMaterial">
            <summary>
            Cached material for oil-covered appearance. Applied when the character is covered in oil,
            giving a dark, slick visual effect. Created on-demand using special oil shader with darkened
            color values for visual feedback of flammable state.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.blood">
            <summary>
            Array of blood shrapnel prefabs intended for visual effects. Currently unused in favor of
            EffectsController.CreateBloodParticles() which uses the bloodColor field instead. Likely
            reserved for custom blood particle effects in derived classes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.currentGesture">
            <summary>
            Tracks the current gesture animation being performed (salute, wave, flex, etc.). Set via
            SetGestureAnimation RPC method and used by AnimateGesture to display the appropriate
            animation frames. Gestures block movement when active and are primarily used for multiplayer
            emotes and character interactions.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.defaultMaterial">
            <summary>
            Stores the original material of the character sprite. Used as a reference to restore normal
            appearance after visual effects like freezing or oil coverage. Cached during initialization
            to ensure proper material restoration.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.frameRate">
            <summary>
            Animation frame playback rate in seconds per frame (default 0.0667, approximately 15 FPS).
            Controls the speed of sprite animations. Lower values create faster animations, higher
            values create slower animations.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.gunCounter">
            <summary>
            Animation timer for gun sprite updates. Increments by delta time and triggers frame updates
            every 0.0334 seconds, providing smooth gun animation at approximately 30 FPS.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.gunFrame">
            <summary>
            Tracks the current animation frame for weapon-related animations. Acts as a cooldown timer
            that prevents certain actions when greater than 0. Decremented during gun animation updates
            and initialized to 3 at start.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.gunMaterial">
            <summary>
            Stores the original material of the gun sprite. Used to restore normal gun appearance after
            visual effects. Cached separately from character material since gun may have different
            shader properties or textures.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.gunSprite">
            <summary>
            Sprite renderer component for the character's weapon. Updated independently from character
            sprite to show weapon animations and states.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.gunSpriteHangingFrame">
            <summary>
            Starting frame offset for gun animations when character is hanging or climbing. Default
            value of 6. Added to the base frame number to show different gun positions for hanging
            states.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.gunSpritePixelHeight">
            <summary>
            Height of each gun sprite frame in pixels. Default value of 32 pixels. Calculated from
            gunSprite.pixelDimensions.y and used for sprite sheet row calculations.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.gunSpritePixelWidth">
            <summary>
            Width of each gun sprite frame in pixels. Default value of 32 pixels. Used to calculate
            sprite sheet coordinates and passed to shaders for visual effects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.hangingOneArmed">
            <summary>
            Indicates whether the character is currently hanging from a ledge with one arm. Used by the
            animation system to display one-armed hanging sprites (row 11, frame 0) versus two-armed
            hanging. Set during ledge grapple mechanics.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.heroTrail">
            <summary>
            Active trail renderer that creates speed lines behind the hero during fast movement. Enabled
            when horizontal speed exceeds threshold and trail time dynamically adjusts between 0.1-0.4
            seconds based on movement speed. Disabled when speed drops or hero dies.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.heroTrailPrefab">
            <summary>
            Prefab reference for creating hero trail visual effects. Likely assigned in Unity editor and
            used as template for instantiating the heroTrail object. Part of the movement trail
            rendering system.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.instantiatedSkeleton">
            <summary>
            Holds the skeleton or corpse object created when the character dies. Used for managing death
            gibs and can be exploded when hit while melting.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.knifeHand">
            <summary>
            Alternates which hand is used for knife climbing animations. Incremented during climbing
            actions and used with modulo 2 to control left/right hand animations for wall climbing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastT">
            <summary>
            Time elapsed during the previous frame in seconds (default 0.1). Used for frame-independent
            animation timing and physics calculations. Helps smooth animations during variable frame
            rates.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.meltingSprite">
            <summary>
            Manages the visual effect when the character melts from acid damage. Set when the melting
            animation begins and checked to determine when the melting animation completes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.meshRenderer">
            <summary>
            Reference to the MeshRenderer component for 3D rendering. Rarely used directly in
            TestVanDammeAnim as characters primarily use sprite-based rendering. May be utilized by
            specific derived classes for special visual effects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.runningFrameRate">
            <summary>
            Base animation frame timing for running animations in seconds. Default value of 0.025
            seconds. Multiplied by 3 for slower animations in quicksand or other special states.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.sprite">
            <summary>
            Main SpriteSM component responsible for rendering the character sprite. Initialized from
            GetComponent in Awake and used extensively throughout animation methods to control sprite
            sheet navigation via SetLowerLeftPixel, texture updates, and visual effects like color
            changes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.spriteOffset">
            <summary>
            Stores the original sprite offset position from initialization. Used as the base reference
            point when applying temporary sprite position adjustments via SetSpriteOffset, allowing the
            sprite to return to its original position after effects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.spritePixelHeight">
            <summary>
            Height of each sprite frame in pixels on the sprite sheet. Initialized from
            sprite.pixelDimensions.y in Awake and used in SetLowerLeftPixel calculations to navigate
            sprite sheet rows during animation. Default value is 32 pixels.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.spritePixelWidth">
            <summary>
            Width of each sprite frame in pixels on the sprite sheet. Initialized from
            sprite.pixelDimensions.x in Awake and used in SetLowerLeftPixel calculations to navigate
            sprite sheet columns during animation. Default value is 32 pixels.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useDashFrames">
            <summary>
            Controls whether to use dash-specific animation frames. When true, uses row 8 frames 0-3 for
            horizontal dashing and row 9 frames 5-7 for vertical air dashing. Enables visual feedback
            for dash abilities when available.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useDuckingFrames">
            <summary>
            Controls whether to display ducking/crouching animation frames. When true (default), shows
            proper ducking sprites when character crouches. When false, character maintains standing
            sprite even while ducked, which can look incorrect but may be used for specific characters.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useLadderClimbingTransition">
            <summary>
            Enables smooth transition animations when mounting or dismounting ladders. When true, plays
            a transition animation for ladderClimbingTransitionFrames duration before normal climbing
            begins. Works with useNewLadderClimbingFrames for complete ladder animation control.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useNewDuckingFrames">
            <summary>
            Configuration toggle intended for switching between old and new ducking animation sets.
            Currently not actively used in the code but reserved for future animation system updates.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useNewFrames">
            <summary>
            Configuration toggle intended for using updated animation frames. Currently not actively
            used in the code but reserved for future general animation system updates.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useNewHighFivingFrames">
            <summary>
            Controls whether to use updated animation frames for high-five interactions. When true, uses
            frames 4-5 from row 1 of the sprite sheet for the high-five gesture. Set per-character to
            enable or disable the high-five animation system.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useNewKnifeClimbingFrames">
            <summary>
            Controls whether to use updated animation frames for knife wall climbing. When true, uses
            frames from row 5 of the sprite sheet instead of generic climbing frames. Set per-character
            in Unity Inspector to customize wall climbing animations.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useNewKnifingFrames">
            <summary>
            Toggle that switches between old and new melee/knifing animation sets. When enabled, uses
            different animation frames and movement patterns in AnimateMelee and RunMeleeMovement,
            affecting both the visual presentation and physics of melee attacks.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useNewLadderClimbingFrames">
            <summary>
            Controls whether to use updated animation frames for ladder climbing. When true, uses frames
            from row 4 of the sprite sheet instead of generic climbing frames. Set per-character to
            customize ladder climbing animations.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useNewLedgeGrappleFrames">
            <summary>
            Controls whether to use updated animation frames for ledge grappling. When true, uses frames
            from row 11 of the sprite sheet for the ledge hanging animation. Set per-character to enable
            new ledge grapple visuals.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useNewPushingFrames">
            <summary>
            Toggles between old and new pushing animation frames. When true, uses updated sprite frames
            for the block pushing animation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.useNewThrowingFrames">
            <summary>
            Toggle that switches between old and new throwing animation sets. When false, uses frames
            17-22 on row 1; when true, uses frames 17-24 on row 5. Affects both the throwing animation
            sequence and held object positioning during throws.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasHangingMoving">
            <summary>
            Tracks state change for hanging movement animations. Set to true when starting hanging
            movement and used to detect transition from moving to stationary while hanging.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.yScale">
            <summary>
            Maintains the vertical scale of the sprite (default 1.0). Preserved during direction changes
            to ensure consistent sprite appearance. Some derived classes may modify this for special
            visual effects like squashing or stretching animations.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AlertNearbyMooks">
            <summary>
            Alerts nearby enemy units to player presence within 8x8 unit area. Updates last alert time
            for tracking alert frequency.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateFrozen">
            <summary>
            Sets the visual appearance when the character is frozen. Deactivates the gun sprite and sets
            the character sprite to frame 11 (frozen pose) on the sprite sheet. This method is called by
            Freeze to establish the frozen visual state.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Blind(System.Single)">
            <summary>
            Stuns the character for a specified duration, applying a blindness effect that prevents all
            actions. In DeathMatch mode, heroes receive a 70% reduction in stun duration. Also
            calculates a vocal delay (0.2-0.7 seconds) for playing stun sound effects.
            </summary>
            <param name="time">Duration in seconds to remain stunned</param>
        </member>

        <member name="M:TestVanDammeAnim.Blind">
            <summary>
            Applies a default 3-second blind/stun effect to the character. Immediately stops all
            movement and sets the stun timer, with the same vocal delay calculation as the timed version
            for sound effects.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Boost(System.Single)">
            <summary>
            Applies temporary speed boost effect for specified duration.
            </summary>
            <param name="time">Duration of boost effect in seconds</param>
        </member>

        <member name="M:TestVanDammeAnim.BrosMustFailToWin">
            <summary>
            Marks a player unit as needing to fail for victory conditions. Only applies to
            player-controlled units and disables gibbing to ensure proper failure tracking.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CalculateZombieInput">
            <summary>
            Processes input for zombie units by copying control inputs from their revive source.
            Decrements zombie delay timer and explicitly disables special abilities for zombies.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CanBeThrown">
            <summary>
            Determines if the character can be thrown by other units. Characters that are heavy or
            currently impaled cannot be thrown.
            </summary>
            <returns>True if the character can be thrown, false if heavy or impaled</returns>
        </member>

        <member name="M:TestVanDammeAnim.CanFreeze">
            <summary>
            Checks if the hero can be affected by freeze effects. Base implementation always returns
            true, can be overridden for freeze-immune heroes.
            </summary>
            <returns>True if the hero can be frozen</returns>
        </member>

        <member name="M:TestVanDammeAnim.CheckDestroyed">
            <summary>
            Handles character destruction cleanup. Removes from map tracking, reduces lives if
            applicable, and triggers unit destruction.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckFacingDirection">
            <summary>
            Manages character facing direction based on movement, input, and special abilities. Prevents
            direction changes during chimney flips, air dashes, or when configured to maintain special
            facing direction.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckNotifyDeathType">
            <summary>
            Checks if enough time has passed since death to notify death type. Calls NotifyDeathType
            after 0.33 second delay.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CopyInput(TestVanDammeAnim,System.Single@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Copies control inputs from one unit to another, primarily used for zombie control. If the
            source is alive, copies all input states. If dead, sets all inputs to false.
            </summary>
            <param name="zombie">The source unit to copy inputs from</param>
            <param name="zombieDelay">Delay timer reference (not modified by this method)</param>
            <param name="up">Up input state to set</param>
            <param name="down">Down input state to set</param>
            <param name="left">Left input state to set</param>
            <param name="right">Right input state to set</param>
            <param name="fire">Fire input state to set</param>
            <param name="buttonJump">Jump input state to set</param>
            <param name="special">Special input state to set</param>
            <param name="highFive">High-five input state to set</param>
        </member>

        <member name="M:TestVanDammeAnim.CreateElectricShockPuff(System.Single)">
            <summary>
            Creates a visual electric shock effect at the hero's position. Adds random positioning
            offsets for variation and randomly flips the effect horizontally. Parents the effect to the
            hero's transform so it follows movement.
            </summary>
            <param name="yOffset">Vertical offset from the hero's position for the effect</param>
        </member>

        <member name="M:TestVanDammeAnim.CreateSkeleton">
            <summary>
            Creates appropriate skeleton prefab based on character type (BigGuy, HellLostSoul,
            Grenadier, etc.) for death/melting animations. Only creates if skeleton doesn't already
            exist.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Dance(System.Single)">
            <summary>
            Makes the character dance for the specified duration. Sets dance timer and applies a stun
            effect for the same duration to prevent movement during the dance.
            </summary>
            <param name="time">Duration of the dance in seconds</param>
        </member>

        <member name="M:TestVanDammeAnim.DelayedRevive(System.Single)">
            <summary>
            Handles delayed revival mechanics for the hero. Virtual method intended for override by
            specific revival implementations.
            </summary>
            <param name="delay">Time in seconds before revival occurs</param>
        </member>

        <member name="M:TestVanDammeAnim.DestroyUnit">
            <summary>
            Virtual method that destroys the game object. Can be overridden by derived classes for
            custom destruction behavior.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Disable">
            <summary>
            Disables the component to prevent updates and behavior. Sets the enabled state to false.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.FireFlashAvatar">
            <summary>
            Triggers the avatar firing flash effect with a short animation timer (0.04 seconds). Sets
            the avatar to fire state and applies controller rumble feedback for firing actions.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Freeze(System.Single)">
            <summary>
            Freezes the character with a frozen visual effect for a specified duration. Creates frozen
            materials using a special "Frozen" shader with blue tint (0.094f, 0.388f, 0.718f) and
            applies them to both character and gun sprites. The character is immobilized and plays a
            freeze scream sound effect while in this state.
            </summary>
            <param name="time">Duration in seconds to remain frozen</param>
        </member>

        <member name="M:TestVanDammeAnim.HideAndDisableCharacter">
            <summary>
            Completely hides and disables the character from gameplay. Disables rendering, main script,
            AI, and collision while setting invulnerability. Used for cutscenes or special game states.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Impale(UnityEngine.Transform,UnityEngine.Vector3,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Impales the character on a transform, drastically reducing movement capability while
            maintaining position constraints.
            </summary>
            <param name="impaleTransform">The transform to impale the character on.</param>
            <param name="direction">The direction of the impaling force.</param>
            <param name="damage">The amount of damage to apply.</param>
            <param name="xI">The horizontal velocity component.</param>
            <param name="yI">The vertical velocity component.</param>
            <param name="xOffset">Horizontal offset from the impale transform.</param>
            <param name="yOffset">Vertical offset from the impale transform.</param>
        </member>

        <member name="M:TestVanDammeAnim.IsExitingDoor">
            <summary>
            Checks if the character is currently exiting a door. Base implementation always returns
            false, intended for override by derived classes.
            </summary>
            <returns>True if exiting a door, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsFlexing">
            <summary>
            Checks if the hero is performing a flex gesture. Requires the unit to be a hero and
            currently in the Flex gesture state.
            </summary>
            <returns>True if the hero is flexing</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsHanging">
            <summary>
            Checks if the unit is currently in a hanging state. Returns true when actionState equals
            Hanging.
            </summary>
            <returns>True if the unit is hanging</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsInQuicksand">
            <summary>
            Checks if the hero is currently sinking in quicksand. Returns the current quicksand state
            tracked by the movement system.
            </summary>
            <returns>True if the hero is in quicksand</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsIncapacitated">
            <summary>
            Checks if the hero is currently stunned or frozen. Returns true if either stun time or
            frozen time is active.
            </summary>
            <returns>True if the hero cannot act due to stun or freeze</returns>
        </member>

        <member name="M:TestVanDammeAnim.Melt">
            <summary>
            Initiates melting animation sequence using character-specific melting prefabs. Sets melted
            state and creates appropriate melting effects for different enemy types and states.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.MustBroFailToWin">
            <summary>
            Checks whether this unit must fail for the victory condition to be met. Used in special game
            modes where player failure is the objective.
            </summary>
            <returns>True if this unit must fail for victory</returns>
        </member>

        <member name="M:TestVanDammeAnim.RecallBro">
            <summary>
            Handles character recall/respawn with visual fade effect. Switches to transparent shader,
            changes layer to Effects, removes from map tracking, and assigns to spectator player.
            Network RPC method that can be called remotely.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ReceiveHeroKillReport(KillData)">
            <summary>
            Receives notification when this hero kills another unit. Virtual method intended for
            override by specific hero implementations.
            </summary>
            <param name="killData">Data about the kill including victim and damage type</param>
        </member>

        <member name="M:TestVanDammeAnim.ReduceLives(System.Boolean)">
            <summary>
            Decrements player lives when the character dies. Only processes for the owning player,
            prevents double processing, and notifies HeroController of the death.
            </summary>
            <param name="destroyed">Whether the character was completely destroyed</param>
        </member>

        <member name="M:TestVanDammeAnim.Reenable">
            <summary>
            Re-enables the component after it has been disabled. Sets the enabled state to true.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ReplaceWithSkinnedInstance(Unit,System.Single,System.Single)">
            <summary>
            Replaces this unit instance with a skinned version, transferring all state and properties to
            the new instance.
            </summary>
            <param name="skinnedInstance">The skinned unit instance to replace this one with.</param>
            <param name="_x">The X position for the replacement unit.</param>
            <param name="_y">The Y position for the replacement unit.</param>
        </member>

        <member name="M:TestVanDammeAnim.RestartBubble">
            <summary>
            Restarts the player protection bubble display with default settings. Uses player options to
            determine if bubbles should always be shown and considers forced bros count for bubble
            visibility.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RestartBubble(System.Single)">
            <summary>
            Restarts the player protection bubble with a specified duration timer. Only functions in
            campaign mode and checks HUD visibility and chat state before displaying the bubble for the
            specific player number.
            </summary>
            <param name="time">Duration in seconds to display the protection bubble</param>
        </member>

        <member name="M:TestVanDammeAnim.Revive(System.Int32,System.Boolean,TestVanDammeAnim)">
            <summary>
            Revives a dead unit, either as a zombie or restoring a player character. Clears impalement
            state, creates revival effects, and assigns appropriate control. For players, reassigns
            character and adds life. For zombies, sets ownership to revive source.
            </summary>
            <param name="playerNum">Player number to assign if reviving as player (-1 for zombie)</param>
            <param name="isUnderPlayerControl">Whether the revived unit will be player-controlled</param>
            <param name="reviveSource">The unit that is reviving this character (for zombie control)</param>
            <returns>True if revival was successful</returns>
        </member>

        <member name="M:TestVanDammeAnim.RollOnto(System.Int32)">
            <summary>
            Applies knockback when another unit rolls onto this character. Uses the Knock method with
            horizontal force based on direction and fixed upward force.
            </summary>
            <param name="direction">Direction of the rolling impact (-1 left, 1 right)</param>
        </member>

        <member name="M:TestVanDammeAnim.RunAvatarFiring">
            <summary>
            Updates the avatar's firing animation state based on current fire input. Manages the avatar
            gun fire timer and switches between angry and calm states depending on whether the character
            is actively firing.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunAvatarRunning">
            <summary>
            Updates the avatar's running animation by creating a bouncing effect. The avatar moves up
            and down based on the current run animation frame, but only when the character is in the
            running state.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunImpaledBlood">
            <summary>
            Creates periodic blood particle effects when the character is impaled. Manages blood spurts
            with randomized timing, limits effects to 5 spurts maximum, and uses artery effects for
            dramatic visual impact.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunTrail">
            <summary>
            Manages the visual trail effect based on character movement speed. Enables trail when moving
            faster than 50% speed, with trail duration scaling from 0.1 to 0.4 seconds. Disables trail
            when dead or moving slowly.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetGibThreshold(System.Int32)">
            <summary>
            Sets the negative health threshold at which the hero will gib instead of normal death. Lower
            values require more extreme damage to trigger gibbing.
            </summary>
            <param name="newThreshold">The new gib threshold (typically negative)</param>
        </member>

        <member name="M:TestVanDammeAnim.SetImmuneToOutOfBounds">
            <summary>
            Makes the unit immune to death from going out of bounds. Used for special scenarios where
            units need to exist outside normal play area.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetInvulnerable(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Makes the character invulnerable to damage for the specified duration. Can optionally
            display a protection bubble and/or halo effect to indicate the invulnerable state.
            </summary>
            <param name="time">Duration of invulnerability in seconds</param>
            <param name="restartBubble">Whether to show the protection bubble (default true)</param>
            <param name="showHalo">Whether to show a halo effect (default false)</param>
        </member>

        <member name="M:TestVanDammeAnim.SetSpawnState(System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the initial spawn conditions for the hero including velocity and status effects.
            Network RPC method that can be called remotely to ensure consistent spawn state.
            </summary>
            <param name="_xI">Initial horizontal velocity</param>
            <param name="_yI">Initial vertical velocity</param>
            <param name="tumble">Whether to start in tumbling state</param>
            <param name="useParachuteDelay">Whether to apply parachute deployment delay</param>
            <param name="useParachute">Whether to spawn with parachute active</param>
            <param name="onFire">Whether to spawn on fire</param>
        </member>

        <member name="M:TestVanDammeAnim.SetWillComebackToLife(System.Single)">
            <summary>
            Marks the character to respawn after death with the specified comeback timer. Shows a halo
            effect if not already displayed to indicate the respawn state.
            </summary>
            <param name="time">Time in seconds before the character respawns</param>
        </member>

        <member name="M:TestVanDammeAnim.ShowAndEnableCharacter">
            <summary>
            Network wrapper for showing a hidden character. Checks ownership before sending RPC to show
            the character on all clients.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ShowCharacterInternal">
            <summary>
            Re-enables and shows a previously hidden character. Restores rendering, main script
            functionality, and grants 1 second of invulnerability. Network RPC method that can be called
            remotely.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SkinUnit">
            <summary>
            Converts this unit to a skinned variant if the player has an active skin and network
            ownership.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SprayBlood(System.Single,BloodColor)">
            <summary>
            Creates blood splatter effects on nearby surfaces using raycasts. Performs a raycast in a
            random direction from above the character and applies blood to hit blocks. Also triggers
            area blood effects through Map.BloodyDoodads.
            </summary>
            <param name="range">Maximum distance for blood spray raycasts</param>
            <param name="bloodColor">Color of the blood to spray</param>
        </member>

        <member name="M:TestVanDammeAnim.Stop">
            <summary>
            Immediately halts all character movement and actions. Clears all input flags, sets velocity
            to zero, resets melee states, and sets to idle if not dead.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StopBeingStunned">
            <summary>
            Virtual method for ending stun effects. Empty implementation that can be overridden by
            derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StopBubble">
            <summary>
            Stops the player protection bubble display for the specific player number (0-3). Used when
            invulnerability expires or when the bubble should be hidden.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Stun">
            <summary>
            Applies a stun effect with default duration of 0.33 seconds. Calls the overloaded Stun
            method with the default time value.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Stun(System.Single)">
            <summary>
            Applies a stun effect for the specified duration. Stops character movement, sets stun timer,
            resets blind counter if negative, and calculates vocal delay for stun sound effects based on
            duration.
            </summary>
            <param name="time">Duration of the stun effect in seconds</param>
        </member>

        <member name="M:TestVanDammeAnim.SuckIntoPortal">
            <summary>
            Handles the character being sucked into an exit portal with visual effects. Adds
            SpinAndScaleDown component for the portal animation, stops protection bubbles and syncing,
            and links the character to the exit portal instance. RPC-enabled for network
            synchronization.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.TempInvulnerability(System.Single)">
            <summary>
            Grants temporary invulnerability to TestVanDammeAnim for a specified duration. Sets
            invulnerable state and resets fired-while-invulnerable tracking.
            </summary>
            <param name="time">Duration of invulnerability in seconds. If 0 or negative, uses default
        duration of 1.2 times the current frame delta time (very brief)</param>
        </member>

        <member name="M:TestVanDammeAnim.TimeBroBoost(System.Single)">
            <summary>
            Applies time-based character boost effect for specified duration.
            </summary>
            <param name="time">Duration of time boost effect in seconds</param>
        </member>

        <member name="M:TestVanDammeAnim.UnFreeze">
            <summary>
            Removes the frozen state and restores the character's normal appearance. Resets the frozen
            timer to 0 and restores the default materials for both the character renderer and gun sprite
            (if present). This allows the character to resume normal movement and actions.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Unimpale(System.Int32,DamageType,System.Single,System.Single,UnityEngine.MonoBehaviour)">
            <summary>
            Removes the character from an impaled state, applying damage and velocity while clearing
            impalement constraints.
            </summary>
            <param name="damage">The amount of damage to apply when unimpaling.</param>
            <param name="damageType">The type of damage being applied.</param>
            <param name="xI">The horizontal velocity to apply after unimpaling.</param>
            <param name="yI">The vertical velocity to apply after unimpaling.</param>
            <param name="firedBy">The source that caused the unimpaling.</param>
        </member>

        <member name="M:TestVanDammeAnim.Unrevive">
            <summary>
            Forces the character to die after being revived. Deals crush damage equal to health+1 with
            knockback based on facing direction.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Unrevive">
            <summary>
            Forces the character to die after being revived. Deals crush damage equal to health+1 with
            knockback based on facing direction.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.WhereDidIDie">
            <summary>
            Returns the position where the hero died for respawn or tracking purposes. Returns the
            recorded death position if killed by another hero, otherwise returns current position.
            </summary>
            <returns>The world position where death occurred</returns>
        </member>

        <member name="M:TestVanDammeAnim.YouKilledMe(Unit)">
            <summary>
            Called when this hero kills another unit. Virtual method intended for override to handle
            kill-specific behavior.
            </summary>
            <param name="unit">The unit that was killed</param>
        </member>

        <member name="P:TestVanDammeAnim.IsDucking">
            <summary>
            Gets a value indicating whether the character is currently in a ducking or crouching state.
            </summary>
            <value>true if the character is ducking; otherwise, false.</value>
        </member>

        <member name="P:TestVanDammeAnim.IsFrozen">
            <summary>
            Gets a value indicating whether the character is currently frozen by freeze effects.
            </summary>
            <value>true if the character has remaining freeze time; otherwise, false.</value>
        </member>

        <member name="P:TestVanDammeAnim.IsParachuteActive">
            <summary>
            Gets or sets a value indicating whether the parachute is currently active. Setting this
            property manages parachute GameObject visibility, physics effects, and landing
            invulnerability.
            </summary>
            <value>true if the parachute is deployed and active; otherwise, false.</value>
        </member>

        <member name="P:TestVanDammeAnim.IsPerformanceEnhanced">
            <summary>
            Gets a value indicating whether performance enhancement effects are currently active. This
            base implementation always returns false.
            </summary>
            <value>Always false for TestVanDammeAnim. Derived classes can override to implement
        performance boost mechanics.</value>
        </member>

        <member name="P:TestVanDammeAnim.WillReviveAlready">
            <summary>
            Gets a value indicating whether this unit will be automatically revived. This base
            implementation always returns false.
            </summary>
            <value>Always false for TestVanDammeAnim. Derived classes can override to implement revival
        mechanics.</value>
        </member>

        <member name="P:TestVanDammeAnim.counter">
            <summary>
            Gets or sets the animation frame timing counter. This counter accumulates delta time and
            triggers the next animation frame when it exceeds the frameRate threshold (0.0334 seconds).
            </summary>
            <value>The accumulated time in seconds since the last animation frame change. Resets after
        triggering the next frame.</value>
        </member>

        <member name="P:TestVanDammeAnim.impaledByTransform">
            <summary>
            Gets or sets the Transform that is currently impaling this unit. Setting this property also
            updates the related Impaler component reference.
            </summary>
            <value>The Transform of the object impaling this unit, or null if not impaled.</value>
        </member>

        <member name="P:TestVanDammeAnim.invulnerableTime">
            <summary>
            Gets or sets the remaining invulnerability duration in seconds. When greater than zero, the
            character cannot take damage.
            </summary>
            <value>The duration in seconds the character remains invulnerable to damage.</value>
        </member>

        <member name="F:TestVanDammeAnim.HidingPlayer">
            <summary>
            Tracks whether the player character is currently hidden/disabled. Set to true in
            HideAndDisableCharacter for cutscenes and transitions. Character becomes invulnerable while
            hidden and sprites/renderers are disabled accordingly.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.ImpaledByTransform">
            <summary>
            Private backing field for the impaledByTransform property. Stores the Transform of the
            object that is currently impaling this character.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.avatarAngryTime">
            <summary>
            Unused in base class. Reserved for BroLee implementation to control avatar/clone anger state
            in derived classes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.avatarGunFireTime">
            <summary>
            Unused in base class. Reserved for BroLee implementation to control avatar/clone firing
            timing in derived classes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.blindCounter">
            <summary>
            Counter for blind effect intervals. Incremented while blinded and triggers visual effects
            every 0.1 seconds. Reset when entering stun state. Creates periodic screen flash effects to
            indicate blindness status.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.bloodCountAmount">
            <summary>
            Number of blood particles to spawn on death. Default value of 80. Used in particle creation
            (divided by 4) and SprayBlood calls to control visual gore intensity.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.bloodTime">
            <summary>
            Current blood effect timer. Decremented by 0.0667 per update. When positive, creates blood
            particles using character's bloodColor property.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.bloodTimeOut">
            <summary>
            Total duration limit for blood effects. Not directly used in visible base implementation but
            likely controls maximum blood effect duration.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canBeCoveredInAcid">
            <summary>
            Determines if this unit can be affected by acid coverage effects (default true). When false,
            prevents acid visual effects and damage over time. Checked before applying acid materials
            and status effects. Some boss units may disable this.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canBeStrungUp">
            <summary>
            Determines if this unit can be hung or strung up by certain traps or abilities. Currently
            not actively used in the codebase. May have been intended for trap mechanics or special
            death states where units could be suspended.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canDuck">
            <summary>
            Determines if the character is allowed to duck. Default is true. Checked in StartDucking
            method and movement collision logic to enable/disable ducking ability.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canUnFreeze">
            <summary>
            Determines if the frozen status can expire naturally over time. When true, frozenTime
            decrements each frame allowing automatic thawing. When false, unit remains frozen
            indefinitely until explicitly unfrozen by external effects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.controllingProjectile">
            <summary>
            Unused in base class. Used by specific characters (BroDredd, BronnarJensen, BroGummer) to
            indicate when character is remotely controlling a projectile.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.controllingProjectileDelay">
            <summary>
            Unused in base class. Intended for timing mechanics to prevent immediate re-control after
            releasing a projectile.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.dancingFrames">
            <summary>
            Number of animation frames in the dancing sequence. Default value of 12 frames creates the
            complete dance animation cycle. Used with frame modulo calculation for smooth looping dance
            animation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.dancingFramesSheetPosition">
            <summary>
            Starting position on the sprite sheet for dancing animation frames. Default Vector2Int(15,
            14) points to row 15, column 14. The X coordinate is combined with current frame modulo for
            animation progression.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.dancingTime">
            <summary>
            Duration in seconds remaining for dance effect. Decremented each frame alongside stunTime.
            Character dances only when both stunTime and dancingTime are greater than zero. Set by
            Dance() method for forced dancing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.deadHeadHeight">
            <summary>
            Character's head height when dead in units. Default value of 10. Set in ConstrainToCeiling
            when actionState is Dead. Ensures dead bodies have appropriate collision boundaries.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.deadWaistHeight">
            <summary>
            Character's waist height when dead in units. Default value of 5. Lower than standing/ducking
            heights to reflect prone dead position.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.deathSoundVolume">
            <summary>
            Volume multiplier for death sound effects. Default value of 0.7. Applied at various levels
            (50% or 100%) to control death sound loudness.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.doRollOnLand">
            <summary>
            Enables rolling animation when landing from significant falls. When true, character performs
            a roll if landing with high downward velocity (yI &lt; -300). The roll lasts 0.133 seconds
            and prevents other actions during that time. Provides smooth landing from high falls.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.ducking">
            <summary>
            Tracks if the character is in a ducking/crouching state. Affects hitbox dimensions, prevents
            wall climbing, modifies movement speed, and changes animation frames when useDuckingFrames
            is true.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.duckingHeadHeight">
            <summary>
            Character's head height when ducking in units. Default value of 13. Set in StartDucking
            method and used to adjust collision detection height when crouched.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.duckingToeHeight">
            <summary>
            Character's toe height when ducking in units. Default value of 5. Slightly higher than
            standing (5 vs 4), possibly representing lifted feet when crouching.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.duckingWaistHeight">
            <summary>
            Character's waist height when ducking in units. Default value of 6. Set in StartDucking
            method to reflect crouched position.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.firstFrame">
            <summary>
            Generic first-frame flag common across many game objects. Initialized to true but not
            specifically used in TestVanDammeAnim implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.frozenTime">
            <summary>
            Duration in seconds remaining for the freeze effect. When greater than zero, character is
            frozen solid with blue tint shader. Prevents all movement, modifies damage behavior, and
            affects death mechanics. Decremented only when canUnFreeze is true.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.halo">
            <summary>
            Reference to a BroHalo visual effect component. Displays an angel halo above the character
            during certain states, particularly when marked for resurrection (willComeBackToLife).
            Provides visual feedback for special character states.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.idleTime">
            <summary>
            Tracks seconds of player inactivity. Incremented when no input is received, reset on any
            input. Triggers AFK bubble display after threshold and enables other players to kick idle
            players after extended inactivity.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.immuneToOutOfBounds">
            <summary>
            When true, prevents death from falling out of map bounds. Checked before applying out of
            bounds damage. Allows certain heroes or special states to survive falling off the map edges.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.impaleXOffset">
            <summary>
            Horizontal offset when character is impaled. Field exists but usage not found in current
            implementation. Likely provides visual offset for impaled state.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.impaleYOffset">
            <summary>
            Vertical offset for positioning when impaled by an object. Used in GetParentedToPos to
            calculate the Y position relative to the impaling transform.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.impaledBy">
            <summary>
            Reference to the Impaler component that has impaled this character. Used to evaluate if
            impalement should continue and for damage calculations. Cleared when impalement ends.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.impaledCounter">
            <summary>
            Timer or counter for impalement state. Field exists but usage not found in current
            implementation. Related to impalement mechanics.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.impaledDamage">
            <summary>
            Stores damage value to apply when unit is unimpaled. Set during Impale method and applied as
            damage in Unimpale when unit is released from impalement.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.impaledDirection">
            <summary>
            Direction of impalement (-1 or 1) based on impact velocity. Determines position constraints
            and sets minor velocity (xI = -0.01f * impaledDirection) during impalement.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.impaledLocalPos">
            <summary>
            Local position relative to impaling object. Field exists but is never used in current
            implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.impaledPosition">
            <summary>
            World position where unit was impaled. Constrains movement to ±3 units from this point while
            impaled to prevent excessive movement.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.isParachuteActive">
            <summary>
            Tracks whether the parachute is currently deployed and affecting physics. When true, applies
            air resistance and modified gravity. Set when parachute deploys during falls, cleared on
            landing or parachute destruction.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.isSkinnedMook">
            <summary>
            Flag indicating if this unit is a skinned mook enemy type. Public field but no usage found
            in TestVanDammeAnim base class.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastDamageType">
            <summary>
            Stores the type of damage last received by the character. Default is DamageType.None. Used
            for damage-specific death effects and responses, particularly explosion damage checks.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastHitSoundTime">
            <summary>
            Timestamp of when hurt sound was last played. Prevents sound spam with 0.1 second cooldown
            between hurt sounds. Updated when hurt sound plays.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.meltDuration">
            <summary>
            Controls how long the acid melting death effect lasts in seconds. Default value of 0.7
            seconds is randomized by ±0.3 seconds in Awake for visual variety.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.parachute">
            <summary>
            Reference to the Parachute component attached to this unit. Created when falling from
            sufficient height, destroyed on landing or damage. Provides visual parachute model and
            modifies falling physics when active.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.parachuteDelay">
            <summary>
            Countdown timer preventing immediate parachute deployment after certain actions. Decremented
            each frame when greater than zero. Ensures parachute doesn't deploy during attacks or
            immediately after jumping, requiring actual falling before activation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.pitchShiftAmount">
            <summary>
            Pitch modifier added to all character sound effects. Allows voice pitch variation between
            different characters. Applied to special, throw, hurt, and death sounds.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.pushingTime">
            <summary>
            Timer for push animation duration. Set to 0.06 seconds when block pushing begins and
            decrements each frame. Controls when to display pushing animation frames.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.recallCounter">
            <summary>
            Timer for the recall fade-out effect, ranging from 0 to 1. Controls sprite transparency (1 -
            recallCounter) during despawn. Character is destroyed when counter exceeds 1.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.recalling">
            <summary>
            Indicates if the character is being recalled/despawned with a fade-out effect. When true,
            character fades out over 1 second before being destroyed.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.reducedLife">
            <summary>
            Tracks if player has lost a life but hasn't respawned yet. Set true when player dies and
            reset on revival. Prevents multiple life deductions for a single death.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.rollingFrames">
            <summary>
            Current frame of the rolling animation sequence. Incremented based on time progression
            during rolls. Used to display the appropriate sprite frame from the rolling animation set on
            the sprite sheet.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.rollingTime">
            <summary>
            Duration remaining for the rolling animation after landing from a high fall. Set to 0.133
            seconds when landing with high velocity (yI &lt; -300) if doRollOnLand is true. Prevents
            other actions during the roll animation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.showGestureTimer">
            <summary>
            Timer controlling gesture animation display duration. Incremented while gesture is active
            and reset when gesture ends. Manages the timing of victory poses and other character
            gestures.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.spurtCount">
            <summary>
            Tracks number of blood spurts created for artery effects. Limited to 5 spurts maximum. Used
            with impaledCounter for timing blood effect intervals.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.standingToeHeight">
            <summary>
            Character's toe height when standing in units. Default value of 4. Set in StopDucking method
            as the normal foot collision height.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.standingWaistHeight">
            <summary>
            Character's waist height when standing in units. Default value of 10. Set in StopDucking
            method as the normal waist collision height.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.stunTime">
            <summary>
            Duration in seconds remaining for the stun effect. Decremented each frame when greater than
            zero. During stun, the character cannot perform actions. Combined with dancingTime to
            trigger dancing animations. Set by various stun methods and can be reduced for heroes in
            DeathMatch mode.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.stunVocalDelay">
            <summary>
            Delay in seconds before playing stun voice lines. Calculated when stunned with random value
            between 0.2 and 0.7 seconds based on stun duration. Prevents audio spam from rapid stun
            effects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.teaBagCheatEnabled">
            <summary>
            Static flag that enables a cheat/easter egg for tea-bagging defeated enemies. Activated by
            entering a specific code in the main menu. When enabled, allows players to deal "SelfEsteem"
            damage by ducking near dead units.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.timeBroBoostTime">
            <summary>
            Duration of time-based speed boost effect in seconds, likely from Time Bro's special
            ability. Counts down each frame and affects delta time calculations independently from
            high-five boosts.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.toeHeight">
            <summary>
            Current toe/foot height for low collision detection. Default value of 4. Used in raycasts
            for detecting ground-level obstacles. Dynamically changes based on stance.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.waistHeight">
            <summary>
            Current waist height used for collision detection. Default value of 10. Dynamically changes
            based on stance (standing/ducking/dead). Used extensively in raycasts and obstacle
            detection.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.xBoxControlled">
            <summary>
            Deprecated field that is never used in the codebase. May have been intended for Xbox
            controller detection.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnyInput">
            <summary>
            Checks if any input button is currently pressed (movement, fire, special, jump, or
            high-five).
            </summary>
            <returns>True if any input is detected, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.CanUseSwitch">
            <summary>
            Indicates whether this character can activate switches. Default implementation returns true;
            subclasses can override to add conditions.
            </summary>
            <returns>True if the character can use switches, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.CheckDashing">
            <summary>
            Manages dash state based on player input and sprint status. For local players, detects dash
            button presses and releases. For remote players, creates visual and audio effects when dash
            state changes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckInput">
            <summary>
            Main input processing method that handles all player and AI input. Stores previous input
            states, handles zombie AI input, processes player controller input, manages remote control
            of vehicles/projectiles, handles idle timeout and kick detection, and integrates special
            abilities and gestures.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckTriggerActionInput">
            <summary>
            Processes input commands from trigger actions for scripted sequences. Handles movement
            commands with pathfinding, processes AI commands, tracks command completion, and integrates
            with PathAgent for navigation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckWhetherShouldClearInput">
            <summary>
            Virtual method for input clearing logic. Empty in base class, designed for override in
            derived classes to implement custom input clearing conditions.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ClearAllInput">
            <summary>
            Performs a comprehensive reset of all input states. Clears current and previous states for
            movement, jumping, fire, special, high-five, and taunt buttons.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ClearFireInput">
            <summary>
            Resets all fire-related input states including fire, special abilities, and high-five
            inputs. Used to clear attack inputs when needed.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.DebugShowInput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Debug method to display current input state. Shows formatted string with L/R/U/D/J/C states
            when debug mode is enabled.
            </summary>
            <param name="left">Left input state</param>
            <param name="right">Right input state</param>
            <param name="up">Up input state</param>
            <param name="down">Down input state</param>
            <param name="jump">Jump input state</param>
            <param name="climb">Climb input state</param>
        </member>

        <member name="M:TestVanDammeAnim.GetEnemyMovement">
            <summary>
            Retrieves AI input for enemy-controlled characters. Calls enemyAI or EnemyAI component for
            input and passes multiple input references for various actions.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.GetSprintValue">
            <summary>
            Returns the current sprint state of the character.
            </summary>
            <returns>True if the character is sprinting, false otherwise.</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsPressingDown">
            <summary>
            Returns whether the down input is currently being pressed.
            </summary>
            <returns>True if the down button is currently held, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsPressingLeftOrRight">
            <summary>
            Checks if the player is pressing either left or right directional input. Used for movement
            detection and control state queries.
            </summary>
            <returns>True if left or right input is active</returns>
        </member>

        <member name="M:TestVanDammeAnim.MustIgnoreHighFiveMeleePress">
            <summary>
            Determines if high-five/melee input should be ignored based on current state. Returns true
            if holding a grenade/mook or using any special abilities.
            </summary>
            <returns>True if the input should be ignored, false if it can be processed</returns>
        </member>

        <member name="M:TestVanDammeAnim.PressDashButton">
            <summary>
            Initiates dashing when the dash button is pressed, but only if the character is not already
            dashing and is moving left or right.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PressHighFiveMelee(System.Boolean)">
            <summary>
            Handles the high-five/melee button press with complex interaction priority logic. Checks for
            nearby grenades, mooks, switches, teleport doors, citizens, and other players. Prioritizes
            interactions based on game mode, proximity, and current state.
            </summary>
            <param name="forceHighFive">Forces a high-five attempt regardless of other potential
        interactions</param>
        </member>

        <member name="M:TestVanDammeAnim.PressSpecial">
            <summary>
            Initiates special ability use when the special button is pressed. Only activates if the
            character is not covered in acid and not performing a melee attack.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PressSpecial2">
            <summary>
            Placeholder method for secondary special ability activation. Currently only resets the
            animation frame to 0.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ReleaseDashButton">
            <summary>
            Stops dashing when the dash button is released, calling StopDashing to handle dash end
            logic.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ReleaseFire">
            <summary>
            Virtual method called when the fire button is released. Empty implementation for subclasses
            to add weapon-specific release behavior.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ReleaseSpecial">
            <summary>
            Virtual method called when the special ability button is released. Empty implementation for
            subclasses to override.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunForcedInput">
            <summary>
            Processes forced input timers that override player control. Manages hold timers for up,
            left, right directions and forces specific inputs while timers are active.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StopLeftRightInputFromHanging">
            <summary>
            Clears horizontal movement input when hanging. Prevents left/right movement while character
            is in hanging state.
            </summary>
        </member>

        <member name="P:TestVanDammeAnim.InputBits">
            <summary>
            Gets or sets the packed input states for network synchronization. This property packs 11
            boolean input flags into a single short value for efficient network transmission.
            </summary>
            <value>A short value containing packed boolean input states for network synchronization.</value>
        </member>

        <member name="F:TestVanDammeAnim.airDashJumpGrace">
            <summary>
            Grace period timer allowing jumps shortly after air dashing. Provides a brief window where
            jump input is accepted even if not technically grounded. Enables fluid air dash to jump
            combos for advanced movement.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.blockMovementForGesture">
            <summary>
            Prevents movement input during gesture animations. Set to true when starting gestures and
            blocks movement processing until gesture completes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.buttonGesture">
            <summary>
            Current frame's gesture button input state from player controls. Used with wasButtonGesture
            for edge detection to trigger gesture-based actions.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.buttonHighFive">
            <summary>
            Current frame's high-five button state. True when high-five/interaction button is pressed.
            Triggers cooperative high-five actions when near other players. Also used for general player
            interactions.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.buttonJump">
            <summary>
            Current frame's jump button state. True when jump button is pressed, false when released.
            Primary input for jumping, wall jumping, and various jump-based mechanics. Used with
            wasButtonJump for edge detection.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.buttonTaunt">
            <summary>
            Current frame's taunt button state. True when taunt/gesture button is pressed. Allows
            players to perform character-specific taunts, gestures, or victory poses. Adds personality
            to gameplay.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canFireDelay">
            <summary>
            Cooldown timer preventing immediate firing after certain actions. Set to 0.3 seconds after
            detonating remote car and 0.25 seconds after creating one. Blocks fire and special inputs
            while positive to prevent accidental double-actions.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.climbButton">
            <summary>
            Climbing input state from AI controls. Used by enemy AI to control climbing behavior on
            ladders and walls.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.dashButton">
            <summary>
            Current frame's dedicated dash button state. Alternative to double-tap dashing, provides
            direct dash control. When pressed with direction, initiates ground or air dash based on
            character state.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.down">
            <summary>
            Current frame's down directional input state. True when down is pressed. Used for ducking,
            dropping through platforms, aiming downward, and sliding mechanics. Essential for defensive
            and movement options.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.fire">
            <summary>
            Current frame's state of the fire/shoot button input. Controls shooting mechanics, gun
            animations, and remote projectile control. Prevented during wall climbing, ladder use, or
            pushing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.holdDownTime">
            <summary>
            Timer for forcing downward input. Field exists but no active usage found in current
            implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.holdLeftTime">
            <summary>
            Timer for forcing leftward movement. Set to 0.3 seconds in certain conditions and forces
            left input while active. Decrements each frame when greater than 0.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.holdRightTime">
            <summary>
            Timer for forcing rightward input. Field exists but no active usage found in current
            implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.holdStillTime">
            <summary>
            Timer that prevents or limits movement when active. Checked in multiple movement conditions
            and prevents certain actions. Decrements each frame when greater than 0.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.holdUpTime">
            <summary>
            Timer for forcing upward input. Field exists but no active usage found in current
            implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastButtonJumpTime">
            <summary>
            Timestamp of the most recent jump button press. Used for jump buffering system - if player
            presses jump slightly before landing, jump executes upon touchdown. Creates more responsive
            controls.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.left">
            <summary>
            Current frame's left directional input state. True when left is pressed. Primary horizontal
            movement input for moving left. Combined with other inputs for dashing, wall climbing, and
            special moves.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.pressedJumpInAirSoJumpIfTouchGroundGrace">
            <summary>
            Grace period timer for jump input buffering while airborne. When jump is pressed in air,
            this timer counts down. If player lands while timer is positive, automatic jump occurs.
            Standard platformer quality-of-life feature.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.right">
            <summary>
            Current frame's right directional input state. True when right is pressed. Primary
            horizontal movement input for moving right. Combined with other inputs for dashing, wall
            climbing, and special moves.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.special">
            <summary>
            Current frame's state of the special ability button input. Cleared when acid-covered, in
            melee, dead, or controlled by AI. Used to trigger special abilities.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.specialDown">
            <summary>
            Tracks if special button is currently pressed. Reset during initialization and various game
            states. Part of input state management system.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.sprint">
            <summary>
            Current frame's sprint modifier state. True when sprint/run button is held. Modifies
            movement speed when combined with directional inputs. May affect other actions like longer
            jumps or faster climbing.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.up">
            <summary>
            Current frame's up directional input state. True when up is pressed on D-pad, analog stick,
            or keyboard. Used for aiming upward, climbing ladders/walls, entering doors, and menu
            navigation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasButtonGesture">
            <summary>
            Previous frame's gesture button state. Used for edge detection to determine when the gesture
            button is first pressed.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasButtonHighFive">
            <summary>
            Previous frame's high-five button state. Enables edge detection for high-five activation,
            ensuring actions trigger on button press rather than hold. Prevents continuous high-five
            attempts.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasButtonJump">
            <summary>
            Previous frame's jump button state. Used with buttonJump to detect button press (false to
            true) and release (true to false) events. Essential for preventing jump spam and enabling
            precise jump control.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasButtonTaunt">
            <summary>
            Previous frame's taunt button state. Used for edge detection to trigger taunts on button
            press. Prevents continuous taunt animation while button is held, ensuring single taunt per
            press.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasClimbButton">
            <summary>
            Previous frame's climb button state from AI controls. Used for edge detection of AI climbing
            inputs.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasDown">
            <summary>
            Previous frame's down directional state. Used for detecting new down presses for actions
            like initiating duck, platform drops, or slides. Enables proper state transitions.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasFire">
            <summary>
            Previous frame's state of the fire button, used for edge detection. Triggers StartFiring()
            on press and StopFiring() on release, also used in death match invulnerability checks.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasLeft">
            <summary>
            Previous frame's left directional state. Critical for double-tap dash detection - tracks
            time between taps. Also used for detecting direction changes and state transitions in
            movement system.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasRight">
            <summary>
            Previous frame's right directional state. Critical for double-tap dash detection - tracks
            time between taps. Also used for detecting direction changes and state transitions in
            movement system.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasSpecial">
            <summary>
            Previous frame's state of the special button, used for edge detection. Compared with current
            special state to detect new button presses vs held inputs.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasSpecialDown">
            <summary>
            Previous frame's special button state. Used for edge detection to identify button press and
            release events. Companion to specialDown for input tracking.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasSprint">
            <summary>
            Previous frame's sprint modifier state. Enables detection of sprint press/release for smooth
            speed transitions. Helps manage acceleration and deceleration in movement system.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasUp">
            <summary>
            Previous frame's up directional state. Enables detection of up press/release events. Used
            for initiating climbs, detecting input combinations, and preventing continuous up-triggered
            actions.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasXBoxFireDown">
            <summary>
            Previous frame's Xbox controller fire button state. Field declared but no usage found in
            current implementation. Likely reserved for Xbox-specific input handling.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasdashButton">
            <summary>
            Previous frame's dash button state. Used for edge detection to trigger single dash per
            button press. Prevents continuous dashing while button is held, ensuring controlled dash
            execution.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AssignPushingTime">
            <summary>
            Sets a brief timer when pushing blocks and cancels any rolling animation. Called when the
            character begins pushing a moveable block.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CanCheckClimbAlongCeiling">
            <summary>
            Checks if ceiling climbing mechanics should be evaluated by detecting nearby hanging points.
            Used to determine if the character can transition to ceiling hanging state.
            </summary>
            <returns>True if ceiling climbing should be checked (hanging points detected and not
        ducking/pressing down), false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.CanDoRollOnLand">
            <summary>
            Determines whether the character should perform a roll when landing based on downward
            velocity.
            </summary>
            <returns>True if downward velocity exceeds -350 and rolling is allowed; otherwise, false.</returns>
        </member>

        <member name="M:TestVanDammeAnim.CanTouchCeiling">
            <summary>
            Determines whether the character can interact with ceilings.
            </summary>
            <returns>True if the character can touch ceilings; otherwise, false.</returns>
        </member>

        <member name="M:TestVanDammeAnim.CheckClimbAlongCeiling">
            <summary>
            Handles ceiling climbing/hanging mechanics when transitioning from wall constraints.
            Performs upward raycasts to find ceiling attachment points and initiates hanging state when
            appropriate conditions are met.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckForCheckPoints">
            <summary>
            Checks if character is touching checkpoints at current position or slightly above ground
            level. Calls ReachedCheckPoint if checkpoint contact is detected.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckForQuicksand">
            <summary>
            Manages quicksand detection and transition effects. Tracks quicksand state changes, creates
            appropriate splash and particle effects on entry/exit, plays surface-specific sounds, and
            disables blast velocity while in quicksand.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckForQuicksandDeath">
            <summary>
            Monitors for lethal quicksand submersion and applies crush damage after 2-second delay.
            Checks if character is deep in quicksand (16 units below surface) and deals fatal damage if
            choke counter exceeds threshold.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckForTraps(System.Single)">
            <summary>
            Comprehensive trap detection system. Checks for acid pools, barbed wire, spikes, and mines.
            Handles impalement, damage, and movement constraints from environmental hazards.
            </summary>
            <param name="yIT">Y velocity reference that may be modified by trap interactions</param>
        </member>

        <member name="M:TestVanDammeAnim.CheckRescues">
            <summary>
            Checks for nearby heroes to rescue and grants rescue bonuses. Provides invulnerability,
            shows start bubble, and adds brutality grace period.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ConstrainToCeiling(System.Single@)">
            <summary>
            Handles collision detection with ceilings and manages chimney flip mechanics when the
            character hits walls and ceilings simultaneously.
            </summary>
            <param name="yIT">Reference to the vertical movement delta that will be constrained.</param>
            <returns>True if a ceiling constraint was applied; otherwise, false.</returns>
        </member>

        <member name="M:TestVanDammeAnim.ConstrainToFloor(System.Single@)">
            <summary>
            Constrains the character's vertical movement to prevent falling through the floor, handling
            landing transitions and ground snapping.
            </summary>
            <param name="yIT">Reference to the vertical movement delta that will be constrained.</param>
            <returns>True if the character was constrained to the floor; otherwise, false.</returns>
        </member>

        <member name="M:TestVanDammeAnim.ConstrainToFragileBarriers(System.Single@,System.Single)">
            <summary>
            Handles collision and destruction of fragile barriers like doors and glass. Sends damage
            messages to break barriers on contact, creates visual effects at impact points, and handles
            special door opening mechanics for living players.
            </summary>
            <param name="xIT">Reference to horizontal velocity, may be modified if constrained by barrier</param>
            <param name="radius">The collision detection radius</param>
        </member>

        <member name="M:TestVanDammeAnim.ConstrainToMookBarriers(System.Single@,System.Single)">
            <summary>
            Prevents movement through enemy barriers while allowing friendly units to pass. Uses player
            numbers to determine if a barrier should block movement.
            </summary>
            <param name="xIT">Reference to horizontal velocity, set to 0 if blocked by enemy barrier</param>
            <param name="radius">The collision detection radius</param>
        </member>

        <member name="M:TestVanDammeAnim.ConstrainToWalls(System.Single@,System.Single@)">
            <summary>
            Complex wall collision detection and constraint system that prevents the character from
            passing through walls and enables wall climbing. Performs multiple raycasts at different
            heights, handles wall climbing initiation, manages wall drag mechanics, and integrates with
            various movement systems including ledge grabbing and block pushing.
            </summary>
            <param name="yIT">Reference to vertical velocity, modified if wall climbing or dragging occurs</param>
            <param name="xIT">Reference to horizontal velocity, modified if movement is constrained by
        walls</param>
            <returns>True if the character was constrained by a wall, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.HitCeiling(UnityEngine.RaycastHit)">
            <summary>
            Handles the character's response when hitting a ceiling, including position adjustment,
            sound effects, and potential transition to hanging state.
            </summary>
            <param name="ceilingHit">The raycast hit information for the ceiling collision.</param>
        </member>

        <member name="M:TestVanDammeAnim.IsAboveLadder">
            <summary>
            Checks if the character is positioned above a ladder by using Physics.OverlapSphere with a
            -1 unit vertical offset. Used for ladder grab detection from above.
            </summary>
            <returns>True if positioned above a ladder</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsInStealthMode">
            <summary>
            Checks if the unit is in stealth mode by being crouched in grass. Requires the unit to be
            alive, crouching, player-controlled, standing still, and within grass.
            </summary>
            <returns>True if in stealth mode</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsNearbyLadder(System.Single,System.Single)">
            <summary>
            Checks if a ladder is nearby at the specified offset position. Used for proximity-based
            ladder detection in various movement states.
            </summary>
            <param name="xOffset">Horizontal offset from character position</param>
            <param name="yOffset">Vertical offset from character position</param>
            <returns>True if a ladder is detected at the offset position</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsOverFinish(System.Single@)">
            <summary>
            Comprehensive victory zone detection that checks if the character has reached the level
            finish area. Handles helicopter attachment, portal exits, level completion triggers, and
            applies appropriate invulnerability and state changes for level completion.
            </summary>
            <param name="ladderXPos">Reference to ladder X position, modified if attaching to helicopter</param>
            <returns>True if the character is in the finish/victory zone</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsOverLadder(System.Single@)">
            <summary>
            Checks if the character is positioned over a ladder. Resets jump-related timers and manages
            ladder block notifications when on a ladder.
            </summary>
            <param name="ladderXPos">Outputs the X position of the detected ladder</param>
            <returns>True if positioned over a ladder</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsOverLadder(System.Single,System.Single@)">
            <summary>
            Checks if the character is over a ladder with a horizontal offset. Handles ladder detection,
            jump timer resets, double jump management, and ladder block entry/exit notifications. Tracks
            current and previous ladder blocks for state management.
            </summary>
            <param name="xOffset">Horizontal offset for ladder detection</param>
            <param name="ladderXPos">Outputs the X position of the detected ladder</param>
            <returns>True if a ladder is detected at the offset position</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsSubmergedInPool">
            <summary>
            Extended submersion detection that treats quicksand and oil as equivalent to pool
            submersion. Overrides base class functionality by combining base pool detection with
            quicksand and oil state checks using logical OR operation.
            </summary>
            <returns>True if character is submerged in pool, quicksand, or oil; false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsSurroundedByBarbedWire">
            <summary>
            Checks if character is surrounded by barbed wire that can cause damage during movement.
            </summary>
            <returns>True if surrounded by damaging barbed wire, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.IsWithinGrass">
            <summary>
            Checks if the unit is inside grass or substance on both sides. Tests positions 5 units to
            the left and right of the character.
            </summary>
            <returns>True if grass is detected on both sides</returns>
        </member>

        <member name="M:TestVanDammeAnim.Land">
            <summary>
            Comprehensive landing handler that processes all aspects of ground contact including state
            resets, damage calculation, visual effects, platform interactions, and sound effects.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.LandInOil">
            <summary>
            Initializes oil effect materials and applies them to both character and gun sprites. Creates
            oily materials using "Unlit/Depth Cutout With Image - Oily" shader with lazy instantiation
            pattern. Sets up UV2 coordinates and configures sprite size vectors for proper oil effect
            rendering.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.LeaveOil">
            <summary>
            Placeholder method for leaving oil areas. Actual oil cleanup logic is handled by the
            continuous RunHasLeftOilTest method which manages gradual oil level decay and material
            restoration.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.LedgeGrapple(System.Boolean,System.Boolean,System.Single,System.Single)">
            <summary>
            Handles ledge grabbing mechanics when the character is near an edge while jumping or
            falling. Initiates ledge grab state when conditions are met and adjusts character position
            for proper alignment.
            </summary>
            <param name="left">Whether the character is moving left</param>
            <param name="right">Whether the character is moving right</param>
            <param name="radius">The horizontal detection radius for ledge detection</param>
            <param name="heightOpenOffset">The vertical offset for ledge height calculation</param>
        </member>

        <member name="M:TestVanDammeAnim.PickupPickupables">
            <summary>
            Attracts nearby pickupable items when character is alive. Uses attraction radius to
            automatically collect items within range.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PushGrassAway">
            <summary>
            Pushes grass away from the unit and plays appropriate environmental sounds. Performs
            raycasts to find ground blocks, applies forces to jiggle doodads. Plays different sounds for
            grass versus blood pools based on doodad type.
            </summary>
            <returns>True if any grass was pushed away</returns>
        </member>

        <member name="M:TestVanDammeAnim.ReachedCheckPoint">
            <summary>
            Virtual method called when character reaches a checkpoint. Empty implementation that can be
            overridden by derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RollOnLand">
            <summary>
            Initiates the rolling animation sequence when landing with sufficient velocity, setting the
            character to rolling state for 13 frames.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunBlindStars">
            <summary>
            Creates periodic blind star visual effects around blinded characters. Spawns shrapnel stars
            above character head with randomized positioning.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunClimbingLadder">
            <summary>
            Handles all ladder climbing physics and movement logic, including vertical movement based on
            input, horizontal positioning, and exit conditions.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunHasLeftOilTest">
            <summary>
            Manages gradual oil level decay and material transitions when leaving oil areas. Decreases
            oil level over time using deltaTime, updates material opacity properties, and handles
            cleanup by restoring original materials when oil level reaches zero.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunZombieEffects">
            <summary>
            Handles ongoing zombie revival visual effects. Creates periodic zombie passive effects with
            random timing intervals.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StartHanging">
            <summary>
            Initiates the ceiling hanging state if the character is not ducking.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StopHanging">
            <summary>
            Transitions the character from hanging state to jumping state.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StopRolling">
            <summary>
            Ends the rolling state by setting the character to idle or running based on current input.
            </summary>
        </member>

        <member name="P:TestVanDammeAnim.WallClimbing">
            <summary>
            Gets a value indicating whether the character is currently climbing a wall.
            </summary>
            <value>true if the character is wall climbing; otherwise, false.</value>
        </member>

        <member name="P:TestVanDammeAnim.WallDrag">
            <summary>
            Gets or sets a value indicating whether the character is sliding down a wall. Setting this
            property manages wall drag audio effects, knife climbing state, and parachute deactivation.
            </summary>
            <value>true if the character is sliding down a wall; otherwise, false.</value>
        </member>

        <member name="F:TestVanDammeAnim.armUpInAnticipationWallClimb">
            <summary>
            Controls arm position during wall climb anticipation. When true, displays the character with
            arm raised (frame offset +1) in preparation for wall climbing. Provides visual feedback that
            the character is ready to climb.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.barrierLayer">
            <summary>
            LayerMask defining mobile barriers for collision. Set to "MobileBarriers" layer. Used for
            specialized mobile obstacle detection.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.bossBlockPieceCurrentlyStandingOn">
            <summary>
            Special reference for boss block platforms. Set via GetComponent when landing on boss
            blocks. Calls StandingOnBlock each frame and LandOn when landing with velocity.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.breakDoorsOpen">
            <summary>
            Determines damage type when hitting doors. When true, sends DamageType.Crush to doors. When
            false, sends DamageType.Melee. Modifies door destruction behavior on collision.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canChimneyFlip">
            <summary>
            Enables chimney flip ability - jumping between two close walls. When true, character can
            perform wall jumps in narrow vertical spaces. Provides advanced movement option for certain
            characters. Currently not actively used in the base implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.canLedgeGrapple">
            <summary>
            Determines if this character can grab and hang from ledges. Default true allows standard
            ledge grappling behavior. Set to false for characters that should fall instead of grabbing
            ledges. Checked during collision detection with ledges.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.currentLadderBlock">
            <summary>
            Reference to the ladder block character is currently on. Used to track state transitions
            between ladders and calls OnBroExit when leaving a ladder.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.fragileLayer">
            <summary>
            LayerMask defining fragile/destructible objects. Set to "DirtyHippie" layer. Combined with
            ground and platform layers for composite ground detection including destructible terrain.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.groundLayer">
            <summary>
            LayerMask defining which layers are considered solid ground for collision detection.
            Includes "Ground", "LargeObjects", and "IndestructibleGround" layers. Primary layer for
            floor, ceiling, and wall collision detection throughout the movement system.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.groundTransform">
            <summary>
            Reference to current ground or platform standing on. Set in AssignGround when landing and
            used as part of parenting system for moving platforms. Reset to null in ShiftUnitWithParent.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.groundTransformLocalPos">
            <summary>
            Local position on ground or platform. Set in AssignGround with different calculation for
            Tank vs normal ground. Returned by GetParentedToPos when grounded.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.isInOil">
            <summary>
            Whether character is covered in oil. Set by LandInOil method and applies visual oil shader
            effect. Automatically clears when oilLevel reaches 0.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.isInQuicksand">
            <summary>
            Whether character is currently in quicksand. Applies 0.4x speed multiplier, 3x slower
            animation rate, prevents air dashing, and can cause death if submerged for 2+ seconds.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.knifeClimbStabHeight">
            <summary>
            Vertical distance in units between knife stab animations during wall climbing. Default value
            of 18 units creates a rhythmic stabbing pattern as the character climbs. Works with
            lastKnifeClimbStabY to trigger stab effects at regular intervals.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.ladderClimbingTransitionFrames">
            <summary>
            Counter for ladder mounting/dismounting transition animation. Decrements each frame while
            playing transition animation. When it reaches 0, normal ladder climbing begins. Provides
            smooth visual transition onto ladders.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.ladderLayer">
            <summary>
            LayerMask defining climbable ladder objects. Set to "Ladders" layer. Core to climbing
            mechanics with extensive use in ladder detection methods like IsOverLadder and
            FindNearbyLadder.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.ladderX">
            <summary>
            Stores X position of current ladder for alignment. Set by IsOverLadder methods when ladder
            is detected. Used to align character to ladder position and passed to AttachToHelicopter for
            rope ladders.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastKnifeClimbStabY">
            <summary>
            Stores the Y position of the last knife stab during wall climbing. Used to determine when to
            play the next stab animation and sound effect. Stabs occur every knifeClimbStabHeight units
            of vertical movement to create rhythmic climbing feedback.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.newRaycastHit">
            <summary>
            Secondary raycast storage for complex collision checks. Used exclusively in chimney flip
            detection logic, allowing nested raycast checks without overwriting the main raycastHit.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.oilLevel">
            <summary>
            Amount of oil coverage on character from 0 to 1. Increases by 0.01 when landing in oil and
            decreases by 1 per second. Controls oil shader intensity.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.openDoorsLayer">
            <summary>
            LayerMask defining interactive doors and movable objects. Set to "Movetivate" layer. Used
            for door collision checks at high speed and triggers damage/opening mechanics. Excludes
            parachute objects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.platformLayer">
            <summary>
            LayerMask defining layers that act as platforms (can stand on but pass through from below).
            Set to "Platform" layer. Often combined with groundLayer for comprehensive ground detection.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.prevLadderBlock">
            <summary>
            Tracks previous ladder block for state management. Stores previous ladder before updating
            current and ensures OnBroExit is called on the previous ladder when switching. Prevents
            duplicate exit calls.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.quicksandChokeCounter">
            <summary>
            Timer until quicksand kills the character. Initialized to 2 seconds. Reset to 0 when
            entering quicksand and increments while head is submerged. Character dies when counter
            reaches 2.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.raycastHit">
            <summary>
            Primary storage for Physics.Raycast results. Reused throughout for ground detection, wall
            checks, ceiling checks, and damage application. Stores hit point, normal, distance, and
            collider information.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.raycastHitWalls">
            <summary>
            Stores raycast results for wall collision detection. Extensively used in ConstrainToWalls
            for collision detection at multiple heights, ledge grabbing, footstep sounds, and wall
            transform assignment.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.switchesLayer">
            <summary>
            LayerMask likely intended for interactive switches and triggers. Not initialized or used in
            TestVanDammeAnim base implementation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.victoryLayer">
            <summary>
            LayerMask defining level completion/victory trigger areas. Set to "Finish" layer. Used in
            IsOverFinish method to detect when player reaches level completion zones.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wallClimbAnticipation">
            <summary>
            Tracks whether the character is in wall climb anticipation state. When true, the character
            is preparing to climb and may show anticipation animations. Used to coordinate the wall
            climbing animation sequence before actual climbing begins.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasInQuicksand">
            <summary>
            Tracks previous frame's quicksand state for edge detection. Compared with isInQuicksand to
            detect when character enters or exits quicksand.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CanLaugh">
            <summary>
            Checks if character can play laughter sounds based on available sound assets.
            </summary>
            <returns>True if laugh sounds are available, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.PlayAttack2Sound(System.Single)">
            <summary>
            Plays secondary attack sound effect for special combat actions.
            </summary>
            <param name="volume">Volume level for the sound effect (default 0.35)</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayAttack3Sound(System.Single)">
            <summary>
            Plays tertiary attack sound effect for advanced combat actions.
            </summary>
            <param name="volume">Volume level for the sound effect (default 1.0)</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayAttack4Sound(System.Single,System.Single)">
            <summary>
            Plays quaternary attack sound effect with custom volume and pitch settings.
            </summary>
            <param name="volume">Volume level for the sound effect (default 1.0)</param>
            <param name="pitch">Base pitch modifier (default 0.9)</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayAttackSound">
            <summary>
            Plays primary attack sound effect with default volume (0.3).
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayAttackSound(System.Single)">
            <summary>
            Plays primary attack sound effect with specified volume.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayAttractedSound">
            <summary>
            Plays attraction sound effect when character is attracted to or influenced by external
            forces.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayBassDropShortSound">
            <summary>
            Plays shortened bass drop sound effect with higher volume and 0.3 second cooldown.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayBassDropSoundSound">
            <summary>
            Plays bass drop sound effect for dramatic moments with 0.3 second cooldown.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayBleedSound">
            <summary>
            Plays a bleeding sound effect when the character bleeds. Uses a fixed volume of 0.45 with no
            pitch variation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayBurnSound(System.Single)">
            <summary>
            Plays burning/fire damage sound effect with randomized pitch. Lazy loads the sound instance
            on first use and plays from the burn sound array with pitch varying between 0.6 and 1.0 for
            variety.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayChestBurstSound(System.Single)">
            <summary>
            Plays alien chest burst sound effect at character position with specified pitch.
            </summary>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayChimneyFlipSound(System.Single)">
            <summary>
            Plays chimney flip sound effect by calling the dash sound method.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayChokeSound">
            <summary>
            Plays choking sound effect with randomized pitch variation for suffocation or strangulation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayClimbSound">
            <summary>
            Plays sound effect for general climbing actions (reuses jump sound).
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayConfusedSound">
            <summary>
            Plays confused sound effect for disoriented character states.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayDashSound(System.Single)">
            <summary>
            Plays dashing movement sound effect with specified volume.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayDeathGargleSound">
            <summary>
            Plays a death gargle sound effect during character death. Uses pitch shift for variation at
            0.45 volume.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayDeathSound">
            <summary>
            Plays death sound effects with volume adjusted based on sound availability. Reduces volume
            to 50% if no hit sounds are available.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayDecapitateSound">
            <summary>
            Plays a dismemberment sound effect when the character is decapitated. Uses a fixed volume of
            0.5 with no pitch variation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayDizzieSound(System.Single,System.Single)">
            <summary>
            Plays dizzy/stunned sound effect with pitch randomization in ±0.05 range plus
            character-specific pitch shift for natural variation.
            </summary>
            <param name="volume">Volume level for the sound effect (default 0.33)</param>
            <param name="pitch">Base pitch value with ±0.05 random variation applied (default 1.0)</param>
            <returns>AudioSource component playing the sound</returns>
        </member>

        <member name="M:TestVanDammeAnim.PlayExitLadderSound">
            <summary>
            Plays sound effect for exiting a ladder (reuses jump sound).
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayFallDamageSound">
            <summary>
            Plays a fall damage impact sound effect. Convenience method that calls the overloaded
            version with 0.4 volume.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayFallDamageSound(System.Single)">
            <summary>
            Plays a fall damage impact sound effect with specified volume. Used when the character takes
            damage from falling.
            </summary>
            <param name="v">Volume for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayFallSound(System.Single)">
            <summary>
            Plays a falling or air movement sound effect. Returns the AudioSource to allow external
            manipulation of the playing sound.
            </summary>
            <param name="v">Volume for the sound effect (default 0.3)</param>
            <returns>The AudioSource playing the fall sound</returns>
        </member>

        <member name="M:TestVanDammeAnim.PlayFizzleSound(System.Single)">
            <summary>
            Plays acid/chemical damage sound effect with slight pitch variation. Lazy loads the sound
            instance on first use and plays from the fizzle sound array with pitch between 0.95 and 1.05
            for subtle variety.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayFlexSound(System.Single)">
            <summary>
            Virtual method for playing flex sound. Empty implementation that can be overridden by
            derived classes.
            </summary>
            <param name="volumne">Volume level for the sound effect (note: parameter name has typo)</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayFootStepSound(UnityEngine.AudioClip[],System.Single,System.Single)">
            <summary>
            Core footstep sound playing method with player versus NPC audio optimization. Players hear
            full volume while NPCs play at 50% volume and only when visible on screen. Includes footstep
            delay gating to prevent audio spam.
            </summary>
            <param name="clips">Array of audio clips to randomly select from for footstep sound</param>
            <param name="v">Volume level for the footstep sound</param>
            <param name="p">Pitch level for the footstep sound</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayFreezeScreamSound">
            <summary>
            Plays freeze scream sound effect with randomized pitch variation when character is frozen.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayGibSound">
            <summary>
            Plays gibbing sounds with variation based on frozen state. Plays frozen gib sounds if the
            character is frozen, otherwise plays normal death sounds.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayGreetingSound">
            <summary>
            Plays greeting sound effect for character interactions and high-five initiations.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayHighFiveSound">
            <summary>
            Plays high-five celebration sound with 0.3 second cooldown to prevent spam.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayHitSound(System.Single)">
            <summary>
            Plays hit reaction sounds with conditional logic based on health state. If alive and hurt
            sounds are available, plays hurt sound with a 0.1 second cooldown. Otherwise plays effort
            sounds. Scales volume to 0.37 for hurt sounds.
            </summary>
            <param name="v">Base volume for the sound effect (default 0.4)</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayHurtSound(System.Single)">
            <summary>
            Directly plays a hurt sound effect when the character takes damage. Updates the last hit
            sound time to enforce cooldown between hurt sounds.
            </summary>
            <param name="v">Volume for the sound effect (default 0.3)</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayJumpSound">
            <summary>
            Plays appropriate jumping sound based on current ground surface type. Uses identical surface
            detection logic as landing sounds but with jump-specific audio variants. Plays at slightly
            higher volume (0.65f) compared to landing sounds.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayKnifeClimbSound">
            <summary>
            Plays knife climbing sound effects with automatic variation cycling. Increments sound
            counter and uses modulo operation to cycle through available knife wall sounds. Plays at
            0.2f volume and 1f pitch with 3D positioning.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayLandSound">
            <summary>
            Plays appropriate landing sound based on current ground surface type. Supports six surface
            types (Dirt, Stone, Metal, Wood, Grass, Slime) with corresponding sound arrays. All landing
            sounds play at 0.6f volume and 1f pitch.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayLaughterSound">
            <summary>
            Plays laughter sound effect with 2-second cooldown to prevent spam. Used for character
            celebration and reactions.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayMuffledScreamsSound">
            <summary>
            Plays muffled screams sound effect typically used during alien face hugger attacks.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayPanicSound">
            <summary>
            Plays panic sound effect with randomized pitch variation for distressed character states.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayPowerUpSound(System.Single)">
            <summary>
            Plays power-up sound effect with specified volume and default pitch.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayPowerUpSound(System.Single,System.Single)">
            <summary>
            Plays power-up sound effect with specified volume and pitch settings.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayPushBlockSound">
            <summary>
            Virtual method for playing block pushing sound. Empty implementation that can be overridden
            by derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayResurrectionSound(System.Single)">
            <summary>
            Plays resurrection sound effect with 2-second cooldown when character is revived or
            respawns.
            </summary>
            <param name="volume">Volume level for the sound effect (default 0.3)</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayRollLandSound">
            <summary>
            Plays the appropriate landing sound effect when completing a roll, with volume based on
            impact velocity.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlaySpecial2Sound(System.Single)">
            <summary>
            Plays special ability 2 sound effect with specified pitch. Default overload that calls the
            volume/pitch variant.
            </summary>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlaySpecial2Sound(System.Single,System.Single)">
            <summary>
            Plays special ability 2 sound effect with custom volume and pitch settings.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlaySpecial3Sound(System.Single)">
            <summary>
            Plays special ability 3 sound effect with specified volume and default pitch.
            </summary>
            <param name="v">Volume level for the sound effect</param>
            <returns>AudioSource component playing the sound</returns>
        </member>

        <member name="M:TestVanDammeAnim.PlaySpecial3Sound(System.Single,System.Single)">
            <summary>
            Plays special ability 3 sound effect with custom volume and pitch settings.
            </summary>
            <param name="v">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
            <returns>AudioSource component playing the sound</returns>
        </member>

        <member name="M:TestVanDammeAnim.PlaySpecial4Sound(System.Single)">
            <summary>
            Plays special ability 4 sound effect with specified volume.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlaySpecialAttackSound(System.Single)">
            <summary>
            Plays special attack sound effect with specified volume.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlaySpecialSound">
            <summary>
            Plays special ability sound effect with default volume (0.8) and pitch (1.0).
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlaySpecialSound(System.Single)">
            <summary>
            Plays special ability sound effect with specified volume and default pitch.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlaySpecialSound(System.Single,System.Single,System.Boolean)">
            <summary>
            Plays special ability sound effect with full control over volume, pitch, and reverb
            settings.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
            <param name="bypassReverb">Whether to bypass environmental reverb effects</param>
        </member>

        <member name="M:TestVanDammeAnim.PlaySpecialSound(System.Single,System.Single)">
            <summary>
            Plays special ability sound effect with specified volume and pitch.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayStunnedSound">
            <summary>
            Plays stunned sound effect by calling the dizzy sound method with default parameters.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayThrowHeavySound(System.Single)">
            <summary>
            Plays heavy throwing sound effect for objects like heavy weapons or large items.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayThrowLightSound(System.Single)">
            <summary>
            Plays light throwing sound effect for objects like grenades or light weapons.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayYeahSound(System.Single)">
            <summary>
            Plays celebration "yeah" sound effect with specified volume. Delegates to power-up sound
            system.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayYeahSound(System.Single,System.Single,System.Boolean)">
            <summary>
            Plays celebration "yeah" sound effect with full control over volume, pitch, and reverb.
            Delegates to power-up sound system.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
            <param name="bypassReverb">Whether to bypass environmental reverb effects</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayZappedSound(System.Single)">
            <summary>
            Plays an electrical zapping sound effect when the character is electrocuted. Uses randomized
            pitch between 0.95 and 1.05 for variation.
            </summary>
            <param name="v">Volume for the sound effect (default 0.25)</param>
        </member>

        <member name="M:TestVanDammeAnim.RunWallDraggingAudio">
            <summary>
            Manages wall dragging audio effects for heroes with wall climb ability. Adjusts pitch and
            volume based on climbing state and vertical velocity.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetCurrentFootstepSound(UnityEngine.Collider)">
            <summary>
            Updates the current footstep sound type based on the ground collider's tag, but only if a
            footstep sound holder exists and the collider has a tag other than "Untagged".
            </summary>
            <param name="collider">The ground collider the character is touching.</param>
        </member>

        <member name="P:TestVanDammeAnim.ShowGesturesMenu">
            <summary>
            Gets a value indicating whether the gestures menu should be displayed. Always false because
            the Gestures Menu is unimplemented.
            </summary>
            <value>Always false</value>
        </member>

        <member name="F:TestVanDammeAnim._lastLaughterSoundTime">
            <summary>
            Timestamp of the last laughter/taunt sound played. Used to prevent laughter sound spam by
            enforcing a minimum 2-second delay between plays. Manages audio cooldown for character
            taunts and victory sounds.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim._lastResurectionSoundTime">
            <summary>
            Timestamp of the last resurrection sound played. Used to prevent resurrection sound spam by
            enforcing a minimum 1-second delay between plays. Ensures audio doesn't overlap during rapid
            revival attempts.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.currentFootStepGroundType">
            <summary>
            Current terrain type string for footstep sound selection. Set from collider tags and used to
            select appropriate footstep sounds. Reset to empty when leaving ground.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.footstepDelay">
            <summary>
            Controls footstep sound timing with a default 0.5 second delay. Decrements each frame and
            must reach 0 before another footstep sound can play.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.knifeSoundCount">
            <summary>
            Cycles through knife climbing sound variations. Incremented with each knife climb action and
            used with modulo to select from sound array for audio variety.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastBassTime">
            <summary>
            Global static cooldown for bass drop sound effects. Prevents bass drop sounds within 0.3
            seconds of each other. Used for special announcer-style bass effects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastFootStepGroundType">
            <summary>
            Stores previous ground type for footstep sound system. Initialized to GroundType.BrickBehind
            as the default terrain type.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastHighFiveTime">
            <summary>
            Global static cooldown for high-five sound effects. Ensures minimum 0.3 second delay between
            high-five sounds across all instances to prevent audio overlap.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.longGrassDelay">
            <summary>
            Minimum delay between long grass sound effects in seconds. Default value of 0.15 seconds
            prevents grass sound spam when moving through vegetation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.longGrassDelayTimer">
            <summary>
            Tracks time until next grass sound can play. Decrements each frame and is reset to
            longGrassDelay when a grass sound plays.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.sound">
            <summary>
            Primary audio system interface for all character sound effects including footsteps, attacks,
            death sounds, special abilities, and environmental sounds. Lazy initialized if null.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.soundHolder">
            <summary>
            Container for general sound effects used by the character. Stores various audio clips for
            actions like shooting, jumping, and taking damage.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.soundHolderFootSteps">
            <summary>
            Container specifically for footstep and movement-related sounds. Includes wallDragLoops
            array used for wall sliding audio effects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wallDragAudio">
            <summary>
            Audio source for wall sliding sound effects. Created on demand when wall climbing and plays
            looping drag sounds. Volume and pitch adjusted based on slide speed.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AttachToHelicopter(System.Single,Helicopter)">
            <summary>
            Attaches the character to a helicopter for level exit sequences. Adds the hero to the
            helicopter's attached list, parents the character to the ladder holder, positions them
            relative to the helicopter, and adjusts facing direction.
            </summary>
            <param name="ladderXPos">The ladder X position reference</param>
            <param name="helicopter">The helicopter instance to attach to</param>
            <returns>Updated ladder X position after attachment</returns>
        </member>

        <member name="M:TestVanDammeAnim.DischargePilotingUnit(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Exits piloting mode and restores character to normal state. Re-enables rendering, restores
            health, sets position/velocity, and optionally applies stun effects.
            </summary>
            <param name="newX">X position to place character after discharge</param>
            <param name="newY">Y position to place character after discharge</param>
            <param name="xI">X velocity to apply after discharge</param>
            <param name="yI">Y velocity to apply after discharge</param>
            <param name="stunPilot">Whether to stun the character after discharge</param>
        </member>

        <member name="M:TestVanDammeAnim.GetPilottedUnit">
            <summary>
            Gets the unit currently being piloted by this character.
            </summary>
            <returns>The piloted unit, or null if not piloting anything</returns>
        </member>

        <member name="M:TestVanDammeAnim.GrabHelicopterLadder">
            <summary>
            Placeholder method for grabbing the helicopter ladder. Currently has no implementation but
            serves as a virtual method hook for derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StartPilotingUnit(Unit)">
            <summary>
            Initiates piloting mode by disabling character rendering and controls while transferring
            control to specified unit. Sets health to 10000, enables invulnerability, and stops UI
            bubbles.
            </summary>
            <param name="pilottedUnit">The unit this character will pilot</param>
        </member>

        <member name="P:TestVanDammeAnim.playerBubble">
            <summary>
            Gets the ReactionBubble instance appropriate for this player's number. Returns the
            corresponding bubble UI element based on the player's assigned number.
            </summary>
            <value>The ReactionBubble UI component associated with this player's number.</value>
        </member>

        <member name="F:TestVanDammeAnim.ElgilbleToBeKicked">
            <summary>
            Whether this player can be kicked by teammates for being idle. Set true after 15 seconds of
            no input with 2+ players. Reset to false on any input. Note: Field name contains typo
            (should be "Eligible").
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.broMustFailToWin">
            <summary>
            Marks bros that must fail or die to satisfy certain win conditions. When true, disables
            normal gibbing (sets canGib false) and only allows death from OutOfBounds damage. Used for
            special game modes or scenarios.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.hasBeenKicked">
            <summary>
            Tracks whether the unit has been kicked by another character. Set to true in KickRPC when
            kick is received. Prevents duplicate kick processing and triggers kick animation and bubble
            display.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.heldGrenade">
            <summary>
            Reference to grenade currently held by character for throwing back. Enables grenade
            catch-and-throw mechanics. Used to calculate throw velocity based on grenade weight.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.heldMook">
            <summary>
            Reference to enemy (Mook) currently held by character. Enables enemy grab-and-throw
            mechanics. Position updates applied to held mook during carry.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.isOnHelicopter">
            <summary>
            Indicates whether the hero has boarded the extraction helicopter at level completion. Set to
            true when entering helicopter, changes playerNum to 5 for special handling. Used to track
            successful level extraction.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.kickPlayerBubble">
            <summary>
            Visual indicator shown above idle players that can be kicked by teammates. Changes
            material/color based on kick state. Only appears in multiplayer with 2+ players after 15
            seconds of inactivity.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastPathingTime">
            <summary>
            Timestamp of last AI pathfinding attempt. Enforces 0.1 second cooldown between pathfinding
            requests to prevent excessive calculations.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.nearbyMook">
            <summary>
            Reference to closest enemy available for interaction. Set to skinned mook on back if
            present, otherwise searches for nearby mook. Used for grab/interaction targeting.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.onBackOf">
            <summary>
            Reference to another unit this unit is riding on (piggyback riding). Used for special
            movement mechanics when one character carries another.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.pathingAttempts">
            <summary>
            Counter for AI pathfinding attempts. Incremented on each attempt and stops trying after 10
            attempts to prevent infinite loops. Reset when command completes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.pilottedUnit">
            <summary>
            Reference to the vehicle or unit currently being piloted by this character. Set when
            entering vehicles, cleared when exiting. When set, modifies UI display and input handling.
            Serialized for network synchronization.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.throwingHeldObject">
            <summary>
            Indicates if character is currently in throwing animation. Set true when starting throw and
            false when completed. Controls throwing animation state.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ActivateGun">
            <summary>
            Shows the gun sprite by setting it active. Counterpart to DeactivateGun, used to restore
            weapon visibility after states that hide it. Includes null check for safety.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CalculateCeilingHeight">
            <summary>
            Calculates the height of the ceiling above the character using three upward raycasts
            (center, left, right). Returns the lowest ceiling point found, which is used for death
            animations to prevent visual clipping through level geometry.
            </summary>
            <returns>Height in units to the nearest ceiling above the character</returns>
        </member>

        <member name="M:TestVanDammeAnim.CanReduceLives">
            <summary>
            Determines whether lives should be reduced when this character dies. Returns true for
            non-zombie characters, allowing normal life deduction. Zombie characters return false to
            prevent life loss on death.
            </summary>
            <returns>True if lives should be reduced on death, false for zombies</returns>
        </member>

        <member name="M:TestVanDammeAnim.DeactivateGun">
            <summary>
            Hides the gun sprite by setting it inactive. Used during death sequences, frozen states, and
            other situations where the weapon should not be visible. Includes null check for safety.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.GetFootPoofColor">
            <summary>
            Determines appropriate particle effect color based on environmental ground conditions. Uses
            priority-based detection: oil takes precedence over quicksand, which takes precedence over
            pool submersion. Returns BloodColor.None for normal ground.
            </summary>
            <returns>BloodColor enum value representing the appropriate particle effect color for current
        environment</returns>
        </member>

        <member name="M:TestVanDammeAnim.NotifyDeathType">
            <summary>
            Reports the character's death type to the statistics system for analytics tracking. Uses an
            internal flag to ensure the death is only reported once, preventing duplicate statistics
            entries.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PackState(UnityStream)">
            <summary>
            Serializes character state for network synchronization. Packs piloted unit, action state,
            and health. For heroes, also includes player number and hero type.
            </summary>
            <param name="stream">The network stream to write data to</param>
            <returns>The stream with packed data</returns>
        </member>

        <member name="M:TestVanDammeAnim.RunOnlineBadSpawnFailSafe">
            <summary>
            Prevents bad spawn situations in online multiplayer for hero characters. Runs periodic
            checks to ensure proper spawn state when not hosting.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetGunPosition(System.Single,System.Single)">
            <summary>
            Positions the gun sprite relative to the character with specified offsets. Sets gun
            transform position and ensures consistent scale (1,1,1) while maintaining proper rendering
            depth (-0.001f on Z-axis).
            </summary>
            <param name="xOffset">Horizontal offset for gun positioning relative to character</param>
            <param name="yOffset">Vertical offset for gun positioning relative to character</param>
        </member>

        <member name="M:TestVanDammeAnim.SetRenderers(System.Boolean)">
            <summary>
            Toggles all child MeshRenderer components on or off. Finds all MeshRenderers in children
            including inactive ones and sets their enabled state.
            </summary>
            <param name="enabled">Whether to enable or disable the renderers</param>
        </member>

        <member name="M:TestVanDammeAnim.StopPlayerBubbles">
            <summary>
            Deactivates all player indicator UI bubbles including player number bubbles (1-4) and the
            high-five interaction bubble. Only runs for player-controlled characters and calls
            StopBubble on each active bubble to hide them.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.TryAssignHeroThatKilledMe(UnityEngine.MonoBehaviour)">
            <summary>
            Tracks which hero killed this unit for statistics and scoring purposes. Only assigns if not
            already set, extracts the player number from the damage sender, and stores the death
            position for kill tracking statistics.
            </summary>
            <param name="damageSender">The MonoBehaviour (typically a hero) that killed this unit</param>
        </member>

        <member name="M:TestVanDammeAnim.UnpackState(UnityStream)">
            <summary>
            Deserializes network state and applies it to the character. Unpacks all data from PackState
            with special handling for BoondockBro and Desperabro. Sets up hero if alive or deactivates
            gun if dead.
            </summary>
            <param name="stream">The network stream to read data from</param>
            <returns>The stream after reading data</returns>
        </member>

        <member name="P:TestVanDammeAnim.HalfWidth">
            <summary>
            Gets the half-width of the character's collision bounds. This value is used for collision
            detection and positioning calculations.
            </summary>
            <value>Half the width of the character's collision box in world units.</value>
        </member>

        <member name="P:TestVanDammeAnim.SyncParent">
            <summary>
            Gets or sets the parent Transform for network synchronization. This property enables
            synchronized parenting across multiplayer clients.
            </summary>
            <value>The Transform that should be synchronized as this object's parent across the network.</value>
        </member>

        <member name="P:TestVanDammeAnim.SyncParentedPosition">
            <summary>
            Gets or sets the position relative to a parent Transform for network synchronization. This
            property manages both position and parent relationship in multiplayer scenarios.
            </summary>
            <value>A ParentedPosition structure containing position data and parent transform reference.</value>
        </member>

        <member name="F:TestVanDammeAnim._counter">
            <summary>
            General purpose time counter field. Currently has no specific usage in TestVanDammeAnim base
            implementation. Available for derived classes to use for custom timing needs or animation
            sequences.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim._spawnFailSafeTimer">
            <summary>
            Network synchronization failsafe timer for spawn validation. Counts up for 2 seconds after
            spawning to detect position mismatches in multiplayer. If position remains at origin after
            timeout, triggers forced position sync to resolve spawn failures.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AttachToHeli">
            <summary>
            Virtual method for attaching TestVanDammeAnim to helicopter. Currently empty implementation
            that can be overridden by derived classes.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetUpHero(System.Int32,HeroType,System.Boolean)">
            <summary>
            Configures TestVanDammeAnim as a hero character with specified player number and hero type.
            Optionally registers with HeroController and creates hero indicator effects based on game
            state conditions.
            </summary>
            <param name="PlayerNum">The player number to assign to this hero (0-3)</param>
            <param name="heroTypeEnum">The type of hero this character represents</param>
            <param name="registerHero">Whether to register this hero with the HeroController system</param>
        </member>

        <member name="M:TestVanDammeAnim.ShowStartBubble">
            <summary>
            Displays the starting bubble UI for heroes when HUDs are enabled and character is alive.
            Restarts bubble animation and flashes avatar.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.disarmedGunMaterial">
            <summary>
            Material applied to gun sprite to indicate disarmed state during reward phase. Only applied
            to non-winning players in multiplayer matches. Provides visual feedback that the character's
            weapon is disabled.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.faderSpritePrefab">
            <summary>
            Prefab reference for creating fade effect sprites. Used to access FaderSprite component for
            visual fade transitions. Enables smooth visual transitions for various game states.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.heroType">
            <summary>
            Identifies which specific hero character this instance represents (e.g., Rambro,
            Brominator). Set during hero setup and used for death statistics, special behaviors, and
            network serialization. Critical for hero registration and ability configuration.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.player">
            <summary>
            Reference to the Player object that controls this hero. Core reference for input handling,
            player-specific settings, and multiplayer identification. Essential for connecting character
            actions to player input.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.spawnPositionHasBeenSet">
            <summary>
            Flag indicating the unit's spawn position has been properly initialized. Set to true after
            spawn setup completes. Prevents duplicate spawn initialization and ensures spawn-related
            effects only trigger once.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.usePrimaryAvatar">
            <summary>
            Determines whether to display the primary or secondary avatar image in the HUD. Default true
            shows primary avatar. Passed to all avatar state methods to control which character portrait
            is displayed. Can be toggled for alternate character representations.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.BurstChest">
            <summary>
            Executes alien chest bursting sequence. Disconnects face hugger, spawns alien xenomorph
            (only for local player or local insemination), targets nearest player, triggers alien
            growth, gibs character, and plays sound effects.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CalculateInseminationFrame">
            <summary>
            Calculates the sprite frame for insemination animation based on infection progression.
            Returns frames 0-7 based on inseminated counter timing.
            </summary>
            <returns>Animation frame index for insemination state</returns>
        </member>

        <member name="M:TestVanDammeAnim.CanInseminate(System.Single,System.Single)">
            <summary>
            Checks if character can be inseminated by alien face huggers. Requires no existing
            inseminator, positive health, and health below 1000.
            </summary>
            <param name="xI">X force component (unused in logic)</param>
            <param name="yI">Y force component (unused in logic)</param>
            <returns>True if character can be inseminated, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.DisConnectFaceHugger">
            <summary>
            Removes attached face hugger from character. Handles face hugger positioning, disconnection,
            and UI cleanup.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.HasFaceHugger">
            <summary>
            Checks if character currently has a face hugger attached.
            </summary>
            <returns>True if face hugger is attached, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.Inseminate(AlienFaceHugger,System.Single,System.Single)">
            <summary>
            Initiates alien insemination process via RPC for network synchronization. Called by face
            hugger units to begin infection.
            </summary>
            <param name="unit">The alien face hugger performing the insemination</param>
            <param name="xForce">X force component for insemination</param>
            <param name="yForce">Y force component for insemination</param>
            <returns>Always returns true</returns>
        </member>

        <member name="M:TestVanDammeAnim.InseminateRPC(AlienFaceHugger,System.Single,System.Single)">
            <summary>
            RPC method that executes alien insemination process. Sets up face hugger attachment,
            initializes infection counters, updates UI, and plays muffled scream sounds.
            </summary>
            <param name="unit">The alien face hugger performing insemination</param>
            <param name="xForce">X force component for insemination</param>
            <param name="yForce">Y force component for insemination</param>
        </member>

        <member name="M:TestVanDammeAnim.IsInseminated">
            <summary>
            Checks if character is currently in inseminated state with active alien infection.
            </summary>
            <returns>True if inseminated with alien parasite, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.RecoverFromInseminatioRPC">
            <summary>
            RPC method that executes insemination recovery. Removes face hugger, resets infection
            counters, grants invulnerability, and cleans up UI elements.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RecoverFromInsemination">
            <summary>
            Initiates recovery from alien insemination via RPC for network synchronization. Called to
            cure infection before chest bursting occurs.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.alienBursterPrefab">
            <summary>
            Prefab reference for the alien creature that bursts from the unit's chest after
            insemination. Spawned when inseminatedCounter reaches its threshold, creating the dramatic
            chest-bursting death sequence. The spawned alien becomes an enemy unit.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.inseminatedByLocalUnit">
            <summary>
            Tracks whether the insemination was performed by a locally-controlled unit. Currently not
            actively used in the codebase. May have been intended for network synchronization or scoring
            purposes in the alien infection system.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.inseminatedCounter">
            <summary>
            Timer tracking the gestation period after successful alien insemination. Incremented each
            frame until reaching the burst threshold (typically 5-10 seconds), at which point an alien
            burster emerges from the unit's chest, killing the host.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.inseminationCounter">
            <summary>
            Timer tracking the insemination process while a face hugger is attached. Incremented while
            inseminatorUnit is attached, representing the infection progress. When it reaches the
            threshold, the unit becomes fully inseminated and the gestation phase begins.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.inseminationFrame">
            <summary>
            Frame counter for insemination animation or timing. Currently not actively used in the
            codebase. May have been intended for synchronizing insemination visual effects or for
            network replication of the infection state.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.inseminatorUnit">
            <summary>
            Reference to the AlienFaceHugger currently attached to this unit's face. Set when a face
            hugger successfully attaches, cleared when the face hugger is destroyed or detaches. When
            set, prevents normal actions and begins the insemination process.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.reviveSource">
            <summary>
            Reference to the hero that revived this character as a zombie. When set, enables the
            reviving player to control this zombie through input copying. Checked for zombie AI control
            decisions and cleared when zombie is destroyed.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.reviveZombieCounter">
            <summary>
            Periodic counter for zombie behavior updates. Triggers zombie-specific actions at 0.4 second
            intervals. Creates consistent zombie movement patterns and prevents continuous action spam.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.reviveZombieTime">
            <summary>
            Countdown timer before a revived zombie becomes active. Default 2 seconds, randomized on
            revival between 1.5-2.5 seconds. Prevents instant zombie activation after revival, creating
            a rising animation period.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.zombieDelay">
            <summary>
            Input delay for zombie movement control. Decremented during zombie input copying from
            controlling player. Creates intentional lag in zombie response to player commands for
            gameplay balance.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.zombieOffset">
            <summary>
            Random offset (0-1) that creates behavioral variation between zombies. Used to desynchronize
            zombie movement and actions by offsetting timing calculations. Ensures multiple zombies
            don't move in perfect lockstep, creating more organic zombie hordes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.zombieTimerOffset">
            <summary>
            Integer offset for zombie action timing variations. Combined with zombieOffset to create
            unique behavior patterns for each zombie. Prevents synchronized zombie attacks and
            movements, making zombie groups feel more chaotic and unpredictable.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateActualDeath">
            <summary>
            Displays standard ground death animation frame and deactivates gun sprite. Used for normal
            death situations when character dies on solid ground.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateClimbingLadder">
            <summary>
            Manages comprehensive ladder climbing animation with multiple movement states. Handles
            transition animations, idle climbing with gun positioning, movement-based climbing with
            footstep sounds, and specialized climbing animations for up/down movement. Includes
            proximity detection for ladder presence and appropriate animation fallbacks.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateClimbingLadderTransition(System.Boolean)">
            <summary>
            Handles smooth transition animation between ladder climbing and normal movement states.
            Manages transition frame progression, frame rates, and sprite positioning during the 6-frame
            transition sequence.
            </summary>
            <param name="intoClimbing">True when transitioning into climbing mode, false when
        transitioning out of climbing mode</param>
        </member>

        <member name="M:TestVanDammeAnim.AnimateDancingFrames">
            <summary>
            Displays dancing animation sequence using configurable frame cycling. Deactivates gun and
            cycles through dancing frames from the specified sprite sheet position with consistent frame
            rate.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateDeath">
            <summary>
            Death animation dispatcher that selects appropriate death animation based on character
            state. Prioritizes insemination frames if infected, falling death animation if airborne and
            not impaled, or standard ground death animation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateFallen">
            <summary>
            Virtual method for fallen state animation. Empty implementation that can be overridden by
            derived classes to provide custom fallen animation behavior.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateFallingDeath">
            <summary>
            Displays falling death animation frame for characters dying while airborne. Provides
            different visual feedback compared to ground death.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateGesture">
            <summary>
            Handles comprehensive gesture animation sequences including salute, wave, point, flex,
            thrust, knee drop, and shush gestures. Manages frame progression, timing, special effects
            (flex sounds and face hugger disconnection), and looping behavior for different gesture
            types.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateInseminationFrames">
            <summary>
            Displays alien insemination animation frames based on infection progression. Uses calculated
            insemination frame index to show appropriate sprite frame from the insemination animation
            sheet.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateWallAnticipation">
            <summary>
            Manages wall climb anticipation animation with precise knife positioning based on vertical
            movement. Calculates knife stab positioning relative to previous climb heights and
            alternates between left and right knife hands for realistic climbing animation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateWallClimb">
            <summary>
            Executes active wall climbing animation with realistic knife stab mechanics and height
            tracking. Manages velocity changes at specific animation frames, alternating knife hands,
            sound effects, and precise tracking of climbing progress relative to previous stab
            positions. Includes collision detection for wall interaction events.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.AnimateWallDrag">
            <summary>
            Handles wall sliding animation with knife-based climbing mechanics. Manages alternating
            knife hand positions, velocity-based frame selection, sound effects, and visual particle
            effects. Supports both new knife climbing frames and legacy animation systems.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ApplyWallClimbingGravity">
            <summary>
            Applies specialized gravity calculations during wall climbing and dragging states. Provides
            reduced gravity during active climbing phases and maintains upward velocity during certain
            animation frames to create realistic wall climbing physics.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ChangeFrame">
            <summary>
            Core animation frame dispatcher that routes to appropriate animation methods based on
            character state and action. Handles priority-based animation selection including frozen
            state, special unit states (on back, strung up, impaled), and action state-specific
            animations (idle, running, jumping, climbing, death). Also manages gun activation, sprite
            offsets, and frame counters for various animation systems.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckAirDash">
            <summary>
            Evaluates conditions for air dash availability and triggers dash if conditions are met.
            Checks for horizontal air dash availability, ground proximity for dash continuation, and
            downward air dash when moving straight down.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CoverInAcid">
            <summary>
            Covers TestVanDammeAnim in acid if not invulnerable and eligible. Sends RPC to all clients
            to apply acid coverage.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CoverInAcidRPC">
            <summary>
            RPC method that applies acid coverage effects. Changes materials, handles alien-specific
            reactions, and initiates acid damage systems.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.ForceChangeFrame">
            <summary>
            Forces an immediate frame change by calling the ChangeFrame method. Provides public access
            to trigger frame updates outside of the normal animation cycle.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.HasBeenCoveredInAcid">
            <summary>
            Checks if TestVanDammeAnim is currently covered in acid.
            </summary>
            <returns>True if covered in acid, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.IncreaseFrame">
            <summary>
            Advances the main animation frame counter and insemination frame counter if face hugger is
            attached. This method synchronizes both animation systems to ensure proper frame progression
            during alien infection states.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.IsGesturing">
            <summary>
            Checks if character is currently performing any gesture animation by verifying the current
            gesture state is not None.
            </summary>
            <returns>True if character is performing a gesture, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.PlayFootStepSound">
            <summary>
            Plays surface-appropriate footstep sounds with default volume and pitch settings (0.4
            volume, 1.0 pitch).
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.PlayFootStepSound(System.Single,System.Single)">
            <summary>
            Plays surface-specific footstep sounds based on current environment and character state.
            Automatically selects appropriate sound arrays for quicksand, ladder climbing, or ground
            surface types (Dirt, Stone, Metal, Wood, Grass, Slime). Also triggers long grass sound
            effects when applicable.
            </summary>
            <param name="v">Volume level for the footstep sound</param>
            <param name="p">Pitch level for the footstep sound</param>
        </member>

        <member name="M:TestVanDammeAnim.PlayLongGrassSound(System.Boolean)">
            <summary>
            Plays environment-specific footstep sounds for grass and blood surfaces with timing control.
            Checks for jiggle doodads on the current block to determine sound type, playing blood sounds
            at reduced volume for blood doodads or grass sounds for other doodads.
            </summary>
            <param name="checkTimer">Whether to respect the grass delay timer to prevent audio spam. If
        false, plays sound immediately regardless of timer</param>
            <returns>True if a sound was played, false otherwise</returns>
        </member>

        <member name="M:TestVanDammeAnim.RemoveAcid">
            <summary>
            Removes acid coverage from TestVanDammeAnim by sending RPC to all clients if conditions are
            met.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RemoveAcidRPC">
            <summary>
            RPC method that removes acid coverage. Restores default material, enables gun sprite, and
            creates slime particle effects.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunCoveredInAcid">
            <summary>
            Handles ongoing acid coverage effects including cage busting damage, checkpoint recovery,
            melting animations, and acid particle generation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.RunStepOnWalls">
            <summary>
            Triggers step-on events for wall surfaces during climbing or dragging. Performs raycasting
            to detect wall colliders and sends step messages for interaction with climbable surfaces.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.SetGestureAnimation(GestureElement.Gestures)">
            <summary>
            Sets and manages gesture animation state with frame reset and multiplayer achievement
            tracking. Blocks movement during gesture animation and awards achievement when all 4 players
            perform gestures simultaneously.
            </summary>
            <param name="gesture">The gesture type to animate (None, Salute, Wave, Point, Flex, Thrust,
        KneeDrop, Shhh)</param>
        </member>

        <member name="M:TestVanDammeAnim.StartDashing">
            <summary>
            Initiates dashing movement with speed multipliers and visual effects. Manages dash
            availability based on air state, applies speed modifiers with diminishing returns for
            successive dashes, and creates appropriate dash effects. Handles both ground and air dash
            scenarios.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.TriggerFlexEvent">
            <summary>
            Triggers perk system flex event for muscle flexing gestures. Activates associated perks and
            bonuses when character performs flex animation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.acidMeltTimer">
            <summary>
            Controls the melting process timing. Initialized to 1 second when acid is applied and can be
            extended by 0.3 seconds with additional acid damage. When it reaches 0, triggers the Melt
            method.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.acidParticleTimer">
            <summary>
            Controls timing of acid particle effect spawning. Decrements each frame while covered in
            acid and resets to 0.1 seconds, triggering green slime particle creation at regular
            intervals.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.hasBeenCoverInAcid">
            <summary>
            Tracks whether unit is currently covered in acid. Blocks certain actions while true and
            triggers acid particle effects and melting process. Reset when recovering from acid effects.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.hasMelted">
            <summary>
            Indicates if unit has completed the melting process from acid damage. One-way flag that is
            never reset once set. Prevents particle spawning after melting is complete.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.lastRecoveredFromAcidTime">
            <summary>
            Timestamp tracking when unit last recovered from acid effects. Enforces minimum 1.5 second
            delay between recoveries for player-controlled units only.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckHighFive">
            <summary>
            Checks for nearby characters available for high-five interactions and manages high-five
            initiation timing.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CreateHighFiveEffects">
            <summary>
            Creates visual and audio effects for successful high-five interactions including particles
            and screen effects.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.HighFiveBoost(System.Boolean)">
            <summary>
            Applies high-five boost effects including speed enhancement and visual effects.
            </summary>
            <param name="activeHighFiveCharacter">Whether this character initiated the high-five</param>
        </member>

        <member name="M:TestVanDammeAnim.ReleaseHighFive">
            <summary>
            Handles releasing the high-five gesture. Updates animation frame, sets appropriate state
            flags, triggers frame change, and dismisses the high-five bubble if present.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StartHighFive">
            <summary>
            Initializes the high-five gesture action. Resets related timers and flags, sets holding
            high-five state to true, resets the animation frame, and triggers a frame update.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.TryConnectHighFive">
            <summary>
            Attempts to connect with nearby character for high-five interaction. Returns success status
            for networking.
            </summary>
            <returns>True if high-five connection successful, false otherwise</returns>
        </member>

        <member name="F:TestVanDammeAnim.high5Bubble">
            <summary>
            Special reaction bubble specifically for high-five interactions. Displays prompts when
            players are close enough to perform a high-five. Shows button prompts and timing windows for
            successful high-five execution between players.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.highFive">
            <summary>
            Current frame's high-five input state from player controls. When pressed, triggers high-five
            gesture attempts with nearby players.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.highFiveBoost">
            <summary>
            Indicates if the high-five speed boost is currently active. When true, character movement
            speed is increased by the highFiveBoostM multiplier.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.highFiveBoostM">
            <summary>
            Speed multiplier applied during high-five boost. Default value of 1.4 provides a 40% speed
            increase. Applied by dividing movement calculations by this value.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.highFiveBoostTime">
            <summary>
            Remaining duration of the high-five boost effect in seconds. Counts down each frame while
            the boost is active.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.highFiveNoBoost">
            <summary>
            Temporary state that prevents high-five boosts from being applied. Used to prevent boost
            stacking or rapid re-triggering of boosts.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.highFiveNoBoostTime">
            <summary>
            Duration of high-five boost prevention in seconds. Typically set to 0.2 seconds after
            certain actions. When this timer expires, highFiveNoBoost is automatically cleared.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.highfiveHoldTime">
            <summary>
            Tracks the duration the high-five gesture has been held. Increments during the high-five
            animation and resets to -1.5 after 0.5 seconds to create a cooldown period between
            high-fives.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.holdingHighFive">
            <summary>
            Indicates that the character is currently initiating a high-five gesture. Set to true when
            starting a high-five and prevents air dashing while active. Automatically cleared after
            frame 2 of the high-five animation.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.ignoreHighFivePressTime">
            <summary>
            Cooldown timer that prevents rapid high-five or special ability triggering. Set to 0.1
            seconds after certain actions and prevents new high-five attempts while greater than zero.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.player1Bubble">
            <summary>
            Reaction bubble UI element for player 1. Displays context-sensitive prompts like "PRESS X TO
            HIGH FIVE" or AFK indicators. Positioned above the character and shown/hidden based on game
            state and player proximity.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.player2Bubble">
            <summary>
            Reaction bubble UI element for player 2. Functions identically to player1Bubble but for the
            second player. Enables multiplayer interaction prompts and status indicators specific to
            player 2's perspective.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.player3Bubble">
            <summary>
            Reaction bubble UI element for player 3. Displays context-sensitive prompts and status
            indicators above the third player's character in 4-player local multiplayer. Functions
            identically to player1Bubble and player2Bubble but for the third player slot.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.player4Bubble">
            <summary>
            Reaction bubble UI element for player 4. Displays context-sensitive prompts and status
            indicators above the fourth player's character in 4-player local multiplayer. Completes the
            set of player bubbles for full 4-player support.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.releasingHighFive">
            <summary>
            Tracks when the high-five input has been released. Set when the player releases the
            high-five button and used to control the end of the high-five animation state.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.showHighFiveAfterMeleeTimer">
            <summary>
            Timer that delays high-five prompt display after melee attacks. Incremented after successful
            melee, triggers prompt at 1.5 seconds. Reset when melee is activated. Encourages cooperative
            play by prompting celebratory interactions after combat.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.successfulHighFive">
            <summary>
            Indicates that a high-five has successfully connected with another player. When true and
            animation reaches frame 4, triggers high-five boost effects. Automatically cleared after the
            animation completes.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.successfulHighFiveActiveBro">
            <summary>
            Identifies whether this character was the initiator of a successful high-five. Used to
            determine which player receives the high-five boost effect.
            </summary>
        </member>

        <member name="F:TestVanDammeAnim.wasHighFive">
            <summary>
            Previous frame's high-five input state. Used for edge detection to determine when the
            high-five button is first pressed rather than held.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.CheckForKick">
            <summary>
            Checks proximity to other players and handles kick interactions. Shows kick bubble when
            eligible, changes bubble material based on proximity, and executes kicks when conditions are
            met.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.Kick">
            <summary>
            Initiates player kick process by sending RPC to all clients if character hasn't been kicked
            yet.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.KickRPC">
            <summary>
            RPC method that executes the kick sequence. Shows kick bubble, starts kick routine, and
            marks character as kicked.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.KickRoutine">
            <summary>
            Coroutine that handles the visual kick countdown sequence. Flashes kick bubble materials
            with decreasing intervals, then gibs character and creates explosion effects.
            </summary>
            <returns>IEnumerator for coroutine execution</returns>
        </member>

        <member name="M:TestVanDammeAnim.ShowKickBubble">
            <summary>
            Creates and displays the kick player bubble UI above the character. Sets up bubble parenting
            and restarts bubble animation.
            </summary>
        </member>

        <member name="M:TestVanDammeAnim.StopKickBubble">
            <summary>
            Stops the kick player bubble animation if it exists.
            </summary>
        </member>

        <member name="M:Unit.Awake">
            <summary>
            Unity's Awake method that initializes the unit by caching AI components. Searches
            for PolymorphicAI components both on the unit itself and recursively through its
            parent/child hierarchy.
            </summary>
        </member>

        <member name="M:Unit.BurnInternal(System.Int32,System.Int32)">
            <summary>
            Handles internal burn damage to the unit. Base implementation is empty. Override in
            derived classes to implement burn damage effects and animations.
            </summary>
            <param name="damage">The amount of burn damage to apply.</param>
            <param name="direction">The direction of the burn effect (-1 for left, 1 for right).</param>
        </member>

        <member name="M:Unit.CreateGibEffects(DamageType,System.Single,System.Single)">
            <summary>
            Creates visual gib effects when the unit is destroyed. Base implementation is empty.
            Override in derived classes to spawn gib particles and effects.
            </summary>
            <param name="damageType">The type of damage that caused the gibbing.</param>
            <param name="xI">The horizontal force for gib particles.</param>
            <param name="yI">The vertical force for gib particles.</param>
        </member>

        <member name="M:Unit.Damage(System.Int32,DamageType,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour,System.Single,System.Single)">
            <summary>
            Handles damage dealt to the unit. Base implementation is empty. Override in derived
            classes to implement damage processing, health reduction, and death handling.
            </summary>
            <param name="damage">The amount of damage to deal.</param>
            <param name="damageType">The type of damage being dealt.</param>
            <param name="xI">The X impulse force from the damage.</param>
            <param name="yI">The Y impulse force from the damage.</param>
            <param name="direction">The direction the damage came from (-1 for left, 1 for right).</param>
            <param name="damageSender">The MonoBehaviour that caused the damage.</param>
            <param name="hitX">The X coordinate where the damage hit.</param>
            <param name="hitY">The Y coordinate where the damage hit.</param>
        </member>

        <member name="M:Unit.Death(System.Single,System.Single,DamageObject)">
            <summary>
            Handles the unit's death, hiding attachments and setting the action state to Dead.
            Sends death notification via RPC if the unit is owned by the local player or is not
            a hero. Special handling for MookArmouredGuy with SelfEsteem damage.
            </summary>
            <param name="xI">The horizontal force applied at death.</param>
            <param name="yI">The vertical force applied at death.</param>
            <param name="damage">The damage object containing information about what killed the
                unit.</param>
        </member>

        <member name="M:Unit.DeathRPC(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Remote procedure call for synchronizing death across the network. Sets the unit's
            position and triggers the Death method if the unit isn't already dead.
            </summary>
            <param name="xI">The horizontal force applied at death.</param>
            <param name="yI">The vertical force applied at death.</param>
            <param name="_x">The X position where death occurred.</param>
            <param name="_y">The Y position where death occurred.</param>
        </member>

        <member name="M:Unit.Gib(DamageType,System.Single,System.Single)">
            <summary>
            Protected method for gibbing the unit into pieces. Base implementation is empty.
            Override in derived classes to implement gibbing mechanics.
            </summary>
            <param name="damageType">The type of damage that caused the gibbing.</param>
            <param name="xI">The horizontal force of the gibbing.</param>
            <param name="yI">The vertical force of the gibbing.</param>
        </member>

        <member name="M:Unit.GibNow(DamageType,System.Single,System.Single)">
            <summary>
            Immediately gibs (explodes into pieces) the unit. Public wrapper that calls the
            protected Gib method.
            </summary>
            <param name="damageType">The type of damage that caused the gibbing.</param>
            <param name="xI">The horizontal force of the gibbing.</param>
            <param name="yI">The vertical force of the gibbing.</param>
        </member>

        <member name="M:Unit.HeadShot(System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Single,System.Single,UnityEngine.MonoBehaviour)">
            <summary>
            Handles headshot damage to the unit. Simply delegates to the regular Damage method
            with the same parameters. Override in derived classes to implement special headshot
            behavior.
            </summary>
            <param name="damage">The amount of damage to deal.</param>
            <param name="damageType">The type of damage being dealt.</param>
            <param name="xI">The X impulse force from the damage.</param>
            <param name="yI">The Y impulse force from the damage.</param>
            <param name="direction">The direction the damage came from (-1 for left, 1 for right).</param>
            <param name="xHit">The X coordinate where the headshot hit.</param>
            <param name="yHit">The Y coordinate where the headshot hit.</param>
            <param name="damageSender">The MonoBehaviour that caused the damage.</param>
        </member>

        <member name="M:Unit.Impale(UnityEngine.Transform,UnityEngine.Vector3,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Impales the unit on an object, attaching it to the specified transform. Base
            implementation is empty. Override in derived classes to implement impalement
            mechanics.
            </summary>
            <param name="impaleTransform">The transform to attach the impaled unit to.</param>
            <param name="direction">The direction vector of the impalement.</param>
            <param name="damage">The damage dealt by the impalement.</param>
            <param name="xI">The horizontal velocity imparted by the impalement.</param>
            <param name="yI">The vertical velocity imparted by the impalement.</param>
            <param name="xOffset">The horizontal offset from the impale transform.</param>
            <param name="yOffset">The vertical offset from the impale transform.</param>
        </member>

        <member name="M:Unit.Knock(DamageType,System.Single,System.Single,System.Boolean)">
            <summary>
            Applies knockback force to the unit. Base implementation is empty. Override in
            derived classes to implement knockback physics and animations.
            </summary>
            <param name="damageType">The type of damage causing the knockback.</param>
            <param name="xI">The X knockback force.</param>
            <param name="yI">The Y knockback force.</param>
            <param name="forceTumble">Whether to force the unit into a tumbling state.</param>
        </member>

        <member name="M:Unit.KnockSimple(DamageObject)">
            <summary>
            Simplified knockback method that processes knockback from a DamageObject. Base
            implementation is empty. Override in derived classes to extract knockback parameters
            from the damage object.
            </summary>
            <param name="damageObject">The damage object containing knockback information.</param>
        </member>

        <member name="M:Unit.QuietDeath">
            <summary>
            Kills the unit quietly without visual or audio effects. Sets health to 0, action
            state to Dead, and sends RPC notification if not already sent.
            </summary>
        </member>

        <member name="M:Unit.QuietDeathRPC(System.Single,System.Single)">
            <summary>
            Remote procedure call for synchronizing quiet death across the network. Sets the
            unit's position and triggers QuietDeath if the unit isn't already dead.
            </summary>
            <param name="_x">The X position where death occurred.</param>
            <param name="_y">The Y position where death occurred.</param>
        </member>

        <member name="M:Unit.ReduceDeathTimer(System.Int32,System.Single)">
            <summary>
            Reduces the unit's death timer, potentially used for revival mechanics. Base
            implementation is empty. Override in derived classes to implement death timer
            reduction.
            </summary>
            <param name="playerNum">The player number requesting the timer reduction.</param>
            <param name="newTime">The new death timer value.</param>
        </member>

        <member name="M:Unit.SetDeathType(DamageType,System.Int32)">
            <summary>
            Determines the death animation type based on damage type and remaining health. If
            health is below -10, sets to Gibbed (or Explode for Unholy/Explosion damage).
            Otherwise selects appropriate death type: Fire damage causes fire death, explosions
            cause bullet death, melee/knife causes knife death, falls cause fall death, etc.
            </summary>
            <param name="damageType">The type of damage that killed the unit.</param>
            <param name="health">The unit's health at time of death.</param>
        </member>

        <member name="M:Unit.SetVelocity(DamageType,System.Single,System.Single,System.Single)">
            <summary>
            Sets the unit's velocity from damage or explosion effects. Base implementation is
            empty. Override in derived classes to apply velocity changes.
            </summary>
            <param name="damageType">The type of damage causing the velocity change.</param>
            <param name="xI">The base X velocity.</param>
            <param name="xIBlast">The additional X blast velocity.</param>
            <param name="yIBlast">The Y blast velocity.</param>
        </member>

        <member name="M:Unit.SilentDeath">
            <summary>
            Alias for QuietDeath that kills the unit without visual or audio effects. Simply
            calls QuietDeath internally.
            </summary>
        </member>

        <member name="M:Unit.Unimpale(System.Int32,DamageType,System.Single,System.Single,UnityEngine.MonoBehaviour)">
            <summary>
            Removes the unit from an impaled state and applies damage. Reduces the knockback
            velocity by 20% and applies damage at the unit's position with an 8 unit vertical
            offset.
            </summary>
            <param name="damage">The damage to apply when unimpaling.</param>
            <param name="damageType">The type of damage to apply.</param>
            <param name="xI">The horizontal knockback force.</param>
            <param name="yI">The vertical knockback force.</param>
            <param name="firedBy">The MonoBehaviour that caused the unimpalement.</param>
        </member>

        <member name="F:Unit._diedFromOOB">
            <summary>
            Protected flag indicating whether this unit died from going out of bounds. Set
            during death processing to track boundary-related deaths.
            </summary>
        </member>

        <member name="F:Unit.burnCounter">
            <summary>
            Protected timer that tracks when to apply the next burn damage tick. Counts down
            between damage applications.
            </summary>
        </member>

        <member name="F:Unit.burnDamage">
            <summary>
            Protected value specifying the amount of damage dealt per burn tick. Applied
            periodically while the unit is burning.
            </summary>
        </member>

        <member name="F:Unit.burnTime">
            <summary>
            The total duration in seconds that the unit will burn when set on fire. Hidden in
            Unity Inspector. Controls how long burn damage is applied.
            </summary>
        </member>

        <member name="F:Unit.deathNotificationSent">
            <summary>
            Public flag tracking whether death has been synchronized across the network.
            Prevents duplicate death RPCs in multiplayer.
            </summary>
        </member>

        <member name="F:Unit.deathTime">
            <summary>
            Protected timestamp recording when the unit died. Used for death animation timing
            and cleanup scheduling.
            </summary>
        </member>

        <member name="F:Unit.deathType">
            <summary>
            Protected enum storing how this unit died (Bullet, Explode, Fire, etc.). Used to
            select appropriate death animations and effects. Set by SetDeathType method.
            </summary>
        </member>

        <member name="F:Unit.hasNotifiedDeathType">
            <summary>
            Protected flag indicating whether the death type has been reported for achievements
            or statistics. Ensures deaths are only counted once.
            </summary>
        </member>

        <member name="F:Unit.hasReportedKill">
            <summary>
            Protected flag tracking whether kill credit has been given to the player who killed
            this unit. Prevents duplicate kill scoring.
            </summary>
        </member>

        <member name="F:Unit.plasmaCounter">
            <summary>
            Protected timer that tracks when to apply the next plasma damage tick. Counts down
            between damage applications.
            </summary>
        </member>

        <member name="F:Unit.plasmaDamage">
            <summary>
            Protected value specifying the amount of damage dealt per plasma damage tick.
            Applied periodically while affected by plasma.
            </summary>
        </member>

        <member name="F:Unit.projectile">
            <summary>
            Reference to a projectile this unit has caught or is holding. Used by units that can
            catch and redirect projectiles. Null when not holding anything.
            </summary>
        </member>

        <member name="F:Unit.shockCounter">
            <summary>
            Protected timer that tracks when to apply the next shock damage tick. Counts down
            between damage applications.
            </summary>
        </member>

        <member name="F:Unit.shockDamage">
            <summary>
            Protected value specifying the amount of damage dealt per electrical shock tick.
            Applied periodically while being shocked.
            </summary>
        </member>

        <member name="F:Unit.timesKickedByVanDammeSinceLanding">
            <summary>
            Tracks the number of consecutive kicks received from Van Damme (JCVD) characters
            since the unit last touched the ground. Used for multi-kick combo tracking and
            special animations. Hidden in Unity Inspector.
            </summary>
        </member>

        <member name="M:Unit.CatchFriendlyBullets">
            <summary>
            Determines whether this unit can catch and neutralize friendly projectiles. Base
            implementation returns false. Override in units with bullet-catching abilities.
            </summary>
            <returns>True if the unit can catch friendly bullets, false otherwise.</returns>
        </member>

        <member name="M:Unit.GetSpecialAmmo">
            <summary>
            Returns the current amount of special ammunition for this unit. Base implementation
            returns 0. Override in units with special weapons to return actual ammo count.
            </summary>
            <returns>The amount of special ammunition available.</returns>
        </member>

        <member name="M:Unit.IsFlexing">
            <summary>
            Checks whether the unit is currently performing a flex animation or pose. Base
            implementation returns false. Override in units with flex animations to return
            actual state.
            </summary>
            <returns>True if flexing, false otherwise.</returns>
        </member>

        <member name="M:Unit.IsInStealthMode">
            <summary>
            Checks whether the unit is currently in stealth mode. Base implementation returns
            false. Override in stealth-capable units to return actual stealth state.
            </summary>
            <returns>True if in stealth mode, false otherwise.</returns>
        </member>

        <member name="M:Unit.PlayingSummoningAnimation">
            <summary>
            Checks whether the unit is currently playing any part of a summoning animation. Base
            implementation returns false. Override in summoning units to return actual animation
            state.
            </summary>
            <returns>True if playing any summoning animation, false otherwise.</returns>
        </member>

        <member name="M:Unit.PlayingSummoningAnimationIntro">
            <summary>
            Checks whether the unit is currently playing the intro portion of a summoning
            animation. Base implementation returns false. Override in summoning units to track
            animation state.
            </summary>
            <returns>True if playing summoning intro animation, false otherwise.</returns>
        </member>

        <member name="M:Unit.ShowFuelGauge">
            <summary>
            Determines whether this unit should display a fuel gauge in the UI. Base
            implementation returns false. Override in fuel-consuming units to enable fuel gauge
            display.
            </summary>
            <returns>True if fuel gauge should be shown, false otherwise.</returns>
        </member>

        <member name="M:Unit.StartSummoningAnimation">
            <summary>
            Begins playing a summoning animation sequence. Base implementation is empty.
            Override in units with summoning abilities to trigger the animation.
            </summary>
        </member>

        <member name="M:Unit.StopSummoningAnimation">
            <summary>
            Stops the currently playing summoning animation. Base implementation is empty.
            Override in units with summoning abilities to handle animation cleanup.
            </summary>
        </member>

        <member name="M:Unit.UsingJetpack">
            <summary>
            Checks whether the unit is currently using a jetpack. Base implementation returns
            false. Override in jetpack-equipped units to return actual jetpack usage state.
            </summary>
            <returns>True if using jetpack, false otherwise.</returns>
        </member>

        <member name="M:Unit.BackSomersault(System.Boolean)">
            <summary>
            Performs a backward somersault animation or movement. Base implementation is empty.
            Override in acrobatic units to implement backflip mechanics.
            </summary>
            <param name="forceTumble">Whether to force the unit into a tumbling state.</param>
        </member>

        <member name="M:Unit.CanDisableOffGround">
            <summary>
            Determines whether this unit can be disabled when not touching the ground. Base
            implementation always returns false. Override in derived classes to allow air
            disabling.
            </summary>
            <returns>True if the unit can be disabled while airborne, false otherwise.</returns>
        </member>

        <member name="M:Unit.ForceFaceDirection(System.Int32)">
            <summary>
            Forces the unit to face a specific direction by flipping its transform scale.
            Negative values face left (X scale -1), positive values face right (X scale 1), and
            zero does nothing.
            </summary>
            <param name="direction">The direction to face (-1 for left, 1 for right, 0 for no
                change).</param>
        </member>

        <member name="M:Unit.FrontSomersault">
            <summary>
            Performs a forward somersault animation or movement. Base implementation is empty.
            Override in acrobatic units to implement frontflip mechanics.
            </summary>
        </member>

        <member name="M:Unit.IsInQuicksand">
            <summary>
            Checks whether the unit is currently in quicksand. Base implementation always
            returns false. Override in derived classes to implement quicksand detection.
            </summary>
            <returns>True if the unit is in quicksand, false otherwise.</returns>
        </member>

        <member name="M:Unit.IsNearGround(System.Single)">
            <summary>
            Checks whether the unit is within a specified distance from the ground. Base
            implementation always returns true regardless of the offset parameter. Override in
            derived classes for actual distance checking.
            </summary>
            <param name="maxOffset">The maximum distance from ground to check.</param>
            <returns>True if within maxOffset distance from ground, false otherwise.</returns>
        </member>

        <member name="M:Unit.IsOnGround">
            <summary>
            Checks whether the unit is currently on the ground. Base implementation always
            returns true. Override in derived classes to implement ground detection logic.
            </summary>
            <returns>True if the unit is on ground, false otherwise.</returns>
        </member>

        <member name="M:Unit.SetPosition">
            <summary>
            Updates the unit's world position using the X and Y coordinates with Z offset
            adjustments. If the unit is submerged in a blood pool, adds an additional 8 units to
            the Z offset to create a visual depth effect.
            </summary>
        </member>

        <member name="M:Unit.SetPositionAndVelocity(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets both the position and velocity of the unit in one operation. Base
            implementation is empty. Override in derived classes to handle synchronized position
            and velocity updates.
            </summary>
            <param name="X">The X coordinate to set.</param>
            <param name="Y">The Y coordinate to set.</param>
            <param name="xi">The X velocity to set.</param>
            <param name="yi">The Y velocity to set.</param>
        </member>

        <member name="M:Unit.SetSpeed(System.Single,System.Single)">
            <summary>
            Sets the unit's horizontal and vertical velocity components. Overrides the base
            implementation to directly assign both velocity values.
            </summary>
            <param name="xi">The horizontal velocity to set.</param>
            <param name="yi">The vertical velocity to set.</param>
        </member>

        <member name="P:Unit.IsParachuteActive">
            <summary>
            Gets or sets whether the unit's parachute is currently active. Base implementation
            always returns true for the getter and does nothing for the setter. Override in
            derived classes to implement actual parachute logic.
            </summary>
        </member>

        <member name="P:Unit.TheCollider">
            <summary>
            Gets the cached Collider component for this unit. Lazy-loads and caches the
            component on first access for efficient physics interactions.
            </summary>
        </member>

        <member name="F:Unit.attachedToZipline">
            <summary>
            Reference to the ZipLine object this unit is currently attached to. Null when not on
            a zipline. Set by AttachToZipline method.
            </summary>
        </member>

        <member name="F:Unit.collider_">
            <summary>
            Private cached reference to the unit's Collider component. Used by the TheCollider
            property to avoid repeated GetComponent calls.
            </summary>
        </member>

        <member name="F:Unit.collumn">
            <summary>
            The grid column position of this unit. Used for grid-based positioning systems in
            certain game modes or enemy formations. Note: Field name is misspelled.
            </summary>
        </member>

        <member name="F:Unit.headHeight">
            <summary>
            The height of the unit's head hitbox for headshot detection in game units. Defaults
            to 15 units. Hidden in Unity Inspector.
            </summary>
        </member>

        <member name="F:Unit.height">
            <summary>
            The height of the unit's collision bounds in game units. Defaults to 8 units. Used
            for physics collision detection and spatial calculations.
            </summary>
        </member>

        <member name="F:Unit.lastWallAttachDirection">
            <summary>
            Protected storage of the previous wall attachment direction. Used to detect
            direction changes during wall climbing transitions.
            </summary>
        </member>

        <member name="F:Unit.rope">
            <summary>
            Protected reference to a PredabroRope object for general rope interactions.
            Different from strungUpBy which specifically handles trap suspension. Used for
            climbing or other rope mechanics.
            </summary>
        </member>

        <member name="F:Unit.row">
            <summary>
            The grid row position of this unit. Used for grid-based positioning systems in
            certain game modes or enemy formations.
            </summary>
        </member>

        <member name="F:Unit.slidingOnZipline">
            <summary>
            Flag indicating whether the unit is actively sliding along a zipline. True during
            zipline traversal, false when stationary or not on zipline.
            </summary>
        </member>

        <member name="F:Unit.strungUpBy">
            <summary>
            Reference to the PredabroRope that has trapped and suspended this unit. Used by
            Predator-style rope trap mechanics. Null when not trapped.
            </summary>
        </member>

        <member name="F:Unit.strungUpX">
            <summary>
            The X coordinate where this unit is suspended when caught in a rope trap. Used with
            Predator-style rope trap mechanics. Hidden in Unity Inspector.
            </summary>
        </member>

        <member name="F:Unit.strungUpY">
            <summary>
            The Y coordinate where this unit is suspended when caught in a rope trap. Paired
            with strungUpX for complete position storage during rope suspension. Hidden in Unity
            Inspector.
            </summary>
        </member>

        <member name="F:Unit.suspendFromRope">
            <summary>
            Flag indicating whether this unit should be suspended from a rope trap. Controls
            whether the SuspendFromRope method will create a rope trap for this unit.
            </summary>
        </member>

        <member name="F:Unit.t">
            <summary>
            Protected time value used for frame-independent calculations. Defaults to 0.1f. When
            set to 0, the T property returns clamped delta time instead of this value.
            </summary>
        </member>

        <member name="F:Unit.wallAttachDirection">
            <summary>
            The current direction this unit is attached to a wall. Uses DirectionEnum (Up, Down,
            Left, Right, Any) to track wall climbing orientation.
            </summary>
        </member>

        <member name="F:Unit.width">
            <summary>
            The width of the unit's collision bounds in game units. Defaults to 8 units. Used
            for physics collision detection and spatial calculations.
            </summary>
        </member>

        <member name="F:Unit.zOffset">
            <summary>
            The Z-axis offset for this unit's position. Used for depth sorting and visual
            layering. Modified when submerged in blood pools or for special effects.
            </summary>
        </member>

        <member name="P:Unit.CanDisembowel">
            <summary>
            Gets whether this unit can be disemboweled for gruesome death animations. Returns
            true if the canDisembowel field is set. Special handling for MookRiotShield units
            which also checks if their shield is not present.
            </summary>
        </member>

        <member name="P:Unit.CanHear">
            <summary>
            Gets or sets whether this unit can detect sounds and noise from other units. Only
            returns true if both the internal canHear flag is true AND the GameObject is active
            in the hierarchy. Used for AI awareness and detection systems.
            </summary>
        </member>

        <member name="P:Unit.CanHearFriendlies">
            <summary>
            Gets whether this unit can hear sounds from friendly units. Base implementation
            always returns false, but can be overridden in derived classes to allow friendly
            unit detection.
            </summary>
        </member>

        <member name="P:Unit.T">
            <summary>
            Gets the frame-independent time value used for animations and movement calculations.
            If the internal time field is 0, returns the current delta time clamped to a maximum
            of 0.03334f (30 FPS). Otherwise returns the stored time value.
            </summary>
        </member>

        <member name="P:Unit.actionState">
            <summary>
            Gets or sets the current action state of the unit, such as Dead or other states that
            define what the unit is currently doing.
            </summary>
        </member>

        <member name="P:Unit.frame">
            <summary>
            Gets or sets the current animation frame number for this unit. Used to track which
            frame of animation is currently being displayed.
            </summary>
        </member>

        <member name="P:Unit.invulnerable">
            <summary>
            Gets or sets whether the unit is invulnerable to damage. Returns true if the
            Invulnerable field is set, the GameObject is inactive, or if force invulnerability
            is enabled and the unit is a hero. Setting this property directly modifies the
            Invulnerable field.
            </summary>
        </member>

        <member name="F:Unit.Invulnerable">
            <summary>
            Private backing field for the invulnerable property. Controls whether the unit can
            take damage. Used in conjunction with other invulnerability conditions.
            </summary>
        </member>

        <member name="F:Unit._actionState">
            <summary>
            Public backing field for the actionState property. Stores the current action state
            (e.g., Dead, Idle) of the unit. Part of the main state machine system.
            </summary>
        </member>

        <member name="F:Unit._frame">
            <summary>
            Protected backing field for the frame property. Stores the current animation frame
            number for this unit.
            </summary>
        </member>

        <member name="F:Unit.bloodColor">
            <summary>
            The color of blood particles emitted when this unit takes damage. Enum values
            include Red (default), Green (alien), Oil (mechanical), Ash (fire), and Blue_Flash
            (special).
            </summary>
        </member>

        <member name="F:Unit.canDisembowel">
            <summary>
            Flag determining whether this unit can be disemboweled for gruesome death
            animations. Used by the CanDisembowel property which adds special handling for
            shielded units.
            </summary>
        </member>

        <member name="F:Unit.flash">
            <summary>
            Controls whether the unit should flash white when taking damage. Used for visual
            feedback to indicate the unit has been hit.
            </summary>
        </member>

        <member name="F:Unit.isHellEnemy">
            <summary>
            Flag marking this unit as a Hell-themed enemy. Affects enemy behavior, scoring
            systems, and potentially damage resistances or special abilities.
            </summary>
        </member>

        <member name="F:Unit.isZombie">
            <summary>
            Protected flag indicating whether this unit is an undead/zombie type. Affects AI
            behavior and potentially damage resistance or animation sets.
            </summary>
        </member>

        <member name="F:Unit.skinnedPrefab">
            <summary>
            Reference to an alternate "skinned" version of this unit prefab. Used to spawn a
            flayed variant when the unit dies from specific damage types or conditions.
            </summary>
        </member>

        <member name="F:Unit.useImpaledFrames">
            <summary>
            Determines whether the unit should use special impaled animation frames when impaled
            on spikes or other objects. Enables death-specific animations.
            </summary>
        </member>

        <member name="M:Unit.AnyInput">
            <summary>
            Checks whether the unit is receiving any input from a controller or AI. Base
            implementation always returns false. Override in derived classes to detect input.
            </summary>
            <returns>True if any input is detected, false otherwise.</returns>
        </member>

        <member name="M:Unit.IsPressingDown">
            <summary>
            Checks whether the unit is pressing the down input direction. Base implementation
            returns false. Override in controllable units to check actual input state.
            </summary>
            <returns>True if pressing down, false otherwise.</returns>
        </member>

        <member name="M:Unit.IsPressingLeftOrRight">
            <summary>
            Checks whether the unit is pressing left or right directional input. Base
            implementation returns false. Override in controllable units to check actual
            horizontal input state.
            </summary>
            <returns>True if pressing left or right, false otherwise.</returns>
        </member>

        <member name="M:Unit.AttachToZipline(ZipLine)">
            <summary>
            Attaches the unit to a zipline for traversal. Sets the attachedToZipline field to
            the provided zipline reference.
            </summary>
            <param name="zipLine">The zipline to attach to.</param>
        </member>

        <member name="M:Unit.IsSubmergedInPool">
            <summary>
            Checks whether the unit is currently standing in a blood pool. Returns true if the
            block the unit is standing on has a blood pool above it.
            </summary>
            <returns>True if submerged in a blood pool, false otherwise.</returns>
        </member>

        <member name="M:Unit.RollOnto(System.Int32)">
            <summary>
            Handles the unit being rolled onto by another object. Base implementation is empty.
            Override in derived classes to implement crushing or rolling interactions.
            </summary>
            <param name="direction">The direction of the rolling object (-1 for left, 1 for right).</param>
        </member>

        <member name="M:Unit.SuspendFromRope">
            <summary>
            Suspends the unit from a rope by instantiating a PredabroRope object from the Map's
            prefab and setting it up with this unit.
            </summary>
        </member>

        <member name="F:Unit.barbedWireWithin">
            <summary>
            Protected reference to barbed wire (Spikes object) that the unit is currently in
            contact with. Used for environmental damage and movement restriction from barbed
            wire hazards.
            </summary>
        </member>

        <member name="F:Unit.blockCurrentlyStandingOn">
            <summary>
            Reference to the terrain Block that this unit is currently standing on. Used for
            ground detection and environmental hazard checks like blood pools.
            </summary>
        </member>

        <member name="F:Unit.submergedInPool">
            <summary>
            Protected flag tracking whether the unit is currently standing in a blood pool. Set
            based on the block the unit is standing on having a blood pool above it.
            </summary>
        </member>

        <member name="F:Unit.submergedOffset">
            <summary>
            The Z-axis offset applied when the unit is submerged in a blood pool. Defaults to 8
            units. Creates a visual depth effect by adjusting the unit's rendering layer.
            </summary>
        </member>

        <member name="M:Unit.Blind(System.Single)">
            <summary>
            Applies a blind status effect to the unit for the specified duration. Base
            implementation is empty. Override in derived classes to implement vision impairment
            effects.
            </summary>
            <param name="time">The duration of the blind effect in seconds.</param>
        </member>

        <member name="M:Unit.Blind">
            <summary>
            Applies a blind status effect to the unit with a default duration. Base
            implementation is empty. Override in derived classes to implement vision impairment
            effects.
            </summary>
        </member>

        <member name="M:Unit.CanFreeze">
            <summary>
            Checks whether this unit can be affected by freeze effects. Base implementation
            returns false, providing freeze immunity by default. Override to allow freezing.
            </summary>
            <returns>True if the unit can be frozen, false otherwise.</returns>
        </member>

        <member name="M:Unit.Dance(System.Single)">
            <summary>
            Forces the unit to dance for the specified duration as a crowd control effect. Base
            implementation is empty. Override in derived classes to implement dancing animations
            and behavior.
            </summary>
            <param name="time">The duration of the dance effect in seconds.</param>
        </member>

        <member name="M:Unit.Freeze(System.Single)">
            <summary>
            Applies a freeze status effect to the unit for the specified duration. Base
            implementation is empty. Override in derived classes to implement freezing mechanics
            and visuals.
            </summary>
            <param name="time">The duration of the freeze effect in seconds.</param>
        </member>

        <member name="M:Unit.IsBlind">
            <summary>
            Checks whether the unit is currently affected by a blind status effect. Base
            implementation always returns false. Override in derived classes to return actual
            blind state.
            </summary>
            <returns>True if the unit is blinded, false otherwise.</returns>
        </member>

        <member name="M:Unit.IsIncapacitated">
            <summary>
            Checks whether the unit is currently incapacitated and unable to act. Base
            implementation always returns false. Override in derived classes to implement
            incapacitation logic.
            </summary>
            <returns>True if incapacitated, false otherwise.</returns>
        </member>

        <member name="M:Unit.Panic(System.Boolean)">
            <summary>
            Causes the unit to panic, affecting its AI behavior. Base implementation is empty.
            Override in derived classes to implement panic behavior.
            </summary>
            <param name="forgetPlayer">Whether the unit should forget its current target player.</param>
        </member>

        <member name="M:Unit.Panic(System.Single,System.Boolean)">
            <summary>
            Causes the unit to panic for a specified duration. Base implementation is empty.
            Override in derived classes to implement timed panic behavior.
            </summary>
            <param name="time">The duration of the panic effect in seconds.</param>
            <param name="forgetPlayer">Whether the unit should forget its current target player.</param>
        </member>

        <member name="M:Unit.Panic(System.Int32,System.Single,System.Boolean)">
            <summary>
            Causes the unit to panic in a specific direction for a specified duration. Base
            implementation is empty. Override in derived classes to implement directional panic
            behavior.
            </summary>
            <param name="direction">The direction to panic in (-1 for left, 1 for right).</param>
            <param name="time">The duration of the panic effect in seconds.</param>
            <param name="forgetPlayer">Whether the unit should forget its current target player.</param>
        </member>

        <member name="M:Unit.RecoverFromInsemination">
            <summary>
            Allows the unit to recover from alien insemination status. Base implementation is
            empty. Override in units that can be inseminated to implement recovery logic.
            </summary>
        </member>

        <member name="M:Unit.Stun(System.Single)">
            <summary>
            Applies a stun status effect to the unit for the specified duration, preventing
            actions. Base implementation is empty. Override in derived classes to implement stun
            behavior.
            </summary>
            <param name="time">The duration of the stun effect in seconds.</param>
        </member>

        <member name="M:Unit.Stun">
            <summary>
            Applies a stun status effect to the unit with a default duration. Base
            implementation is empty. Override in derived classes to implement stun behavior.
            </summary>
        </member>

        <member name="M:Unit.TearGas(System.Single)">
            <summary>
            Applies a tear gas status effect to the unit for the specified duration. Base
            implementation is empty. Override in derived classes to implement tear gas effects
            like impaired vision and movement.
            </summary>
            <param name="time">The duration of the tear gas effect in seconds.</param>
        </member>

        <member name="M:Unit.Terrify">
            <summary>
            Applies a terrify effect to the unit, likely more intense than panic. Base
            implementation is empty. Override in derived classes to implement terror behavior.
            </summary>
        </member>

        <member name="M:Unit.Activate">
            <summary>
            Activates the unit, enabling its functionality. Base implementation always returns
            true indicating success. Override to implement activation logic.
            </summary>
            <returns>True if activation was successful, false otherwise.</returns>
        </member>

        <member name="M:Unit.CanBeThrown">
            <summary>
            Determines whether this unit can be thrown by other units. Returns the inverse of
            IsHeavy() - units that are not heavy can be thrown.
            </summary>
            <returns>True if the unit can be thrown, false if too heavy.</returns>
        </member>

        <member name="M:Unit.CanHeadShot">
            <summary>
            Determines whether this unit can receive headshot damage. Base implementation
            returns true. Override to disable headshot vulnerability for specific units.
            </summary>
            <returns>True if the unit can be headshot, false otherwise.</returns>
        </member>

        <member name="M:Unit.CanPilotUnit(System.Int32)">
            <summary>
            Determines whether this unit can pilot another unit (such as vehicles or mechs).
            Base implementation returns false. Override in units capable of piloting to
            implement eligibility checks.
            </summary>
            <param name="newPlayerNum">The player number attempting to pilot.</param>
            <returns>True if this unit can pilot other units, false otherwise.</returns>
        </member>

        <member name="M:Unit.CheckDestroyed">
            <summary>
            Checks whether the unit should be destroyed or removed from the game. Base
            implementation is empty. Override in derived classes to implement destruction
            conditions.
            </summary>
        </member>

        <member name="M:Unit.Deactivate">
            <summary>
            Deactivates the unit, disabling its functionality. Base implementation always
            returns true indicating success. Override to implement deactivation logic.
            </summary>
            <returns>True if deactivation was successful, false otherwise.</returns>
        </member>

        <member name="M:Unit.DestroyCharacter">
            <summary>
            Destroys this unit's game object, removing it from the game. Can be overridden to
            implement custom destruction behavior or cleanup.
            </summary>
        </member>

        <member name="M:Unit.DischargePilotingUnit(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Ejects the pilot from this unit at the specified position and velocity. Base
            implementation is empty. Override in pilotable units to implement pilot ejection
            mechanics.
            </summary>
            <param name="x">The X position where the pilot should be ejected.</param>
            <param name="y">The Y position where the pilot should be ejected.</param>
            <param name="xI">The horizontal velocity to apply to the ejected pilot.</param>
            <param name="yI">The vertical velocity to apply to the ejected pilot.</param>
            <param name="stunUnit">Whether to stun the pilot upon ejection.</param>
        </member>

        <member name="M:Unit.GetFuel">
            <summary>
            Returns the current fuel level of the unit. Base implementation returns 0. Override
            in fuel-consuming units like vehicles or jetpack units to return actual fuel amount.
            </summary>
            <returns>The current fuel level as a float value.</returns>
        </member>

        <member name="M:Unit.GetFuelWarning">
            <summary>
            Checks whether the unit's fuel is low enough to display a warning. Base
            implementation returns false. Override in fuel-consuming units to implement low fuel
            detection.
            </summary>
            <returns>True if fuel is critically low, false otherwise.</returns>
        </member>

        <member name="M:Unit.GetMookType">
            <summary>
            Returns the type of mook (enemy) this unit represents. Base implementation returns
            MookType.None. Override in enemy units to return specific mook type.
            </summary>
            <returns>The MookType enum value for this unit.</returns>
        </member>

        <member name="M:Unit.GetPilottedUnit">
            <summary>
            Returns the unit currently being piloted by this unit. Base implementation returns
            null. Override in pilot-capable units to return the actual piloted unit reference.
            </summary>
            <returns>The piloted unit, or null if not piloting anything.</returns>
        </member>

        <member name="M:Unit.IsDecapitated">
            <summary>
            Checks whether the unit has been decapitated (head removed). Base implementation
            returns false. Override in units that can be decapitated to track headless state.
            </summary>
            <returns>True if decapitated, false otherwise.</returns>
        </member>

        <member name="M:Unit.IsEvil">
            <summary>
            Determines whether this unit is an evil/enemy character. Base implementation returns
            false. Override in enemy units to return true.
            </summary>
            <returns>True if the unit is evil, false otherwise.</returns>
        </member>

        <member name="M:Unit.IsHeavy">
            <summary>
            Determines whether this unit is too heavy for certain interactions like throwing.
            Base implementation returns false. Override in heavy units to return true.
            </summary>
            <returns>True if the unit is heavy, false otherwise.</returns>
        </member>

        <member name="M:Unit.OpenParachute">
            <summary>
            Opens the unit's parachute for controlled descent. Base implementation is empty.
            Override in derived classes to implement parachute deployment.
            </summary>
        </member>

        <member name="M:Unit.PilotUnit(Unit)">
            <summary>
            Initiates the piloting of this unit by another unit. Only processes if the piloting
            unit belongs to the local player and sends RPC to synchronize the piloting state
            across all players.
            </summary>
            <param name="pilotUnit">The unit that will pilot this unit.</param>
        </member>

        <member name="M:Unit.PilotUnitRPC(Unit)">
            <summary>
            Remote procedure call handler for synchronizing pilot unit changes across the
            network. Base implementation is empty. Override in pilotable units to handle the
            pilot assignment.
            </summary>
            <param name="newPilotUnit">The new pilot unit to assign.</param>
        </member>

        <member name="M:Unit.Revive(System.Int32,System.Boolean,TestVanDammeAnim)">
            <summary>
            Attempts to revive this unit from death or incapacitation. Base implementation
            returns false. Override in revivable units to implement revival mechanics.
            </summary>
            <param name="playerNum">The player number who will control the revived unit.</param>
            <param name="isUnderPlayerControl">Whether the revived unit will be under player
                control.</param>
            <param name="reviveSource">The unit performing the revival.</param>
            <returns>True if revival was successful, false otherwise.</returns>
        </member>

        <member name="M:Unit.ReviveRPC(System.Int32,System.Boolean,TestVanDammeAnim)">
            <summary>
            Remote procedure call for synchronizing unit revival across the network. Calls the
            local Revive method with the provided parameters.
            </summary>
            <param name="playerNum">The player number who will control the revived unit.</param>
            <param name="isUnderPlayerControl">Whether the revived unit will be under player
                control.</param>
            <param name="reviveSource">The unit performing the revival.</param>
        </member>

        <member name="M:Unit.SetCanParachute">
            <summary>
            Enables the unit's ability to use a parachute. Calls SetCanParachute(true)
            internally.
            </summary>
        </member>

        <member name="M:Unit.SetCanParachute(System.Boolean)">
            <summary>
            Sets whether the unit can use a parachute. Base implementation is empty. Override in
            derived classes to implement parachute capability toggling.
            </summary>
            <param name="canParachute">True to enable parachute capability, false to disable.</param>
        </member>

        <member name="M:Unit.SetFriendlyExplosion">
            <summary>
            Marks explosions created by this unit as friendly, preventing them from damaging
            allies. Base implementation is empty. Override to implement friendly fire
            prevention.
            </summary>
        </member>

        <member name="M:Unit.SetImmuneToOutOfBounds">
            <summary>
            Makes the unit immune to out-of-bounds death. Base implementation is empty. Override
            to implement immunity to boundary-based destruction.
            </summary>
        </member>

        <member name="M:Unit.StartPilotingUnit(Unit)">
            <summary>
            Called when this unit begins piloting another unit. Base implementation is empty.
            Override in units that can pilot to implement pilot initialization logic.
            </summary>
            <param name="pilottedUnit">The unit that this unit is starting to pilot.</param>
        </member>

        <member name="M:Unit.TryConnectHighFive">
            <summary>
            Attempts to connect a high-five with another unit. Base implementation always
            returns false. Override in player units to enable high-five connections.
            </summary>
            <returns>True if high-five was successful, false otherwise.</returns>
        </member>

        <member name="M:Unit.WhereDidIDie">
            <summary>
            Returns the position where this unit died. Base implementation returns the current
            transform position. Override to return a stored death location if needed.
            </summary>
            <returns>The 3D position where the unit died.</returns>
        </member>

        <member name="P:Unit.IsNotReplicantHero">
            <summary>
            Gets whether this unit is not a replicated hero from another player. Returns true if
            the unit belongs to the local player or if it's not a hero unit. Used for network
            replication logic.
            </summary>
        </member>

        <member name="F:Unit.beingControlledByTriggerAction">
            <summary>
            Flag indicating this unit is under scripted control from a trigger action. When
            true, normal AI behavior is suspended.
            </summary>
        </member>

        <member name="F:Unit.controllingTriggerAction">
            <summary>
            Reference to the CharacterAction that is currently controlling this unit through
            scripted sequences. Null when under normal AI control.
            </summary>
        </member>

        <member name="M:Unit.Alert(System.Single,System.Single)">
            <summary>
            Alerts the unit to activity at specific coordinates, raising its awareness level.
            Base implementation is empty. Override in derived classes to implement alert
            behavior.
            </summary>
            <param name="alertX">The X coordinate of the alert source.</param>
            <param name="alertY">The Y coordinate of the alert source.</param>
        </member>

        <member name="M:Unit.Attract(System.Single,System.Single)">
            <summary>
            Attracts the unit's attention to specific coordinates, affecting AI targeting and
            movement. Base implementation is empty. Override in derived classes to implement
            attraction behavior.
            </summary>
            <param name="xTarget">The X coordinate to be attracted to.</param>
            <param name="yTarget">The Y coordinate to be attracted to.</param>
        </member>

        <member name="M:Unit.FetchObject(UnityEngine.Transform)">
            <summary>
            Allows the unit to fetch or pick up an object. Base implementation is empty.
            Override in derived classes to implement object fetching behavior.
            </summary>
            <param name="fetchObject">The transform of the object to fetch.</param>
        </member>

        <member name="M:Unit.ForgetPlayer(System.Int32)">
            <summary>
            Removes a dead player from the unit's memory and targeting system. Base
            implementation is empty. Override in derived classes to implement AI memory
            management.
            </summary>
            <param name="deadPlayerNum">The player number to forget.</param>
        </member>

        <member name="M:Unit.FullyAlert(System.Single,System.Single,System.Int32)">
            <summary>
            Fully alerts the unit to a specific player's presence at given coordinates,
            maximizing awareness. Base implementation is empty. Override in derived classes to
            implement full alert behavior.
            </summary>
            <param name="x">The X coordinate of the player.</param>
            <param name="y">The Y coordinate of the player.</param>
            <param name="playerNum">The player number that triggered the full alert.</param>
        </member>

        <member name="M:Unit.HearSound(System.Single,System.Single)">
            <summary>
            Allows the unit to respond to sounds at specific coordinates. Base implementation is
            empty. Override in derived classes to implement sound-based AI awareness.
            </summary>
            <param name="alertX">The X coordinate of the sound source.</param>
            <param name="alertY">The Y coordinate of the sound source.</param>
        </member>

        <member name="M:Unit.RunWarning(System.Single,System.Single)">
            <summary>
            Provides warning to the unit about an incoming explosion. Base implementation is
            empty. Override in derived classes to implement evasion or protective behavior.
            </summary>
            <param name="t">The current time or progress value.</param>
            <param name="explosionTime">The time until the explosion occurs.</param>
        </member>

        <member name="M:Unit.SetTargetPlayerNum(System.Int32,UnityEngine.Vector3)">
            <summary>
            Sets the target player number and position for AI targeting. Base implementation is
            empty. Override in AI-controlled units to implement targeting behavior.
            </summary>
            <param name="pN">The player number to target.</param>
            <param name="TargetPosition">The 3D position of the target.</param>
        </member>

        <member name="F:Unit.canHear">
            <summary>
            Master toggle for the unit's hearing ability. Defaults to true. When false, the unit
            ignores all sound-based alerts regardless of range.
            </summary>
        </member>

        <member name="F:Unit.hearingRangeX">
            <summary>
            The horizontal range in game units within which this unit can hear sounds and become
            alerted. Defaults to 300 units. Used by the AI detection system.
            </summary>
        </member>

        <member name="F:Unit.hearingRangeY">
            <summary>
            The vertical range in game units within which this unit can hear sounds and become
            alerted. Defaults to 200 units. Used by the AI detection system.
            </summary>
        </member>

        <member name="F:Unit.showDebugInfoForThisEnemy">
            <summary>
            Controls whether debug information is displayed for this specific unit. Defaults to
            true. Useful for debugging individual unit behavior.
            </summary>
        </member>

        <member name="M:Unit.CanInseminate(System.Single,System.Single)">
            <summary>
            Checks whether this unit can be inseminated by an alien facehugger at the given
            velocity. Base implementation returns false. Override in units that can be infected
            to implement eligibility checks.
            </summary>
            <param name="xI">The horizontal velocity of the insemination attempt.</param>
            <param name="yI">The vertical velocity of the insemination attempt.</param>
            <returns>True if the unit can be inseminated, false otherwise.</returns>
        </member>

        <member name="M:Unit.Inseminate(AlienFaceHugger,System.Single,System.Single)">
            <summary>
            Attempts to inseminate this unit with an alien facehugger. Base implementation
            returns false. Override in units that can be infected to implement insemination
            mechanics.
            </summary>
            <param name="unit">The AlienFaceHugger attempting to inseminate.</param>
            <param name="xForce">The horizontal force applied during insemination.</param>
            <param name="yForce">The vertical force applied during insemination.</param>
            <returns>True if insemination was successful, false otherwise.</returns>
        </member>

        <member name="M:Unit.HasBeenCoveredInAcid">
            <summary>
            Checks whether the unit has been covered in acid and has the acid status effect.
            Base implementation returns false. Override in units that can be affected by acid.
            </summary>
            <returns>True if covered in acid, false otherwise.</returns>
        </member>

        <member name="M:Unit.RemoveAcid">
            <summary>
            Removes the acid status effect from the unit. Base implementation is empty. Override
            in units that can be affected by acid to implement acid removal logic.
            </summary>
        </member>
    </members>
</doc>